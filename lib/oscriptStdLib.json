{
    "structureMenu": {
      "global": {
        "Работа с переменными окружения": {
          "ПеременныеСреды": "",
          "УстановитьПеременнуюСреды": "",
          "ПолучитьПеременнуюСреды": ""
        },
        "Файловые операции": {
          "КопироватьФайл": "",
          "ПереместитьФайл": "",
          "КаталогВременныхФайлов": "",
          "ПолучитьИмяВременногоФайла": "",
          "НайтиФайлы": "",
          "УдалитьФайлы": "",
          "СоздатьКаталог": "",
          "ТекущийКаталог": "",
          "УстановитьТекущийКаталог": "",
          "ПолучитьРазделительПути": "",
          "ПолучитьМаскуВсеФайлы": "",
          "ОбъединитьПути": ""
        },
        "Побитовые операции с целыми числами": {
          "ПобитовоеИ": "",
          "ПобитовоеИли": "",
          "ПобитовоеНе": "",
          "ПобитовоеИНе": "",
          "ПобитовоеИсключительноеИли": "",
          "ПроверитьБит": "",
          "УстановитьБит": "",
          "ПроверитьПоБитовойМаске": "",
          "ПобитовыйСдвигВлево": "",
          "ПобитовыйСдвигВправо": ""
        },
        "Прочие функции": {
          "Base64Строка": "",
          "Base64Значение": "",
          "КодироватьСтроку": "",
          "РаскодироватьСтроку": ""
        },
        "Работа с настройками системы": {
          "ОбновитьНастройкиСистемы": "",
          "ПолучитьЗначениеСистемнойНастройки": ""
        },
        "Процедуры и функции взаимодействия с системой": {
          "ФайловыеПотоки": "",
          "АргументыКоманднойСтроки": "",
          "Символы": "",
          "Сообщить": "",
          "ПодключитьСценарий": "",
          "ЗагрузитьСценарийИзСтроки": "",
          "ЗагрузитьСценарий": "",
          "ПодключитьВнешнююКомпоненту": "",
          "СтартовыйСценарий": "",
          "Приостановить": "",
          "ЗавершитьРаботу": "",
          "ВвестиСтроку": "",
          "ОсвободитьОбъект": "",
          "ВыполнитьСборкуМусора": "",
          "ЗапуститьПриложение": "",
          "СоздатьПроцесс": "",
          "НайтиПроцессПоИдентификатору": "",
          "НайтиПроцессыПоИмени": "",
          "КаталогПрограммы": "",
          "КраткоеПредставлениеОшибки": "",
          "ПодробноеПредставлениеОшибки": "",
          "ТекущаяДата": "",
          "ТекущаяУниверсальнаяДатаВМиллисекундах": "",
          "ЗначениеЗаполнено": "",
          "ЗаполнитьЗначенияСвойств": "",
          "ПолучитьCOMОбъект": ""
        },
        "Операции со строками": {
          "НСтр": "",
          "СтрНачинаетсяС": "",
          "СтрЗаканчиваетсяНа": "",
          "СтрРазделить": "",
          "СтрСоединить": "",
          "СтрСравнить": "",
          "СтрНайти": ""
        },
        "Функции работы с XML": {
          "XMLСтрока": "",
          "XMLЗначение": ""
        },
        "Базовые методы встроенного языка": {
          "СтрДлина": "",
          "СокрЛ": "",
          "СокрП": "",
          "СокрЛП": "",
          "Лев": "",
          "Прав": "",
          "Сред": "",
          "Найти": "",
          "ВРег": "",
          "НРег": "",
          "ТРег": "",
          "Символ": "",
          "КодСимвола": "",
          "ПустаяСтрока": "",
          "СтрЗаменить": "",
          "СтрПолучитьСтроку": "",
          "СтрЧислоСтрок": "",
          "СтрЧислоВхождений": "",
          "Год": "",
          "Месяц": "",
          "День": "",
          "Час": "",
          "Минута": "",
          "Секунда": "",
          "НачалоГода": "",
          "НачалоМесяца": "",
          "НачалоДня": "",
          "НачалоЧаса": "",
          "НачалоМинуты": "",
          "НачалоКвартала": "",
          "КонецГода": "",
          "КонецМесяца": "",
          "КонецДня": "",
          "КонецЧаса": "",
          "КонецМинуты": "",
          "КонецКвартала": "",
          "НеделяГода": "",
          "ДеньГода": "",
          "ДеньНедели": "",
          "ДобавитьМесяц": "",
          "Цел": "",
          "Окр": "",
          "Log": "",
          "Log10": "",
          "Sin": "",
          "Cos": "",
          "Tan": "",
          "ASin": "",
          "ACos": "",
          "ATan": "",
          "Exp": "",
          "Pow": "",
          "Sqrt": "",
          "Мин": "",
          "Макс": "",
          "Формат": "",
          "ИнформацияОбОшибке": "",
          "ОписаниеОшибки": "",
          "ТекущийСценарий": "",
          "СтрШаблон": "",
          "Булево": "",
          "Число": "",
          "Строка": "",
          "Дата": "",
          "Тип": "",
          "ТипЗнч": ""
        }
      },
      "classes": {
        "Универсальные коллекции": {
          "Массив": "",
          "Соответствие": "",
          "Структура": "",
          "СписокЗначений": {
            "ЭлементСпискаЗначений": ""
          },
          "ТаблицаЗначений": {
            "КолонкаТаблицыЗначений": "",
            "КоллекцияКолонокТаблицыЗначений": "",
            "СтрокаТаблицыЗначений": "",
            "ИндексыКоллекции": "",
            "ИндексКоллекции": ""
          },
          "ДеревоЗначений": {
            "СтрокаДереваЗначений": "",
            "КолонкаДереваЗначений": "",
            "КоллекцияКолонокДереваЗначений": "",
            "КоллекцияСтрокДереваЗначений": ""
          },
          "КлючИЗначение": "",
          "ФиксированныйМассив": "",
          "ФиксированноеСоответствие": "",
          "ФиксированнаяСтруктура": ""
        },
        "Работа с сетью": {
          "HTTPСоединение": "",
          "HTTPЗапрос": "",
          "HTTPОтвет": "",
          "ИнтернетПрокси": "",
          "TCPСоединение": "",
          "TCPСервер": "",
          "ОписаниеФайлаPostЗапроса": "",
          "ДанныеPOSTЗапроса": ""
        },
        "Работа с двоичными данными": {
          "БуферДвоичныхДанных": "",
          "ФайловыйПоток": "",
          "ПотокВПамяти": "",
          "Поток": "",
          "МенеджерФайловыхПотоков": ""
        },
        "Работа с ZIP": {
          "ЗаписьZipФайла": "",
          "ЧтениеZipФайла": "",
          "ЭлементыZipФайла": "",
          "ЭлементZipФайла": ""
        },
        "Регулярные выражения": {
          "РегулярноеВыражение": "",
          "ГруппаРегулярногоВыражения": "",
          "КоллекцияГруппРегулярногоВыражения": "",
          "КоллекцияСовпаденийРегулярногоВыражения": "",
          "СовпадениеРегулярногоВыражения": ""
        },
        "Прочее": ""
      }
    },
    "globalfunctions": {
      "ПеременныеСреды": {
        "name": "ПеременныеСреды",
        "name_en": "EnvironmentVariables",
        "description": "Возвращает соответствие переменных среды. Ключом является имя переменной, а значением - значение переменной",
        "example": "Для Каждого Переменная Из ПеременныеСреды() Цикл<br>   Сообщить(Переменная.Ключ + \" = \" + Переменная.Значение);<br>КонецЦикла;",
        "returns": "Соответствие",
        "signature": {
          "default": {
            "СтрокаПараметров": "(): ИнформацияОСценарии",
            "Параметры": {}
          }
        }
      },
      "УстановитьПеременнуюСреды": {
        "name": "УстановитьПеременнуюСреды",
        "name_en": "SetEnvironmentVariable",
        "description": "Позволяет установить переменную среды.  Переменная устанавливается в области видимости процесса и очищается после его завершения.",
        "signature": {
          "default": {
            "СтрокаПараметров": "(varName: Строка, value: Строка)",
            "Параметры": {
              "varName": "Имя переменной",
              "value": "Значение переменной"
            }
          }
        }
      },
      "ПолучитьПеременнуюСреды": {
        "name": "ПолучитьПеременнуюСреды",
        "name_en": "GetEnvironmentVariable",
        "description": "Получить значение переменной среды.",
        "returns": "Строка. Значение переменной",
        "signature": {
          "default": {
            "СтрокаПараметров": "(varName: Строка): Произвольный",
            "Параметры": {
              "varName": "Имя переменной"
            }
          }
        }
      },
      "КопироватьФайл": {
        "name": "КопироватьФайл",
        "name_en": "CopyFile",
        "description": "Копирует файл из одного расположения в другое. Перезаписывает приемник, если он существует.",
        "signature": {
          "default": {
            "СтрокаПараметров": "(source: Строка, destination: Строка)",
            "Параметры": {
              "source": "Имя файла-источника",
              "destination": "Имя файла приемника"
            }
          }
        }
      },
      "ПереместитьФайл": {
        "name": "ПереместитьФайл",
        "name_en": "MoveFile",
        "description": "Перемещает файл из одного расположения в другое.",
        "signature": {
          "default": {
            "СтрокаПараметров": "(source: Строка, destination: Строка)",
            "Параметры": {
              "source": "Имя файла-источника",
              "destination": "Имя файла приемника"
            }
          }
        }
      },
      "КаталогВременныхФайлов": {
        "name": "КаталогВременныхФайлов",
        "name_en": "TempFilesDir",
        "description": "Возвращает каталог временных файлов ОС",
        "returns": "Строка. Путь к каталогу временных файлов",
        "signature": {
          "default": {
            "СтрокаПараметров": "(): Строка",
            "Параметры": {}
          }
        }
      },
      "ПолучитьИмяВременногоФайла": {
        "name": "ПолучитьИмяВременногоФайла",
        "name_en": "GetTempFileName",
        "description": "Получает имя файла во временом каталоге.",
        "returns": "Строка. Полный путь ко временному файлу.",
        "signature": {
          "default": {
            "СтрокаПараметров": "(ext?: Строка): Строка",
            "Параметры": {
              "ext": "Расширение будущего файла. Если не указано, то по умолчанию расширение равно \".tmp\""
            }
          }
        }
      },
      "НайтиФайлы": {
        "name": "НайтиФайлы",
        "name_en": "FindFiles",
        "description": "Выполняет поиск файлов по маске",
        "returns": "Массив объектов Файл, которые были найдены.",
        "signature": {
          "default": {
            "СтрокаПараметров": "(dir: Строка, mask?: Строка, recursive?: Булево): ИнформацияОСценарии",
            "Параметры": {
              "dir": "Каталог, в котором выполняется поиск",
              "mask": "Маска имени файла (включая символы * и ?)",
              "recursive": "Флаг рекурсивного поиска в поддиректориях"
            }
          }
        }
      },
      "УдалитьФайлы": {
        "name": "УдалитьФайлы",
        "name_en": "DeleteFiles",
        "description": "Удаление файлов",
        "signature": {
          "default": {
            "СтрокаПараметров": "(path: Строка, mask?: Строка)",
            "Параметры": {
              "path": "Каталог из которого удаляются файлы, или сам файл.",
              "mask": "Маска файлов. Необязательный параметр. Если указан, то первый параметр трактуется, как каталог."
            }
          }
        }
      },
      "СоздатьКаталог": {
        "name": "СоздатьКаталог",
        "name_en": "CreateDirectory",
        "description": "Создать каталог",
        "signature": {
          "default": {
            "СтрокаПараметров": "(path: Строка)",
            "Параметры": {
              "path": "Имя нового каталога"
            }
          }
        }
      },
      "ТекущийКаталог": {
        "name": "ТекущийКаталог",
        "name_en": "CurrentDirectory",
        "description": "Получить текущий каталог",
        "signature": {
          "default": {
            "СтрокаПараметров": "(): Строка",
            "Параметры": {}
          }
        }
      },
      "УстановитьТекущийКаталог": {
        "name": "УстановитьТекущийКаталог",
        "name_en": "SetCurrentDirectory",
        "description": "Установить каталог текущим",
        "signature": {
          "default": {
            "СтрокаПараметров": "(path: Строка)",
            "Параметры": {
              "path": "Имя нового текущего каталога"
            }
          }
        }
      },
      "ПолучитьРазделительПути": {
        "name": "ПолучитьРазделительПути",
        "name_en": "GetPathSeparator",
        "description": "Получает разделитель пути в соответствии с текущей операционной системой",
        "signature": {
          "default": {
            "СтрокаПараметров": "(): Строка",
            "Параметры": {}
          }
        }
      },
      "ПолучитьМаскуВсеФайлы": {
        "name": "ПолучитьМаскуВсеФайлы",
        "name_en": "GetAllFilesMask",
        "description": "Получает маску \"все файлы\" для текущей операционной системы. В Windows маска принимает значение \"*.*\", в nix - \"*\".",
        "signature": {
          "default": {
            "СтрокаПараметров": "(): Строка",
            "Параметры": {}
          }
        }
      },
      "ОбъединитьПути": {
        "name": "ОбъединитьПути",
        "name_en": "CombinePath",
        "description": "Объединяет компоненты файлового пути, с учетом разделителей, принятых в данной ОС. При этом корректно, без дублирования, обрабатываются уже существующие разделители пути.",
        "returns": "Объединенный путь.",
        "signature": {
          "default": {
            "СтрокаПараметров": "(path1: Строка, path2: Строка, path3?: Строка, path4?: Строка): Строка",
            "Параметры": {
              "path1": "Первая часть пути",
              "path2": "Вторая часть пути",
              "path3": "Третья часть пути (необязательно)",
              "path4": "Четвертая часть пути (необязательно)"
            }
          }
        }
      },
      "ПобитовоеИ": {
        "name": "ПобитовоеИ",
        "name_en": "BitwiseAnd",
        "description": "Выполняет побитовое И для заданных чисел.",
        "returns": "Число. Результат побитового И",
        "signature": {
          "default": {
            "СтрокаПараметров": "(number1: Число, number2: Число): Число",
            "Параметры": {
              "number1": "Число 1",
              "number2": "Число 2"
            }
          }
        }
      },
      "ПобитовоеИли": {
        "name": "ПобитовоеИли",
        "name_en": "BitwiseOr",
        "description": "Выполняет побитовое Или для заданных чисел.",
        "returns": "Число. Результат побитового Или",
        "signature": {
          "default": {
            "СтрокаПараметров": "(number1: Число, number2: Число): Число",
            "Параметры": {
              "number1": "Число 1",
              "number2": "Число 2"
            }
          }
        }
      },
      "ПобитовоеНе": {
        "name": "ПобитовоеНе",
        "name_en": "BitwiseNot",
        "description": "Инвертирует биты числе.",
        "returns": "Число",
        "signature": {
          "default": {
            "СтрокаПараметров": "(number1: Число): Число",
            "Параметры": {}
          }
        }
      },
      "ПобитовоеИНе": {
        "name": "ПобитовоеИНе",
        "name_en": "BitwiseAndNot",
        "description": "Выполняет преобразование, эквивалентное<code>ПобитовоеИ(Число1, ПобитовоеНе(Число2))</code>",
        "returns": "Число. Результат преобразования",
        "signature": {
          "default": {
            "СтрокаПараметров": "(number1: Число, number2: Число): Число",
            "Параметры": {
              "number1": "Число 1",
              "number2": "Число 2"
            }
          }
        }
      },
      "ПобитовоеИсключительноеИли": {
        "name": "ПобитовоеИсключительноеИли",
        "name_en": "BitwiseXor",
        "description": "Выполняет побитовое Исключительное Или для заданных чисел.",
        "returns": "Число. Результат побитового Исключительного Или",
        "signature": {
          "default": {
            "СтрокаПараметров": "(number1: Число, number2: Число): Число",
            "Параметры": {
              "number1": "Число 1",
              "number2": "Число 2"
            }
          }
        }
      },
      "ПроверитьБит": {
        "name": "ПроверитьБит",
        "name_en": "CheckBit",
        "description": "Получает значение заданного бита.",
        "returns": "Булево. Истина - бит установлен в 1, Ложь - бит установлен в 0",
        "signature": {
          "default": {
            "СтрокаПараметров": "(value: Число, bitNumber: Число): Булево",
            "Параметры": {
              "value": "Число",
              "bitNumber": "Номер бита"
            }
          }
        }
      },
      "УстановитьБит": {
        "name": "УстановитьБит",
        "name_en": "SetBit",
        "description": "Устанавливает нужный бит числа в указанное значение",
        "returns": "Число. Число с установленным в нужное значение битом",
        "signature": {
          "default": {
            "СтрокаПараметров": "(value: Число, bitNumber: Число, bitValue: Число): Число",
            "Параметры": {
              "value": "Число",
              "bitNumber": "Номер бита",
              "bitValue": "Значение бита"
            }
          }
        }
      },
      "ПроверитьПоБитовойМаске": {
        "name": "ПроверитьПоБитовойМаске",
        "name_en": "CheckByBitMask",
        "description": "Проверяет соответствие числа битовой маске.",
        "returns": "Булево. Истина, когда в числе установлены в 1 все биты маски. Ложь - в остальных случаях",
        "signature": {
          "default": {
            "СтрокаПараметров": "(value: Число, mask: Число): Булево",
            "Параметры": {
              "value": "Число",
              "mask": "Маска"
            }
          }
        }
      },
      "ПобитовыйСдвигВлево": {
        "name": "ПобитовыйСдвигВлево",
        "name_en": "BitwiseShiftLeft",
        "description": "Выполняет побитовый сдвиг числа влево на заданное смещение",
        "signature": {
          "default": {
            "СтрокаПараметров": "(value: Число, offset: Число): Число",
            "Параметры": {
              "value": "Число",
              "offset": "Смещение"
            }
          }
        }
      },
      "ПобитовыйСдвигВправо": {
        "name": "ПобитовыйСдвигВправо",
        "name_en": "BitwiseShiftRight",
        "description": "Выполняет побитовый сдвиг числа вправо на заданное смещение",
        "signature": {
          "default": {
            "СтрокаПараметров": "(value: Число, offset: Число): Число",
            "Параметры": {
              "value": "Число",
              "offset": "Смещение"
            }
          }
        }
      },
      "Base64Строка": {
        "name": "Base64Строка",
        "name_en": "Base64String",
        "signature": {
          "default": {
            "СтрокаПараметров": "(data: ДвоичныеДанные): Строка",
            "Параметры": {}
          }
        }
      },
      "Base64Значение": {
        "name": "Base64Значение",
        "name_en": "Base64Value",
        "signature": {
          "default": {
            "СтрокаПараметров": "(data: Строка): ДвоичныеДанные",
            "Параметры": {}
          }
        }
      },
      "КодироватьСтроку": {
        "name": "КодироватьСтроку",
        "name_en": "EncodeString",
        "description": "Кодирует строку для передачи в URL (urlencode)",
        "signature": {
          "default": {
            "СтрокаПараметров": "(sourceString: Строка, codeType: СпособКодированияСтроки, encoding?: Произвольный): Строка",
            "Параметры": {}
          }
        }
      },
      "РаскодироватьСтроку": {
        "name": "РаскодироватьСтроку",
        "name_en": "DecodeString",
        "description": "Раскодирует строку из URL формата.",
        "signature": {
          "default": {
            "СтрокаПараметров": "(encodedString: Строка, codeType: СпособКодированияСтроки, encoding?: Произвольный): Строка",
            "Параметры": {}
          }
        }
      },
      "ОбновитьНастройкиСистемы": {
        "name": "ОбновитьНастройкиСистемы",
        "name_en": "RefreshSystemConfig",
        "description": "Метод обновляет текущие настройки значениями из файла oscript.cfg",
        "signature": {
          "default": {
            "СтрокаПараметров": "()",
            "Параметры": {}
          }
        }
      },
      "ПолучитьЗначениеСистемнойНастройки": {
        "name": "ПолучитьЗначениеСистемнойНастройки",
        "name_en": "GetSystemOptionValue",
        "description": "Метод возвращает значение из файла oscript.cfg по имени настойки",
        "returns": "Строка. Значение системной настройки.",
        "signature": {
          "default": {
            "СтрокаПараметров": "(optionKey: Строка): Произвольный",
            "Параметры": {
              "optionKey": "Имя настройки из файла oscript.cfg"
            }
          }
        }
      },
      "Сообщить": {
        "name": "Сообщить",
        "name_en": "Message",
        "description": "Выдает сообщение в консоль.",
        "signature": {
          "default": {
            "СтрокаПараметров": "(message: Строка, status?: СтатусСообщения)",
            "Параметры": {
              "message": "Выдаваемое сообщение.",
              "status": "Статус сообщения. В зависимости от статуса изменяется цвет вывода сообщения."
            }
          }
        }
      },
      "ПодключитьСценарий": {
        "name": "ПодключитьСценарий",
        "name_en": "AttachScript",
        "description": "Подключает сторонний файл сценария к текущей системе типов. Подключенный сценарий выступает, как самостоятельный класс, создаваемый оператором Новый",
        "example": "ПодключитьСценарий(\"C:\\file.os\", \"МойОбъект\");<br>А = Новый МойОбъект();",
        "signature": {
          "default": {
            "СтрокаПараметров": "(path: Строка, typeName: Строка)",
            "Параметры": {
              "path": "Путь к подключаемому сценарию",
              "typeName": "Имя типа, которое будет иметь новый класс. Экземпляры класса создаются оператором Новый."
            }
          }
        }
      },
      "ЗагрузитьСценарийИзСтроки": {
        "name": "ЗагрузитьСценарийИзСтроки",
        "name_en": "LoadScriptFromString",
        "description": "Создает экземпляр объекта на основании стороннего файла сценария. Загруженный сценарий возвращается, как самостоятельный объект.  Экспортные свойства и методы скрипта доступны для вызова.",
        "example": "Контекст = Новый Структура(\"ЧислоПи\", 3.1415); // 4 знака хватит всем<br>ЗагрузитьСценарийИзСтроки(\"Сообщить(ЧислоПи);\", Контекст);",
        "signature": {
          "default": {
            "СтрокаПараметров": "(code: Строка, externalContext?: Структура): ИнформацияОСценарии",
            "Параметры": {
              "code": "Текст сценария",
              "externalContext": "Структура. Глобальные свойства, которые будут инжектированы в область видимости загружаемого скрипта. (Необязательный)"
            }
          }
        }
      },
      "ЗагрузитьСценарий": {
        "name": "ЗагрузитьСценарий",
        "name_en": "LoadScript",
        "description": "Создает экземпляр объекта на основании стороннего файла сценария. Загруженный сценарий возвращается, как самостоятельный объект.  Экспортные свойства и методы скрипта доступны для вызова.",
        "example": "Контекст = Новый Структура(\"ЧислоПи\", 3.1415); // 4 знака хватит<br>// В коде скрипта somescript.os будет доступна глобальная переменная \"ЧислоПи\"<br>Объект = ЗагрузитьСценарий(\"somescript.os\", Контекст);",
        "signature": {
          "default": {
            "СтрокаПараметров": "(path: Строка, externalContext?: Структура): ИнформацияОСценарии",
            "Параметры": {
              "path": "Путь к подключаемому сценарию",
              "externalContext": "Структура. Глобальные свойства, которые будут инжектированы в область видимости загружаемого скрипта. (Необязательный)"
            }
          }
        }
      },
      "ПодключитьВнешнююКомпоненту": {
        "name": "ПодключитьВнешнююКомпоненту",
        "name_en": "AttachAddIn",
        "description": "Подключает внешнюю сборку среды .NET (*.dll) и регистрирует классы 1Script, объявленные в этой сборке. Публичные классы, отмеченные в dll атрибутом ContextClass, будут импортированы аналогично встроенным классам 1Script. Загружаемая сборка должна ссылаться на сборку ScriptEngine.dll",
        "example": "ПодключитьВнешнююКомпоненту(\"C:\\MyAssembly.dll\");<br>КлассИзКомпоненты = Новый КлассИзКомпоненты(); // тип объявлен внутри компоненты",
        "signature": {
          "default": {
            "СтрокаПараметров": "(dllPath: Строка)",
            "Параметры": {
              "dllPath": "Путь к внешней компоненте"
            }
          }
        }
      },
      "СтартовыйСценарий": {
        "name": "СтартовыйСценарий",
        "name_en": "EntryScript",
        "description": "Возвращает информацию о сценарии, который был точкой входа в программу. Можно выделить два вида сценариев: те, которые были подключены, как классы и те, которые запущены непосредственно. Метод СтартовыйСценарий возвращает информацию о сценарии, запущенном непосредственно. Для получения информации о текущем выполняемом сценарии см. метод ТекущийСценарий()",
        "returns": "Объект ИнформацияОСценарии",
        "signature": {
          "default": {
            "СтрокаПараметров": "(): ИнформацияОСценарии",
            "Параметры": {}
          }
        }
      },
      "Приостановить": {
        "name": "Приостановить",
        "name_en": "Sleep",
        "description": "Приостанавливает выполнение скрипта.",
        "signature": {
          "default": {
            "СтрокаПараметров": "(delay: Число)",
            "Параметры": {
              "delay": "Время приостановки в миллисекундах"
            }
          }
        }
      },
      "ЗавершитьРаботу": {
        "name": "ЗавершитьРаботу",
        "name_en": "Exit",
        "description": "Прерывает выполнение текущего скрипта.",
        "signature": {
          "default": {
            "СтрокаПараметров": "(exitCode: Число)",
            "Параметры": {
              "exitCode": "Код возврата (ошибки), возвращаемый операционной системе."
            }
          }
        }
      },
      "ВвестиСтроку": {
        "name": "ВвестиСтроку",
        "name_en": "InputString",
        "description": "Ввод строки пользователем. Позволяет запросить у пользователя информацию.",
        "returns": "Булево. Истина, если пользователь ввел данные, Ложь, если отказался.",
        "signature": {
          "default": {
            "СтрокаПараметров": "(resut: Произвольный, len?: Число): Булево",
            "Параметры": {
              "resut": "Выходной параметр. Введенные данные в виде строки.",
              "len": "Максимальная длина вводимой строки.  Возможно указание неограниченной длины (длина=ноль), но данное поведение может не поддерживаться хост-приложением."
            }
          }
        }
      },
      "ОсвободитьОбъект": {
        "name": "ОсвободитьОбъект",
        "name_en": "FreeObject",
        "description": "Явное освобождение ресурса через интерфейс IDisposable среды CLR.  OneScript не выполняет подсчет ссылок на объекты, а полагается на сборщик мусора CLR. Это значит, что объекты автоматически не освобождаются при выходе из области видимости.   Метод ОсвободитьОбъект можно использовать для детерминированного освобождения ресурсов. Если объект поддерживает интерфейс IDisposable, то данный метод вызовет Dispose у данного объекта.  Как правило, интерфейс IDisposable реализуется различными ресурсами (файлами, соединениями с ИБ и т.п.)",
        "signature": {
          "default": {
            "СтрокаПараметров": "(obj: ИнформацияОСценарии)",
            "Параметры": {
              "obj": "Объект, ресурсы которого требуется освободить."
            }
          }
        }
      },
      "ВыполнитьСборкуМусора": {
        "name": "ВыполнитьСборкуМусора",
        "name_en": "RunGarbageCollection",
        "description": "OneScript не выполняет подсчет ссылок на объекты, а полагается на сборщик мусора CLR. Это значит, что объекты автоматически не освобождаются при выходе из области видимости.  С помощью данного метода можно запустить принудительную сборку мусора среды CLR. Данные метод следует использовать обдуманно, поскольку вызов данного метода не гарантирует освобождение всех объектов. Локальные переменные, например, до завершения текущего метода очищены не будут, поскольку до завершения текущего метода CLR будет видеть, что они используются движком 1Script.",
        "signature": {
          "default": {
            "СтрокаПараметров": "()",
            "Параметры": {}
          }
        }
      },
      "ЗапуститьПриложение": {
        "name": "ЗапуститьПриложение",
        "name_en": "RunApp",
        "description": "Запуск приложения в операционной системе",
        "signature": {
          "default": {
            "СтрокаПараметров": "(cmdLine: Строка, currentDir?: Строка, wait?: Булево, retCode?: Произвольный)",
            "Параметры": {
              "cmdLine": "Командная строка запуска",
              "currentDir": "Текущая директория запускаемого процесса (необязательно)",
              "wait": "Ожидать завершения (необязательно) по умолчанию Ложь",
              "retCode": "Выходной параметр. Код возврата процесса. Имеет смысл только если указан параметр wait=true"
            }
          }
        }
      },
      "СоздатьПроцесс": {
        "name": "СоздатьПроцесс",
        "name_en": "CreateProcess",
        "description": "Создает процесс, которым можно манипулировать из скрипта",
        "signature": {
          "default": {
            "СтрокаПараметров": "(cmdLine: Строка, currentDir?: Строка, redirectOutput?: Булево, redirectInput?: Булево, encoding?: Произвольный, env?: Соответствие): Процесс",
            "Параметры": {
              "cmdLine": "Командная строка запуска",
              "currentDir": "Текущая директория запускаемого процесса (необязательно)",
              "redirectOutput": "Перехватывать стандартные потоки stdout и stderr",
              "redirectInput": "Перехватывать стандартный поток stdin",
              "encoding": "Кодировка стандартных потоков вывода и ошибок",
              "env": "Соответствие, где установлены значения переменных среды"
            }
          }
        }
      },
      "НайтиПроцессПоИдентификатору": {
        "name": "НайтиПроцессПоИдентификатору",
        "name_en": "FindProcessById",
        "description": "Выполняет поиск процесса по PID среди запущенных в операционной системе",
        "returns": "Процесс. Если не найден - Неопределено",
        "signature": {
          "default": {
            "СтрокаПараметров": "(PID: Число): Произвольный",
            "Параметры": {
              "PID": "Идентификатор процесса"
            }
          }
        }
      },
      "НайтиПроцессыПоИмени": {
        "name": "НайтиПроцессыПоИмени",
        "name_en": "FindProcessesByName",
        "description": "Выполняет поиск процессов с определенным именем",
        "returns": "Массив объектов Процесс.",
        "signature": {
          "default": {
            "СтрокаПараметров": "(name: Строка): Произвольный",
            "Параметры": {
              "name": "Имя процесса"
            }
          }
        }
      },
      "КаталогПрограммы": {
        "name": "КаталогПрограммы",
        "name_en": "ProgramDirectory",
        "description": "Каталог исполняемых файлов OneScript",
        "signature": {
          "default": {
            "СтрокаПараметров": "(): Строка",
            "Параметры": {}
          }
        }
      },
      "КраткоеПредставлениеОшибки": {
        "name": "КраткоеПредставлениеОшибки",
        "name_en": "BriefErrorDescription",
        "signature": {
          "default": {
            "СтрокаПараметров": "(errInfo: ИнформацияОбОшибке): Строка",
            "Параметры": {}
          }
        }
      },
      "ПодробноеПредставлениеОшибки": {
        "name": "ПодробноеПредставлениеОшибки",
        "name_en": "DetailErrorDescription",
        "signature": {
          "default": {
            "СтрокаПараметров": "(errInfo: ИнформацияОбОшибке): Строка",
            "Параметры": {}
          }
        }
      },
      "ТекущаяДата": {
        "name": "ТекущаяДата",
        "name_en": "CurrentDate",
        "description": "Текущая дата машины",
        "returns": "Дата",
        "signature": {
          "default": {
            "СтрокаПараметров": "(): Дата",
            "Параметры": {}
          }
        }
      },
      "ТекущаяУниверсальнаяДатаВМиллисекундах": {
        "name": "ТекущаяУниверсальнаяДатаВМиллисекундах",
        "name_en": "CurrentUniversalDateInMilliseconds",
        "signature": {
          "default": {
            "СтрокаПараметров": "(): Число",
            "Параметры": {}
          }
        }
      },
      "ЗначениеЗаполнено": {
        "name": "ЗначениеЗаполнено",
        "name_en": "IsValueFilled",
        "description": "Проверяет заполненность значения по принципу, заложенному в 1С:Предприятии",
        "signature": {
          "default": {
            "СтрокаПараметров": "(value: Произвольный): Булево",
            "Параметры": {}
          }
        }
      },
      "ЗаполнитьЗначенияСвойств": {
        "name": "ЗаполнитьЗначенияСвойств",
        "name_en": "FillPropertyValues",
        "description": "Заполняет одноименные значения свойств одного объекта из другого",
        "signature": {
          "default": {
            "СтрокаПараметров": "(acceptor: ИнформацияОСценарии, source: ИнформацияОСценарии, filledProperties?: Строка, ignoredProperties?: Строка)",
            "Параметры": {
              "acceptor": "Объект-приемник",
              "source": "Объект-источник",
              "filledProperties": "Заполняемые свойства (строка, через запятую)",
              "ignoredProperties": "Игнорируемые свойства (строка, через запятую)"
            }
          }
        }
      },
      "ПолучитьCOMОбъект": {
        "name": "ПолучитьCOMОбъект",
        "name_en": "GetCOMObject",
        "description": "Получает объект класса COM по его имени или пути. Подробнее см. синтакс-помощник от 1С.",
        "returns": "COMОбъект",
        "signature": {
          "default": {
            "СтрокаПараметров": "(pathName?: Строка, className?: Строка): Произвольный",
            "Параметры": {
              "pathName": "Путь к библиотеке",
              "className": "Имя класса"
            }
          }
        }
      },
      "НСтр": {
        "name": "НСтр",
        "name_en": "NStr",
        "description": "Функция НСтр имеет ограниченную поддержку и может использоваться только для упрощения портирования кода из 1С. Возвращает только строку на первом языке из списка, если второй параметр не указан. (Игнорирует \"язык по-умолчанию\")",
        "signature": {
          "default": {
            "СтрокаПараметров": "(src: Строка, lang?: Строка): Строка",
            "Параметры": {
              "src": "Строка на нескольких языках",
              "lang": "Код языка (если не указан, возвращается первый возможный вариант)"
            }
          }
        }
      },
      "СтрНачинаетсяС": {
        "name": "СтрНачинаетсяС",
        "name_en": "StrStartWith",
        "description": "Определяет, что строка начинается с указанной подстроки.",
        "signature": {
          "default": {
            "СтрокаПараметров": "(inputString: Строка, searchString: Строка): Булево",
            "Параметры": {
              "inputString": "Строка, начало которой проверяется на совпадение с подстрокой поиска.",
              "searchString": "Строка, содержащая предполагаемое начало строки. В случае если переданное значение является пустой строкой генерируется исключительная ситуация."
            }
          }
        }
      },
      "СтрЗаканчиваетсяНа": {
        "name": "СтрЗаканчиваетсяНа",
        "name_en": "StrEndsWith",
        "description": "Определяет, заканчивается ли строка указанной подстрокой.",
        "signature": {
          "default": {
            "СтрокаПараметров": "(inputString: Строка, searchString: Строка): Булево",
            "Параметры": {
              "inputString": "Строка, окончание которой проверяется на совпадение с подстрокой поиска.",
              "searchString": "Строка, содержащая предполагаемое окончание строки. В случае если переданное значение является пустой строкой генерируется исключительная ситуация."
            }
          }
        }
      },
      "СтрРазделить": {
        "name": "СтрРазделить",
        "name_en": "StrSplit",
        "description": "Разделяет строку на части по указанным символам-разделителям.",
        "signature": {
          "default": {
            "СтрокаПараметров": "(inputString: Строка, stringDelimiter: Строка, includeEmpty?: Булево): Массив",
            "Параметры": {
              "inputString": "Разделяемая строка.",
              "stringDelimiter": "Строка символов, каждый из которых является индивидуальным разделителем.",
              "includeEmpty": "Указывает необходимость включать в результат пустые строки, которые могут образоваться в результате разделения исходной строки. Значение по умолчанию: Истина."
            }
          }
        }
      },
      "СтрСоединить": {
        "name": "СтрСоединить",
        "name_en": "StrConcat",
        "description": "Соединяет массив переданных строк в одну строку с указанным разделителем",
        "signature": {
          "default": {
            "СтрокаПараметров": "(input: Массив, delimiter?: Строка): Строка",
            "Параметры": {
              "input": "Массив - соединяемые строки",
              "delimiter": "Разделитель. Если не указан, строки объединяются слитно"
            }
          }
        }
      },
      "СтрСравнить": {
        "name": "СтрСравнить",
        "name_en": "StrCompare",
        "description": "Сравнивает строки без учета регистра.",
        "returns": "-1 первая строка больше, 1 - вторая строка больше. 0 - строки равны",
        "signature": {
          "default": {
            "СтрокаПараметров": "(first: Строка, second: Строка): Число",
            "Параметры": {}
          }
        }
      },
      "СтрНайти": {
        "name": "СтрНайти",
        "name_en": "StrFind",
        "description": "Находит вхождение искомой строки как подстроки в исходной строке",
        "returns": "Позицию искомой строки в исходной строке. Возвращает 0, если подстрока не найдена.",
        "signature": {
          "default": {
            "СтрокаПараметров": "(haystack: Строка, needle: Строка, direction?: НаправлениеПоиска, startPos?: Число, occurance?: Число): Число",
            "Параметры": {
              "haystack": "Строка, в которой ищем",
              "needle": "Строка, которую надо найти",
              "direction": "значение перечисления НаправлениеПоиска (с конца/с начала)",
              "startPos": "Начальная позиция, с которой начинать поиск",
              "occurance": "Указывает номер вхождения искомой подстроки в исходной строке"
            }
          }
        }
      },
      "XMLСтрока": {
        "name": "XMLСтрока",
        "name_en": "XMLString",
        "signature": {
          "default": {
            "СтрокаПараметров": "(value: Произвольный): Строка",
            "Параметры": {}
          }
        }
      },
      "XMLЗначение": {
        "name": "XMLЗначение",
        "name_en": "XMLValue",
        "signature": {
          "default": {
            "СтрокаПараметров": "(givenType: Произвольный, presentation: Строка): Произвольный",
            "Параметры": {}
          }
        }
      },
      "СтрДлина": {
        "name": "СтрДлина",
        "name_en": "StrLen",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Строка: Строка): Число",
            "Параметры": {}
          }
        }
      },
      "СокрЛ": {
        "name": "СокрЛ",
        "name_en": "TrimL",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Строка: Строка): Строка",
            "Параметры": {}
          }
        }
      },
      "СокрП": {
        "name": "СокрП",
        "name_en": "TrimR",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Строка: Строка): Строка",
            "Параметры": {}
          }
        }
      },
      "СокрЛП": {
        "name": "СокрЛП",
        "name_en": "TrimAll",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Строка: Строка): Строка",
            "Параметры": {}
          }
        }
      },
      "Лев": {
        "name": "Лев",
        "name_en": "Left",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Строка: Строка, ЧислоСимволов: Число): Строка",
            "Параметры": {}
          }
        }
      },
      "Прав": {
        "name": "Прав",
        "name_en": "Right",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Строка: Строка, ЧислоСимволов: Число): Строка",
            "Параметры": {}
          }
        }
      },
      "Сред": {
        "name": "Сред",
        "name_en": "Mid",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Строка: Строка, НачальныйНомер: Число, ЧислоСимволов?: Число): Строка",
            "Параметры": {}
          }
        }
      },
      "Найти": {
        "name": "Найти",
        "name_en": "Find",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Строка: Строка, ПодстрокаПоиска: Строка): Число",
            "Параметры": {}
          }
        }
      },
      "ВРег": {
        "name": "ВРег",
        "name_en": "Upper",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Строка: Строка): Строка",
            "Параметры": {}
          }
        }
      },
      "НРег": {
        "name": "НРег",
        "name_en": "Lower",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Строка: Строка): Строка",
            "Параметры": {}
          }
        }
      },
      "ТРег": {
        "name": "ТРег",
        "name_en": "Title",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Строка: Строка): Строка",
            "Параметры": {}
          }
        }
      },
      "Символ": {
        "name": "Символ",
        "name_en": "Char",
        "signature": {
          "default": {
            "СтрокаПараметров": "(КодСимвола: Число): Строка",
            "Параметры": {}
          }
        }
      },
      "КодСимвола": {
        "name": "КодСимвола",
        "name_en": "CharCode",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Строка: Строка, НомерСимвола?: Число): Число",
            "Параметры": {}
          }
        }
      },
      "ПустаяСтрока": {
        "name": "ПустаяСтрока",
        "name_en": "IsBlankString",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Строка: Строка): Булево",
            "Параметры": {}
          }
        }
      },
      "СтрЗаменить": {
        "name": "СтрЗаменить",
        "name_en": "StrReplace",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Строка: Строка, ПодстрокаПоиска: Строка, ПодстрокаЗамены: Строка): Строка",
            "Параметры": {}
          }
        }
      },
      "СтрПолучитьСтроку": {
        "name": "СтрПолучитьСтроку",
        "name_en": "StrGetLine",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Строка: Строка, НомерСтроки: Число): Строка",
            "Параметры": {}
          }
        }
      },
      "СтрЧислоСтрок": {
        "name": "СтрЧислоСтрок",
        "name_en": "StrLineCount",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Строка: Строка): Число",
            "Параметры": {}
          }
        }
      },
      "СтрЧислоВхождений": {
        "name": "СтрЧислоВхождений",
        "name_en": "StrOccurrenceCount",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Строка: Строка, ПодстрокаПоиска: Строка): Число",
            "Параметры": {}
          }
        }
      },
      "Год": {
        "name": "Год",
        "name_en": "Year",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Число",
            "Параметры": {}
          }
        }
      },
      "Месяц": {
        "name": "Месяц",
        "name_en": "Month",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Число",
            "Параметры": {}
          }
        }
      },
      "День": {
        "name": "День",
        "name_en": "Day",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Число",
            "Параметры": {}
          }
        }
      },
      "Час": {
        "name": "Час",
        "name_en": "Hour",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Число",
            "Параметры": {}
          }
        }
      },
      "Минута": {
        "name": "Минута",
        "name_en": "Minute",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Число",
            "Параметры": {}
          }
        }
      },
      "Секунда": {
        "name": "Секунда",
        "name_en": "Second",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Число",
            "Параметры": {}
          }
        }
      },
      "НачалоГода": {
        "name": "НачалоГода",
        "name_en": "BegOfYear",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Дата",
            "Параметры": {}
          }
        }
      },
      "НачалоМесяца": {
        "name": "НачалоМесяца",
        "name_en": "BegOfMonth",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Дата",
            "Параметры": {}
          }
        }
      },
      "НачалоДня": {
        "name": "НачалоДня",
        "name_en": "BegOfDay",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Дата",
            "Параметры": {}
          }
        }
      },
      "НачалоЧаса": {
        "name": "НачалоЧаса",
        "name_en": "BegOfHour",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Дата",
            "Параметры": {}
          }
        }
      },
      "НачалоМинуты": {
        "name": "НачалоМинуты",
        "name_en": "BegOfMinute",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Дата",
            "Параметры": {}
          }
        }
      },
      "НачалоКвартала": {
        "name": "НачалоКвартала",
        "name_en": "BegOfQuarter",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Дата",
            "Параметры": {}
          }
        }
      },
      "КонецГода": {
        "name": "КонецГода",
        "name_en": "EndOfYear",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Дата",
            "Параметры": {}
          }
        }
      },
      "КонецМесяца": {
        "name": "КонецМесяца",
        "name_en": "EndOfMonth",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Дата",
            "Параметры": {}
          }
        }
      },
      "КонецДня": {
        "name": "КонецДня",
        "name_en": "EndOfDay",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Дата",
            "Параметры": {}
          }
        }
      },
      "КонецЧаса": {
        "name": "КонецЧаса",
        "name_en": "EndOfHour",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Дата",
            "Параметры": {}
          }
        }
      },
      "КонецМинуты": {
        "name": "КонецМинуты",
        "name_en": "EndOfMinute",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Дата",
            "Параметры": {}
          }
        }
      },
      "КонецКвартала": {
        "name": "КонецКвартала",
        "name_en": "EndOfQuarter",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Дата",
            "Параметры": {}
          }
        }
      },
      "НеделяГода": {
        "name": "НеделяГода",
        "name_en": "WeekOfYear",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Число",
            "Параметры": {}
          }
        }
      },
      "ДеньГода": {
        "name": "ДеньГода",
        "name_en": "DayOfYear",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Число",
            "Параметры": {}
          }
        }
      },
      "ДеньНедели": {
        "name": "ДеньНедели",
        "name_en": "WeekDay",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата): Число",
            "Параметры": {}
          }
        }
      },
      "ДобавитьМесяц": {
        "name": "ДобавитьМесяц",
        "name_en": "AddMonth",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Дата: Дата, ЧислоМесяцев: Число): Дата",
            "Параметры": {}
          }
        }
      },
      "Цел": {
        "name": "Цел",
        "name_en": "Int",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Число: Число): Число",
            "Параметры": {}
          }
        }
      },
      "Окр": {
        "name": "Окр",
        "name_en": "Round",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Число: Число, Разрядность?: Число, РежимОкругления?: РежимОкругления): Число",
            "Параметры": {}
          }
        }
      },
      "Log": {
        "name": "Log",
        "name_en": "Log",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Число: Число): Число",
            "Параметры": {}
          }
        }
      },
      "Log10": {
        "name": "Log10",
        "name_en": "Log10",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Число: Число): Число",
            "Параметры": {}
          }
        }
      },
      "Sin": {
        "name": "Sin",
        "name_en": "Sin",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Угол: Число): Число",
            "Параметры": {}
          }
        }
      },
      "Cos": {
        "name": "Cos",
        "name_en": "Cos",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Угол: Число): Число",
            "Параметры": {}
          }
        }
      },
      "Tan": {
        "name": "Tan",
        "name_en": "Tan",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Угол: Число): Число",
            "Параметры": {}
          }
        }
      },
      "ASin": {
        "name": "ASin",
        "name_en": "ASin",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Число: Число): Число",
            "Параметры": {}
          }
        }
      },
      "ACos": {
        "name": "ACos",
        "name_en": "ACos",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Число: Число): Число",
            "Параметры": {}
          }
        }
      },
      "ATan": {
        "name": "ATan",
        "name_en": "ATan",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Число: Число): Число",
            "Параметры": {}
          }
        }
      },
      "Exp": {
        "name": "Exp",
        "name_en": "Exp",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Число: Число): Число",
            "Параметры": {}
          }
        }
      },
      "Pow": {
        "name": "Pow",
        "name_en": "Pow",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Основание: Число, Показатель: Число): Число",
            "Параметры": {}
          }
        }
      },
      "Sqrt": {
        "name": "Sqrt",
        "name_en": "Sqrt",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Число: Число): Число",
            "Параметры": {}
          }
        }
      },
      "Мин": {
        "name": "Мин",
        "name_en": "Min",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Значение1: Число|Строка|Дата|Булево, ..., ЗначениеN: Число|Строка|Дата|Булево): Число|Строка|Дата|Булево",
            "Параметры": {}
          }
        }
      },
      "Макс": {
        "name": "Макс",
        "name_en": "Max",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Значение1: Число|Строка|Дата|Булево, ..., ЗначениеN: Число|Строка|Дата|Булево): Число|Строка|Дата|Булево",
            "Параметры": {}
          }
        }
      },
      "Формат": {
        "name": "Формат",
        "name_en": "Format",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Значение: Число|Дата|Булево, ФорматнаяСтрока: Строка): Строка",
            "Параметры": {}
          }
        }
      },
      "ИнформацияОбОшибке": {
        "name": "ИнформацияОбОшибке",
        "name_en": "ErrorInfo",
        "signature": {
          "default": {
            "СтрокаПараметров": "(): ИнформацияОбОшибке",
            "Параметры": {}
          }
        }
      },
      "ОписаниеОшибки": {
        "name": "ОписаниеОшибки",
        "name_en": "ErrorDescription",
        "signature": {
          "default": {
            "СтрокаПараметров": "(): Строка",
            "Параметры": {}
          }
        }
      },
      "ТекущийСценарий": {
        "name": "ТекущийСценарий",
        "name_en": "CurrentScript",
        "description": "Возвращает информацию о выполняемом сценарии.",
        "returns": "ИнформацияОСценарии",
        "signature": {
          "default": {
            "СтрокаПараметров": "(): Строка",
            "Параметры": {}
          }
        }
      },
      "СтрШаблон": {
        "name": "СтрШаблон",
        "name_en": "StrTemplate",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Шаблон: Строка, Значение1_Значение10?: Произвольный): Строка",
            "Параметры": {}
          }
        }
      },
      "Булево": {
        "name": "Булево",
        "name_en": "Boolean",
        "returns": "Булево",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Значение: Произвольный): Булево",
            "Параметры": {}
          }
        }
      },
      "Число": {
        "name": "Число",
        "name_en": "Number",
        "returns": "Число",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Значение: Произвольный): Число",
            "Параметры": {}
          }
        }
      },
      "Строка": {
        "name": "Строка",
        "name_en": "String",
        "returns": "Строка",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Значение: Произвольный): Строка",
            "Параметры": {}
          }
        }
      },
      "Дата": {
        "name": "Дата",
        "name_en": "Date",
        "returns": "Дата",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Значение: Произвольный): Дата",
            "Параметры": {}
          }
        }
      },
      "Тип": {
        "name": "Тип",
        "name_en": "Type",
        "returns": "Тип",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Значение: Строка): Тип",
            "Параметры": {}
          }
        }
      },
      "ТипЗнч": {
        "name": "ТипЗнч",
        "name_en": "Type",
        "returns": "Тип",
        "signature": {
          "default": {
            "СтрокаПараметров": "(Значение: Произвольный): Тип",
            "Параметры": {}
          }
        }
      }
    },
    "globalvariable": {
      "ФайловыеПотоки": {
        "name": "ФайловыеПотоки",
        "name_en": "FileStreams",
        "description": "Менеджер файловых потоков.",
        "access": "Чтение"
      },
      "АргументыКоманднойСтроки": {
        "name": "АргументыКоманднойСтроки",
        "name_en": "CommandLineArguments",
        "description": "Доступ к аргументам командной строки. Объект АргументыКоманднойСтроки представляет собой массив в режиме \"только чтение\".",
        "access": "Чтение"
      },
      "Символы": {
        "name": "Символы",
        "name_en": "Chars",
        "description": "Содержит набор системных символов.",
        "value": "Набор системных символов.",
        "access": "Чтение"
      }
    },
    "classes": {
      "ВебЗапрос": {
        "name": "ВебЗапрос",
        "name_en": "WebRequest",
        "properties": {
          "GET": {
            "name": "GET",
            "name_en": "GET",
            "access": "Чтение"
          },
          "POST": {
            "name": "POST",
            "name_en": "POST",
            "access": "Чтение"
          },
          "Параметры": {
            "name": "Параметры",
            "name_en": "Params",
            "description": "Параметры запроса",
            "access": "Чтение"
          },
          "Файлы": {
            "name": "Файлы",
            "name_en": "Files",
            "description": "Загруженные файлы",
            "access": "Чтение"
          },
          "ENV": {
            "name": "ENV",
            "name_en": "ENV",
            "description": "Переменные среды",
            "access": "Чтение/Запись"
          }
        },
        "methods": {
          "ПолучитьТелоКакДвоичныеДанные": {
            "name": "ПолучитьТелоКакДвоичныеДанные",
            "name_en": "GetBodyAsBinaryData",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): ДвоичныеДанные",
                "Параметры": {}
              }
            }
          },
          "ПолучитьТелоКакСтроку": {
            "name": "ПолучитьТелоКакСтроку",
            "name_en": "GetBodyAsString",
            "signature": {
              "default": {
                "СтрокаПараметров": "(encoding?: Произвольный): Строка",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ОписаниеФайлаPostЗапроса": {
        "name": "ОписаниеФайлаPostЗапроса",
        "name_en": "PostFileDecription",
        "properties": {
          "Имя": {
            "name": "Имя",
            "name_en": "Name",
            "access": "Чтение"
          },
          "ИмяФайла": {
            "name": "ИмяФайла",
            "name_en": "FileName",
            "access": "Чтение"
          },
          "РасположениеСодержимого": {
            "name": "РасположениеСодержимого",
            "name_en": "ContentDisposition",
            "access": "Чтение"
          },
          "ТипСодержимого": {
            "name": "ТипСодержимого",
            "name_en": "ContentType",
            "access": "Чтение"
          },
          "Размер": {
            "name": "Размер",
            "name_en": "Size",
            "access": "Чтение"
          },
          "Данные": {
            "name": "Данные",
            "name_en": "Data",
            "access": "Чтение"
          }
        }
      },
      "ДанныеPOSTЗапроса": {
        "name": "ДанныеPOSTЗапроса",
        "name_en": "PostRequestData",
        "properties": {
          "Параметры": {
            "name": "Параметры",
            "name_en": "Params",
            "description": "Параметры запроса",
            "access": "Чтение"
          },
          "Файлы": {
            "name": "Файлы",
            "name_en": "Files",
            "description": "Загруженные файлы",
            "access": "Чтение"
          }
        },
        "constructors": {
          "Из двоичных данных": {
            "name": "Из двоичных данных",
            "signature": "(data: ДвоичныеДанные, boundary: Произвольный)"
          },
          "Из строки запроса": {
            "name": "Из строки запроса",
            "signature": "(RequestString: Произвольный)"
          }
        }
      },
      "ИнформацияОбОшибкеШаблон": {
        "name": "ИнформацияОбОшибкеШаблон",
        "name_en": "ExceptionInfoTemplate",
        "description": "Служебный класс, создаваемый конструктором объекта \"ИнформацияОбОшибке\". Превращается в полноценный объект ИнформацияОбОшибке в момент выброса исключения.  Данный класс предназначен для создания параметризованных исключений.",
        "example": "ВызватьИсключение Новый ИнформацияОбОшибке(\"Текст ошибки\", ДополнительныеДанные);"
      },
      "ИнформацияОСценарии": {
        "name": "ИнформацияОСценарии",
        "name_en": "ScriptInformation",
        "description": "Информация о выполняемом сценарии.",
        "properties": {
          "Источник": {
            "name": "Источник",
            "name_en": "Source",
            "description": "Путь к файлу сценария, если выполняется сценарий из файла. Для всех прочих сценариев возвращаемое значение определяется хост-приложением.",
            "access": "Чтение"
          },
          "Каталог": {
            "name": "Каталог",
            "name_en": "Path",
            "access": "Чтение"
          }
        }
      },
      "SafeArrayWrapper": {
        "name": "SafeArrayWrapper",
        "name_en": "SafeArrayWrapper",
        "description": "Вспомогательный класс для работы с объектами COMSafeArray, получаемыми из COM-объектов. На данный момент класс не является полноценной заменой для COMSafeArray и его нельзя создать вручную.",
        "methods": {
          "Количество": {
            "name": "Количество",
            "name_en": "Count",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "GetValue": {
            "name": "GetValue",
            "name_en": "GetValue",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число): Произвольный",
                "Параметры": {}
              }
            }
          },
          "SetValue": {
            "name": "SetValue",
            "name_en": "SetValue",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число, value: Произвольный)",
                "Параметры": {}
              }
            }
          },
          "Выгрузить": {
            "name": "Выгрузить",
            "name_en": "Unload",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): System.Object",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ИнформацияОбОшибке": {
        "name": "ИнформацияОбОшибке",
        "name_en": "ErrorInfo",
        "description": "Класс позволяет узнать информацию о произошедшем исключении.",
        "properties": {
          "Параметры": {
            "name": "Параметры",
            "name_en": "Parameters",
            "description": "Значение, переданное при создании исключения в конструкторе объекта ИнформацияОбОшибке.",
            "access": "Чтение"
          },
          "Описание": {
            "name": "Описание",
            "name_en": "Description",
            "description": "Содержит краткое описание ошибки. Эквивалент Exception.Message в C#",
            "access": "Чтение"
          },
          "ИмяМодуля": {
            "name": "ИмяМодуля",
            "name_en": "ModuleName",
            "description": "Имя модуля, вызвавшего исключение.",
            "access": "Чтение"
          },
          "НомерСтроки": {
            "name": "НомерСтроки",
            "name_en": "LineNumber",
            "description": "Номер строки, вызвавшей исключение.",
            "access": "Чтение"
          },
          "ИсходнаяСтрока": {
            "name": "ИсходнаяСтрока",
            "name_en": "SourceLine",
            "description": "Строка исходного кода, вызвавшего исключение.",
            "access": "Чтение"
          },
          "Причина": {
            "name": "Причина",
            "name_en": "Cause",
            "description": "Содержит вложенное исключение, если таковое было. Эквивалент Exception.InnerException в C#",
            "access": "Чтение"
          }
        },
        "constructors": {
          "С возможностью передачи параметров": {
            "name": "С возможностью передачи параметров",
            "signature": "(msg: Произвольный, parameter: Произвольный)"
          }
        },
        "methods": {
          "ПодробноеОписаниеОшибки": {
            "name": "ПодробноеОписаниеОшибки",
            "name_en": "DetailedDescription",
            "description": "Содержит подробное описание исключения, включая стек вызовов среды исполнения CLR. т.е. не стек вызовов скрипта, а стек вызовов скриптового движка. Эквивалентно функции Exception.ToString() в C#.",
            "returns": "Строка.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Строка",
                "Параметры": {}
              }
            }
          }
        }
      },
      "COMОбъект": {
        "name": "COMОбъект",
        "name_en": "COMObject",
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "(args: Произвольный[])"
          }
        }
      },
      "БуферДвоичныхДанных": {
        "name": "БуферДвоичныхДанных",
        "name_en": "BinaryDataBuffer",
        "description": "Коллекция байтов фиксированного размера с возможностью произвольного доступа и изменения по месту. Размер буфера формально не ограничен, но поскольку все данные буфера полностью находятся в оперативной памяти, при попытке создать буфер слишком большого размера доступной памяти может оказаться недостаточно, в результате чего будет вызвано исключение. Поэтому при работе с буферами двоичных данных необходимо соотносить их размер с доступным объемом оперативной памяти. При создании буфера можно указать порядок байтов, который будет использован для операций с целыми числами. При этом если буфер не создан явно, а получен с помощью вызова метода другого объекта, то порядок байтов в полученном буфере будет унаследован от порядка байтов, заданного для того объекта, метод которого вызывается. Например, если буфер получен с помощью вызова метода ПрочитатьВБуферДвоичныхДанных, то порядок байтов в полученном буфере будет равен значению свойства ПорядокБайтов. Возможен также более сложный случай наследования порядка байтов. Если буфер получен с помощью вызова метода ПолучитьБуферДвоичныхДанных, то порядок байтов у полученного буфера будет выбираться из объекта ЧтениеДанных, из которого был получен объект РезультатЧтенияДанных.  Порядок байтов, заданный для объекта ЧтениеДанных, будет использован во всех объектах, полученных на его основании.",
        "properties": {
          "ПорядокБайтов": {
            "name": "ПорядокБайтов",
            "name_en": "ByteOrder",
            "description": "Текущий порядок байтов. Влияет на операции чтения и записи целых чисел в буфер.",
            "value": "ПорядокБайтов (ByteOrder)",
            "access": "Чтение/Запись"
          },
          "Размер": {
            "name": "Размер",
            "name_en": "Size",
            "description": "Размер буфера в байтах.",
            "value": "Число (Number)",
            "access": "Чтение"
          },
          "ТолькоЧтение": {
            "name": "ТолькоЧтение",
            "name_en": "ReadOnly",
            "description": "Значение Истина указывает, что данный буфер предназначен только для чтения.",
            "value": "Булево (Boolean)",
            "access": "Чтение"
          }
        },
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "(size: Произвольный, byteOrder?: Произвольный)",
            "params": {
              "size": "Размер буфера в байтах.",
              "byteOrder": "Порядок байтов. Значение по умолчанию: LittleEndian."
            }
          }
        },
        "methods": {
          "Записать": {
            "name": "Записать",
            "name_en": "Write",
            "description": "Заменить значения, начиная с заданной позиции, значениями из заданного буфера.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(position: Число, bytes: БуферДвоичныхДанных, number?: Число)",
                "Параметры": {
                  "position": "Позиция, начиная с которой требуется записать содержимое буфера.",
                  "bytes": "Байты, которыми нужно заполнить часть буфера.",
                  "number": "Количество байт, которые требуется заменить."
                }
              }
            }
          },
          "ЗаписатьЦелое16": {
            "name": "ЗаписатьЦелое16",
            "name_en": "WriteInt16",
            "description": "Записать целое 16-битное положительное число в заданную позицию.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(position: Число, value: Число, byteOrder?: Произвольный)",
                "Параметры": {
                  "position": "Позиция, на которой требуется записать число.",
                  "value": "Число, которое требуется записать. Если значение не помещается в 16 бит, будет вызвано исключение.",
                  "byteOrder": "Порядок байтов, который будет использован для кодировки числа при записи в буфер. Если не установлен, то будет использован порядок байтов, заданный для текущего экземпляра БуферДвоичныхДанных. Значение по умолчанию: Неопределено."
                }
              }
            }
          },
          "ЗаписатьЦелое32": {
            "name": "ЗаписатьЦелое32",
            "name_en": "WriteInt32",
            "description": "Записать целое 32-битное положительное число в заданную позицию.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(position: Число, value: Число, byteOrder?: Произвольный)",
                "Параметры": {
                  "position": "Позиция, на которой требуется записать число.",
                  "value": "Число, которое требуется записать. Если значение не помещается в 32 бита, будет вызван исключение.",
                  "byteOrder": "Порядок байтов, который будет использован для кодировки числа при записи в буфер. Если не установлен, то будет использован порядок байтов, заданный для текущего экземпляра БуферДвоичныхДанных. Значение по умолчанию: Неопределено."
                }
              }
            }
          },
          "ЗаписатьЦелое64": {
            "name": "ЗаписатьЦелое64",
            "name_en": "WriteInt64",
            "description": "Записать целое 64-битное положительное число в заданную позицию.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(position: Число, value: Число, byteOrder?: Произвольный)",
                "Параметры": {
                  "position": "Позиция, на которой требуется записать число.",
                  "value": "Число, которое требуется записать. Если значение не помещается в 64 бита, будет вызвано исключение.",
                  "byteOrder": "Порядок байтов, который будет использован для кодировки числа при записи в буфер. Если не установлен, то используется порядок байтов, заданный для текущего экземпляра БуферДвоичныхДанных. Значение по умолчанию: Неопределено."
                }
              }
            }
          },
          "Перевернуть": {
            "name": "Перевернуть",
            "name_en": "Reverse",
            "description": "Создает новый буфер, содержащий элементы текущего буфера в противоположном порядке.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): БуферДвоичныхДанных",
                "Параметры": {}
              }
            }
          },
          "Получить": {
            "name": "Получить",
            "name_en": "Get",
            "description": "Получает значение элемента на указанной позиции.",
            "returns": "Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(position: Число): Число",
                "Параметры": {
                  "position": "Позиция элемента в буфере. Нумерация начинается с 0."
                }
              }
            }
          },
          "ПолучитьСрез": {
            "name": "ПолучитьСрез",
            "name_en": "GetSlice",
            "description": "Создает новый буфер, использующий заданное количество байтов из исходного буфера, начиная с заданной позиции (нумерация с 0). Если количество не задано, то новый буфер является представлением элементов текущего буфера, начиная с заданного индекса и до конца.  НЕ РЕАЛИЗОВАН",
            "signature": {
              "default": {
                "СтрокаПараметров": "(position: Число, number?: Произвольный): БуферДвоичныхДанных",
                "Параметры": {
                  "position": "Позиция, начиная с которой будет создан новый буфер.",
                  "number": "Количество байтов, которые требуется отобразить в срезе. Если на задано, то отображаются все байты от начала среза до конца исходного буфера. Значение по умолчанию: Неопределено."
                }
              }
            }
          },
          "Прочитать": {
            "name": "Прочитать",
            "name_en": "Read",
            "description": "Выполняет чтение байтов из буфера и помещает их в новый буфер.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(position: Число, number: Число): БуферДвоичныхДанных",
                "Параметры": {
                  "position": "Позиция, начиная с которой требуется прочитать байты.",
                  "number": "Количество байтов, которое требуется прочитать."
                }
              }
            }
          },
          "ПрочитатьЦелое16": {
            "name": "ПрочитатьЦелое16",
            "name_en": "ReadInt16",
            "description": "Выполняет чтение целого 16-битного положительного числа на заданной позиции.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(position: Число, byteOrder?: Произвольный): Число",
                "Параметры": {
                  "position": "Позиция, на которой требуется прочитать число.",
                  "byteOrder": "Порядок байтов, используемый при чтении числа. Если не задан, используется порядок, определенный для текущего экземпляра ЧтениеДанных. Значение по умолчанию: Неопределено."
                }
              }
            }
          },
          "ПрочитатьЦелое32": {
            "name": "ПрочитатьЦелое32",
            "name_en": "ReadInt32",
            "description": "Прочитать целое 32-битное положительное число на заданной позиции.",
            "returns": "Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(position: Число, byteOrder?: Произвольный): Число",
                "Параметры": {
                  "position": "Позиция, на которой требуется прочитать число.",
                  "byteOrder": "Порядок байтов, используемый при чтении числа. Если не задан, используется порядок, определенный для текущего экземпляра ЧтениеДанных. Значение по умолчанию: Неопределено."
                }
              }
            }
          },
          "ПрочитатьЦелое64": {
            "name": "ПрочитатьЦелое64",
            "name_en": "ReadInt64",
            "description": "Выполняет чтение целого 64-битного положительного числа на заданной позиции.",
            "returns": "Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(position: Число, byteOrder?: Произвольный): Число",
                "Параметры": {
                  "position": "Позиция, на которой требуется прочитать число.",
                  "byteOrder": "Порядок байтов, используемый при чтении числа. Если не задан, используется порядок, определенный для текущего экземпляра ЧтениеДанных. Значение по умолчанию: Неопределено."
                }
              }
            }
          },
          "Разделить": {
            "name": "Разделить",
            "name_en": "Split",
            "description": "Разделить буфер на части по заданному разделителю.  НЕ РЕАЛИЗОВАН",
            "remarks": "По двоичному буферу",
            "signature": {
              "default": {
                "СтрокаПараметров": "(separator: Произвольный): Произвольный",
                "Параметры": {
                  "separator": "Разделитель."
                }
              }
            }
          },
          "Скопировать": {
            "name": "Скопировать",
            "name_en": "Copy",
            "description": "Создает копию массива.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): БуферДвоичныхДанных",
                "Параметры": {}
              }
            }
          },
          "Соединить": {
            "name": "Соединить",
            "name_en": "Concat",
            "description": "Создает новый буфер, содержащий элементы текущего буфера и, за ними, элементы заданного буфера.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(buffer: БуферДвоичныхДанных): БуферДвоичныхДанных",
                "Параметры": {
                  "buffer": "Буфер, который будет соединен с исходным."
                }
              }
            }
          },
          "Установить": {
            "name": "Установить",
            "name_en": "Set",
            "description": "Устанавливает значение элемента на заданной позиции (нумерация начинается с 0).",
            "signature": {
              "default": {
                "СтрокаПараметров": "(position: Число, value: Число)",
                "Параметры": {
                  "position": "Позиция, на которую требуется поместить новое значение.",
                  "value": "Значение, которое требуется установить в заданную позицию буфера. Если значение больше 255 или меньше 0, будет выдана ошибка о неверном значении параметра."
                }
              }
            }
          },
          "УстановитьТолькоЧтение": {
            "name": "УстановитьТолькоЧтение",
            "name_en": "SetReadOnly",
            "description": "Переводит текущий буфер в режим \"только для чтения\".  Попытка изменить состояние буфера приведет к вызову исключения.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ЧтениеДанных": {
        "name": "ЧтениеДанных",
        "name_en": "DataReader",
        "description": "Объект предназначен для чтения различных типов данных из источника данных. В качестве источника могут выступать Поток, Файл или ДвоичныеДанные. Необходимо соблюдать следующий порядок работы с данным объектом:  - Создать объект ЧтениеДанных на основании источника данных. - Выполнить требуемые действия с помощью объекта. - Закрыть экземпляр объекта ЧтениеДанных. При необходимости использовать другие методы для работы с источником данных, требуется сначала закрыть экземпляр объекта ЧтениеДанных с помощью метода Закрыть, выполнить необходимые действия над источником, установить требуемую позицию для чтения из источника и создать новый экземпляр ЧтениеДанных.",
        "properties": {
          "КодировкаТекста": {
            "name": "КодировкаТекста",
            "name_en": "TextEncoding",
            "description": "Кодировка текста, используемая по-умолчанию для данного экземпляра ЧтениеДанных. Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки.",
            "access": "Чтение/Запись"
          },
          "КонвертируемыйРазделительСтрок": {
            "name": "КонвертируемыйРазделительСтрок",
            "name_en": "ConvertibleSplitterOfLines",
            "description": "Конвертируемый разделитель строк. Этот параметр влияет на поведение метода ПрочитатьСимволы.",
            "value": "Строка (String)",
            "access": "Чтение/Запись"
          },
          "ПорядокБайтов": {
            "name": "ПорядокБайтов",
            "name_en": "ByteOrder",
            "description": "Порядок байтов по умолчанию.",
            "value": "ПорядокБайтов (ByteOrder)",
            "access": "Чтение/Запись"
          },
          "РазделительСтрок": {
            "name": "РазделительСтрок",
            "name_en": "LineSplitter",
            "description": "Разделитель строк по-умолчанию. Это свойство влияет на поведение метода ПрочитатьСтроку.",
            "value": "Строка (String)",
            "access": "Чтение/Запись"
          },
          "ЧтениеЗавершено": {
            "name": "ЧтениеЗавершено",
            "name_en": "ReadCompleted",
            "description": "Содержит признак того, что во входном потоке больше нет данных для чтения. Изначально устанавливается в значение Ложь. Если при очередном чтении было прочитано меньше данных, чем было запрошено, принимает значение Истина.",
            "value": "Булево (Boolean)",
            "access": "Чтение/Запись"
          }
        },
        "constructors": {
          "На основании двоичных данных": {
            "name": "На основании двоичных данных",
            "signature": "(binaryData: Произвольный, textEncoding?: Произвольный, byteOrder?: Произвольный, lineSplitter?: Строка, convertibleSplitterOfLines?: Строка)",
            "description": "Создает объект для чтения из заданного объекта ДвоичныеДанные. После завершения работы с объектом ЧтениеДанных до того, как будет закрыт поток, переданный в конструктор, объект следует закрыть с помощью метода Закрыть или НачатьЗакрытие.",
            "params": {
              "binaryData": "Экземпляр объекта ДвоичныеДанные, из которого будет выполнено чтение.",
              "textEncoding": "Определяет кодировку текста, используемую для чтения данных. По-умолчанию используется кодировка UTF-8. Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки.  Значение по умолчанию: UTF8. Типы: КодировкаТекста (TextEncoding), Строка (String)",
              "byteOrder": "Порядок байтов, используемый для декодирования целых чисел при чтении из потока. Значение по умолчанию: LittleEndian.",
              "lineSplitter": "Определяет строку, разделяющую строки в двоичных данных. Значение по умолчанию: Неопределено.",
              "convertibleSplitterOfLines": "Определяет разделение строк в файле для конвертации в стандартный перевод строк ПС. Значение по умолчанию: ВК + ПС."
            }
          },
          "На основании имени файла": {
            "name": "На основании имени файла",
            "signature": "(fileName: Строка, textEncoding?: Произвольный, byteOrder?: Произвольный, lineSplitter?: Строка, convertibleSplitterOfLines?: Строка)",
            "description": "Создает объект чтения из заданного файла. При этом будет файл, указанный в параметре ИмяФайла, будет автоматически открыт на чтение.  Если файл с таким именем не существует, будет сгенерировано исключение.  После завершения работы с объектом ЧтениеДанных до того, как будет закрыт поток, переданный в конструктор, объект следует закрыть с помощью метода Закрыть или НачатьЗакрытие. При этом файл, указанный в параметре &lt;ИмяФайла&gt;, будет автоматически закрыт.",
            "params": {
              "fileName": "Имя файла, из которого будет выполнено чтение данных.",
              "textEncoding": "Определяет кодировку текста, используемую для чтения файла. По-умолчанию используется кодировка UTF-8. Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки. Значение по умолчанию: UTF8. Типы: КодировкаТекста (TextEncoding), Строка (String)",
              "byteOrder": "Порядок байтов, используемый для декодирования целых чисел при чтении из потока. Значение по умолчанию: LittleEndian.",
              "lineSplitter": "Строка, используемая в качестве разделителя строки в файле. Значение по умолчанию: Неопределено.",
              "convertibleSplitterOfLines": "Определяет разделение строк в файле для конвертации в стандартный перевод строк ПС. Значение по умолчанию: ВК + ПС."
            }
          },
          "На основании потока": {
            "name": "На основании потока",
            "signature": "(stream: Произвольный, textEncoding?: Произвольный, byteOrder?: Произвольный, lineSplitter?: Строка, convertibleSplitterOfLines?: Строка)",
            "description": "Создает объект чтения из данного потока. После завершения работы с объектом ЧтениеДанных до того, как будет закрыт поток, переданный в конструктор, объект следует закрыть с помощью метода Закрыть или НачатьЗакрытие.",
            "params": {
              "stream": "Поток, из которого будет производиться чтение данных. Типы: Поток (Stream), ПотокВПамяти (MemoryStream), ФайловыйПоток (FileStream)",
              "textEncoding": "Определяет кодировку текста, используемую для чтения данных. По-умолчанию используется кодировка UTF-8. Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки. Значение по умолчанию: UTF8. Типы: КодировкаТекста (TextEncoding), Строка (String)",
              "byteOrder": "Порядок байтов, используемый для декодирования целых чисел при чтении из потока. Значение по умолчанию: LittleEndian.",
              "lineSplitter": "Определяет строку, разделяющую строки в потоке. Значение по умолчанию: Неопределено.",
              "convertibleSplitterOfLines": "Определяет разделение строк в файле для конвертации в стандартный перевод строк ПС. Значение по умолчанию: ВК + ПС."
            }
          }
        },
        "methods": {
          "Закрыть": {
            "name": "Закрыть",
            "name_en": "Close",
            "description": "Вызов данного метода завершает работу с текущим объектом. Если объект является владельцем вложенного потока, поток также закрывается.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ИсходныйПоток": {
            "name": "ИсходныйПоток",
            "name_en": "SourceStream",
            "description": "Получает исходный поток, из которого выполняется чтение данных.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Произвольный",
                "Параметры": {}
              }
            }
          },
          "Пропустить": {
            "name": "Пропустить",
            "name_en": "Skip",
            "description": "Пропускает при чтении указанное количество байтов в потоке.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(number: Число): Число",
                "Параметры": {
                  "number": "Количество байтов, которые требуется пропустить."
                }
              }
            }
          },
          "ПропуститьДо": {
            "name": "ПропуститьДо",
            "name_en": "SkipTo",
            "description": "Пропускает при чтении двоичные данные до указанного разделителя.",
            "signature": {
              "Пропуск до двоичного маркера": {
                "СтрокаПараметров": "(marker: Произвольный): Число",
                "Параметры": {
                  "marker": "Маркер, до которого требуется пропустить данные."
                }
              },
              "Пропуск до строкового маркера": {
                "СтрокаПараметров": "(marker: Строка, encoding?: Произвольный): Число",
                "Параметры": {
                  "marker": "Маркер, до которого требуется пропустить данные.",
                  "encoding": "Кодировка текста. Значение по умолчанию: Неопределено. Типы: КодировкаТекста (TextEncoding), Строка (String)"
                }
              },
              "Пропуск до смешанного набора маркеров": {
                "СтрокаПараметров": "(markers: Произвольный, encoding?: Произвольный): Число",
                "Параметры": {
                  "markers": "Массив маркеров, до которых надо пропустить данные. Элементы массива могут иметь тип БуферДвоичныхДанных или Строка. Данные пропускаются до первого встреченного маркера наибольшей возможной длины.",
                  "encoding": "Кодировка текста.  Значение по умолчанию: Неопределено. Типы: КодировкаТекста (TextEncoding), Строка (String)"
                }
              }
            }
          },
          "Прочитать": {
            "name": "Прочитать",
            "name_en": "Read",
            "description": "Выполняет чтение двоичных данных заданного размера из потока. Если размер не указан, будут прочитаны все данные до конца потока.",
            "returns": "Содержит описание результата чтения данных из потока.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(number?: Число): Произвольный",
                "Параметры": {
                  "number": "Количество байтов, которые требуется прочитать. Если не задано, то выполняется чтение всех данных до конца потока. Значение по умолчанию: Неопределено."
                }
              }
            }
          },
          "ПрочитатьБайт": {
            "name": "ПрочитатьБайт",
            "name_en": "ReadByte",
            "description": "Выполняет чтение одного байта из потока.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "ПрочитатьВБуферДвоичныхДанных": {
            "name": "ПрочитатьВБуферДвоичныхДанных",
            "name_en": "ReadIntoBinaryDataBuffer",
            "description": "Прочитать байты из потока в БуферДвоичныхДанных.",
            "signature": {
              "Чтение в новый буфер": {
                "СтрокаПараметров": "(number?: Число): Произвольный",
                "Параметры": {
                  "number": "Количество байтов, которые требуется прочитать. Если не задано, то выполняется чтение всех байтов до конца потока. Значение по умолчанию: Неопределено."
                }
              },
              "Чтение в существующий буфер": {
                "СтрокаПараметров": "(buffer: Произвольный, positionInBuffer: Число, number: Число): Произвольный",
                "Параметры": {
                  "buffer": "Буфер двоичных данных, в который требуется поместить прочитанные байты.",
                  "positionInBuffer": "Позиция в буфере, начиная с которой требуется записать прочитанные данные.",
                  "number": "Количество байтов, которые требуется прочитать."
                }
              }
            }
          },
          "ПрочитатьДо": {
            "name": "ПрочитатьДо",
            "name_en": "ReadTo",
            "description": "Выполняет чтение двоичных данных до указанного маркера.",
            "returns": "Содержит описание результата чтения данных из потока.",
            "signature": {
              "Чтение до двоичного маркера": {
                "СтрокаПараметров": "(marker: Произвольный): Произвольный",
                "Параметры": {
                  "marker": "Маркер, до которого выполняется чтение данных."
                }
              },
              "Чтение до строкового маркера": {
                "СтрокаПараметров": "(marker: Строка, encoding?: Произвольный): Произвольный",
                "Параметры": {
                  "marker": "Маркер, до которого выполняется чтение.",
                  "encoding": "Кодировка текста для определения строковых маркеров в двоичном потоке.  Если параметр не установлен, используется кодировка, указанная для текущего экземпляра ЧтениеДанных. Значение по умолчанию: Неопределено. Типы: КодировкаТекста (TextEncoding), Строка (String)"
                }
              },
              "Чтение до смешанного набора маркеров": {
                "СтрокаПараметров": "(markers: Произвольный, encoding?: Произвольный): Произвольный",
                "Параметры": {
                  "markers": "Массив, содержащий маркеры. Элементы массива могут иметь тип БуферДвоичныхДанных или Строка.",
                  "encoding": "Кодировка текста для определения строковых маркеров в двоичном потоке.  Если параметр не установлен, используется кодировка, указанная для текущего экземпляра ЧтениеДанных. Значение по умолчанию: Неопределено. Типы: КодировкаТекста (TextEncoding), Строка (String)"
                }
              }
            }
          },
          "ПрочитатьСимволы": {
            "name": "ПрочитатьСимволы",
            "name_en": "ReadChars",
            "description": "Выполняет чтение заданного количества символов из потока в виде строки. Если количество символов не задано, выполняется чтение всего остатка потока.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(count?: Число, encoding?: Произвольный): Строка",
                "Параметры": {
                  "count": "Количество символов, которые требуется прочитать. Если не установлено, то будут прочитаны все символы до конца потока. Значение по умолчанию: Неопределено.",
                  "encoding": "Определяет кодировку текста. Если не установлена, используется кодировка, заданная для данного объекта ЧтениеДанных. Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки. Значение по умолчанию: Неопределено. Типы: КодировкаТекста (TextEncoding), Строка (String)"
                }
              }
            }
          },
          "ПрочитатьСтроку": {
            "name": "ПрочитатьСтроку",
            "name_en": "ReadLine",
            "description": "Выполняет чтение строки текста до разделителя строки. Если разделитель не найден, чтение выполняется до конца потока. Если разделитель строки не задан явно, используется разделитель строки, указанный для данного экземпляра объекта ЧтениеДанных.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(encoding?: Произвольный, lineSplitter?: Строка): Строка",
                "Параметры": {
                  "encoding": "Кодировка текста. Если не установлена, используется кодировка, заданная для текущего экземпляра ЧтениеДанных. Значение по умолчанию: Неопределено. Типы: КодировкаТекста (TextEncoding), Строка (String)",
                  "lineSplitter": "Указывает строку, являющуюся разделителем строк в читаемых данных. Если параметр не указан, используется разделитель строк, указанный для текущего экземпляра объекта ЧтениеДанных. Значение по умолчанию: Неопределено."
                }
              }
            }
          },
          "ПрочитатьЦелое16": {
            "name": "ПрочитатьЦелое16",
            "name_en": "ReadInt16",
            "description": "Считывает 16-битное целое число из потока.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(byteOrder?: Произвольный): Число",
                "Параметры": {
                  "byteOrder": "Порядок байтов, используемый при чтении числа. Если не задан, используется порядок, определенный для текущего экземпляра ЧтениеДанных. Значение по умолчанию: Неопределено."
                }
              }
            }
          },
          "ПрочитатьЦелое32": {
            "name": "ПрочитатьЦелое32",
            "name_en": "ReadInt32",
            "description": "Прочитать 32-битное целое число из потока.",
            "returns": "Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(byteOrder?: Произвольный): Число",
                "Параметры": {
                  "byteOrder": "Порядок байтов, используемый при чтении числа. Если не задан, используется порядок, определенный для текущего экземпляра ЧтениеДанных. Значение по умолчанию: Неопределено."
                }
              }
            }
          },
          "ПрочитатьЦелое64": {
            "name": "ПрочитатьЦелое64",
            "name_en": "ReadInt64",
            "description": "Считывает 64-битное целое число из потока.",
            "returns": "Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(byteOrder?: Произвольный): Число",
                "Параметры": {
                  "byteOrder": "Устанавливает порядок байтов, используя который число будет прочитано. Если порядок байтов не задан, то используется порядок байтов, определенный для текущего экземпляра ЧтениеДанных. Значение по умолчанию: Неопределено."
                }
              }
            }
          },
          "Разделить": {
            "name": "Разделить",
            "name_en": "Split",
            "description": "Разделяет остаток данных по заданным разделителям.",
            "signature": {
              "По двоичному разделителю": {
                "СтрокаПараметров": "(separator: Произвольный): Произвольный",
                "Параметры": {
                  "separator": "Двоичный разделитель данных."
                }
              },
              "По строковому разделителю": {
                "СтрокаПараметров": "(separator: Строка, encoding?: Произвольный): Произвольный",
                "Параметры": {
                  "separator": "Разделитель данных в виде строки.",
                  "encoding": "Кодировка текста. Если не задана, то используется кодировка, заданная для текущего экземпляра объекта ЧтениеДанных. Значение по умолчанию: Неопределено. Типы: КодировкаТекста (TextEncoding), Строка (String)"
                }
              },
              "По набору смешанных разделителей": {
                "СтрокаПараметров": "(separators: Произвольный, encoding?: Произвольный): Произвольный",
                "Параметры": {
                  "separators": "Массив разделителей может содержать элементы типа БуферДвоичныхДанных или Строка.",
                  "encoding": "Кодировка текста. Если не установлена, используется кодировка, заданная для текущего экземпляра ЧтениеДанных. Значение по умолчанию: Неопределено. Типы: КодировкаТекста (TextEncoding), Строка (String)"
                }
              }
            }
          },
          "РазделитьНаЧастиПо": {
            "name": "РазделитьНаЧастиПо",
            "name_en": "SplitInPartsOf",
            "description": "Разделяет остаток данных на части заданного размера. Размер части указывается в байтах.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(partSizw: Число): Произвольный",
                "Параметры": {
                  "partSizw": "Размер части данных в байтах."
                }
              }
            }
          }
        }
      },
      "ЗаписьДанных": {
        "name": "ЗаписьДанных",
        "name_en": "DataWriter",
        "description": "Объект предназначен для удобной записи различных типов данных в приемник. Необходимо соблюдать следующий порядок работы с данным объектом:  - Создать или получить приемник даных. - Вызвать из приемника экземпляр объекта ЗаписьДанных. - Выполнить требуемые действия с помощью объекта. - Закрыть экземпляр объекта ЗаписьДанных. При необходимости использовать другие методы для работы с данными, требуется сначала закрыть экземпляр объекта ЗаписьДанных с помощью метода Закрыть, выполнить необходимые действия над данными, установить требуемую позицию для чтения из приемника и создать новый экземпляр ЗаписьДанных.",
        "properties": {
          "КодировкаТекста": {
            "name": "КодировкаТекста",
            "name_en": "TextEncoding",
            "description": "Кодировка текста по-умолчанию для данного экземпляра ЗаписьДанных. Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки.",
            "value": "КодировкаТекста (TextEncoding), Строка (String)",
            "access": "Чтение/Запись"
          },
          "КонвертируемыйРазделительСтрок": {
            "name": "КонвертируемыйРазделительСтрок",
            "name_en": "ConvertibleSplitterOfLines",
            "description": "Конвертируемый разделитель строк. Этот параметр влияет на поведение метода ЗаписатьСимволы.",
            "value": "Строка (String)",
            "access": "Чтение/Запись"
          },
          "ПорядокБайтов": {
            "name": "ПорядокБайтов",
            "name_en": "ByteOrder",
            "description": "Порядок байтов по умолчанию.",
            "value": "ПорядокБайтов (ByteOrder)",
            "access": "Чтение/Запись"
          },
          "РазделительСтрок": {
            "name": "РазделительСтрок",
            "name_en": "LineSplitter",
            "description": "Разделитель строк по-умолчанию. Это свойство влияет на поведение метода ЗаписатьСтроку.",
            "value": "Строка (String)",
            "access": "Чтение/Запись"
          }
        },
        "constructors": {
          "На основании имени файла": {
            "name": "На основании имени файла",
            "signature": "(fileName: Строка, textEncoding?: Произвольный, byteOrder?: Произвольный, lineSplitter?: Строка, append?: Булево, convertibleSplitterOfLines?: Строка, writeBOM?: Булево)",
            "description": "Создает объект ЗаписьДанных для записи в указанный файл. Если файл с таким именем не существует, он будет создан. Параметр &lt;Дописать&gt; определяет, будут ли данные записаны в начало или в конец файла. После завершения работы с объектом, до закрытия потока, переданного в конструктор, объект необходимо закрыть с помощью метода Закрыть или НачатьЗакрытие. При этом используемый файл будет закрыт автоматически.",
            "params": {
              "fileName": "Имя файла, в который будет выполнена запись.",
              "textEncoding": "Кодировка текста для создаваемого экземпляра ЗаписьДанных. Если не задана, то используется UTF-8. Значение по умолчанию: UTF8. Типы: КодировкаТекста (TextEncoding), Строка (String)",
              "byteOrder": "Порядок байтов, используемый по умолчанию для кодирования целых чисел при записи в поток. Значение по умолчанию: LittleEndian.",
              "lineSplitter": "Разделитель по умолчанию для строк, записываемых в поток. Если разделитель строк не задан, то используется строка ПС. Значение по умолчанию: ПС.",
              "append": "Определяет, будут ли данные записаны в начало или в конец файла:   - Если Истина, то при открытии существующего файла запись будет выполнена в конец файла.  - Иначе данные будут записываться с начала файла, перезаписывая существующие данные. Если заданный файл не существует, будет создан новый файл с указанным именем и значение параметра не повлияет на поведение конструктора. Значение по умолчанию: Ложь.",
              "convertibleSplitterOfLines": "Определяет разделение строк в файле для конвертации в стандартный перевод строк ПС. Значение по умолчанию: ВК + ПС.",
              "writeBOM": "Если в начало файла или потока требуется записать метку порядка байтов (BOM) для используемой кодировки текста, то данный параметр должен иметь значение Истина. Значение по умолчанию: Ложь."
            }
          },
          "На основании потока": {
            "name": "На основании потока",
            "signature": "(stream: Произвольный, textEncoding?: Произвольный, byteOrder?: Произвольный, lineSplitter?: Строка, convertibleSplitterOfLines?: Произвольный, writeBOM?: Булево)",
            "description": "Объект создается для записи в заданный поток. После завершения работы с объектом, до закрытия потока, переданного в конструктор, объект необходимо закрыть с помощью метода Закрыть или НачатьЗакрытие.",
            "params": {
              "stream": "Поток, в который производится запись данных. Типы: Поток (Stream), ПотокВПамяти (MemoryStream), ФайловыйПоток (FileStream)",
              "textEncoding": "Устанавливает кодировку текста для создаваемого экземпляра ЗаписьДанных. Если не задано, используется кодировка UTF-8. Значение по умолчанию: UTF8. Типы: КодировкаТекста (TextEncoding), Строка (String)",
              "byteOrder": "Порядок байтов, используемый по умолчанию для кодирования целых чисел при записи в поток. Значение по умолчанию: LittleEndian.",
              "lineSplitter": "Разделитель по умолчанию для строк, записываемых в поток. Если разделитель строк не задан, то используется строка ПС. Значение по умолчанию: ПС.",
              "convertibleSplitterOfLines": "Определяет разделение строк в файле для конвертации в стандартный перевод строк ПС. Значение по умолчанию: ВК + ПС.",
              "writeBOM": "Если в начало файла или потока требуется записать метку порядка байтов (BOM) для используемой кодировки текста, то данный параметр должен иметь значение Истина. Значение по умолчанию: Ложь."
            }
          }
        },
        "methods": {
          "Закрыть": {
            "name": "Закрыть",
            "name_en": "Close",
            "description": "Вызывает метод СброситьБуферы. Если целевой поток был создан при создании объекта ЗаписьДанных, целевой поток также закрывается.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "Записать": {
            "name": "Записать",
            "name_en": "Write",
            "description": "Записывает данные в целевой поток.",
            "remarks": "Запись двоичных данных",
            "signature": {
              "default": {
                "СтрокаПараметров": "(binaryDataOrReadResult: Произвольный)",
                "Параметры": {
                  "binaryDataOrReadResult": "Записать экземпляр объекта ДвоичныеДанные в поток."
                }
              }
            }
          },
          "ЗаписатьБайт": {
            "name": "ЗаписатьБайт",
            "name_en": "WriteByte",
            "description": "Записывает один байт в целевой поток.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(number: Число)",
                "Параметры": {
                  "number": "Целое число, которое будет записано в целевой поток. Значение числа должно находиться в диапазоне от 0 до 255."
                }
              }
            }
          },
          "ЗаписатьБуферДвоичныхДанных": {
            "name": "ЗаписатьБуферДвоичныхДанных",
            "name_en": "WriteBinaryDataBuffer",
            "description": "Записать байты из буфера двоичных данных в целевой поток.",
            "signature": {
              "Запись буфера": {
                "СтрокаПараметров": "(buffer: Произвольный)",
                "Параметры": {
                  "buffer": "Буфер двоичных данных, все байты которого будут записаны в целевой поток."
                }
              },
              "Запись части байтов из буфера": {
                "СтрокаПараметров": "(buffer: Произвольный, positionInBuffer: Число, number: Число)",
                "Параметры": {
                  "buffer": "Буфер двоичных данных, который используется в качестве источника данных для записи в целевой поток.",
                  "positionInBuffer": "Позиция в буфере, начиная с которой выполняется чтение байтов для записи в целевой поток.",
                  "number": "Количество байтов, которые требуется записать в целевой поток."
                }
              }
            }
          },
          "ЗаписатьСимволы": {
            "name": "ЗаписатьСимволы",
            "name_en": "WriteChars",
            "description": "Записывает символы заданной строки в целевой поток.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(line: Строка, encoding?: Произвольный)",
                "Параметры": {
                  "line": "Строка, символы которой будут записаны в поток.",
                  "encoding": "Определяет кодировку текста для записи строки. Если не установлена, используется кодировка, заданная для данного объекта ЗаписьДанных. Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки."
                }
              }
            }
          },
          "ЗаписатьСтроку": {
            "name": "ЗаписатьСтроку",
            "name_en": "WriteLine",
            "description": "Записывает строку в целевой поток. Сначала записываются все символы строки, затем - разделитель строк.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(line: Строка, encoding?: Произвольный, lineSplitter?: Строка)",
                "Параметры": {
                  "line": "Строка, которая будет записана в поток.",
                  "encoding": "Определяет кодировку текста для записи строки. Если не установлена, используется кодировка, заданная для данного объекта ЗаписьДанных. Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки. Значение по умолчанию: Неопределено. Типы: КодировкаТекста (TextEncoding), Строка (String)",
                  "lineSplitter": "Указывает строку, являющуюся разделителем строк в потоке после записи символов строк. Если параметр не указан, используется разделитель строк, указанный для текущего экземпляра объекта ЗаписьДанных. Значение по умолчанию: Неопределено."
                }
              }
            }
          },
          "ЗаписатьЦелое16": {
            "name": "ЗаписатьЦелое16",
            "name_en": "WriteInt16",
            "description": "Записывает 16-разрядное число в целевой поток.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(number: Число, byteOrder?: Произвольный)",
                "Параметры": {
                  "number": "Число, которое будет записано в целевой поток. Значение числа должно находиться в диапазоне от 0 до 65535.",
                  "byteOrder": "Порядок байтов, который будет использован для кодировки числа при записи. Если не установлен, то будет использован порядок байтов, заданный для текущего экземпляра объекта ЗаписьДанных. Значение по умолчанию: Неопределено."
                }
              }
            }
          },
          "ЗаписатьЦелое32": {
            "name": "ЗаписатьЦелое32",
            "name_en": "WriteInt32",
            "description": "Записать целое 32-битное число в целевой поток.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(number: Число, byteOrder?: Произвольный)",
                "Параметры": {
                  "number": "Целое число, которое будет записано в целевой поток. Значение числа должно находиться в диапазоне от 0 до 2^32-1.",
                  "byteOrder": "Порядок байтов, который будет использован для кодировки числа при записи. Если не установлен, то будет использован порядок байтов, заданный для текущего экземпляра объекта ЗаписьДанных. Значение по умолчанию: Неопределено."
                }
              }
            }
          },
          "ЗаписатьЦелое64": {
            "name": "ЗаписатьЦелое64",
            "name_en": "WriteInt64",
            "description": "Записывает целое 16-битное число в целевой поток.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(number: Число, byteOrder?: Произвольный)",
                "Параметры": {
                  "number": "Целое число, которое будет записано в целевой поток. Значение числа должно находиться в диапазоне от 0 до 2^64-1.",
                  "byteOrder": "Порядок байтов, который будет использован для кодировки числа при записи. Если не установлен, то будет использован порядок байтов, заданный для текущего экземпляра объекта ЗаписьДанных. Значение по умолчанию: Неопределено."
                }
              }
            }
          },
          "СброситьБуферы": {
            "name": "СброситьБуферы",
            "name_en": "Flush",
            "description": "Сбрасывает все внутренние буферы в целевой поток, после чего вызывает метод СброситьБуферы целевого потока.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ЦелевойПоток": {
            "name": "ЦелевойПоток",
            "name_en": "TargetStream",
            "description": "Возвращает целевой поток, в который выполняется запись.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Произвольный",
                "Параметры": {}
              }
            }
          }
        }
      },
      "МенеджерФайловыхПотоков": {
        "name": "МенеджерФайловыхПотоков",
        "name_en": "FileStreamsManager",
        "description": "Предоставляет методы для использования в типовых сценариях работы с файлами.",
        "methods": {
          "Открыть": {
            "name": "Открыть",
            "name_en": "Open",
            "description": "Открывает файл в заданном режиме с возможностью чтения и записи.  Файл открывается в режиме разделяемого чтения.",
            "returns": "Специализированная версия объекта Поток для работы данными, расположенными в файле на диске. Предоставляет возможность чтения из потока, записи в поток и изменения текущей позиции.  По умолчанию, все операции с файловым потоком являются буферизированными, размер буфера по умолчанию - 8 КБ. Размер буфера можно изменить, в том числе - полностью отключить буферизацию при вызове конструктора.  Следует учитывать, что помимо буферизации существует кэширование чтения и записи файлов в операционной системе, на которое невозможно повлиять программно.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(fileName: Произвольный, openingMode: Произвольный, fileAccess?: Произвольный, bufferSize?: Произвольный): ФайловыйПоток",
                "Параметры": {
                  "fileName": "Имя открываемого файла.",
                  "openingMode": "Режим открытия файла.",
                  "fileAccess": "Режим доступа к файлу.",
                  "bufferSize": "Размер буфера для операций с файлом."
                }
              }
            }
          },
          "ОткрытьДляДописывания": {
            "name": "ОткрытьДляДописывания",
            "name_en": "OpenForAppend",
            "description": "Открыть существующий файл для записи в конец. Если файл не существует, то будет создан новый файл. Запись в существующий файл выполняется с конца файла. Файл открывается в режиме разделяемого чтения.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(fileName: Строка): Произвольный",
                "Параметры": {
                  "fileName": "Имя открываемого файла."
                }
              }
            }
          },
          "ОткрытьДляЗаписи": {
            "name": "ОткрытьДляЗаписи",
            "name_en": "OpenForWrite",
            "description": "Открывает существующий файл для записи. Файл открывается в режиме разделяемого чтения. Если файл не найден, будет создан новый файл. Запись в существующий файл производится с начала файла, замещая ранее сохраненные данные.",
            "returns": "Специализированная версия объекта Поток для работы данными, расположенными в файле на диске. Предоставляет возможность чтения из потока, записи в поток и изменения текущей позиции.  По умолчанию, все операции с файловым потоком являются буферизированными, размер буфера по умолчанию - 8 КБ. Размер буфера можно изменить, в том числе - полностью отключить буферизацию при вызове конструктора.  Следует учитывать, что помимо буферизации существует кэширование чтения и записи файлов в операционной системе, на которое невозможно повлиять программно.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(fileName: Строка): Произвольный",
                "Параметры": {
                  "fileName": "Имя открываемого файла."
                }
              }
            }
          },
          "ОткрытьДляЧтения": {
            "name": "ОткрытьДляЧтения",
            "name_en": "OpenForRead",
            "description": "Открывает существующий файл для чтения с общим доступом на чтение.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(fileName: Строка): Произвольный",
                "Параметры": {
                  "fileName": "Имя открываемого файла."
                }
              }
            }
          },
          "Создать": {
            "name": "Создать",
            "name_en": "Create",
            "description": "Создает или перезаписывает файл и открывает поток с возможностью чтения и записи в файл. Файл открывается в режиме разделяемого чтения.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(fileName: Строка, bufferSize?: Число): Произвольный",
                "Параметры": {
                  "fileName": "Имя создаваемого файла.",
                  "bufferSize": "Размер буфера."
                }
              }
            }
          },
          "СоздатьВременныйФайл": {
            "name": "СоздатьВременныйФайл",
            "name_en": "CreateTempFile",
            "description": "НЕ РЕАЛИЗОВАН Создает временный файл и открывает его в монопольном режиме с возможностью чтения и записи. Дополнительно можно установить лимит в байтах, при превышении которого будет создан файл на диске. Пока размер файла не превышает данного лимита - вся работа ведётся в памяти.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(memoryLimit?: Число, bufferSize?: Число): Произвольный",
                "Параметры": {
                  "memoryLimit": "Максимальный объем памяти (в байтах), при превышении которого будет создан файл на диске. Значение по умолчанию: 65535.",
                  "bufferSize": "Размер буфера для операций с файлом (в байтах). Значение по умолчанию: 8192."
                }
              }
            }
          }
        }
      },
      "ПараметрыЗаписиJSON": {
        "name": "ПараметрыЗаписиJSON",
        "name_en": "JSONWriterSettings",
        "description": "Определяет набор параметров, используемых при записи JSON.",
        "properties": {
          "ИспользоватьДвойныеКавычки": {
            "name": "ИспользоватьДвойныеКавычки",
            "name_en": "UseDoubleQuotes",
            "description": "Определяет использование двойных кавычек при записи свойств и значений JSON. После создания объекта данное свойство имеет значение Истина.",
            "value": "Булево (Boolean)",
            "access": "Чтение"
          },
          "ПереносСтрок": {
            "name": "ПереносСтрок",
            "name_en": "NewLines",
            "description": "Управляет размещением начала и конца объектов и массивов, ключей и значений на новой строке. Также установка данного свойства в значение, отличное от Нет, добавляет пробел между именем свойства, двоеточием и значением. После создания объекта данное свойство имеет значение Авто.",
            "value": "ПереносСтрокJSON (JSONLineBreak)",
            "access": "Чтение"
          },
          "СимволыОтступа": {
            "name": "СимволыОтступа",
            "name_en": "PaddingSymbols",
            "description": "Определяет символы отступа, используемые при записи документа JSON. Свойство не используется, если свойство ПереносСтрокJSON установлено в значение Нет. После создания объекта данное свойство имеет значение - один пробельный символ.",
            "value": "Строка (String)",
            "access": "Чтение"
          },
          "ЭкранированиеСимволов": {
            "name": "ЭкранированиеСимволов",
            "name_en": "EscapeCharacters",
            "description": "Определяет способ экранирования символов при записи документа JSON. После создания объекта данное свойство имеет значение СимволыВнеASCII.",
            "value": "ЭкранированиеСимволовJSON (JSONCharactersEscapeMode)",
            "access": "Чтение"
          },
          "ЭкранироватьАмперсанд": {
            "name": "ЭкранироватьАмперсанд",
            "name_en": "EscapeAmpersand",
            "description": "Определяет, будет ли экранироваться знак амперсанда при записи документа JSON. После создания объекта данное свойство имеет значение Ложь.",
            "value": "Булево (Boolean)",
            "access": "Чтение"
          },
          "ЭкранироватьОдинарныеКавычки": {
            "name": "ЭкранироватьОдинарныеКавычки",
            "name_en": "EscapeSingleQuotes",
            "description": "Определяет, будет ли экранирован знак одинарной кавычки при записи документа JSON. Имеет значение Истина, если ИспользоватьДвойныеКавычки установлен Ложь. После создания объекта данное свойство имеет значение Ложь",
            "value": "Булево (Boolean)",
            "access": "Чтение"
          },
          "ЭкранироватьРазделителиСтрок": {
            "name": "ЭкранироватьРазделителиСтрок",
            "name_en": "EscapeLineTerminators",
            "description": "Определяет экранирование символов \"U+2028\" (разделитель строк) и \"U+2029\" (разделитель абзацев) для совместимости с JavaScript. После создания объекта данное свойство имеет значение Истина.",
            "value": "Булево (Boolean)",
            "access": "Чтение"
          },
          "ЭкранироватьСлеш": {
            "name": "ЭкранироватьСлеш",
            "name_en": "EscapeSlash",
            "description": "Определяет, будет ли экранироваться слеш (косая черта) при записи значения. После создания объекта данное свойство имеет значение Ложь.",
            "value": "Булево (Boolean)",
            "access": "Чтение"
          },
          "ЭкранироватьУгловыеСкобки": {
            "name": "ЭкранироватьУгловыеСкобки",
            "name_en": "EscapeAngleBrackets",
            "description": "Определяет, будут ли экранированы знаки угловых скобок при записи документа JSON. После создания объекта данное свойство имеет значение Ложь.",
            "value": "Булево (Boolean)",
            "access": "Чтение"
          }
        },
        "constructors": {
          "По описанию параметров записи": {
            "name": "По описанию параметров записи",
            "signature": "(newLines?: Произвольный, paddingSymbols?: Произвольный, useDoubleQuotes?: Произвольный, escapeCharacters?: Произвольный, escapeAngleBrackets?: Произвольный, escapeLineTerminators?: Произвольный, escapeAmpersand?: Произвольный, escapeSingleQuotes?: Произвольный, escapeSlash?: Произвольный)",
            "description": "Создает объект параметров записи JSON.",
            "params": {
              "newLines": "Определяет способ переноса строк, который будет использован при записи данных JSON. Значение по умолчанию: Авто.",
              "paddingSymbols": "Определяет символы отступа, используемые при записи данных JSON. Применяется только, если значение ПереносСтрокJSON отлично от Нет. Значение по умолчанию: \" \".",
              "useDoubleQuotes": "Определяет, будут ли при записи имена свойств JSON записываться в двойных кавычках. Значение по умолчанию: Истина.",
              "escapeCharacters": "Определяет используемый способ экранирования (замены) символов при записи данных JSON. Значение по умолчанию: Нет.",
              "escapeAngleBrackets": "Определяет, будут ли при записи экранироваться символы '&lt;' и '&gt;'. Значение по умолчанию: Ложь.",
              "escapeLineTerminators": "Определяет, будут ли экранироваться разделители строк - U+2028 (line-separator) и U+2029 (page-separator). Значение по умолчанию: Истина.",
              "escapeAmpersand": "Определяет, будет ли при записи экранироваться символ амперсанда '&amp;'. Значение по умолчанию: Ложь.",
              "escapeSingleQuotes": "Определяет, будут ли экранироваться одинарные кавычки. Устанавливается в значение Истина, если ИспользоватьДвойныеКавычки установлено в Ложь. Значение по умолчанию: Ложь.",
              "escapeSlash": "Определяет, будет ли экранироваться слеш (косая черта) при записи значения. Значение по умолчанию: Ложь."
            }
          },
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "()"
          }
        }
      },
      "Массив": {
        "name": "Массив",
        "name_en": "Array",
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "()"
          },
          "По количеству элементов": {
            "name": "По количеству элементов",
            "signature": "(dimensions: Произвольный[])",
            "description": "Позволяет задать измерения массива при его создании",
            "params": {
              "dimensions": "Числовые размерности массива. Например, \"Массив(2,3)\", создает двумерный массив 2х3."
            }
          }
        },
        "methods": {
          "Количество": {
            "name": "Количество",
            "name_en": "Count",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "Очистить": {
            "name": "Очистить",
            "name_en": "Clear",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "Добавить": {
            "name": "Добавить",
            "name_en": "Add",
            "signature": {
              "default": {
                "СтрокаПараметров": "(value: Произвольный)",
                "Параметры": {}
              }
            }
          },
          "Вставить": {
            "name": "Вставить",
            "name_en": "Insert",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число, value: Произвольный)",
                "Параметры": {}
              }
            }
          },
          "Найти": {
            "name": "Найти",
            "name_en": "Find",
            "signature": {
              "default": {
                "СтрокаПараметров": "(what: Произвольный): Произвольный",
                "Параметры": {}
              }
            }
          },
          "Удалить": {
            "name": "Удалить",
            "name_en": "Delete",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число)",
                "Параметры": {}
              }
            }
          },
          "ВГраница": {
            "name": "ВГраница",
            "name_en": "UBound",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "Получить": {
            "name": "Получить",
            "name_en": "Get",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число): Произвольный",
                "Параметры": {}
              }
            }
          },
          "Установить": {
            "name": "Установить",
            "name_en": "Set",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число, value: Произвольный)",
                "Параметры": {}
              }
            }
          }
        }
      },
      "Консоль": {
        "name": "Консоль",
        "name_en": "Console",
        "description": "Класс представляет собой инструмент доступа к системной консоли. Предназначен для низкоуровнего манипулирования выводом в консоль.",
        "properties": {
          "НажатаКлавиша": {
            "name": "НажатаКлавиша",
            "name_en": "KeyPressed",
            "access": "Чтение"
          },
          "КурсорЛево": {
            "name": "КурсорЛево",
            "name_en": "CursorLeft",
            "access": "Чтение/Запись"
          },
          "КурсорВерх": {
            "name": "КурсорВерх",
            "name_en": "CursorTop",
            "access": "Чтение/Запись"
          },
          "Ширина": {
            "name": "Ширина",
            "name_en": "Width",
            "access": "Чтение"
          },
          "Высота": {
            "name": "Высота",
            "name_en": "Height",
            "access": "Чтение"
          },
          "ЦветТекста": {
            "name": "ЦветТекста",
            "name_en": "TextColor",
            "access": "Чтение/Запись"
          },
          "ЦветФона": {
            "name": "ЦветФона",
            "name_en": "BackgroundColor",
            "access": "Чтение/Запись"
          },
          "КодировкаВходногоПотока": {
            "name": "КодировкаВходногоПотока",
            "name_en": "InputEncoding",
            "description": "Возвращает или задает кодировку консоли, используемую при чтении входных данных.",
            "returns": "КодировкаТекста",
            "access": "Чтение/Запись"
          }
        },
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "()"
          }
        },
        "methods": {
          "ПрочитатьСтроку": {
            "name": "ПрочитатьСтроку",
            "name_en": "ReadLine",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Строка",
                "Параметры": {}
              }
            }
          },
          "Прочитать": {
            "name": "Прочитать",
            "name_en": "Read",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "Очистить": {
            "name": "Очистить",
            "name_en": "Clear",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ВывестиСтроку": {
            "name": "ВывестиСтроку",
            "name_en": "WriteLine",
            "signature": {
              "default": {
                "СтрокаПараметров": "(text: Строка)",
                "Параметры": {}
              }
            }
          },
          "Вывести": {
            "name": "Вывести",
            "name_en": "Write",
            "signature": {
              "default": {
                "СтрокаПараметров": "(text: Строка)",
                "Параметры": {}
              }
            }
          },
          "ВидимостьКурсора": {
            "name": "ВидимостьКурсора",
            "name_en": "CursorVisible",
            "signature": {
              "default": {
                "СтрокаПараметров": "(visible: Булево): Булево",
                "Параметры": {}
              }
            }
          },
          "Сигнал": {
            "name": "Сигнал",
            "name_en": "Beep",
            "description": "Воспроизводит звуковой сигнал.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          }
        }
      },
      "Файл": {
        "name": "Файл",
        "name_en": "File",
        "properties": {
          "Имя": {
            "name": "Имя",
            "name_en": "Name",
            "access": "Чтение"
          },
          "ИмяБезРасширения": {
            "name": "ИмяБезРасширения",
            "name_en": "BaseName",
            "access": "Чтение"
          },
          "ПолноеИмя": {
            "name": "ПолноеИмя",
            "name_en": "FullName",
            "access": "Чтение"
          },
          "Путь": {
            "name": "Путь",
            "name_en": "Path",
            "access": "Чтение"
          },
          "Расширение": {
            "name": "Расширение",
            "name_en": "Extension",
            "access": "Чтение"
          }
        },
        "constructors": {
          "По имени файла": {
            "name": "По имени файла",
            "signature": "(name: Произвольный)"
          }
        },
        "methods": {
          "Существует": {
            "name": "Существует",
            "name_en": "Exist",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Булево",
                "Параметры": {}
              }
            }
          },
          "Размер": {
            "name": "Размер",
            "name_en": "Size",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "ПолучитьНевидимость": {
            "name": "ПолучитьНевидимость",
            "name_en": "GetHidden",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Булево",
                "Параметры": {}
              }
            }
          },
          "ПолучитьТолькоЧтение": {
            "name": "ПолучитьТолькоЧтение",
            "name_en": "GetReadOnly",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Булево",
                "Параметры": {}
              }
            }
          },
          "ПолучитьВремяИзменения": {
            "name": "ПолучитьВремяИзменения",
            "name_en": "GetModificationTime",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Дата",
                "Параметры": {}
              }
            }
          },
          "ПолучитьВремяСоздания": {
            "name": "ПолучитьВремяСоздания",
            "name_en": "GetCreationTime",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Дата",
                "Параметры": {}
              }
            }
          },
          "УстановитьНевидимость": {
            "name": "УстановитьНевидимость",
            "name_en": "SetHidden",
            "signature": {
              "default": {
                "СтрокаПараметров": "(value: Булево)",
                "Параметры": {}
              }
            }
          },
          "УстановитьТолькоЧтение": {
            "name": "УстановитьТолькоЧтение",
            "name_en": "SetReadOnly",
            "signature": {
              "default": {
                "СтрокаПараметров": "(value: Булево)",
                "Параметры": {}
              }
            }
          },
          "УстановитьВремяИзменения": {
            "name": "УстановитьВремяИзменения",
            "name_en": "SetModificationTime",
            "signature": {
              "default": {
                "СтрокаПараметров": "(dateTime: Дата)",
                "Параметры": {}
              }
            }
          },
          "ЭтоКаталог": {
            "name": "ЭтоКаталог",
            "name_en": "IsDirectory",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Булево",
                "Параметры": {}
              }
            }
          },
          "ЭтоФайл": {
            "name": "ЭтоФайл",
            "name_en": "IsFile",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Булево",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ФиксированныйМассив": {
        "name": "ФиксированныйМассив",
        "name_en": "FixedArray",
        "constructors": {
          "На основании обычного массива": {
            "name": "На основании обычного массива",
            "signature": "(source: Произвольный)"
          }
        },
        "methods": {
          "Количество": {
            "name": "Количество",
            "name_en": "Count",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "Найти": {
            "name": "Найти",
            "name_en": "Find",
            "signature": {
              "default": {
                "СтрокаПараметров": "(what: Произвольный): Произвольный",
                "Параметры": {}
              }
            }
          },
          "ВГраница": {
            "name": "ВГраница",
            "name_en": "UBound",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "Получить": {
            "name": "Получить",
            "name_en": "Get",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число): Произвольный",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ФиксированноеСоответствие": {
        "name": "ФиксированноеСоответствие",
        "name_en": "FixedMap",
        "constructors": {
          "Из соответствия": {
            "name": "Из соответствия",
            "signature": "(source: Произвольный)"
          }
        },
        "methods": {
          "Получить": {
            "name": "Получить",
            "name_en": "Get",
            "signature": {
              "default": {
                "СтрокаПараметров": "(key: Произвольный): Произвольный",
                "Параметры": {}
              }
            }
          },
          "Количество": {
            "name": "Количество",
            "name_en": "Count",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ФиксированнаяСтруктура": {
        "name": "ФиксированнаяСтруктура",
        "name_en": "FixedStructure",
        "constructors": {
          "Из структуры": {
            "name": "Из структуры",
            "signature": "(structure: Произвольный)",
            "description": "Создает фиксированную структуру по исходной структуре",
            "params": {
              "structure": "Исходная структура"
            }
          },
          "По ключам и значениям": {
            "name": "По ключам и значениям",
            "signature": "(strProperties: Произвольный, args: Произвольный[])",
            "description": "Создает фиксированную структуру по заданному перечню свойств и значений",
            "params": {
              "strProperties": "Строка с именами свойств, указанными через запятую.",
              "args": "Значения свойств. Каждое значение передается, как отдельный параметр."
            }
          }
        },
        "methods": {
          "Свойство": {
            "name": "Свойство",
            "name_en": "Property",
            "signature": {
              "default": {
                "СтрокаПараметров": "(name: Строка, value?: Произвольный): Булево",
                "Параметры": {}
              }
            }
          },
          "Количество": {
            "name": "Количество",
            "name_en": "Count",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          }
        }
      },
      "Процесс": {
        "name": "Процесс",
        "name_en": "Process",
        "description": "Позволяет управлять процессом операционной системы. Получать текст из стандартных потоков, проверять активность, pid, завершать процесс и т.п.",
        "properties": {
          "КодировкаВывода": {
            "name": "КодировкаВывода",
            "name_en": "OutputEncoding",
            "description": "Устанавливает кодировку в которой будут считываться стандартные потоки вывода и ошибок.",
            "access": "Чтение"
          },
          "ПотокВывода": {
            "name": "ПотокВывода",
            "name_en": "StdOut",
            "description": "ПотокВыводаТекста. Стандартный поток вывода (stdout)    в методе \"Завершен\" смотрите пример правильной обработки цикла ожидания завершения процесса:",
            "access": "Чтение"
          },
          "ПотокОшибок": {
            "name": "ПотокОшибок",
            "name_en": "StdErr",
            "description": "ПотокВыводаТекста. Стандартный поток вывода ошибок (stderr)    в методе \"Завершен\" смотрите пример правильной обработки цикла ожидания завершения процесса:",
            "access": "Чтение"
          },
          "ПотокВвода": {
            "name": "ПотокВвода",
            "name_en": "StdIn",
            "description": "ПотокВводаТекста. Стандартный поток ввода (stdin)",
            "access": "Чтение"
          },
          "Завершен": {
            "name": "Завершен",
            "name_en": "HasExited",
            "description": "Флаг указывает, что процесс завершен (или нет)",
            "example": "// Пример правильной обработки цикла ожидания завершения процесса:<br>// Процесс не завершается, пока любой из потоков (stdout, stderr) открыт для чтения.<br>// Процесс висит и ждет, пока его освободят от текста в обоих потоках.<br> Пока НЕ Процесс.Завершен ИЛИ Процесс.ПотокВывода.ЕстьДанные ИЛИ Процесс.ПотокОшибок.ЕстьДанные Цикл<br>    Если ПериодОпросаВМиллисекундах &lt;&gt; 0 Тогда<br>        Приостановить(ПериодОпросаВМиллисекундах);<br>    КонецЕсли;<br><br>    ОчереднаяСтрокаВывода = Процесс.ПотокВывода.Прочитать();<br>    ОчереднаяСтрокаОшибок = Процесс.ПотокОшибок.Прочитать();<br>    Если Не ПустаяСтрока(ОчереднаяСтрокаВывода) Тогда<br>        Сообщить(ОчереднаяСтрокаВывода, СтатусСообщения.Информация);<br>    КонецЕсли;<br><br>    Если Не ПустаяСтрока(ОчереднаяСтрокаОшибок) Тогда<br>        Сообщить(ОчереднаяСтрокаОшибок, СтатусСообщения.Важное);<br>    КонецЕсли;<br>КонецЦикла;",
            "access": "Чтение"
          },
          "КодВозврата": {
            "name": "КодВозврата",
            "name_en": "ExitCode",
            "description": "Код возврата завершенного процесса.",
            "access": "Чтение"
          },
          "Идентификатор": {
            "name": "Идентификатор",
            "name_en": "ProcessId",
            "description": "PID процесса",
            "access": "Чтение"
          }
        },
        "methods": {
          "Запустить": {
            "name": "Запустить",
            "name_en": "Start",
            "description": "Запустить процесс на выполнение.    в методе \"Завершен\" смотрите пример правильной обработки цикла ожидания завершения процесса:",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ОжидатьЗавершения": {
            "name": "ОжидатьЗавершения",
            "name_en": "WaitForExit",
            "description": "Приостановить выполнение скрипта и ожидать завершения процесса.",
            "returns": "Булево. Ложь, если таймаут истек.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(timeout?: Произвольный): Булево",
                "Параметры": {
                  "timeout": "Число. Таймаут в миллисекундах."
                }
              }
            }
          },
          "Завершить": {
            "name": "Завершить",
            "name_en": "Stop",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ПотокВыводаТекста": {
        "name": "ПотокВыводаТекста",
        "name_en": "TextOutputStream",
        "description": "Стандартный поток вывода текста.",
        "properties": {
          "ЕстьДанные": {
            "name": "ЕстьДанные",
            "name_en": "HasData",
            "description": "Признак показывает, что в потоке есть данные.",
            "example": "Пока Поток.ЕстьДанные Цикл<br>   Сообщить(Поток.ПрочитатьСтроку());<br>КонецЦикла;",
            "access": "Чтение"
          }
        },
        "methods": {
          "Прочитать": {
            "name": "Прочитать",
            "name_en": "Read",
            "description": "Прочитать все данные из потока.",
            "returns": "Строка",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Произвольный",
                "Параметры": {}
              }
            }
          },
          "ПрочитатьСтроку": {
            "name": "ПрочитатьСтроку",
            "name_en": "ReadLine",
            "description": "Прочитать одну строку из потока.",
            "returns": "Строка",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Произвольный",
                "Параметры": {}
              }
            }
          },
          "Закрыть": {
            "name": "Закрыть",
            "name_en": "Close",
            "description": "Закрыть поток.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ПотокВводаТекста": {
        "name": "ПотокВводаТекста",
        "name_en": "TextInputStream",
        "description": "Стандартный поток ввода текста. Используется для взаимодействия с работающими процессами. Методы работают подобно одноименным методам объекта ЗаписьТекста.",
        "methods": {
          "Записать": {
            "name": "Записать",
            "name_en": "Write",
            "signature": {
              "default": {
                "СтрокаПараметров": "(data: Строка)",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьСтроку": {
            "name": "ЗаписатьСтроку",
            "name_en": "WriteLine",
            "signature": {
              "default": {
                "СтрокаПараметров": "(data: Строка)",
                "Параметры": {}
              }
            }
          },
          "Закрыть": {
            "name": "Закрыть",
            "name_en": "Close",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          }
        }
      },
      "УникальныйИдентификатор": {
        "name": "УникальныйИдентификатор",
        "name_en": "UUID",
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "()"
          },
          "Из строки": {
            "name": "Из строки",
            "signature": "(uuidString: Произвольный)"
          }
        }
      },
      "КлючИЗначение": {
        "name": "КлючИЗначение",
        "name_en": "KeyAndValue",
        "properties": {
          "Ключ": {
            "name": "Ключ",
            "name_en": "Key",
            "access": "Чтение"
          },
          "Значение": {
            "name": "Значение",
            "name_en": "Value",
            "access": "Чтение"
          }
        }
      },
      "Соответствие": {
        "name": "Соответствие",
        "name_en": "Map",
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "()"
          }
        },
        "methods": {
          "Вставить": {
            "name": "Вставить",
            "name_en": "Insert",
            "signature": {
              "default": {
                "СтрокаПараметров": "(key: Произвольный, val: Произвольный)",
                "Параметры": {}
              }
            }
          },
          "Получить": {
            "name": "Получить",
            "name_en": "Get",
            "signature": {
              "default": {
                "СтрокаПараметров": "(key: Произвольный): Произвольный",
                "Параметры": {}
              }
            }
          },
          "Количество": {
            "name": "Количество",
            "name_en": "Count",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "Очистить": {
            "name": "Очистить",
            "name_en": "Clear",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "Удалить": {
            "name": "Удалить",
            "name_en": "Delete",
            "signature": {
              "default": {
                "СтрокаПараметров": "(key: Произвольный)",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ГенераторСлучайныхЧисел": {
        "name": "ГенераторСлучайныхЧисел",
        "name_en": "RandomNumberGenerator",
        "constructors": {
          "Конструктор по умолчанию": {
            "name": "Конструктор по умолчанию",
            "signature": "(seed: Произвольный)",
            "description": "Формирует ГСЧ с возможностью указания начального числа.",
            "params": {
              "seed": "Начальное число. Последовательность случайных чисел для одного и того же начального числа будет одинакова"
            }
          },
          "Формирование неинициализированного объекта": {
            "name": "Формирование неинициализированного объекта",
            "signature": "()"
          }
        },
        "methods": {
          "СлучайноеЧисло": {
            "name": "СлучайноеЧисло",
            "name_en": "RandomNumber",
            "signature": {
              "default": {
                "СтрокаПараметров": "(low?: Произвольный, high?: Произвольный): Произвольный",
                "Параметры": {}
              }
            }
          }
        }
      },
      "Рефлектор": {
        "name": "Рефлектор",
        "name_en": "Reflector",
        "description": "Рефлектор предназначен для получения метаданных объектов во время выполнения. Как правило, рефлексия используется для проверки наличия у объекта определенных свойств/методов. В OneScript рефлексию можно применять для вызова методов объектов по именам методов.",
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "()"
          }
        },
        "methods": {
          "ВызватьМетод": {
            "name": "ВызватьМетод",
            "name_en": "CallMethod",
            "description": "Вызывает метод по его имени.",
            "returns": "Если вызывается функция, то возвращается ее результат. В противном случае возвращается Неопределено.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(target: ИнформацияОСценарии, methodName: Строка, arguments?: Массив): Произвольный",
                "Параметры": {
                  "target": "Объект, метод которого нужно вызвать.",
                  "methodName": "Имя метода для вызова",
                  "arguments": "Массив аргументов, передаваемых методу. Следует учесть, что все параметры нужно передавать явно, в том числе необязательные."
                }
              }
            }
          },
          "МетодСуществует": {
            "name": "МетодСуществует",
            "name_en": "MethodExists",
            "description": "Проверяет существование указанного метода у переданного объекта..",
            "returns": "Истину, если метод существует, и Ложь в обратном случае.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(target: ИнформацияОСценарии, methodName: Строка): Булево",
                "Параметры": {
                  "target": "Объект, из которого получаем таблицу методов.",
                  "methodName": "Имя метода для вызова"
                }
              }
            }
          },
          "ПолучитьТаблицуМетодов": {
            "name": "ПолучитьТаблицуМетодов",
            "name_en": "GetMethodsTable",
            "description": "Получает таблицу методов для переданного объекта..",
            "returns": "Таблица значений с 3 колонками - Имя, КоличествоПараметров, ЭтоФункция.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(target: ИнформацияОСценарии): ТаблицаЗначений",
                "Параметры": {
                  "target": "Объект, из которого получаем таблицу методов."
                }
              }
            }
          },
          "ПолучитьТаблицуСвойств": {
            "name": "ПолучитьТаблицуСвойств",
            "name_en": "GetPropertiesTable",
            "description": "Получает таблицу свойств для переданного объекта..",
            "returns": "Таблица значений с 1 колонкой - Имя",
            "signature": {
              "default": {
                "СтрокаПараметров": "(target: ИнформацияОСценарии): ТаблицаЗначений",
                "Параметры": {
                  "target": "Объект, из которого получаем таблицу свойств."
                }
              }
            }
          }
        }
      },
      "СистемнаяИнформация": {
        "name": "СистемнаяИнформация",
        "name_en": "SystemInfo",
        "description": "Класс предоставляет информацию о системе",
        "properties": {
          "ИмяКомпьютера": {
            "name": "ИмяКомпьютера",
            "name_en": "MachineName",
            "description": "Имя машины, на которой выполняется сценарий",
            "access": "Чтение"
          },
          "ВерсияОС": {
            "name": "ВерсияОС",
            "name_en": "OSVersion",
            "description": "Версия операционной системы, на которой выполняется сценарий",
            "access": "Чтение"
          },
          "Версия": {
            "name": "Версия",
            "name_en": "Version",
            "description": "Версия OneScript, выполняющая данный сценарий",
            "access": "Чтение"
          },
          "ПользовательОС": {
            "name": "ПользовательОС",
            "name_en": "OSUser",
            "description": "Имя пользователя ОС с учетом домена Формат строки: \\\\ИмяДомена\\ИмяПользователя.",
            "access": "Чтение"
          },
          "Это64БитнаяОперационнаяСистема": {
            "name": "Это64БитнаяОперационнаяСистема",
            "name_en": "Is64BitOperatingSystem",
            "description": "Определяет, является ли текущая операционная система 64-разрядной.",
            "access": "Чтение"
          },
          "КоличествоПроцессоров": {
            "name": "КоличествоПроцессоров",
            "name_en": "ProcessorCount",
            "description": "Возвращает число процессоров. 32-битовое целое число со знаком, которое возвращает количество процессоров на текущем компьютере.  Значение по умолчанию отсутствует. Если текущий компьютер содержит несколько групп процессоров,  данное свойство возвращает число логических процессоров, доступных для использования средой CLR",
            "access": "Чтение"
          },
          "РазмерСистемнойСтраницы": {
            "name": "РазмерСистемнойСтраницы",
            "name_en": "SystemPageSize",
            "description": "Возвращает количество байтов на странице памяти операционной системы",
            "access": "Чтение"
          },
          "ВремяРаботыСМоментаЗагрузки": {
            "name": "ВремяРаботыСМоментаЗагрузки",
            "name_en": "TickCount",
            "description": "Возвращает время, истекшее с момента загрузки системы (в миллисекундах).",
            "access": "Чтение"
          },
          "ИменаЛогическихДисков": {
            "name": "ИменаЛогическихДисков",
            "name_en": "GetLogicalDrives",
            "description": "Возвращает массив строк, содержащий имена логических дисков текущего компьютера.",
            "access": "Чтение"
          }
        },
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "()"
          }
        },
        "methods": {
          "ПолучитьПутьПапки": {
            "name": "ПолучитьПутьПапки",
            "name_en": "GetFolderPath",
            "description": "Возвращает путь для специальной папки. Поддерживаемые значения:  * МоиДокументы / MyDocuments             * ДанныеПриложений / ApplicationData * ЛокальныйКаталогДанныхПриложений / LocalApplicationData             * РабочийСтол / Desktop * КаталогРабочийСтол / DesktopDirectory * МояМузыка / MyMusic * МоиРисунки / MyPictures * Шаблоны / Templates * МоиВидеозаписи / MyVideos * ОбщиеШаблоны / CommonTemplates * ПрофильПользователя / UserProfile * ОбщийКаталогДанныхПриложения / CommonApplicationData",
            "returns": "Строка",
            "signature": {
              "default": {
                "СтрокаПараметров": "(folder: Произвольный): Строка",
                "Параметры": {
                  "folder": "Тип: СпециальнаяПапка"
                }
              }
            }
          },
          "ПеременныеСреды": {
            "name": "ПеременныеСреды",
            "name_en": "EnvironmentVariables",
            "description": "Возвращает соответствие переменных среды. Ключом является имя переменной, а значением - значение переменной",
            "example": "СИ = Новый СистемнаяИнформация();<br>Для Каждого Переменная Из СИ.ПеременныеСреды() Цикл<br>   Сообщить(Переменная.Ключ + \" = \" + Переменная.Значение);<br>КонецЦикла;",
            "returns": "Соответствие",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): ИнформацияОСценарии",
                "Параметры": {}
              }
            }
          },
          "УстановитьПеременнуюСреды": {
            "name": "УстановитьПеременнуюСреды",
            "name_en": "SetEnvironmentVariable",
            "description": "Позволяет установить переменную среды.  Переменная устанавливается в области видимости процесса и очищается после его завершения.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(varName: Строка, value: Строка)",
                "Параметры": {
                  "varName": "Имя переменной",
                  "value": "Значение переменной"
                }
              }
            }
          },
          "ПолучитьПеременнуюСреды": {
            "name": "ПолучитьПеременнуюСреды",
            "name_en": "GetEnvironmentVariable",
            "description": "Получить значение переменной среды.",
            "returns": "Строка. Значение переменной",
            "signature": {
              "default": {
                "СтрокаПараметров": "(varName: Строка): Произвольный",
                "Параметры": {
                  "varName": "Имя переменной"
                }
              }
            }
          }
        }
      },
      "ТекстовыйДокумент": {
        "name": "ТекстовыйДокумент",
        "name_en": "TextDocument",
        "properties": {
          "Вывод": {
            "name": "Вывод",
            "name_en": "Output",
            "description": "В 1С:Предприятие определяет возможность печати документа. В 1Script свойство не используется и его значение игнорируется",
            "access": "Чтение/Запись"
          },
          "ИспользуемоеИмяФайла": {
            "name": "ИспользуемоеИмяФайла",
            "name_en": "UsedFileName",
            "description": "Содержит полное имя файла с которым соединен ТекстовыйДокумент",
            "returns": "Строка",
            "access": "Чтение/Запись"
          },
          "КодЯзыкаМакета": {
            "name": "КодЯзыкаМакета",
            "name_en": "TemplateLanguageCode",
            "description": "Не используется. Реализован для совместимости API с 1С:Предприятие",
            "returns": "Строка",
            "access": "Чтение/Запись"
          },
          "Параметры": {
            "name": "Параметры",
            "name_en": "Parameters",
            "description": "Не используется. Реализован для совместимости API с 1С:Предприятие",
            "returns": "Неопределено",
            "access": "Чтение/Запись"
          },
          "РазделительСтрок": {
            "name": "РазделительСтрок",
            "name_en": "LineSeparator",
            "access": "Чтение/Запись"
          },
          "ТолькоПросмотр": {
            "name": "ТолькоПросмотр",
            "name_en": "ReadOnly",
            "description": "Не используется. Реализован для совместимости API с 1С:Предприятие",
            "access": "Чтение/Запись"
          }
        },
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "()"
          }
        },
        "methods": {
          "ВставитьСтроку": {
            "name": "ВставитьСтроку",
            "name_en": "InsertLine",
            "description": "Вставляет строку в документ",
            "signature": {
              "default": {
                "СтрокаПараметров": "(position: Число, line: Строка)",
                "Параметры": {
                  "position": "Позиция вставки",
                  "line": "Вставляемая строка"
                }
              }
            }
          },
          "ДобавитьСтроку": {
            "name": "ДобавитьСтроку",
            "name_en": "AddLine",
            "description": "Добавляет строку в конец текстового документа",
            "signature": {
              "default": {
                "СтрокаПараметров": "(line: Строка)",
                "Параметры": {
                  "line": "Добавляемая строка"
                }
              }
            }
          },
          "КоличествоСтрок": {
            "name": "КоличествоСтрок",
            "name_en": "LineCount",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "ПолучитьТекст": {
            "name": "ПолучитьТекст",
            "name_en": "GetText",
            "description": "Получает текст, находящийся в текстовом документе",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Строка",
                "Параметры": {}
              }
            }
          },
          "ПолучитьСтроку": {
            "name": "ПолучитьСтроку",
            "name_en": "GetLine",
            "description": "Получает строку по номеру",
            "returns": "Строка",
            "signature": {
              "default": {
                "СтрокаПараметров": "(lineNumber: Число): Строка",
                "Параметры": {
                  "lineNumber": "Номер строки в тексте"
                }
              }
            }
          },
          "ЗаменитьСтроку": {
            "name": "ЗаменитьСтроку",
            "name_en": "ReplaceLine",
            "description": "Заменяет содержимое строки по номеру",
            "signature": {
              "default": {
                "СтрокаПараметров": "(number: Число, newLine: Строка)",
                "Параметры": {
                  "number": "Номер заменяемой строки",
                  "newLine": "Новое значение строки"
                }
              }
            }
          },
          "Очистить": {
            "name": "Очистить",
            "name_en": "Clear",
            "description": "Очищает содержимое документа",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "УстановитьТекст": {
            "name": "УстановитьТекст",
            "name_en": "SetText",
            "description": "Устанавливает содержимое текстового документа",
            "signature": {
              "default": {
                "СтрокаПараметров": "(newText: Строка)",
                "Параметры": {
                  "newText": "Новый текст документа"
                }
              }
            }
          },
          "УдалитьСтроку": {
            "name": "УдалитьСтроку",
            "name_en": "DeleteLine",
            "description": "Удаляет строку по номеру",
            "signature": {
              "default": {
                "СтрокаПараметров": "(lineNumber: Число)",
                "Параметры": {
                  "lineNumber": "Номер удаляемой строки"
                }
              }
            }
          },
          "Прочитать": {
            "name": "Прочитать",
            "name_en": "Read",
            "description": "Читает содержимое из файла",
            "signature": {
              "default": {
                "СтрокаПараметров": "(path: Строка, encoding?: Произвольный, lineSeparator?: Строка)",
                "Параметры": {
                  "path": "Имя файла",
                  "encoding": "Кодировка",
                  "lineSeparator": "Разделитель строк в файле. FIXME: На данный момент параметр игнорируется, при чтении применяется разделитель для текущей ОС."
                }
              }
            }
          },
          "Записать": {
            "name": "Записать",
            "name_en": "Write",
            "description": "Записывает содержимое документа в файл",
            "signature": {
              "default": {
                "СтрокаПараметров": "(path: Строка, encoding?: Произвольный, lineSeparator?: Строка)",
                "Параметры": {
                  "path": "Путь файла",
                  "encoding": "Кодировка файла",
                  "lineSeparator": "Разделитель строк. По умолчанию - ВК+ПС"
                }
              }
            }
          }
        }
      },
      "ЧтениеТекста": {
        "name": "ЧтениеТекста",
        "name_en": "TextReader",
        "constructors": {
          "По имени файла без кодировки": {
            "name": "По имени файла без кодировки",
            "signature": "(path: Произвольный)"
          },
          "По имени файла": {
            "name": "По имени файла",
            "signature": "(path: Произвольный, encoding?: Произвольный, lineDelimiter?: Произвольный, eolDelimiter?: Произвольный)"
          },
          "Формирование неинициализированного объекта": {
            "name": "Формирование неинициализированного объекта",
            "signature": "()"
          }
        },
        "methods": {
          "Открыть": {
            "name": "Открыть",
            "name_en": "Open",
            "signature": {
              "default": {
                "СтрокаПараметров": "(path: Строка, encoding?: Произвольный, lineDelimiter?: Строка, eolDelimiter?: Строка)",
                "Параметры": {}
              }
            }
          },
          "Прочитать": {
            "name": "Прочитать",
            "name_en": "Read",
            "signature": {
              "default": {
                "СтрокаПараметров": "(size?: Число): Произвольный",
                "Параметры": {}
              }
            }
          },
          "ПрочитатьСтроку": {
            "name": "ПрочитатьСтроку",
            "name_en": "ReadLine",
            "signature": {
              "default": {
                "СтрокаПараметров": "(overridenLineDelimiter?: Строка): Произвольный",
                "Параметры": {}
              }
            }
          },
          "Закрыть": {
            "name": "Закрыть",
            "name_en": "Close",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ЗаписьТекста": {
        "name": "ЗаписьТекста",
        "name_en": "TextWriter",
        "constructors": {
          "По имени файла": {
            "name": "По имени файла",
            "signature": "(path: Произвольный, encoding?: Произвольный, lineDelimiter?: Произвольный, append?: Произвольный, eolReplacement?: Произвольный)",
            "description": "Создает объект с начальными значениями имени файла и кодировки.",
            "params": {
              "path": "Имя файла",
              "encoding": "Кодировка в виде строки",
              "lineDelimiter": "Символ - разделитель строк",
              "append": "Признак добавления в конец файла (необязательный)",
              "eolReplacement": "Разделитель строк в файле (необязательный)."
            }
          },
          "Формирование неинициализированного объекта": {
            "name": "Формирование неинициализированного объекта",
            "signature": "()"
          }
        },
        "methods": {
          "Открыть": {
            "name": "Открыть",
            "name_en": "Open",
            "description": "Открывает файл для записи.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(path: Строка, encoding?: Произвольный, lineDelimiter?: Строка, append?: Булево, eolReplacement?: Строка)",
                "Параметры": {
                  "path": "Путь к файлу",
                  "encoding": "Кодировка (необязательный). По умолчанию используется utf-8",
                  "lineDelimiter": "Разделитель строк (необязательный).",
                  "append": "Признак добавления в конец файла (необязательный)",
                  "eolReplacement": "Разделитель строк в файле (необязательный)."
                }
              }
            }
          },
          "Закрыть": {
            "name": "Закрыть",
            "name_en": "Close",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "Записать": {
            "name": "Записать",
            "name_en": "Write",
            "description": "Записывает текст \"как есть\"",
            "signature": {
              "default": {
                "СтрокаПараметров": "(what: Строка)",
                "Параметры": {
                  "what": "Текст для записи"
                }
              }
            }
          },
          "ЗаписатьСтроку": {
            "name": "ЗаписатьСтроку",
            "name_en": "WriteLine",
            "description": "Записывает текст и добавляет перевод строки",
            "signature": {
              "default": {
                "СтрокаПараметров": "(what: Строка, delimiter?: Произвольный)",
                "Параметры": {
                  "what": "Текст для записи",
                  "delimiter": "Разделитель строк"
                }
              }
            }
          }
        }
      },
      "Структура": {
        "name": "Структура",
        "name_en": "Structure",
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "()"
          },
          "По ключам и значениям": {
            "name": "По ключам и значениям",
            "signature": "(strProperties: Произвольный, args: Произвольный[])",
            "description": "Создает структуру по заданному перечню свойств и значений",
            "params": {
              "strProperties": "Строка с именами свойств, указанными через запятую.",
              "args": "Значения свойств. Каждое значение передается, как отдельный параметр."
            }
          }
        },
        "methods": {
          "Вставить": {
            "name": "Вставить",
            "name_en": "Insert",
            "signature": {
              "default": {
                "СтрокаПараметров": "(name: Строка, val?: Произвольный)",
                "Параметры": {}
              }
            }
          },
          "Удалить": {
            "name": "Удалить",
            "name_en": "Delete",
            "signature": {
              "default": {
                "СтрокаПараметров": "(name: Строка)",
                "Параметры": {}
              }
            }
          },
          "Свойство": {
            "name": "Свойство",
            "name_en": "Property",
            "signature": {
              "default": {
                "СтрокаПараметров": "(name: Строка, value?: Произвольный): Булево",
                "Параметры": {}
              }
            }
          },
          "Количество": {
            "name": "Количество",
            "name_en": "Count",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "Очистить": {
            "name": "Очистить",
            "name_en": "Clear",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          }
        }
      },
      "КвалификаторыЧисла": {
        "name": "КвалификаторыЧисла",
        "name_en": "NumberQualifiers",
        "properties": {
          "ДопустимыйЗнак": {
            "name": "ДопустимыйЗнак",
            "name_en": "AllowedSign",
            "access": "Чтение"
          },
          "Разрядность": {
            "name": "Разрядность",
            "name_en": "Digits",
            "access": "Чтение"
          },
          "РазрядностьДробнойЧасти": {
            "name": "РазрядностьДробнойЧасти",
            "name_en": "FractionDigits",
            "access": "Чтение"
          }
        },
        "constructors": {
          "На основании описания числа": {
            "name": "На основании описания числа",
            "signature": "(digits?: Произвольный, fractionDigits?: Произвольный, allowedSign?: Произвольный)"
          }
        }
      },
      "КвалификаторыСтроки": {
        "name": "КвалификаторыСтроки",
        "name_en": "StringQualifiers",
        "properties": {
          "Длина": {
            "name": "Длина",
            "name_en": "Length",
            "access": "Чтение"
          },
          "ДопустимаяДлина": {
            "name": "ДопустимаяДлина",
            "name_en": "AllowedLength",
            "access": "Чтение"
          }
        },
        "constructors": {
          "На основании описания строки": {
            "name": "На основании описания строки",
            "signature": "(length?: Произвольный, allowedLength?: Произвольный)"
          }
        }
      },
      "КвалификаторыДаты": {
        "name": "КвалификаторыДаты",
        "name_en": "DateQualifiers",
        "properties": {
          "ЧастиДаты": {
            "name": "ЧастиДаты",
            "name_en": "DateFractions",
            "access": "Чтение"
          }
        },
        "constructors": {
          "На основании описания даты": {
            "name": "На основании описания даты",
            "signature": "(dateFractions?: Произвольный)"
          }
        }
      },
      "КвалификаторыДвоичныхДанных": {
        "name": "КвалификаторыДвоичныхДанных",
        "name_en": "BinaryDataQualifiers",
        "properties": {
          "Длина": {
            "name": "Длина",
            "name_en": "Length",
            "access": "Чтение"
          },
          "ДопустимаяДлина": {
            "name": "ДопустимаяДлина",
            "name_en": "AllowedLength",
            "access": "Чтение"
          }
        },
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "(length?: Произвольный, allowedLength?: Произвольный)"
          }
        }
      },
      "ОписаниеТипов": {
        "name": "ОписаниеТипов",
        "name_en": "TypeDescription",
        "properties": {
          "КвалификаторыЧисла": {
            "name": "КвалификаторыЧисла",
            "name_en": "NumberQualifiers",
            "access": "Чтение"
          },
          "КвалификаторыСтроки": {
            "name": "КвалификаторыСтроки",
            "name_en": "StringQualifiers",
            "access": "Чтение"
          },
          "КвалификаторыДаты": {
            "name": "КвалификаторыДаты",
            "name_en": "DateQualifiers",
            "access": "Чтение"
          },
          "КвалификаторыДвоичныхДанных": {
            "name": "КвалификаторыДвоичныхДанных",
            "name_en": "BinaryDataQualifiers",
            "access": "Чтение"
          }
        },
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "(source?: Произвольный, p1?: Произвольный, p2?: Произвольный, p3?: Произвольный, p4?: Произвольный, p5?: Произвольный, p6?: Произвольный)"
          }
        },
        "methods": {
          "Типы": {
            "name": "Типы",
            "name_en": "Types",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Массив",
                "Параметры": {}
              }
            }
          },
          "СодержитТип": {
            "name": "СодержитТип",
            "name_en": "ContainsType",
            "signature": {
              "default": {
                "СтрокаПараметров": "(type: Произвольный): Булево",
                "Параметры": {}
              }
            }
          },
          "ПривестиЗначение": {
            "name": "ПривестиЗначение",
            "name_en": "AdjustValue",
            "signature": {
              "default": {
                "СтрокаПараметров": "(value?: Произвольный): Произвольный",
                "Параметры": {}
              }
            }
          }
        }
      },
      "Символы": {
        "name": "Символы",
        "name_en": "Chars",
        "properties": {
          "ПС": {
            "name": "ПС",
            "name_en": "LF",
            "description": "Символ перевода строки.",
            "value": "Символ перевода строки.",
            "access": "Чтение"
          },
          "ВК": {
            "name": "ВК",
            "name_en": "CR",
            "description": "Символ возврата каретки.",
            "value": "Символ возврата каретки.",
            "access": "Чтение"
          },
          "ВТаб": {
            "name": "ВТаб",
            "name_en": "VTab",
            "description": "Символ вертикальной табуляции.",
            "value": "Символ вертикальной табуляции.",
            "access": "Чтение"
          },
          "Таб": {
            "name": "Таб",
            "name_en": "Tab",
            "description": "Символ табуляции.",
            "value": "Символ горизонтальной табуляции.",
            "access": "Чтение"
          },
          "ПФ": {
            "name": "ПФ",
            "name_en": "FF",
            "description": "Символ промотки.",
            "value": "Символ промотки.",
            "access": "Чтение"
          },
          "НПП": {
            "name": "НПП",
            "name_en": "Nbsp",
            "description": "Символ неразрывного пробела.",
            "value": "Символ неразрывного пробела.",
            "access": "Чтение"
          }
        }
      },
      "ЭлементыZipФайла": {
        "name": "ЭлементыZipФайла",
        "name_en": "ZipFileEntries",
        "methods": {
          "Количество": {
            "name": "Количество",
            "name_en": "Count",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "Получить": {
            "name": "Получить",
            "name_en": "Get",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Произвольный): Произвольный",
                "Параметры": {}
              }
            }
          },
          "Найти": {
            "name": "Найти",
            "name_en": "Find",
            "signature": {
              "default": {
                "СтрокаПараметров": "(name: Строка): Произвольный",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ЭлементZipФайла": {
        "name": "ЭлементZipФайла",
        "name_en": "ZipFileEntry",
        "description": "Описание элемента, находящегося в Zip архиве.",
        "properties": {
          "ВремяИзменения": {
            "name": "ВремяИзменения",
            "name_en": "Modified",
            "access": "Чтение"
          },
          "Зашифрован": {
            "name": "Зашифрован",
            "name_en": "Encrypted",
            "access": "Чтение"
          },
          "Имя": {
            "name": "Имя",
            "name_en": "Name",
            "access": "Чтение"
          },
          "ИмяБезРасширения": {
            "name": "ИмяБезРасширения",
            "name_en": "NameWithoutExtension",
            "access": "Чтение"
          },
          "Невидимый": {
            "name": "Невидимый",
            "name_en": "Hidden",
            "access": "Чтение"
          },
          "ПолноеИмя": {
            "name": "ПолноеИмя",
            "name_en": "FullName",
            "access": "Чтение"
          },
          "Путь": {
            "name": "Путь",
            "name_en": "Path",
            "access": "Чтение"
          },
          "РазмерНесжатого": {
            "name": "РазмерНесжатого",
            "name_en": "UncompressedSize",
            "access": "Чтение"
          },
          "РазмерСжатого": {
            "name": "РазмерСжатого",
            "name_en": "CompressedSize",
            "access": "Чтение"
          },
          "Расширение": {
            "name": "Расширение",
            "name_en": "Extension",
            "access": "Чтение"
          },
          "ТолькоЧтение": {
            "name": "ТолькоЧтение",
            "name_en": "ReadOnly",
            "access": "Чтение"
          }
        }
      },
      "ЧтениеZipФайла": {
        "name": "ЧтениеZipФайла",
        "name_en": "ZipFileReader",
        "description": "Объект чтения ZIP файлов.",
        "properties": {
          "Элементы": {
            "name": "Элементы",
            "name_en": "Elements",
            "description": "Коллекция элементов архива.",
            "access": "Чтение"
          }
        },
        "constructors": {
          "Формирование неинициализированного объекта": {
            "name": "Формирование неинициализированного объекта",
            "signature": "()"
          },
          "По имени файла": {
            "name": "По имени файла",
            "signature": "(filename: Произвольный, password?: Произвольный)"
          }
        },
        "methods": {
          "Открыть": {
            "name": "Открыть",
            "name_en": "Open",
            "description": "Открывает архив для чтения.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(filename: Строка, password?: Строка)",
                "Параметры": {
                  "filename": "Имя ZIP файла, который требуется открыть для чтения.",
                  "password": "Пароль к файлу, если он зашифрован."
                }
              }
            }
          },
          "ИзвлечьВсе": {
            "name": "ИзвлечьВсе",
            "name_en": "ExtractAll",
            "description": "Извлечение всех файлов из архива",
            "signature": {
              "default": {
                "СтрокаПараметров": "(where: Строка, restorePaths?: РежимВосстановленияПутейФайловZIP)",
                "Параметры": {
                  "where": "Строка. Каталог в который извлекаются файлы",
                  "restorePaths": "РежимВосстановленияПутейФайловZIP"
                }
              }
            }
          },
          "Извлечь": {
            "name": "Извлечь",
            "name_en": "Extract",
            "description": "Извлечение элемента из архива",
            "signature": {
              "default": {
                "СтрокаПараметров": "(entry: ЭлементZipФайла, destination: Строка, restorePaths?: РежимВосстановленияПутейФайловZIP, password?: Строка)",
                "Параметры": {
                  "entry": "ЭлементZipФайла. Извлекаемый элемент.",
                  "destination": "Каталог, в который извлекается элемент.",
                  "restorePaths": "РежимВосстановленияПутейФайлов",
                  "password": "Пароль элемента (если отличается от пароля к архиву)"
                }
              }
            }
          },
          "Закрыть": {
            "name": "Закрыть",
            "name_en": "Close",
            "description": "Закрыть архив и освободить объект.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ЗаписьZipФайла": {
        "name": "ЗаписьZipФайла",
        "name_en": "ZipFileWriter",
        "description": "Объект записи ZIP-архивов.",
        "constructors": {
          "Формирование неинициализированного объекта": {
            "name": "Формирование неинициализированного объекта",
            "signature": "()"
          },
          "На основании имени файла": {
            "name": "На основании имени файла",
            "signature": "(filename: Произвольный, password?: Произвольный, comment?: Произвольный, compressionMethod?: Произвольный, compressionLevel?: Произвольный, encryptionMethod?: Произвольный)"
          }
        },
        "methods": {
          "Открыть": {
            "name": "Открыть",
            "name_en": "Open",
            "description": "Открыть архив для записи.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(filename: Строка, password?: Строка, comment?: Строка, compressionMethod?: МетодСжатияZIP, compressionLevel?: УровеньСжатияZIP, encryptionMethod?: МетодШифрованияZIP)",
                "Параметры": {
                  "filename": "Имя файла будущего архива",
                  "password": "Пароль на архив",
                  "comment": "Комментарий к архиву",
                  "compressionMethod": "МетодСжатияZIP (Сжатие/Копирование)",
                  "compressionLevel": "УровеньСжатияZIP (Минимальный/Оптимальный/Максимальный)",
                  "encryptionMethod": "МетодШифрованияZIP (в текущей реализации не поддерживается)"
                }
              }
            }
          },
          "Записать": {
            "name": "Записать",
            "name_en": "Write",
            "description": "Записывает и закрывает файл архива.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "Добавить": {
            "name": "Добавить",
            "name_en": "Add",
            "description": "Добавление файла к архиву.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(file: Строка, storePathMode?: РежимСохраненияПутейZIP, recurseSubdirectories?: РежимОбработкиПодкаталоговZIP)",
                "Параметры": {
                  "file": "Имя файла, помещаемого в архив, или маска.",
                  "storePathMode": "РежимСохраненияПутейZIP (НеСохранятьПути/СохранятьОтносительныеПути/СохранятьПолныеПути)",
                  "recurseSubdirectories": "РежимОбработкиПодкаталоговZIP (НеОбрабатывать/ОбрабатыватьРекурсивно)"
                }
              }
            }
          }
        }
      },
      "ИндексыКоллекции": {
        "name": "ИндексыКоллекции",
        "name_en": "CollectionIndexes",
        "methods": {
          "Добавить": {
            "name": "Добавить",
            "name_en": "Add",
            "signature": {
              "default": {
                "СтрокаПараметров": "(columns: Строка): ИндексКоллекции",
                "Параметры": {}
              }
            }
          },
          "Количество": {
            "name": "Количество",
            "name_en": "Count",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "Удалить": {
            "name": "Удалить",
            "name_en": "Delete",
            "signature": {
              "default": {
                "СтрокаПараметров": "(Index: Произвольный)",
                "Параметры": {}
              }
            }
          },
          "Очистить": {
            "name": "Очистить",
            "name_en": "Clear",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ИндексКоллекции": {
        "name": "ИндексКоллекции",
        "name_en": "CollectionIndex"
      },
      "ТаблицаЗначений": {
        "name": "ТаблицаЗначений",
        "name_en": "ValueTable",
        "description": "Объект для работы с данными в табличном виде.  Представляет из себя коллекцию строк с заранее заданной структурой.",
        "properties": {
          "Колонки": {
            "name": "Колонки",
            "name_en": "Columns",
            "description": "Коллекция колонок",
            "value": "КоллекцияКолонокТаблицыЗначений",
            "access": "Чтение"
          },
          "Индексы": {
            "name": "Индексы",
            "name_en": "Indexes",
            "description": "Коллекция индексов",
            "value": "ИндексыКоллекции",
            "access": "Чтение"
          }
        },
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "()"
          }
        },
        "methods": {
          "Количество": {
            "name": "Количество",
            "name_en": "Count",
            "description": "Количество строк в Таблице значений",
            "returns": "Число",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "Добавить": {
            "name": "Добавить",
            "name_en": "Add",
            "description": "Добавляет строку в конец Таблицы значений",
            "returns": "СтрокаТаблицыЗначений",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): СтрокаТаблицыЗначений",
                "Параметры": {}
              }
            }
          },
          "Вставить": {
            "name": "Вставить",
            "name_en": "Insert",
            "description": "Вставляет строку в указанную позицию",
            "returns": "СтрокаТаблицыЗначений",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число): СтрокаТаблицыЗначений",
                "Параметры": {
                  "index": "Число - Индекс позиции куда будет произведена вставка"
                }
              }
            }
          },
          "Удалить": {
            "name": "Удалить",
            "name_en": "Delete",
            "description": "Удаляет строку",
            "signature": {
              "default": {
                "СтрокаПараметров": "(row: Произвольный)",
                "Параметры": {
                  "row": "СтрокаТаблицыЗначений - Удаляемая строка Число - Индекс удаляемой строки"
                }
              }
            }
          },
          "ЗагрузитьКолонку": {
            "name": "ЗагрузитьКолонку",
            "name_en": "LoadColumn",
            "description": "Загружает значения в колонку",
            "signature": {
              "default": {
                "СтрокаПараметров": "(values: Произвольный, columnIndex: Произвольный)",
                "Параметры": {
                  "values": "Массив - Значения для загрузки в колонку",
                  "columnIndex": "Строка - Имя колонки для загрузки Число - Индекс колонки для загрузки КолонкаТаблицыЗначений - Колонка для загрузки"
                }
              }
            }
          },
          "ВыгрузитьКолонку": {
            "name": "ВыгрузитьКолонку",
            "name_en": "UnloadColumn",
            "description": "Выгружает значения колонки в новый массив",
            "returns": "Массив",
            "signature": {
              "default": {
                "СтрокаПараметров": "(column: Произвольный): Массив",
                "Параметры": {
                  "column": "Строка - Имя колонки для выгрузки Число - Индекс колонки для выгрузки КолонкаТаблицыЗначений - Колонка для выгрузки"
                }
              }
            }
          },
          "ЗаполнитьЗначения": {
            "name": "ЗаполнитьЗначения",
            "name_en": "FillValues",
            "description": "Заполнить колонку/колонки указанным значением",
            "signature": {
              "default": {
                "СтрокаПараметров": "(value: Произвольный, columnNames?: Строка)",
                "Параметры": {
                  "value": "Произвольный - Устанавливаемое значение",
                  "columnNames": "Строка - Список имен колонок для установки значения (разделены запятыми)"
                }
              }
            }
          },
          "Индекс": {
            "name": "Индекс",
            "name_en": "IndexOf",
            "description": "Получить индекс указанной строки",
            "returns": "Число - Индекс в коллекции, если не найдено возвращает -1",
            "signature": {
              "default": {
                "СтрокаПараметров": "(row: Произвольный): Число",
                "Параметры": {
                  "row": "СтрокаТаблицыЗначений - Строка таблицы значений, для которой необходимо определить индекс"
                }
              }
            }
          },
          "Итог": {
            "name": "Итог",
            "name_en": "Total",
            "description": "Сумма значений всех строк указанной колонки",
            "returns": "Число",
            "signature": {
              "default": {
                "СтрокаПараметров": "(columnIndex: Произвольный): Произвольный",
                "Параметры": {
                  "columnIndex": "Строка - Имя колонки для суммирования Число - Индекс колонки для суммирования КолонкаТаблицыЗначений - Колонка для суммирования"
                }
              }
            }
          },
          "Найти": {
            "name": "Найти",
            "name_en": "Find",
            "description": "Осуществляет поиск значения в указанных колонках",
            "returns": "СтрокаТаблицыЗначений - если строка найдена, иначе Неопределено",
            "signature": {
              "default": {
                "СтрокаПараметров": "(value: Произвольный, columnNames?: Строка): Произвольный",
                "Параметры": {
                  "value": "Произвольный - Искомое значение",
                  "columnNames": "Строка - Список имен колонок для поиска значения (разделены запятыми).  Если параметр не указан - ищет по всем колонкам. По умолчанию: пустая строка"
                }
              }
            }
          },
          "НайтиСтроки": {
            "name": "НайтиСтроки",
            "name_en": "FindRows",
            "description": "Поиск строк по условию",
            "returns": "Массив - Массив ссылок на строки, удовлетворяющих условию поиска",
            "signature": {
              "default": {
                "СтрокаПараметров": "(filter: Произвольный): Массив",
                "Параметры": {
                  "filter": "Структура - Условия поиска. Ключ - имя колонки, значение - искомое значение"
                }
              }
            }
          },
          "Очистить": {
            "name": "Очистить",
            "name_en": "Clear",
            "description": "Удаляет все строки. Структура колонок не меняется.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "Получить": {
            "name": "Получить",
            "name_en": "Get",
            "description": "Получить строку по индексу",
            "returns": "СтрокаТаблицыЗначений",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число): СтрокаТаблицыЗначений",
                "Параметры": {
                  "index": "Число - Индекс строки"
                }
              }
            }
          },
          "Свернуть": {
            "name": "Свернуть",
            "name_en": "GroupBy",
            "description": "Сворачиваются (группируются) строки по указанным колонкам измерениям, суммируются колонки ресурсов.  Колонки не указанные ни в измерениях ни в ресурсах удаляются.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(groupColumnNames: Строка, aggregateColumnNames?: Строка)",
                "Параметры": {
                  "groupColumnNames": "Строка - Имена колонок для сворачивания (изменения), разделены запятыми",
                  "aggregateColumnNames": "Строка - Имена колонок для суммирования (ресурсы), разделены запятыми"
                }
              }
            }
          },
          "Сдвинуть": {
            "name": "Сдвинуть",
            "name_en": "Move",
            "description": "Сдвигает строку на указанное количество позиций.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(row: Произвольный, offset: Число)",
                "Параметры": {
                  "row": "СтрокаТаблицыЗначений - Строка которую сдвигаем Число - Индекс сдвигаемой строки",
                  "offset": "Количество строк, на которое сдвигается строка. Если значение положительное - сдвиг вниз, иначе вверх"
                }
              }
            }
          },
          "СкопироватьКолонки": {
            "name": "СкопироватьКолонки",
            "name_en": "CopyColumns",
            "description": "Создает новую таблицу значений с указанными колонками. Данные не копируются.",
            "returns": "ТаблицаЗначений",
            "signature": {
              "default": {
                "СтрокаПараметров": "(columnNames?: Строка): ТаблицаЗначений",
                "Параметры": {
                  "columnNames": "Строка - Имена колонок для копирования, разделены запятыми"
                }
              }
            }
          },
          "Скопировать": {
            "name": "Скопировать",
            "name_en": "Copy",
            "description": "Создает новую таблицу значений с указанными строками и колонками. Если передан отбор - копирует строки удовлетворяющие отбору. Если не указаны строки - будут скопированы все строки. Если не указаны колонки - будут скопированы все колонки. Если не указаны оба параметра - будет создана полная копия таблицы значений.",
            "returns": "ТаблицаЗначений",
            "signature": {
              "default": {
                "СтрокаПараметров": "(rows?: Произвольный, columnNames?: Строка): ТаблицаЗначений",
                "Параметры": {
                  "rows": "Массив - Массив строк для отбора Структура - Параметры отбора. Ключ - Колонка, Значение - Значение отбора",
                  "columnNames": "Строка - Имена колонок для копирования, разделены запятыми"
                }
              }
            }
          },
          "Сортировать": {
            "name": "Сортировать",
            "name_en": "Sort",
            "description": "Сортировать строки в таблице значений. Строки сортируются по порядку следования колонок для сортировки, с учетом варианта сортировки.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(columns: Строка, comparator?: Произвольный)",
                "Параметры": {
                  "columns": "Строка - Имена колонок для сортировки.  После имени колонки, через пробел, можно указать направление сортировки: \"Убыв\" (\"Desc\") - по убыванию. Возр\" (\"Asc\") - по возрастанию По умолчанию - по возрастанию.",
                  "comparator": "СравнениеЗначений - правила сравнения значений при наличии различных типов данных в колонке."
                }
              }
            }
          },
          "ВыбратьСтроку": {
            "name": "ВыбратьСтроку",
            "name_en": "ChooseRow",
            "description": "Не поддерживается",
            "signature": {
              "default": {
                "СтрокаПараметров": "(title?: Строка, startRow?: Произвольный)",
                "Параметры": {}
              }
            }
          }
        }
      },
      "КолонкаТаблицыЗначений": {
        "name": "КолонкаТаблицыЗначений",
        "name_en": "ValueTableColumn",
        "description": "Колонка таблицы значений.",
        "properties": {
          "Заголовок": {
            "name": "Заголовок",
            "name_en": "Title",
            "description": "Заголовок колонки",
            "value": "Строка",
            "access": "Чтение/Запись"
          },
          "Имя": {
            "name": "Имя",
            "name_en": "Name",
            "description": "Имя колонки",
            "value": "Строка",
            "access": "Чтение/Запись"
          },
          "ТипЗначения": {
            "name": "ТипЗначения",
            "name_en": "ValueType",
            "description": "Тип значения колонки",
            "value": "ОписаниеТипа",
            "access": "Чтение"
          },
          "Ширина": {
            "name": "Ширина",
            "name_en": "Width",
            "description": "Ширина колонки",
            "value": "Число",
            "access": "Чтение/Запись"
          }
        }
      },
      "КоллекцияКолонокТаблицыЗначений": {
        "name": "КоллекцияКолонокТаблицыЗначений",
        "name_en": "ValueTableColumnCollection",
        "description": "Коллекция колонок таблицы значений",
        "methods": {
          "Добавить": {
            "name": "Добавить",
            "name_en": "Add",
            "description": "Добавляет колонку в таблицу значений",
            "returns": "КолонкаТаблицыЗначений",
            "signature": {
              "default": {
                "СтрокаПараметров": "(name: Строка, type?: ОписаниеТипов, title?: Строка, width?: Число): КолонкаТаблицыЗначений",
                "Параметры": {
                  "name": "Строка - Имя колонки",
                  "type": "ОписаниеТипов - Тип данных колонки",
                  "title": "Строка - Заголовок колонки",
                  "width": "Число - Ширина колонки"
                }
              }
            }
          },
          "Вставить": {
            "name": "Вставить",
            "name_en": "Insert",
            "description": "Вставить колонку в указанную позицию",
            "returns": "КолонкаТаблицыЗначений",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число, name: Строка, type?: ОписаниеТипов, title?: Строка, width?: Число): КолонкаТаблицыЗначений",
                "Параметры": {
                  "index": "Число - Индекс расположения колонки",
                  "name": "Строка - Имя колонки",
                  "type": "ОписаниеТипов - Тип данных колонки",
                  "title": "Строка - Заголовок колонки",
                  "width": "Число - Ширина колонки"
                }
              }
            }
          },
          "Индекс": {
            "name": "Индекс",
            "name_en": "IndexOf",
            "description": "Индекс указанной колонки",
            "returns": "Число",
            "signature": {
              "default": {
                "СтрокаПараметров": "(column: КолонкаТаблицыЗначений): Число",
                "Параметры": {
                  "column": "КолонкаТаблицыЗначений - Колонка, для которой определяется индекс"
                }
              }
            }
          },
          "Количество": {
            "name": "Количество",
            "name_en": "Count",
            "description": "Количество колонок в таблице значений",
            "returns": "Число",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "Найти": {
            "name": "Найти",
            "name_en": "Find",
            "description": "Поиск колонки по имени",
            "returns": "КолонкаТаблицыЗначений - Найденная колонка таблицы значений, иначе Неопределено.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(name: Строка): Произвольный",
                "Параметры": {
                  "name": "Строка - Имя колонки"
                }
              }
            }
          },
          "Удалить": {
            "name": "Удалить",
            "name_en": "Delete",
            "description": "Удалить колонку значений",
            "signature": {
              "default": {
                "СтрокаПараметров": "(column: Произвольный)",
                "Параметры": {
                  "column": "Строка - Имя колонки для удаления Число - Индекс колонки для удаления КолонкаТаблицыЗначений - Колонка для удаления"
                }
              }
            }
          }
        }
      },
      "СтрокаТаблицыЗначений": {
        "name": "СтрокаТаблицыЗначений",
        "name_en": "ValueTableRow",
        "methods": {
          "Владелец": {
            "name": "Владелец",
            "name_en": "Owner",
            "description": "Владелец строки",
            "returns": "ТаблицаЗначений",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): ТаблицаЗначений",
                "Параметры": {}
              }
            }
          },
          "Получить": {
            "name": "Получить",
            "name_en": "Get",
            "description": "Получает значение по индексу",
            "returns": "Произвольный - Значение колонки",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число): Произвольный",
                "Параметры": {
                  "index": "Число - Индекс колонки"
                }
              }
            }
          },
          "Установить": {
            "name": "Установить",
            "name_en": "Set",
            "description": "Установить значение",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число, value: Произвольный)",
                "Параметры": {
                  "index": "Число - Индекс колонки",
                  "value": "Произвольный - значение для установки"
                }
              }
            }
          }
        }
      },
      "ЧтениеXML": {
        "name": "ЧтениеXML",
        "name_en": "XMLReader",
        "properties": {
          "URIПространстваИмен": {
            "name": "URIПространстваИмен",
            "name_en": "NamespaceURI",
            "access": "Чтение"
          },
          "Автономный": {
            "name": "Автономный",
            "name_en": "Standalone",
            "access": "Чтение"
          },
          "БазовыйURI": {
            "name": "БазовыйURI",
            "name_en": "BaseURI",
            "access": "Чтение"
          },
          "ВерсияXML": {
            "name": "ВерсияXML",
            "name_en": "XMLVersion",
            "access": "Чтение"
          },
          "Значение": {
            "name": "Значение",
            "name_en": "Value",
            "access": "Чтение"
          },
          "ИмеетЗначение": {
            "name": "ИмеетЗначение",
            "name_en": "HasValue",
            "access": "Чтение"
          },
          "ИмеетИмя": {
            "name": "ИмеетИмя",
            "name_en": "HasName",
            "access": "Чтение"
          },
          "Имя": {
            "name": "Имя",
            "name_en": "Name",
            "access": "Чтение"
          },
          "ИмяНотации": {
            "name": "ИмяНотации",
            "name_en": "NotationName",
            "access": "Чтение"
          },
          "КодировкаXML": {
            "name": "КодировкаXML",
            "name_en": "XMLEncoding",
            "access": "Чтение"
          },
          "КодировкаИсточника": {
            "name": "КодировкаИсточника",
            "name_en": "InputEncoding",
            "access": "Чтение"
          },
          "КонтекстПространствИмен": {
            "name": "КонтекстПространствИмен",
            "name_en": "NamespaceContext",
            "access": "Чтение"
          },
          "ЛокальноеИмя": {
            "name": "ЛокальноеИмя",
            "name_en": "LocalName",
            "access": "Чтение"
          },
          "Префикс": {
            "name": "Префикс",
            "name_en": "Prefix",
            "access": "Чтение"
          },
          "ПубличныйИдентификатор": {
            "name": "ПубличныйИдентификатор",
            "name_en": "PublicId",
            "access": "Чтение"
          },
          "СистемныйИдентификатор": {
            "name": "СистемныйИдентификатор",
            "name_en": "SystemId",
            "access": "Чтение"
          },
          "ТипУзла": {
            "name": "ТипУзла",
            "name_en": "NodeType",
            "access": "Чтение"
          },
          "ЭтоАтрибутПоУмолчанию": {
            "name": "ЭтоАтрибутПоУмолчанию",
            "name_en": "IsDefaultAttribute",
            "access": "Чтение"
          },
          "ЭтоПробельныеСимволы": {
            "name": "ЭтоПробельныеСимволы",
            "name_en": "IsWhitespace",
            "access": "Чтение"
          },
          "Язык": {
            "name": "Язык",
            "name_en": "Lang",
            "access": "Чтение"
          },
          "ИгнорироватьПробелы": {
            "name": "ИгнорироватьПробелы",
            "name_en": "IgnoreWhitespace",
            "access": "Чтение/Запись"
          },
          "Параметры": {
            "name": "Параметры",
            "name_en": "Settings",
            "access": "Чтение"
          },
          "ПробельныеСимволы": {
            "name": "ПробельныеСимволы",
            "name_en": "Space",
            "access": "Чтение"
          },
          "ЭтоСимвольныеДанные": {
            "name": "ЭтоСимвольныеДанные",
            "name_en": "IsCharacters",
            "access": "Чтение"
          }
        },
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "()"
          }
        },
        "methods": {
          "ОткрытьФайл": {
            "name": "ОткрытьФайл",
            "name_en": "OpenFile",
            "signature": {
              "default": {
                "СтрокаПараметров": "(path: Строка)",
                "Параметры": {}
              }
            }
          },
          "УстановитьСтроку": {
            "name": "УстановитьСтроку",
            "name_en": "SetString",
            "signature": {
              "default": {
                "СтрокаПараметров": "(content: Строка)",
                "Параметры": {}
              }
            }
          },
          "URIПространстваИменАтрибута": {
            "name": "URIПространстваИменАтрибута",
            "name_en": "AttributeNamespaceURI",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число): Строка",
                "Параметры": {}
              }
            }
          },
          "ЗначениеАтрибута": {
            "name": "ЗначениеАтрибута",
            "name_en": "AttributeValue",
            "signature": {
              "default": {
                "СтрокаПараметров": "(indexOrName: Произвольный, URIIfGiven?: Строка): Произвольный",
                "Параметры": {}
              }
            }
          },
          "ИмяАтрибута": {
            "name": "ИмяАтрибута",
            "name_en": "AttributeName",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число): Строка",
                "Параметры": {}
              }
            }
          },
          "КоличествоАтрибутов": {
            "name": "КоличествоАтрибутов",
            "name_en": "AttributeCount",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "ЛокальноеИмяАтрибута": {
            "name": "ЛокальноеИмяАтрибута",
            "name_en": "AttributeLocalName",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число): Строка",
                "Параметры": {}
              }
            }
          },
          "ПервоеОбъявление": {
            "name": "ПервоеОбъявление",
            "name_en": "FirstDeclaration",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Булево",
                "Параметры": {}
              }
            }
          },
          "ПервыйАтрибут": {
            "name": "ПервыйАтрибут",
            "name_en": "FirstAttribute",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Булево",
                "Параметры": {}
              }
            }
          },
          "ПолучитьАтрибут": {
            "name": "ПолучитьАтрибут",
            "name_en": "GetAttribute",
            "signature": {
              "default": {
                "СтрокаПараметров": "(indexOrName: Произвольный, URIIfGiven?: Строка): Произвольный",
                "Параметры": {}
              }
            }
          },
          "ПрефиксАтрибута": {
            "name": "ПрефиксАтрибута",
            "name_en": "AttributePrefix",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число): Строка",
                "Параметры": {}
              }
            }
          },
          "Пропустить": {
            "name": "Пропустить",
            "name_en": "Skip",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "Прочитать": {
            "name": "Прочитать",
            "name_en": "Read",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Булево",
                "Параметры": {}
              }
            }
          },
          "ПрочитатьАтрибут": {
            "name": "ПрочитатьАтрибут",
            "name_en": "ReadAttribute",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Булево",
                "Параметры": {}
              }
            }
          },
          "СледующееОбъявление": {
            "name": "СледующееОбъявление",
            "name_en": "NextDeclaration",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "СледующийАтрибут": {
            "name": "СледующийАтрибут",
            "name_en": "NextAttribute",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Булево",
                "Параметры": {}
              }
            }
          },
          "ТипАтрибута": {
            "name": "ТипАтрибута",
            "name_en": "AttributeType",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "Закрыть": {
            "name": "Закрыть",
            "name_en": "Close",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ПерейтиКСодержимому": {
            "name": "ПерейтиКСодержимому",
            "name_en": "MoveToContent",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Произвольный",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ЗаписьXML": {
        "name": "ЗаписьXML",
        "name_en": "XMLWriter",
        "properties": {
          "Отступ": {
            "name": "Отступ",
            "name_en": "Indent",
            "access": "Чтение/Запись"
          },
          "КонтекстПространствИмен": {
            "name": "КонтекстПространствИмен",
            "name_en": "NamespaceContext",
            "access": "Чтение"
          },
          "Параметры": {
            "name": "Параметры",
            "name_en": "Settings",
            "access": "Чтение"
          }
        },
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "()"
          }
        },
        "methods": {
          "ЗаписатьАтрибут": {
            "name": "ЗаписатьАтрибут",
            "name_en": "WriteAttribute",
            "signature": {
              "default": {
                "СтрокаПараметров": "(localName: Строка, valueOrNamespace: Строка, value?: Строка)",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьБезОбработки": {
            "name": "ЗаписатьБезОбработки",
            "name_en": "WriteRaw",
            "signature": {
              "default": {
                "СтрокаПараметров": "(data: Строка)",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьИнструкциюОбработки": {
            "name": "ЗаписатьИнструкциюОбработки",
            "name_en": "WriteProcessingInstruction",
            "signature": {
              "default": {
                "СтрокаПараметров": "(name: Строка, text: Строка)",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьКомментарий": {
            "name": "ЗаписатьКомментарий",
            "name_en": "WriteComment",
            "signature": {
              "default": {
                "СтрокаПараметров": "(text: Строка)",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьКонецАтрибута": {
            "name": "ЗаписатьКонецАтрибута",
            "name_en": "WriteEndAttribute",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьКонецЭлемента": {
            "name": "ЗаписатьКонецЭлемента",
            "name_en": "WriteEndElement",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьНачалоАтрибута": {
            "name": "ЗаписатьНачалоАтрибута",
            "name_en": "WriteStartAttribute",
            "signature": {
              "default": {
                "СтрокаПараметров": "(name: Строка, ns?: Строка)",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьНачалоЭлемента": {
            "name": "ЗаписатьНачалоЭлемента",
            "name_en": "WriteStartElement",
            "signature": {
              "default": {
                "СтрокаПараметров": "(name: Строка, ns?: Строка)",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьОбъявлениеXML": {
            "name": "ЗаписатьОбъявлениеXML",
            "name_en": "WriteXMLDeclaration",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьСекциюCDATA": {
            "name": "ЗаписатьСекциюCDATA",
            "name_en": "WriteCDATASection",
            "signature": {
              "default": {
                "СтрокаПараметров": "(data: Строка)",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьСоответствиеПространстваИмен": {
            "name": "ЗаписатьСоответствиеПространстваИмен",
            "name_en": "WriteNamespaceMapping",
            "signature": {
              "default": {
                "СтрокаПараметров": "(prefix: Строка, uri: Строка)",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьСсылкуНаСущность": {
            "name": "ЗаписатьСсылкуНаСущность",
            "name_en": "WriteEntityReference",
            "signature": {
              "default": {
                "СтрокаПараметров": "(name: Строка)",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьТекст": {
            "name": "ЗаписатьТекст",
            "name_en": "WriteText",
            "signature": {
              "default": {
                "СтрокаПараметров": "(text: Строка)",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьТекущий": {
            "name": "ЗаписатьТекущий",
            "name_en": "WriteCurrent",
            "signature": {
              "default": {
                "СтрокаПараметров": "(reader: ЧтениеXML)",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьТипДокумента": {
            "name": "ЗаписатьТипДокумента",
            "name_en": "WriteDocumentType",
            "signature": {
              "default": {
                "СтрокаПараметров": "(name: Строка, varArg2: Строка, varArg3?: Строка, varArg4?: Строка)",
                "Параметры": {}
              }
            }
          },
          "НайтиПрефикс": {
            "name": "НайтиПрефикс",
            "name_en": "LookupPrefix",
            "signature": {
              "default": {
                "СтрокаПараметров": "(uri: Строка): Произвольный",
                "Параметры": {}
              }
            }
          },
          "Закрыть": {
            "name": "Закрыть",
            "name_en": "Close",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Произвольный",
                "Параметры": {}
              }
            }
          },
          "ОткрытьФайл": {
            "name": "ОткрытьФайл",
            "name_en": "OpenFile",
            "signature": {
              "default": {
                "СтрокаПараметров": "(path: Строка, encoding?: Строка, addBOM?: Произвольный)",
                "Параметры": {}
              }
            }
          },
          "УстановитьСтроку": {
            "name": "УстановитьСтроку",
            "name_en": "SetString",
            "signature": {
              "default": {
                "СтрокаПараметров": "(encoding?: Строка)",
                "Параметры": {}
              }
            }
          }
        }
      },
      "КонтекстПространствИменXML": {
        "name": "КонтекстПространствИменXML",
        "name_en": "XMLNamespaceContext",
        "properties": {
          "Глубина": {
            "name": "Глубина",
            "name_en": "Depth",
            "access": "Чтение"
          },
          "ПространствоИменПоУмолчанию": {
            "name": "ПространствоИменПоУмолчанию",
            "name_en": "DefaultNamespace",
            "access": "Чтение"
          }
        },
        "methods": {
          "URIПространствИмен": {
            "name": "URIПространствИмен",
            "name_en": "NamespaceURIs",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Массив",
                "Параметры": {}
              }
            }
          },
          "НайтиURIПространстваИмен": {
            "name": "НайтиURIПространстваИмен",
            "name_en": "LookupNamespaceURI",
            "signature": {
              "default": {
                "СтрокаПараметров": "(prefix: Строка): Произвольный",
                "Параметры": {}
              }
            }
          },
          "НайтиПрефикс": {
            "name": "НайтиПрефикс",
            "name_en": "LookupPrefix",
            "signature": {
              "default": {
                "СтрокаПараметров": "(namespaceUri: Строка): Произвольный",
                "Параметры": {}
              }
            }
          },
          "Префиксы": {
            "name": "Префиксы",
            "name_en": "Prefixes",
            "signature": {
              "default": {
                "СтрокаПараметров": "(namespaceUri: Строка): Массив",
                "Параметры": {}
              }
            }
          },
          "СоответствияПространствИмен": {
            "name": "СоответствияПространствИмен",
            "name_en": "NamespaceMappings",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Соответствие",
                "Параметры": {}
              }
            }
          }
        }
      },
      "СтрокаДереваЗначений": {
        "name": "СтрокаДереваЗначений",
        "name_en": "ValueTreeRow",
        "description": "Строка дерева значений.",
        "properties": {
          "Родитель": {
            "name": "Родитель",
            "name_en": "Parent",
            "access": "Чтение"
          },
          "Строки": {
            "name": "Строки",
            "name_en": "Rows",
            "access": "Чтение"
          }
        },
        "methods": {
          "Владелец": {
            "name": "Владелец",
            "name_en": "Owner",
            "description": "Возвращает дерево значений, в которе входит строка.",
            "returns": "ДеревоЗначений. Владелец строки.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): ДеревоЗначений",
                "Параметры": {}
              }
            }
          },
          "Получить": {
            "name": "Получить",
            "name_en": "Get",
            "description": "Получает значение по индексу.",
            "returns": "Произвольный. Получаемое значение.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число): Произвольный",
                "Параметры": {
                  "index": "Число. Индекс получаемого параметра."
                }
              }
            }
          },
          "Установить": {
            "name": "Установить",
            "name_en": "Set",
            "description": "Устанавливает значение по индексу.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число, value: Произвольный)",
                "Параметры": {
                  "index": "Число. Индекс параметра, которому задаётся значение.",
                  "value": "Произвольный. Новое значение."
                }
              }
            }
          },
          "Уровень": {
            "name": "Уровень",
            "name_en": "Level",
            "description": "Возвращает уровень вложенности строки в дереве. Строки верхнего уровня имеют значение 0.",
            "returns": "Число. Уровень вложенности строки.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ДеревоЗначений": {
        "name": "ДеревоЗначений",
        "name_en": "ValueTree",
        "description": "Дерево значений. Древовидная структура с фунциональностью подобно таблице значений.",
        "properties": {
          "Колонки": {
            "name": "Колонки",
            "name_en": "Columns",
            "access": "Чтение"
          },
          "Строки": {
            "name": "Строки",
            "name_en": "Rows",
            "access": "Чтение"
          }
        },
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "()"
          }
        },
        "methods": {
          "Скопировать": {
            "name": "Скопировать",
            "name_en": "Copy",
            "description": "Создаёт копию дерева значений.",
            "returns": "ДеревоЗначений. Копия исходного дерева значений.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(rows?: Произвольный, columnNames?: Строка): ДеревоЗначений",
                "Параметры": {
                  "rows": "Массив. Строки для копирования. Если не указан, копируются все строки. Необязательный параметр.",
                  "columnNames": "Строка. Список колонок через запятую, которые должны быть скопированы. Необязательный параметр."
                }
              }
            }
          }
        }
      },
      "КолонкаДереваЗначений": {
        "name": "КолонкаДереваЗначений",
        "name_en": "ValueTreeColumn",
        "description": "Колонка дерева значений.",
        "properties": {
          "Заголовок": {
            "name": "Заголовок",
            "name_en": "Title",
            "access": "Чтение/Запись"
          },
          "Имя": {
            "name": "Имя",
            "name_en": "Name",
            "access": "Чтение/Запись"
          },
          "ТипЗначения": {
            "name": "ТипЗначения",
            "name_en": "ValueType",
            "access": "Чтение"
          },
          "Ширина": {
            "name": "Ширина",
            "name_en": "Width",
            "access": "Чтение/Запись"
          }
        }
      },
      "КоллекцияКолонокДереваЗначений": {
        "name": "КоллекцияКолонокДереваЗначений",
        "name_en": "ValueTreeColumnCollection",
        "description": "Коллекция колонок дерева значений.",
        "methods": {
          "Добавить": {
            "name": "Добавить",
            "name_en": "Add",
            "description": "Добавляет новую колонку.",
            "returns": "КолонкаДереваЗначений. Добавленная колонка.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(name: Строка, type?: ОписаниеТипов, title?: Строка, width?: Число): КолонкаДереваЗначений",
                "Параметры": {
                  "name": "Строка. Имя колонки.",
                  "type": "ОписаниеТипов. Доступные типы значений для колонки. Необязательный параметр.",
                  "title": "Строка. Заголовок колонки. Необязательный параметр.",
                  "width": "Число. Ширина колонки. Необязательный параметр."
                }
              }
            }
          },
          "Вставить": {
            "name": "Вставить",
            "name_en": "Insert",
            "description": "Вставляет новую колонку по указанному индексу.",
            "returns": "КолонкаДереваЗначений. Добавленная колонка.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число, name: Строка, type?: ОписаниеТипов, title?: Строка, width?: Число): КолонкаДереваЗначений",
                "Параметры": {
                  "index": "Число. Индекс новой колонки.",
                  "name": "Строка. Имя колонки.",
                  "type": "ОписаниеТипов. Доступные типы значений для колонки. Необязательный параметр.",
                  "title": "Строка. Заголовок колонки. Необязательный параметр.",
                  "width": "Число. Ширина колонки. Необязательный параметр."
                }
              }
            }
          },
          "Индекс": {
            "name": "Индекс",
            "name_en": "IndexOf",
            "description": "Определяет индекс колонки.",
            "returns": "Число. Индекс колонки в коллекции. Если колонка не найдена, возвращается -1.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(column: КолонкаДереваЗначений): Число",
                "Параметры": {
                  "column": "КолонкаДереваЗначений. Колонка."
                }
              }
            }
          },
          "Количество": {
            "name": "Количество",
            "name_en": "Count",
            "description": "Возвращает количество колонок.",
            "returns": "Число. Количество колонокs.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "Найти": {
            "name": "Найти",
            "name_en": "Find",
            "description": "Ищет колонку по имени.",
            "returns": "КолонкаДереваЗначений, Неопределено. Найденная колонка или Неопределено, если колонка не найдена.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(name: Строка): Произвольный",
                "Параметры": {
                  "name": "Строка. Имя искомой колонки."
                }
              }
            }
          },
          "Удалить": {
            "name": "Удалить",
            "name_en": "Delete",
            "description": "Удаляет колонку.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(column: Произвольный)",
                "Параметры": {
                  "column": "КолонкаДереваЗначений. Колонка."
                }
              }
            }
          },
          "Получить": {
            "name": "Получить",
            "name_en": "Get",
            "description": "Получает колонку по индексу.",
            "returns": "КолонкаДереваЗначений. Колонка.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число): КолонкаДереваЗначений",
                "Параметры": {
                  "index": "Число. Индекс колонки."
                }
              }
            }
          },
          "Очистить": {
            "name": "Очистить",
            "name_en": "Clear",
            "description": "Удаляет все колонки.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "Сдвинуть": {
            "name": "Сдвинуть",
            "name_en": "Move",
            "description": "Сдвигает колонку на указанное смещение.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(column: Произвольный, offset: Число)",
                "Параметры": {
                  "column": "КолонкаДереваЗначений. Колонка.",
                  "offset": "Число. Смещение."
                }
              }
            }
          }
        }
      },
      "КоллекцияСтрокДереваЗначений": {
        "name": "КоллекцияСтрокДереваЗначений",
        "name_en": "ValueTreeRowCollection",
        "description": "Коллекция строк дерева значений.",
        "properties": {
          "Родитель": {
            "name": "Родитель",
            "name_en": "Parent",
            "access": "Чтение"
          }
        },
        "methods": {
          "Владелец": {
            "name": "Владелец",
            "name_en": "Owner",
            "description": "Возвращает дерево значений, в которе входит строка.",
            "returns": "ДеревоЗначений. Владелец строки.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): ДеревоЗначений",
                "Параметры": {}
              }
            }
          },
          "Количество": {
            "name": "Количество",
            "name_en": "Count",
            "description": "Возвращает количество строк.",
            "returns": "Число. Количество строк.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "Добавить": {
            "name": "Добавить",
            "name_en": "Add",
            "description": "Добавляет строку в коллекцию.",
            "returns": "СтрокаДереваЗначений. Добавленная строка.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): СтрокаДереваЗначений",
                "Параметры": {}
              }
            }
          },
          "Вставить": {
            "name": "Вставить",
            "name_en": "Insert",
            "description": "Добавляет строку в коллекцию.",
            "returns": "СтрокаДереваЗначений. Добавленная строка.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число): СтрокаДереваЗначений",
                "Параметры": {
                  "index": "Число. Индекс новой строки."
                }
              }
            }
          },
          "Удалить": {
            "name": "Удалить",
            "name_en": "Delete",
            "description": "Удаляет строку из коллекции.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(row: Произвольный)",
                "Параметры": {
                  "row": "СтрокаДереваЗначений, Число. Удаляемая строка или её индекс."
                }
              }
            }
          },
          "ЗагрузитьКолонку": {
            "name": "ЗагрузитьКолонку",
            "name_en": "LoadColumn",
            "description": "Загружает значения из массива в колонку.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(values: Произвольный, columnIndex: Произвольный)",
                "Параметры": {
                  "values": "Массив. Значения.",
                  "columnIndex": "КолонкаДереваЗначений, Число, Строка. Колонка, в которую будут загружены значения, её имя или индекс."
                }
              }
            }
          },
          "ВыгрузитьКолонку": {
            "name": "ВыгрузитьКолонку",
            "name_en": "UnloadColumn",
            "description": "Загружает значения из массива в колонку.",
            "returns": "Массив. Массив значений.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(column: Произвольный): Массив",
                "Параметры": {
                  "column": "КолонкаДереваЗначений, Число, Строка. Колонка, из которой будут выгружены значения, её имя или индекс."
                }
              }
            }
          },
          "Индекс": {
            "name": "Индекс",
            "name_en": "IndexOf",
            "description": "Определяет индекс строки.",
            "returns": "Число. Индекс строки в коллекции. Если строка не найдена, возвращается -1.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(row: Произвольный): Число",
                "Параметры": {
                  "row": "СтрокаДереваЗначений. Строка."
                }
              }
            }
          },
          "Итог": {
            "name": "Итог",
            "name_en": "Total",
            "description": "Суммирует значения в строках.",
            "returns": "Число. Вычисленная сумма.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(columnIndex: Произвольный, includeChildren?: Булево): Произвольный",
                "Параметры": {
                  "columnIndex": "КолонкаДереваЗначений, Строка, Число. Колонка, значения которой будут суммироваться.",
                  "includeChildren": "Булево. Если Истина, в расчёт будут включены все вложенные строки."
                }
              }
            }
          },
          "Найти": {
            "name": "Найти",
            "name_en": "Find",
            "description": "Ищет значение в строках дерева значений.",
            "returns": "СтрокаДереваЗначений, Неопределено. Найденная строка или Неопределено, если строка не найдена.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(value: Произвольный, columnNames?: Строка, includeChildren?: Булево): Произвольный",
                "Параметры": {
                  "value": "Произвольный. Искомое значение.",
                  "columnNames": "Строка. Список колонок через запятую, в которых будет производиться поиск. Необязательный параметр.",
                  "includeChildren": "Булево. Если Истина, в поиск будут включены все вложенные строки. Необязательный параметр."
                }
              }
            }
          },
          "НайтиСтроки": {
            "name": "НайтиСтроки",
            "name_en": "FindRows",
            "description": "Ищет строки, отвечающие критериям отбора.",
            "returns": "Массив. Найденные строки.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(filter: Произвольный, includeChildren?: Булево): Массив",
                "Параметры": {
                  "filter": "Структура. Структура, в которой Ключ - это имя колонки, а Значение - искомое значение.",
                  "includeChildren": "Булево. Если Истина, в поиск будут включены все вложенные строки. Необязательный параметр."
                }
              }
            }
          },
          "Очистить": {
            "name": "Очистить",
            "name_en": "Clear",
            "description": "Удаляет все строки.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "Получить": {
            "name": "Получить",
            "name_en": "Get",
            "description": "Получает строку по индексу.",
            "returns": "СтрокаДереваЗначений. Строка.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число): СтрокаДереваЗначений",
                "Параметры": {
                  "index": "Число. Индекс строки."
                }
              }
            }
          },
          "Сдвинуть": {
            "name": "Сдвинуть",
            "name_en": "Move",
            "description": "Сдвигает строку на указанное смещение.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(row: Произвольный, offset: Число)",
                "Параметры": {
                  "row": "СтрокаДереваЗначений. Строка.",
                  "offset": "Число. Смещение."
                }
              }
            }
          },
          "Сортировать": {
            "name": "Сортировать",
            "name_en": "Sort",
            "description": "Сортирует строки по указанному правилу.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(columns: Строка, sortChildren?: Булево, comparator?: Произвольный)",
                "Параметры": {
                  "columns": "Строка. Правило сортировки: список имён колонок, разделённых запятой. После имени через пробел может указываться направление сортировки: Возр(Asc) - по возрастанию, Убыв(Desc) - по убыванию.",
                  "sortChildren": "Булево. Если Истина, сортировка будет применена также к вложенным строкам.",
                  "comparator": "СравнениеЗначений. Не используется."
                }
              }
            }
          },
          "ВыбратьСтроку": {
            "name": "ВыбратьСтроку",
            "name_en": "ChooseRow",
            "description": "Не поддерживается.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(title?: Строка, startRow?: Произвольный)",
                "Параметры": {}
              }
            }
          }
        }
      },
      "СписокЗначений": {
        "name": "СписокЗначений",
        "name_en": "ValueList",
        "description": "Стандартная универсальная коллекция системы 1С:Предприятие 8",
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "()"
          }
        },
        "methods": {
          "Получить": {
            "name": "Получить",
            "name_en": "Get",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Произвольный): ЭлементСпискаЗначений",
                "Параметры": {}
              }
            }
          },
          "Добавить": {
            "name": "Добавить",
            "name_en": "Add",
            "signature": {
              "default": {
                "СтрокаПараметров": "(value: Произвольный, presentation?: Строка, check?: Булево, picture?: Произвольный): ЭлементСпискаЗначений",
                "Параметры": {}
              }
            }
          },
          "Вставить": {
            "name": "Вставить",
            "name_en": "Insert",
            "signature": {
              "default": {
                "СтрокаПараметров": "(index: Число, value: Произвольный, presentation?: Строка, check?: Булево, picture?: Произвольный): ЭлементСпискаЗначений",
                "Параметры": {}
              }
            }
          },
          "ВыгрузитьЗначения": {
            "name": "ВыгрузитьЗначения",
            "name_en": "UnloadValues",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Массив",
                "Параметры": {}
              }
            }
          },
          "ЗагрузитьЗначения": {
            "name": "ЗагрузитьЗначения",
            "name_en": "LoadValues",
            "signature": {
              "default": {
                "СтрокаПараметров": "(source: Массив)",
                "Параметры": {}
              }
            }
          },
          "Очистить": {
            "name": "Очистить",
            "name_en": "Clear",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ЗаполнитьПометки": {
            "name": "ЗаполнитьПометки",
            "name_en": "FillChecks",
            "signature": {
              "default": {
                "СтрокаПараметров": "(check: Булево)",
                "Параметры": {}
              }
            }
          },
          "Индекс": {
            "name": "Индекс",
            "name_en": "IndexOf",
            "signature": {
              "default": {
                "СтрокаПараметров": "(item: ЭлементСпискаЗначений): Число",
                "Параметры": {}
              }
            }
          },
          "НайтиПоЗначению": {
            "name": "НайтиПоЗначению",
            "name_en": "FindByValue",
            "signature": {
              "default": {
                "СтрокаПараметров": "(val: Произвольный): Произвольный",
                "Параметры": {}
              }
            }
          },
          "Сдвинуть": {
            "name": "Сдвинуть",
            "name_en": "Move",
            "signature": {
              "default": {
                "СтрокаПараметров": "(item: Произвольный, direction: Число)",
                "Параметры": {}
              }
            }
          },
          "Скопировать": {
            "name": "Скопировать",
            "name_en": "Copy",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): СписокЗначений",
                "Параметры": {}
              }
            }
          },
          "СортироватьПоЗначению": {
            "name": "СортироватьПоЗначению",
            "name_en": "SortByValue",
            "signature": {
              "default": {
                "СтрокаПараметров": "(direction?: НаправлениеСортировки)",
                "Параметры": {}
              }
            }
          },
          "СортироватьПоПредставлению": {
            "name": "СортироватьПоПредставлению",
            "name_en": "SortByPresentation",
            "signature": {
              "default": {
                "СтрокаПараметров": "(direction: НаправлениеСортировки)",
                "Параметры": {}
              }
            }
          },
          "Удалить": {
            "name": "Удалить",
            "name_en": "Delete",
            "signature": {
              "default": {
                "СтрокаПараметров": "(item: Произвольный)",
                "Параметры": {}
              }
            }
          },
          "Количество": {
            "name": "Количество",
            "name_en": "Count",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ЭлементСпискаЗначений": {
        "name": "ЭлементСпискаЗначений",
        "name_en": "ValueListItem",
        "description": "Используется для доступа к свойствам и методам элемента списка значений",
        "properties": {
          "Значение": {
            "name": "Значение",
            "name_en": "Value",
            "access": "Чтение/Запись"
          },
          "Представление": {
            "name": "Представление",
            "name_en": "Presentation",
            "access": "Чтение/Запись"
          },
          "Пометка": {
            "name": "Пометка",
            "name_en": "Check",
            "access": "Чтение/Запись"
          },
          "Картинка": {
            "name": "Картинка",
            "name_en": "Picture",
            "access": "Чтение/Запись"
          }
        }
      },
      "КоллекцияСовпаденийРегулярногоВыражения": {
        "name": "КоллекцияСовпаденийРегулярногоВыражения",
        "name_en": "RegExMatchCollection",
        "methods": {
          "Количество": {
            "name": "Количество",
            "name_en": "Count",
            "description": "Получает количество полученных совпадений.",
            "returns": "Количество полученных совпадений.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          }
        }
      },
      "КоллекцияГруппРегулярногоВыражения": {
        "name": "КоллекцияГруппРегулярногоВыражения",
        "name_en": "RegExGroupCollection",
        "methods": {
          "Количество": {
            "name": "Количество",
            "name_en": "Count",
            "description": "Получает количество полученных групп.",
            "returns": "Количество полученных групп.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          }
        }
      },
      "СовпадениеРегулярногоВыражения": {
        "name": "СовпадениеРегулярногоВыражения",
        "name_en": "RegExMatch",
        "properties": {
          "Значение": {
            "name": "Значение",
            "name_en": "Value",
            "description": "Найденная строка.",
            "access": "Чтение"
          },
          "Индекс": {
            "name": "Индекс",
            "name_en": "Index",
            "description": "Индекс найденной строки. Нумерация начинается с 0",
            "access": "Чтение"
          },
          "Длина": {
            "name": "Длина",
            "name_en": "Length",
            "description": "Длина найденной строки.",
            "access": "Чтение"
          },
          "Группы": {
            "name": "Группы",
            "name_en": "Groups",
            "description": "Коллекция найденных групп (тип КоллекцияГруппРегулярногоВыражения).",
            "access": "Чтение"
          }
        }
      },
      "ГруппаРегулярногоВыражения": {
        "name": "ГруппаРегулярногоВыражения",
        "name_en": "RegExGroup",
        "properties": {
          "Значение": {
            "name": "Значение",
            "name_en": "Value",
            "description": "Найденная строка.",
            "access": "Чтение"
          },
          "Индекс": {
            "name": "Индекс",
            "name_en": "Index",
            "description": "Индекс найденной строки. Нумерация начинается с 0",
            "access": "Чтение"
          },
          "Длина": {
            "name": "Длина",
            "name_en": "Length",
            "description": "Длина найденной строки.",
            "access": "Чтение"
          }
        }
      },
      "РегулярноеВыражение": {
        "name": "РегулярноеВыражение",
        "name_en": "Regex",
        "properties": {
          "ИгнорироватьРегистр": {
            "name": "ИгнорироватьРегистр",
            "name_en": "IgnoreCase",
            "description": "Признак Не учитывать регистр символов. Булево",
            "access": "Чтение/Запись"
          },
          "Многострочный": {
            "name": "Многострочный",
            "name_en": "Multiline",
            "description": "Признак выполнения многострочного поиска. Булево",
            "access": "Чтение/Запись"
          }
        },
        "constructors": {
          "По регулярному выражению": {
            "name": "По регулярному выражению",
            "signature": "(pattern: Произвольный)",
            "description": "Конструктор создания регулярного выражения по заданному шаблону.",
            "params": {
              "pattern": "Строка-шаблон регулярного выражения."
            }
          }
        },
        "methods": {
          "Совпадает": {
            "name": "Совпадает",
            "name_en": "IsMatch",
            "description": "Проверяет, что строка совпадает с шаблоном регулярного выражения.",
            "returns": "Признак совпадения. Булево.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(inputString: Строка, startAt?: Число): Произвольный",
                "Параметры": {
                  "inputString": "Строка, которая проверяется.",
                  "startAt": "Число. Необязательный параметр. По-умолчанию 0. Содержит стартовую позицию, начиная с которой надо анализировать текст. Нумерация позиций в отличии от 1С начинается с 0"
                }
              }
            }
          },
          "НайтиСовпадения": {
            "name": "НайтиСовпадения",
            "name_en": "Matches",
            "description": "Находит все совпадения в строке по шаблону регулярного выражения.",
            "returns": "Коллекция совпадения (тип КоллекцияСовпаденийРегулярногоВыражения).",
            "signature": {
              "default": {
                "СтрокаПараметров": "(inputString: Строка, startAt?: Число): КоллекцияСовпаденийРегулярногоВыражения",
                "Параметры": {
                  "inputString": "Строка, которая проверяется.",
                  "startAt": "Число. Необязательный параметр. По-умолчанию 0. Содержит стартовую позицию, начиная с которой надо анализировать текст. Нумерация позиций в отличии от 1С начинается с 0"
                }
              }
            }
          },
          "Разделить": {
            "name": "Разделить",
            "name_en": "Split",
            "description": "Разделяет исходную строку на части, используя как разделитель заданное регулярное выражение.",
            "returns": "Массив полученных строк.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(inputString: Строка, count?: Число, startAt?: Число): Массив",
                "Параметры": {
                  "inputString": "Строка, которая проверяется.",
                  "count": "Число. Необязательный параметр. По-умолчанию 0 (искать все). Содержит количество искомых элементов.",
                  "startAt": "Число. Необязательный параметр. По-умолчанию 0. Содержит стартовую позицию, начиная с которой надо анализировать текст. Нумерация позиций в отличии от 1С начинается с 0"
                }
              }
            }
          },
          "Заменить": {
            "name": "Заменить",
            "name_en": "Replace",
            "description": "Заменяет в исходной строке все вхождения регулярного выражения на СтрокаЗамены. В строке замены можно использовать ссылки на захваченные группы, как $n, где n - номер захваченной группы ($0 - все захваченное выражение).",
            "returns": "Строку-результат замены.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(inputString: Строка, replacement: Строка): Строка",
                "Параметры": {
                  "inputString": "Строка. Текст, в котором необходимо выполнить замены.",
                  "replacement": "Строка. Текст, который будет вставляться в места замены."
                }
              }
            }
          }
        }
      },
      "TCPСоединение": {
        "name": "TCPСоединение",
        "name_en": "TCPConnection",
        "description": "Соединение по протоколу TCP. Позволяет отправлять и принимать данные с использованием TCP сокета.",
        "properties": {
          "Активно": {
            "name": "Активно",
            "name_en": "IsActive",
            "description": "Признак активности соединения. Данный признак не является надежным признаком существования соединения.  Он говорит лишь о том, что на момент получения значения данного свойства соединение было активно.",
            "access": "Чтение"
          },
          "ТаймаутОтправки": {
            "name": "ТаймаутОтправки",
            "name_en": "WriteTimeout",
            "description": "Таймаут, в течение которого система ожидает отправки данных. Если таймаут не установлен, то скрипт будет ждать начала отправки бесконечно.",
            "access": "Чтение/Запись"
          },
          "ТаймаутЧтения": {
            "name": "ТаймаутЧтения",
            "name_en": "ReadTimeout",
            "description": "Таймаут чтения данных. Если таймаут не установлен, то скрипт будет ждать начала приема данных бесконечно.",
            "access": "Чтение/Запись"
          }
        },
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "(host: Произвольный, port: Произвольный)",
            "description": "Подключение к удаленному TCP-сокету",
            "params": {
              "host": "адрес машины",
              "port": "порт сокета"
            }
          }
        },
        "methods": {
          "ПрочитатьСтроку": {
            "name": "ПрочитатьСтроку",
            "name_en": "ReadString",
            "description": "Прочитать данные из сокета в виде строки.",
            "returns": "Строка. Данные прочитанные из сокета",
            "signature": {
              "default": {
                "СтрокаПараметров": "(encoding?: Строка): Строка",
                "Параметры": {
                  "encoding": "КодировкаТекста или Строка. Указывает в какой кодировке интерпретировать входящий поток байт. Значение по умолчанию: utf-8"
                }
              }
            }
          },
          "ПрочитатьДвоичныеДанные": {
            "name": "ПрочитатьДвоичныеДанные",
            "name_en": "ReadBinaryData",
            "description": "Читает сырые байты из сокета.",
            "returns": "ДвоичныеДанные",
            "signature": {
              "default": {
                "СтрокаПараметров": "(len?: Число): ДвоичныеДанные",
                "Параметры": {
                  "len": "Количество байт, которые требуется прочитать. 0 - читать до конца потока. Значение по умолчанию: 0"
                }
              }
            }
          },
          "ОтправитьСтроку": {
            "name": "ОтправитьСтроку",
            "name_en": "SendString",
            "description": "Отправка строки на удаленный хост",
            "signature": {
              "default": {
                "СтрокаПараметров": "(data: Строка, encoding?: Строка)",
                "Параметры": {
                  "data": "Строка. Данные для отправки",
                  "encoding": "КодировкаТекста или Строка. Кодировка в которой нужно записать данные в поток. По умолчанию utf-8"
                }
              }
            }
          },
          "ОтправитьДвоичныеДанные": {
            "name": "ОтправитьДвоичныеДанные",
            "name_en": "SendBinaryData",
            "description": "Отправка сырых двоичных данных на удаленный хост.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(data: ДвоичныеДанные)",
                "Параметры": {
                  "data": "ДвоичныеДанные которые нужно отправить."
                }
              }
            }
          },
          "Закрыть": {
            "name": "Закрыть",
            "name_en": "Close",
            "description": "Закрывает соединение с удаленным хостом.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          }
        }
      },
      "TCPСервер": {
        "name": "TCPСервер",
        "name_en": "TCPServer",
        "description": "Простой однопоточный tcp-сокет. Слушает входящие соединения на определенном порту",
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "(port: Произвольный)",
            "description": "Создает новый сокет с привязкой к порту.",
            "params": {
              "port": "Порт, который требуется слушать."
            }
          }
        },
        "methods": {
          "Запустить": {
            "name": "Запустить",
            "name_en": "Start",
            "description": "Метод инициализирует TCP-сервер и подготавливает к приему входящих соединений",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "Остановить": {
            "name": "Остановить",
            "name_en": "Stop",
            "description": "Останавливает прослушивание порта.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ОжидатьСоединения": {
            "name": "ОжидатьСоединения",
            "name_en": "WaitForConnection",
            "description": "Приостановить выполнение скрипта и ожидать соединений по сети. После получения соединения выполнение продолжается",
            "returns": "TCPСоединение. Объект, позволяющий обмениваться данными с удаленным хостом.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(timeout?: Число): TCPСоединение",
                "Параметры": {
                  "timeout": "Значение таймаута в миллисекундах."
                }
              }
            }
          }
        }
      },
      "ЧтениеJSON": {
        "name": "ЧтениеJSON",
        "name_en": "JSONReader",
        "description": "Предназначен для последовательного чтения JSON-данных из файла или строки.",
        "properties": {
          "ТекущаяПозиция": {
            "name": "ТекущаяПозиция",
            "name_en": "CurrentPosition",
            "description": "Указывает на позицию, находящуюся сразу после прочитанного значения. При ошибке чтение остается на позиции последнего успешно считанного символа.",
            "value": "Число (Number), Неопределено (Undefined)",
            "access": "Чтение"
          },
          "ТекущаяСтрока": {
            "name": "ТекущаяСтрока",
            "name_en": "CurrentLine",
            "description": "Указывает на позицию сразу после прочитанного значения. Например, перед чтением первого элемента - 0, после чтения первого элемента -1 .",
            "value": "Число (Number), Неопределено (Undefined)",
            "access": "Чтение"
          },
          "ТекущееЗначение": {
            "name": "ТекущееЗначение",
            "name_en": "CurrentValue",
            "description": "Содержит текущее значение:  - Число - если ТипТекущегоЗначения имеет значение Число; - Строка - если ТипТекущегоЗначения имеет значение:  - Комментарий, - ИмяСвойства, - Строка; - Булево - если ТипТекущегоЗначения имеет значение Булево, - Неопределено - если ТипТекущегоЗначения имеет значение Null. Исключение генерируется в случае, если ТипТекущегоЗначения имеет одно из следующих значений:  - НачалоМассива, - КонецМассива, - НачалоОбъекта, - КонецОбъекта, - Ничего.",
            "value": "Число (Number), Строка (String), Булево (Boolean), Неопределено (Undefined)",
            "access": "Чтение"
          },
          "ТипТекущегоЗначения": {
            "name": "ТипТекущегоЗначения",
            "name_en": "CurrentValueType",
            "description": "Тип текущего значения в документе JSON. Неопределено - если чтение еще не началось или достигнут конец файла.",
            "value": "ТипЗначенияJSON (JSONValueType)",
            "access": "Чтение"
          }
        },
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "()"
          }
        },
        "methods": {
          "Закрыть": {
            "name": "Закрыть",
            "name_en": "Close",
            "description": "Завершает чтение текста JSON из файла или строки.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ОткрытьФайл": {
            "name": "ОткрытьФайл",
            "name_en": "OpenFile",
            "description": "Открывает JSON-файл для чтения данным объектом. Если перед вызовом данного метода уже производилось чтение JSON из другого файла или строки, то чтение прекращается и объект инициализируется для чтения из указанного файла.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(JSONFileName: Строка, encoding?: Произвольный)",
                "Параметры": {
                  "JSONFileName": "Имя файла, содержащего текст JSON.",
                  "encoding": "Позволяет задать кодировку входного файла."
                }
              }
            }
          },
          "Пропустить": {
            "name": "Пропустить",
            "name_en": "Skip",
            "description": "Если текущее значение – начало массива или объекта, то пропускает его содержимое и конец. Для остальных типов значений работает аналогично методу Прочитать().",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Булево",
                "Параметры": {}
              }
            }
          },
          "Прочитать": {
            "name": "Прочитать",
            "name_en": "Read",
            "description": "Выполняет чтение значения JSON.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Булево",
                "Параметры": {}
              }
            }
          },
          "УстановитьСтроку": {
            "name": "УстановитьСтроку",
            "name_en": "SetString",
            "description": "Устанавливает строку, содержащую текст JSON для чтения данным объектом. Если перед вызовом данного метода уже производилось чтение JSON из другого файла или строки, то чтение прекращается и объект инициализируется для чтения из указанной строки.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(JSONString: Строка)",
                "Параметры": {
                  "JSONString": "Строка, содержащая текст в формате JSON."
                }
              }
            }
          }
        }
      },
      "ЗаписьJSON": {
        "name": "ЗаписьJSON",
        "name_en": "JSONWriter",
        "description": "Предназначен для организации последовательной записи объектов и текстов JSON.",
        "properties": {
          "Параметры": {
            "name": "Параметры",
            "name_en": "Settings",
            "description": "Определяет текущие параметры записи JSON.",
            "value": "ПараметрыЗаписиJSON (JSONWriterSettings)",
            "access": "Чтение"
          },
          "ПроверятьСтруктуру": {
            "name": "ПроверятьСтруктуру",
            "name_en": "ValidateStructure",
            "description": "Показывает, будет ли проводиться проверка правильности структуры записываемого JSON объекта. В случае обнаружение ошибки, будет сгенерировано исключение. Например: при попытке записать значение без имени вне массива или записать окончание объекта без начала. Установка данного свойства не имеет немедленного эффекта. Установленное значение свойства будет использовано только после открытия файла или установки строки. После создания объекта данное свойство имеет значение Истина.",
            "value": "Булево (Boolean)",
            "access": "Чтение/Запись"
          }
        },
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "()"
          }
        },
        "methods": {
          "Закрыть": {
            "name": "Закрыть",
            "name_en": "Close",
            "description": "Завершает запись текста JSON. Если производилась запись в файл, то файл закрывается. Если производилась запись в строку, то результирующая строка будет получена в качестве возвращаемого значения метода. Если производилась запись в файл, то метод вернет пустую строку.",
            "returns": "Значения данного типа содержат строку в формате Unicode произвольной длины.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Строка",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьБезОбработки": {
            "name": "ЗаписатьБезОбработки",
            "name_en": "WriteRaw",
            "description": "Выполняет запись произвольной строки в документ, при этом проверка структуры документа не выполняется. Если при использовании метода свойство ПроверятьСтруктуру установлено в значение Истина, то проверка структуры продолжается на следующем элементе.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(stringValue: Строка)",
                "Параметры": {
                  "stringValue": "Строка, записываемая в документ JSON."
                }
              }
            }
          },
          "ЗаписатьЗначение": {
            "name": "ЗаписатьЗначение",
            "name_en": "WriteValue",
            "description": "Записывает значение свойства JSON.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(value: Произвольный, useFormatWithExponent?: Булево)",
                "Параметры": {
                  "value": "Записываемое значение. Типы: Строка (String), Число (Number), Булево (Boolean), Неопределено (Undefined)",
                  "useFormatWithExponent": "Использование экспоненциальной формы записи для числовых значений. Параметр имеет смысл только если записывается значение числового типа. Значение по умолчанию: Ложь."
                }
              }
            }
          },
          "ЗаписатьИмяСвойства": {
            "name": "ЗаписатьИмяСвойства",
            "name_en": "WritePropertyName",
            "description": "Записывает имя свойства JSON.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(propertyName: Строка)",
                "Параметры": {
                  "propertyName": "Имя свойства."
                }
              }
            }
          },
          "ЗаписатьКонецМассива": {
            "name": "ЗаписатьКонецМассива",
            "name_en": "WriteEndArray",
            "description": "Записывает конец массива JSON.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьКонецОбъекта": {
            "name": "ЗаписатьКонецОбъекта",
            "name_en": "WriteEndObject",
            "description": "Записывает конец объекта JSON.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьНачалоМассива": {
            "name": "ЗаписатьНачалоМассива",
            "name_en": "WriteStartArray",
            "description": "Записывает начало массива JSON.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ЗаписатьНачалоОбъекта": {
            "name": "ЗаписатьНачалоОбъекта",
            "name_en": "WriteStartObject",
            "description": "Записывает начало объекта JSON.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ОткрытьФайл": {
            "name": "ОткрытьФайл",
            "name_en": "OpenFile",
            "description": "Открывает файл для записи JSON. Позволяет указать тип кодировки, который будет использован для записи файла JSON, а также использование BOM.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(fileName: Строка, encoding?: Строка, addBOM?: Произвольный, settings?: Произвольный)",
                "Параметры": {
                  "fileName": "Имя файла, в который будет записываться текст JSON.",
                  "encoding": "В качестве типа кодировки может быть указана одна из возможных кодировок текста. В этом случае файл будет записан в соответствующей кодировке. Если же в качестве параметра указана пустая строка или ничего не указано, то для записи файла будет использована кодировка UTF8. Поддерживаемые коды кодировок:  Значение по умолчанию: UTF-8.",
                  "addBOM": "Определяет, будет ли добавлен маркер порядка байт (BOM) к результирующему файлу JSON. Внимание. Стандарт RFC7159 настоятельно рекомендует не добавлять маркер порядка байт (BOM) к документу JSON . Значение по умолчанию: Ложь.",
                  "settings": "Параметры, используемые при открытии файла для настройки записи в формате JSON."
                }
              }
            }
          },
          "УстановитьСтроку": {
            "name": "УстановитьСтроку",
            "name_en": "SetString",
            "description": "Инициализирует объект для вывода результирующего JSON текста в строку.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(settings?: Произвольный)",
                "Параметры": {
                  "settings": "Параметры, используемые при записи объекта JSON. По умолчанию, содержит ПараметрыЗаписиJSON, сгенерированные автоматически."
                }
              }
            }
          }
        }
      },
      "HTTPСоединение": {
        "name": "HTTPСоединение",
        "name_en": "HTTPConnection",
        "description": "Объект доступа к протоколу HTTP/HTTPS. Использует семантику методов, реализованных в платформе 1С:Предприятие 8.2.18 и старше. Синтаксис методов, применявшийся в более младших версиях не поддерживается. Средства работы с HTTP находятся в статусе experimental.",
        "properties": {
          "ИспользоватьАутентификациюОС": {
            "name": "ИспользоватьАутентификациюОС",
            "name_en": "UseOSAuthentication",
            "access": "Чтение"
          },
          "Пользователь": {
            "name": "Пользователь",
            "name_en": "User",
            "access": "Чтение/Запись"
          },
          "Пароль": {
            "name": "Пароль",
            "name_en": "Password",
            "access": "Чтение/Запись"
          },
          "Сервер": {
            "name": "Сервер",
            "name_en": "Host",
            "access": "Чтение/Запись"
          },
          "Порт": {
            "name": "Порт",
            "name_en": "Port",
            "access": "Чтение/Запись"
          },
          "Прокси": {
            "name": "Прокси",
            "name_en": "Proxy",
            "access": "Чтение"
          },
          "Таймаут": {
            "name": "Таймаут",
            "name_en": "Timeout",
            "access": "Чтение/Запись"
          }
        },
        "constructors": {
          "По указанному серверу": {
            "name": "По указанному серверу",
            "signature": "(host: Произвольный, port?: Произвольный, user?: Произвольный, password?: Произвольный, proxy?: Произвольный, timeout?: Произвольный, ssl?: Произвольный, useOSAuthentication?: Произвольный)",
            "description": "Стандартный конструктор. Поддержка клиентских сертификатов HTTPS в текущей версии не реализована. Для доступа к серверу по протоколу HTTPS указывайте схему https:// в URL.",
            "params": {
              "host": "Адрес сервера (можно указать URL-схему http или https)",
              "port": "Порт сервера",
              "user": "Пользователь",
              "password": "Пароль",
              "proxy": "ИнтернетПрокси. Настройки прокси-сервера",
              "timeout": "Таймаут ожидания.",
              "ssl": "Объект ЗащищенноеСоединение. На данный момент данная механика работы с SSL не поддерживается.  Обращение к https возможно, если в адресе хоста указать протокол https. В этом случае будут использованы сертификаты из хранилища ОС. Указание произвольных клиентских и серверных сертификатов в текущей версии не поддерживается.",
              "useOSAuthentication": "Использовать аутентификацию ОС."
            }
          }
        },
        "methods": {
          "Получить": {
            "name": "Получить",
            "name_en": "Get",
            "description": "Получить данные методом GET",
            "returns": "HTTPОтвет. Ответ сервера.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(request: HTTPЗапрос, output?: Строка): HTTPОтвет",
                "Параметры": {
                  "request": "HTTPЗапрос. Данные и заголовки запроса http",
                  "output": "Строка. Имя файла, в который нужно записать ответ. Необязательный параметр."
                }
              }
            }
          },
          "Записать": {
            "name": "Записать",
            "name_en": "Put",
            "description": "Передача данных методом PUT",
            "returns": "HTTPОтвет. Ответ сервера.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(request: HTTPЗапрос): HTTPОтвет",
                "Параметры": {
                  "request": "HTTPЗапрос. Данные и заголовки запроса http"
                }
              }
            }
          },
          "ОтправитьДляОбработки": {
            "name": "ОтправитьДляОбработки",
            "name_en": "Post",
            "description": "Передача данных методом POST",
            "returns": "HTTPОтвет. Ответ сервера.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(request: HTTPЗапрос, output?: Строка): HTTPОтвет",
                "Параметры": {
                  "request": "HTTPЗапрос. Данные и заголовки запроса http",
                  "output": "Строка. Имя файла, в который нужно записать ответ. Необязательный параметр."
                }
              }
            }
          },
          "Удалить": {
            "name": "Удалить",
            "name_en": "Delete",
            "description": "Удалить данные методом DELETE",
            "returns": "HTTPОтвет. Ответ сервера.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(request: HTTPЗапрос): HTTPОтвет",
                "Параметры": {
                  "request": "HTTPЗапрос. Данные и заголовки запроса http"
                }
              }
            }
          },
          "Изменить": {
            "name": "Изменить",
            "name_en": "Patch",
            "description": "Изменяет данные на сервере при помощи PATCH-запроса",
            "returns": "HTTPОтвет. Ответ сервера.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(request: HTTPЗапрос): HTTPОтвет",
                "Параметры": {
                  "request": "HTTPЗапрос. Данные и заголовки запроса http"
                }
              }
            }
          },
          "ПолучитьЗаголовки": {
            "name": "ПолучитьЗаголовки",
            "name_en": "Head",
            "description": "Получает при помощи HEAD-запроса информацию о запрошиваемых данных, содержащуюся в заголовках, не получая сами данные.",
            "returns": "HTTPОтвет. Ответ сервера.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(request: HTTPЗапрос): HTTPОтвет",
                "Параметры": {
                  "request": "HTTPЗапрос. Данные и заголовки запроса http"
                }
              }
            }
          },
          "ВызватьHTTPМетод": {
            "name": "ВызватьHTTPМетод",
            "name_en": "CallHTTPMethod",
            "description": "Вызвать произвольный HTTP-метод",
            "returns": "HTTPОтвет. Ответ сервера.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(method: Строка, request: HTTPЗапрос, output?: Строка): HTTPОтвет",
                "Параметры": {
                  "method": "Строка. Имя метода HTTP",
                  "request": "HTTPЗапрос. Данные и заголовки запроса http",
                  "output": "Строка. Имя выходного файла"
                }
              }
            }
          }
        }
      },
      "HTTPЗапрос": {
        "name": "HTTPЗапрос",
        "name_en": "HTTPRequest",
        "description": "Данные и заголоки HTTP запроса.",
        "properties": {
          "АдресРесурса": {
            "name": "АдресРесурса",
            "name_en": "ResourceAddress",
            "description": "Относительный путь к ресурсу на сервере (не включает имя сервера)",
            "access": "Чтение/Запись"
          },
          "Заголовки": {
            "name": "Заголовки",
            "name_en": "Headers",
            "description": "Соответствие. Заголовки запроса к http-серверу",
            "access": "Чтение/Запись"
          }
        },
        "constructors": {
          "Формирование неинициализированного объекта": {
            "name": "Формирование неинициализированного объекта",
            "signature": "()"
          },
          "По адресу ресурса и заголовкам": {
            "name": "По адресу ресурса и заголовкам",
            "signature": "(resource: Произвольный, headers?: Произвольный)"
          }
        },
        "methods": {
          "УстановитьИмяФайлаТела": {
            "name": "УстановитьИмяФайлаТела",
            "name_en": "SetBodyFileName",
            "description": "Установить файл на диске в качестве тела запроса. Файл открывается на чтение и остается открытым до завершения запроса.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(filename: Строка)",
                "Параметры": {}
              }
            }
          },
          "ПолучитьИмяФайлаТела": {
            "name": "ПолучитьИмяФайлаТела",
            "name_en": "GetBodyFileName",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Произвольный",
                "Параметры": {}
              }
            }
          },
          "УстановитьТелоИзДвоичныхДанных": {
            "name": "УстановитьТелоИзДвоичныхДанных",
            "name_en": "SetBodyFromBinary",
            "description": "Установить тело запроса из объекта ДвоичныеДанные",
            "signature": {
              "default": {
                "СтрокаПараметров": "(data: ДвоичныеДанные)",
                "Параметры": {}
              }
            }
          },
          "ПолучитьТелоКакДвоичныеДанные": {
            "name": "ПолучитьТелоКакДвоичныеДанные",
            "name_en": "GetBodyAsBinary",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Произвольный",
                "Параметры": {}
              }
            }
          },
          "УстановитьТелоИзСтроки": {
            "name": "УстановитьТелоИзСтроки",
            "name_en": "SetBodyFromString",
            "description": "Установить строку в качестве содержимого запроса",
            "signature": {
              "default": {
                "СтрокаПараметров": "(data: Строка, encoding?: Произвольный)",
                "Параметры": {
                  "data": "Строка с данными",
                  "encoding": "КодировкаТекста или Строка. Кодировка в которой отправляются данные."
                }
              }
            }
          },
          "ПолучитьТелоКакСтроку": {
            "name": "ПолучитьТелоКакСтроку",
            "name_en": "GetBodyAsString",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Произвольный",
                "Параметры": {}
              }
            }
          }
        }
      },
      "HTTPОтвет": {
        "name": "HTTPОтвет",
        "name_en": "HTTPResponse",
        "description": "Ответ от HTTP-сервера",
        "properties": {
          "Заголовки": {
            "name": "Заголовки",
            "name_en": "Headers",
            "description": "Соответствие. Заголовки ответа сервера.",
            "access": "Чтение"
          },
          "КодСостояния": {
            "name": "КодСостояния",
            "name_en": "StatusCode",
            "description": "Код состояния HTTP ответа. Число.",
            "access": "Чтение"
          }
        },
        "methods": {
          "ПолучитьТелоКакСтроку": {
            "name": "ПолучитьТелоКакСтроку",
            "name_en": "GetBodyAsString",
            "description": "Получает ответ сервера в виде строки",
            "signature": {
              "default": {
                "СтрокаПараметров": "(encoding?: Произвольный): Произвольный",
                "Параметры": {
                  "encoding": "КодировкаТекста или Строка. Кодировка полученного текста. По умолчанию принимается кодировка из заголовка Content-Type"
                }
              }
            }
          },
          "ПолучитьТелоКакДвоичныеДанные": {
            "name": "ПолучитьТелоКакДвоичныеДанные",
            "name_en": "GetBodyAsBinaryData",
            "description": "Интерпретировать ответ, как ДвоичныеДанные",
            "returns": "ДвоичныеДанные",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Произвольный",
                "Параметры": {}
              }
            }
          },
          "ПолучитьИмяФайлаТела": {
            "name": "ПолучитьИмяФайлаТела",
            "name_en": "GetBodyFileName",
            "description": "Получить файл, в который записан ответ сервера.",
            "returns": "Строка. Имя файла с ответом. Если ответ не записывался в файл - возвращает Неопределено.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Произвольный",
                "Параметры": {}
              }
            }
          },
          "Закрыть": {
            "name": "Закрыть",
            "name_en": "Close",
            "description": "Закрыть HTTP ответ и освободить ресурсы",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ИнтернетПрокси": {
        "name": "ИнтернетПрокси",
        "name_en": "InternetProxy",
        "description": "Параметры прокси-сервера для доступа в Интернет. В текущей реализации поддерживается только HTTP прокси. Стандартные методы объекта ИнтернетПрокси из 1С:Предприятие для FTP и SOCKS не реализованы.",
        "properties": {
          "НеИспользоватьПроксиДляАдресов": {
            "name": "НеИспользоватьПроксиДляАдресов",
            "name_en": "BypassProxyOnAddresses",
            "access": "Чтение/Запись"
          },
          "НеИспользоватьПроксиДляЛокальныхАдресов": {
            "name": "НеИспользоватьПроксиДляЛокальныхАдресов",
            "name_en": "BypassProxyOnLocal",
            "access": "Чтение/Запись"
          }
        },
        "constructors": {
          "Формирование неинициализированного объекта": {
            "name": "Формирование неинициализированного объекта",
            "signature": "()"
          },
          "Конструктор для системных настроек прокси": {
            "name": "Конструктор для системных настроек прокси",
            "signature": "(useDefault: Произвольный)"
          }
        },
        "methods": {
          "Пользователь": {
            "name": "Пользователь",
            "name_en": "User",
            "signature": {
              "default": {
                "СтрокаПараметров": "(protocol: Строка): Строка",
                "Параметры": {}
              }
            }
          },
          "Пароль": {
            "name": "Пароль",
            "name_en": "Password",
            "signature": {
              "default": {
                "СтрокаПараметров": "(protocol: Строка): Строка",
                "Параметры": {}
              }
            }
          },
          "Сервер": {
            "name": "Сервер",
            "name_en": "Server",
            "signature": {
              "default": {
                "СтрокаПараметров": "(protocol: Строка): Строка",
                "Параметры": {}
              }
            }
          },
          "Порт": {
            "name": "Порт",
            "name_en": "Password",
            "signature": {
              "default": {
                "СтрокаПараметров": "(protocol: Строка): Число",
                "Параметры": {}
              }
            }
          },
          "Установить": {
            "name": "Установить",
            "name_en": "Set",
            "signature": {
              "default": {
                "СтрокаПараметров": "(protocol: Строка, server: Строка, port?: Число, username?: Строка, password?: Строка, useOSAuthentication?: Булево)",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ХешированиеДанных": {
        "name": "ХешированиеДанных",
        "name_en": "DataHashing",
        "properties": {
          "ХешФункция": {
            "name": "ХешФункция",
            "name_en": "HashFunction",
            "access": "Чтение"
          },
          "ХешСумма": {
            "name": "ХешСумма",
            "name_en": "HashSum",
            "access": "Чтение"
          },
          "ХешСуммаСтрокой": {
            "name": "ХешСуммаСтрокой",
            "name_en": "HashSumOfString",
            "access": "Чтение"
          }
        },
        "constructors": {
          "По указанной хеш-функции": {
            "name": "По указанной хеш-функции",
            "signature": "(providerEnum: Произвольный)"
          }
        },
        "methods": {
          "Добавить": {
            "name": "Добавить",
            "name_en": "Append",
            "signature": {
              "default": {
                "СтрокаПараметров": "(toAdd: Произвольный)",
                "Параметры": {}
              }
            }
          },
          "ДобавитьФайл": {
            "name": "ДобавитьФайл",
            "name_en": "AppendFile",
            "signature": {
              "default": {
                "СтрокаПараметров": "(path: Строка)",
                "Параметры": {}
              }
            }
          },
          "Очистить": {
            "name": "Очистить",
            "name_en": "Clear",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ДвоичныеДанные": {
        "name": "ДвоичныеДанные",
        "name_en": "BinaryData",
        "constructors": {
          "На основании файла": {
            "name": "На основании файла",
            "signature": "(filename: Произвольный)"
          }
        },
        "methods": {
          "Размер": {
            "name": "Размер",
            "name_en": "Size",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "Записать": {
            "name": "Записать",
            "name_en": "Write",
            "signature": {
              "default": {
                "СтрокаПараметров": "(filename: Строка)",
                "Параметры": {}
              }
            }
          },
          "ОткрытьПотокДляЧтения": {
            "name": "ОткрытьПотокДляЧтения",
            "name_en": "OpenStreamForRead",
            "description": "Открывает поток для чтения двоичных данных.",
            "returns": "Представляет собой поток данных, который можно последовательно читать и/или в который можно последовательно писать.  Экземпляры объектов данного типа можно получить с помощью различных методов других объектов.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Поток",
                "Параметры": {}
              }
            }
          }
        }
      },
      "ФайловыйПоток": {
        "name": "ФайловыйПоток",
        "name_en": "FileStream",
        "description": "Специализированная версия объекта Поток для работы данными, расположенными в файле на диске. Предоставляет возможность чтения из потока, записи в поток и изменения текущей позиции.  По умолчанию, все операции с файловым потоком являются буферизированными, размер буфера по умолчанию - 8 КБ. Размер буфера можно изменить, в том числе - полностью отключить буферизацию при вызове конструктора.  Следует учитывать, что помимо буферизации существует кэширование чтения и записи файлов в операционной системе, на которое невозможно повлиять программно.",
        "properties": {
          "ДоступнаЗапись": {
            "name": "ДоступнаЗапись",
            "name_en": "CanWrite",
            "description": "Признак доступности записи в поток.",
            "value": "Булево (Boolean)",
            "access": "Чтение"
          },
          "ДоступноИзменениеПозиции": {
            "name": "ДоступноИзменениеПозиции",
            "name_en": "CanSeek",
            "description": "Признак доступности произвольного изменения позиции чтения/записи в потоке.",
            "value": "Булево (Boolean)",
            "access": "Чтение"
          },
          "ДоступноЧтение": {
            "name": "ДоступноЧтение",
            "name_en": "CanRead",
            "description": "Признак доступности чтения из потока.",
            "value": "Булево (Boolean)",
            "access": "Чтение"
          },
          "ИмяФайла": {
            "name": "ИмяФайла",
            "name_en": "FileName",
            "description": "Содержит полное имя файла, включая путь",
            "access": "Чтение"
          }
        },
        "constructors": {
          "С указанием режима открытия": {
            "name": "С указанием режима открытия",
            "signature": "(filename: Произвольный, openMode: Произвольный, bufferSize?: Произвольный)"
          },
          "С указанием режима открытия и уровня доступа": {
            "name": "С указанием режима открытия и уровня доступа",
            "signature": "(filename: Произвольный, openMode: Произвольный, access: Произвольный, bufferSize?: Произвольный)"
          }
        },
        "methods": {
          "Закрыть": {
            "name": "Закрыть",
            "name_en": "Close",
            "description": "Вызов данного метода завершает работу с потоком. При попытке вызвать любой метод объекта, кроме метода Закрыть, будет вызвано исключение.  При повторном вызове данного метода никаких действий выполняться не будет. Выполняемое действие зависит от используемого типа потока.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "Записать": {
            "name": "Записать",
            "name_en": "Write",
            "description": "Записывает в поток заданное количество байтов из буфера по заданному смещению. Если в буфере меньше данных, чем требуется записать, вызывается исключение о недостаточном количестве данных в буфере. Запись в поток возможна только, если поток поддерживает запись. В противном случае при вызове метода будет вызвано исключение.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(buffer: БуферДвоичныхДанных, positionInBuffer: Число, number: Число)",
                "Параметры": {
                  "buffer": "Буфер, из которого выбираются данные для записи.",
                  "positionInBuffer": "Позиция в буфере, начиная с которой данные будут получены для записи в поток.",
                  "number": "Количество байт, которые требуется записать."
                }
              }
            }
          },
          "КопироватьВ": {
            "name": "КопироватьВ",
            "name_en": "CopyTo",
            "description": "Копирует данные из текущего потока в другой поток.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(targetStream: Произвольный, bufferSize?: Число)",
                "Параметры": {
                  "targetStream": "Поток, в который будет выполняться копирование.",
                  "bufferSize": "Размер буфера, используемого при копировании. Если параметр не задан, то система подбирает размер буфера автоматически."
                }
              }
            }
          },
          "Перейти": {
            "name": "Перейти",
            "name_en": "Seek",
            "description": "Сдвигает текущую позицию потока на заданное количество байтов относительно начальной позиции. Если указано отрицательное смещение, позиция сдвигается в направлении к началу потока. Если изменение позиции недоступно (ДоступноИзменениеПозиции установлено в Ложь), будет сгенерировано исключение.",
            "returns": "Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(offset: Число, initialPosition?: ПозицияВПотоке): Число",
                "Параметры": {
                  "offset": "Количество байтов, на которое нужно передвинуть позицию в потоке.",
                  "initialPosition": "Начальная позиция, от которой отсчитывается смещение."
                }
              }
            }
          },
          "ПолучитьПотокТолькоДляЧтения": {
            "name": "ПолучитьПотокТолькоДляЧтения",
            "name_en": "GetReadonlyStream",
            "description": "Возвращает поток, который разделяет данные и текущую позицию с данным потоком, но не разрешает запись.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Поток",
                "Параметры": {}
              }
            }
          },
          "Прочитать": {
            "name": "Прочитать",
            "name_en": "Read",
            "description": "Выполняет чтение заданного количества байтов в указанный буфер по указанному смещению. Текущая позиция смещается вперед на фактическое количество прочитанных байтов. Чтение из потока возможно только, если поток поддерживает чтение. В противном случае, будет вызвано исключение. При чтении размер целевого буфера не меняется, а его содержимое перезаписывается фактически прочитанными данными. Если в буфере недостаточно места для записи прочитанных данных, происходит ошибка переполнения.",
            "returns": "Возвращает число прочитанных байт",
            "signature": {
              "default": {
                "СтрокаПараметров": "(buffer: БуферДвоичныхДанных, positionInBuffer: Число, number: Число): Число",
                "Параметры": {
                  "buffer": "Буфер, в который выполняется чтение.",
                  "positionInBuffer": "Позиция в целевом буфере, начиная с которой требуется записывать данные из потока.",
                  "number": "Количество байт, которые требуется записать в целевой буфер."
                }
              }
            }
          },
          "Размер": {
            "name": "Размер",
            "name_en": "Size",
            "description": "Получает размер данных в байтах.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "СброситьБуферы": {
            "name": "СброситьБуферы",
            "name_en": "Flush",
            "description": "Сбрасывает все промежуточные буферы и производит запись всех незаписанных данных в целевое устройство.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ТекущаяПозиция": {
            "name": "ТекущаяПозиция",
            "name_en": "CurrentPosition",
            "description": "Возвращает текущую позицию в потоке.",
            "returns": "Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "УстановитьРазмер": {
            "name": "УстановитьРазмер",
            "name_en": "SetSize",
            "description": "Устанавливает размер потока. Если текущий размер превышает заданный, поток будет сокращен до заданного размера, а информация, превышающая заданный размер, будет потеряна. Если текущий размер потока меньше заданного, то содержимое потока между старым и новым размером не определено.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(size: Число)",
                "Параметры": {
                  "size": "Устанавливаемый размер потока."
                }
              }
            }
          }
        }
      },
      "ПотокВПамяти": {
        "name": "ПотокВПамяти",
        "name_en": "MemoryStream",
        "description": "Представляет собой поток данных, который можно последовательно читать и/или в который можно последовательно писать.  Экземпляры объектов данного типа можно получить с помощью различных методов других объектов.",
        "properties": {
          "ДоступнаЗапись": {
            "name": "ДоступнаЗапись",
            "name_en": "CanWrite",
            "description": "Признак доступности записи в поток.",
            "value": "Булево (Boolean)",
            "access": "Чтение"
          },
          "ДоступноИзменениеПозиции": {
            "name": "ДоступноИзменениеПозиции",
            "name_en": "CanSeek",
            "description": "Признак доступности произвольного изменения позиции чтения/записи в потоке.",
            "value": "Булево (Boolean)",
            "access": "Чтение"
          },
          "ДоступноЧтение": {
            "name": "ДоступноЧтение",
            "name_en": "CanRead",
            "description": "Признак доступности чтения из потока.",
            "value": "Булево (Boolean)",
            "access": "Чтение"
          }
        },
        "constructors": {
          "По буферу или начальной емкости": {
            "name": "По буферу или начальной емкости",
            "signature": "(bufferOrCapacity: Произвольный)",
            "description": "Создает поток, в качестве нижележащего хранилища для которого используется заданный байтовый буфер. Ёмкость потока ограничена размером буфера. При выходе за границы буфера будет сгенерировано исключение. Возможность записи в поток зависит от возможности изменения передаваемого буфера.",
            "params": {
              "bufferOrCapacity": "Буфер, на основании которого будет создан поток или начальная емкость будущего потока."
            }
          },
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "()",
            "description": "Создает поток в памяти с расширяемой емкостью. Данный вариант можно использовать для работы с достаточно большими объемами данных, т.к. данные хранятся постранично, а не в виде одного последовательного блока."
          }
        },
        "methods": {
          "Закрыть": {
            "name": "Закрыть",
            "name_en": "Close",
            "description": "Вызов данного метода завершает работу с потоком. При попытке вызвать любой метод объекта, кроме метода Закрыть, будет вызвано исключение.  При повторном вызове данного метода никаких действий выполняться не будет. Выполняемое действие зависит от используемого типа потока.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "Записать": {
            "name": "Записать",
            "name_en": "Write",
            "description": "Записывает в поток заданное количество байтов из буфера по заданному смещению. Если в буфере меньше данных, чем требуется записать, вызывается исключение о недостаточном количестве данных в буфере. Запись в поток возможна только, если поток поддерживает запись. В противном случае при вызове метода будет вызвано исключение.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(buffer: БуферДвоичныхДанных, positionInBuffer: Число, number: Число)",
                "Параметры": {
                  "buffer": "Буфер, из которого выбираются данные для записи.",
                  "positionInBuffer": "Позиция в буфере, начиная с которой данные будут получены для записи в поток.",
                  "number": "Количество байт, которые требуется записать."
                }
              }
            }
          },
          "КопироватьВ": {
            "name": "КопироватьВ",
            "name_en": "CopyTo",
            "description": "Копирует данные из текущего потока в другой поток.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(targetStream: Произвольный, bufferSize?: Число)",
                "Параметры": {
                  "targetStream": "Поток, в который будет выполняться копирование.",
                  "bufferSize": "Размер буфера, используемого при копировании. Если параметр не задан, то система подбирает размер буфера автоматически."
                }
              }
            }
          },
          "Перейти": {
            "name": "Перейти",
            "name_en": "Seek",
            "description": "Сдвигает текущую позицию потока на заданное количество байтов относительно начальной позиции. Если указано отрицательное смещение, позиция сдвигается в направлении к началу потока. Если изменение позиции недоступно (ДоступноИзменениеПозиции установлено в Ложь), будет сгенерировано исключение.",
            "returns": "Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(offset: Число, initialPosition?: ПозицияВПотоке): Число",
                "Параметры": {
                  "offset": "Количество байтов, на которое нужно передвинуть позицию в потоке.",
                  "initialPosition": "Начальная позиция, от которой отсчитывается смещение."
                }
              }
            }
          },
          "ПолучитьПотокТолькоДляЧтения": {
            "name": "ПолучитьПотокТолькоДляЧтения",
            "name_en": "GetReadonlyStream",
            "description": "Возвращает поток, который разделяет данные и текущую позицию с данным потоком, но не разрешает запись.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Поток",
                "Параметры": {}
              }
            }
          },
          "Прочитать": {
            "name": "Прочитать",
            "name_en": "Read",
            "description": "Выполняет чтение заданного количества байтов в указанный буфер по указанному смещению. Текущая позиция смещается вперед на фактическое количество прочитанных байтов. Чтение из потока возможно только, если поток поддерживает чтение. В противном случае, будет вызвано исключение. При чтении размер целевого буфера не меняется, а его содержимое перезаписывается фактически прочитанными данными. Если в буфере недостаточно места для записи прочитанных данных, происходит ошибка переполнения.",
            "returns": "Возвращает число прочитанных байт",
            "signature": {
              "default": {
                "СтрокаПараметров": "(buffer: БуферДвоичныхДанных, positionInBuffer: Число, number: Число): Число",
                "Параметры": {
                  "buffer": "Буфер, в который выполняется чтение.",
                  "positionInBuffer": "Позиция в целевом буфере, начиная с которой требуется записывать данные из потока.",
                  "number": "Количество байт, которые требуется записать в целевой буфер."
                }
              }
            }
          },
          "Размер": {
            "name": "Размер",
            "name_en": "Size",
            "description": "Получает размер данных в байтах.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "СброситьБуферы": {
            "name": "СброситьБуферы",
            "name_en": "Flush",
            "description": "Сбрасывает все промежуточные буферы и производит запись всех незаписанных данных в целевое устройство.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ТекущаяПозиция": {
            "name": "ТекущаяПозиция",
            "name_en": "CurrentPosition",
            "description": "Возвращает текущую позицию в потоке.",
            "returns": "Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "УстановитьРазмер": {
            "name": "УстановитьРазмер",
            "name_en": "SetSize",
            "description": "Устанавливает размер потока. Если текущий размер превышает заданный, поток будет сокращен до заданного размера, а информация, превышающая заданный размер, будет потеряна. Если текущий размер потока меньше заданного, то содержимое потока между старым и новым размером не определено.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(size: Число)",
                "Параметры": {
                  "size": "Устанавливаемый размер потока."
                }
              }
            }
          }
        }
      },
      "Поток": {
        "name": "Поток",
        "name_en": "Stream",
        "description": "Представляет собой поток данных, который можно последовательно читать и/или в который можно последовательно писать.  Экземпляры объектов данного типа можно получить с помощью различных методов других объектов.",
        "properties": {
          "ДоступнаЗапись": {
            "name": "ДоступнаЗапись",
            "name_en": "CanWrite",
            "description": "Признак доступности записи в поток.",
            "value": "Булево (Boolean)",
            "access": "Чтение"
          },
          "ДоступноИзменениеПозиции": {
            "name": "ДоступноИзменениеПозиции",
            "name_en": "CanSeek",
            "description": "Признак доступности произвольного изменения позиции чтения/записи в потоке.",
            "value": "Булево (Boolean)",
            "access": "Чтение"
          },
          "ДоступноЧтение": {
            "name": "ДоступноЧтение",
            "name_en": "CanRead",
            "description": "Признак доступности чтения из потока.",
            "value": "Булево (Boolean)",
            "access": "Чтение"
          }
        },
        "methods": {
          "Закрыть": {
            "name": "Закрыть",
            "name_en": "Close",
            "description": "Вызов данного метода завершает работу с потоком. При попытке вызвать любой метод объекта, кроме метода Закрыть, будет вызвано исключение.  При повторном вызове данного метода никаких действий выполняться не будет. Выполняемое действие зависит от используемого типа потока.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "Записать": {
            "name": "Записать",
            "name_en": "Write",
            "description": "Записывает в поток заданное количество байтов из буфера по заданному смещению. Если в буфере меньше данных, чем требуется записать, вызывается исключение о недостаточном количестве данных в буфере. Запись в поток возможна только, если поток поддерживает запись. В противном случае при вызове метода будет вызвано исключение.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(buffer: БуферДвоичныхДанных, positionInBuffer: Число, number: Число)",
                "Параметры": {
                  "buffer": "Буфер, из которого выбираются данные для записи.",
                  "positionInBuffer": "Позиция в буфере, начиная с которой данные будут получены для записи в поток.",
                  "number": "Количество байт, которые требуется записать."
                }
              }
            }
          },
          "КопироватьВ": {
            "name": "КопироватьВ",
            "name_en": "CopyTo",
            "description": "Копирует данные из текущего потока в другой поток.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(targetStream: Произвольный, bufferSize?: Число)",
                "Параметры": {
                  "targetStream": "Поток, в который будет выполняться копирование.",
                  "bufferSize": "Размер буфера, используемого при копировании. Если параметр не задан, то система подбирает размер буфера автоматически."
                }
              }
            }
          },
          "Перейти": {
            "name": "Перейти",
            "name_en": "Seek",
            "description": "Сдвигает текущую позицию потока на заданное количество байтов относительно начальной позиции. Если указано отрицательное смещение, позиция сдвигается в направлении к началу потока. Если изменение позиции недоступно (ДоступноИзменениеПозиции установлено в Ложь), будет сгенерировано исключение.",
            "returns": "Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(offset: Число, initialPosition?: ПозицияВПотоке): Число",
                "Параметры": {
                  "offset": "Количество байтов, на которое нужно передвинуть позицию в потоке.",
                  "initialPosition": "Начальная позиция, от которой отсчитывается смещение."
                }
              }
            }
          },
          "ПолучитьПотокТолькоДляЧтения": {
            "name": "ПолучитьПотокТолькоДляЧтения",
            "name_en": "GetReadonlyStream",
            "description": "Возвращает поток, который разделяет данные и текущую позицию с данным потоком, но не разрешает запись.",
            "returns": "Представляет собой поток данных, который можно последовательно читать и/или в который можно последовательно писать.  Экземпляры объектов данного типа можно получить с помощью различных методов других объектов.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Поток",
                "Параметры": {}
              }
            }
          },
          "Прочитать": {
            "name": "Прочитать",
            "name_en": "Read",
            "description": "Выполняет чтение заданного количества байтов в указанный буфер по указанному смещению. Текущая позиция смещается вперед на фактическое количество прочитанных байтов. Чтение из потока возможно только, если поток поддерживает чтение. В противном случае, будет вызвано исключение. При чтении размер целевого буфера не меняется, а его содержимое перезаписывается фактически прочитанными данными. Если в буфере недостаточно места для записи прочитанных данных, происходит ошибка переполнения.",
            "returns": "Возвращает число прочитанных байт",
            "signature": {
              "default": {
                "СтрокаПараметров": "(buffer: БуферДвоичныхДанных, positionInBuffer: Число, number: Число): Число",
                "Параметры": {
                  "buffer": "Буфер, в который выполняется чтение.",
                  "positionInBuffer": "Позиция в целевом буфере, начиная с которой требуется записывать данные из потока.",
                  "number": "Количество байт, которые требуется записать в целевой буфер."
                }
              }
            }
          },
          "Размер": {
            "name": "Размер",
            "name_en": "Size",
            "description": "Получает размер данных в байтах.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "СброситьБуферы": {
            "name": "СброситьБуферы",
            "name_en": "Flush",
            "description": "Сбрасывает все промежуточные буферы и производит запись всех незаписанных данных в целевое устройство.",
            "signature": {
              "default": {
                "СтрокаПараметров": "()",
                "Параметры": {}
              }
            }
          },
          "ТекущаяПозиция": {
            "name": "ТекущаяПозиция",
            "name_en": "CurrentPosition",
            "description": "Возвращает текущую позицию в потоке.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(): Число",
                "Параметры": {}
              }
            }
          },
          "УстановитьРазмер": {
            "name": "УстановитьРазмер",
            "name_en": "SetSize",
            "description": "Устанавливает размер потока. Если текущий размер превышает заданный, поток будет сокращен до заданного размера, а информация, превышающая заданный размер, будет потеряна. Если текущий размер потока меньше заданного, то содержимое потока между старым и новым размером не определено.",
            "signature": {
              "default": {
                "СтрокаПараметров": "(size: Число)",
                "Параметры": {
                  "size": "Устанавливаемый размер потока."
                }
              }
            }
          }
        }
      },
      "ИнформацияОДиске": {
        "name": "ИнформацияОДиске",
        "name_en": "DriveInfo",
        "properties": {
          "Доступно": {
            "name": "Доступно",
            "name_en": "AvailableFreeSpace",
            "description": "Указывает объем доступного свободного места на диске в байтах.",
            "access": "Чтение"
          },
          "ИмяФС": {
            "name": "ИмяФС",
            "name_en": "DriveFormat",
            "description": "Получает имя файловой системы",
            "access": "Чтение"
          },
          "ТипДиска": {
            "name": "ТипДиска",
            "name_en": "DriveType",
            "description": "Возвращает тип диска",
            "value": "ТипДиска",
            "access": "Чтение"
          },
          "Готов": {
            "name": "Готов",
            "name_en": "IsReady",
            "description": "Получает значение, указывающее состояние готовности диска.",
            "access": "Чтение"
          },
          "Имя": {
            "name": "Имя",
            "name_en": "Name",
            "description": "Возвращает имя диска",
            "access": "Чтение"
          },
          "КорневойКаталог": {
            "name": "КорневойКаталог",
            "name_en": "RootDirectory",
            "description": "Возвращает корневой каталог диска.",
            "access": "Чтение"
          },
          "ОбщийОбъемСвободногоМеста": {
            "name": "ОбщийОбъемСвободногоМеста",
            "name_en": "TotalFreeSpace",
            "description": "Возвращает общий объем свободного места, доступного на диске, в байтах",
            "access": "Чтение"
          },
          "РазмерДиска": {
            "name": "РазмерДиска",
            "name_en": "TotalSize",
            "description": "Возвращает общий размер места для хранения на диске в байтах.",
            "access": "Чтение"
          },
          "МеткаТома": {
            "name": "МеткаТома",
            "name_en": "VolumeLabel",
            "description": "Возвращает или задает метку тома диска.",
            "access": "Чтение/Запись"
          }
        },
        "constructors": {
          "По умолчанию": {
            "name": "По умолчанию",
            "signature": "(driveName: Произвольный)"
          }
        }
      }
    },
    "systemEnum": {
        "ЦветКонсоли": {
            "name": "ЦветКонсоли",
            "name_en": "ConsoleColor",
            "description": "Цвет шрифта текста, выводимого в консоли.",
            "values": {
                "Белый": {
                    "name": "Белый",
                    "name_en": "White",
                    "description": "Белый"
                },
                "Черный": {
                    "name": "Черный",
                    "name_en": "Black",
                    "description": "Черный"
                },
                "Синий": {
                    "name": "Синий",
                    "name_en": "Blue",
                    "description": "Синий"
                },
                "Желтый": {
                    "name": "Желтый",
                    "name_en": "Yellow",
                    "description": "Желтый"
                },
                "Красный": {
                    "name": "Красный",
                    "name_en": "Red",
                    "description": "Красный"
                },
                "Зеленый": {
                    "name": "Зеленый",
                    "name_en": "Green",
                    "description": "Зеленый"
                },
                "Бирюза": {
                    "name": "Бирюза",
                    "name_en": "Cyan",
                    "description": "Бирюза"
                },
                "Малиновый": {
                    "name": "Малиновый",
                    "name_en": "Magenta",
                    "description": "Малиновый"
                },
                "Серый": {
                    "name": "Серый",
                    "name_en": "Gray",
                    "description": "Серый"
                }
            }
        },
        "СпособКодированияСтроки": {
            "name": "СпособКодированияСтроки",
            "name_en": "StringEncodingMethod",
            "description": "Варианты кодирования строк.",
            "values": {
                "КодировкаURL": {
                    "name": "КодировкаURL",
                    "name_en": "URLEncoding",
                    "description": "Кодировать (раскодировать) в URL кодировке."
                },
                "URLВКодировкеURL": {
                    "name": "URLВКодировкеURL",
                    "name_en": "URLInURLEncoding",
                    "description": "Кодировать (раскодировать) строку URL в URL кодировке. Спецсимволы URL ( !#$%\\'()*+,/:;=?@[] ) не кодируются."
                }
            }
        },
        "СпециальнаяПапка": {
            "name": "СпециальнаяПапка",
            "name_en": "SpecialFolder",
            "description": "Системное перечисление для специальных папок.",
            "values": {
                "МоиДокументы": {
                    "name": "МоиДокументы",
                    "name_en": "MyDocuments",
                    "description": "Папка Мои документы."
                },
                "ДанныеПриложений": {
                    "name": "ДанныеПриложений",
                    "name_en": "ApplicationData",
                    "description": "Каталог, выполняющий функции общего репозитория для данных приложения текущего перемещающегося пользователя."
                },
                "ЛокальныйКаталогДанныхПриложений": {
                    "name": "ЛокальныйКаталогДанныхПриложений",
                    "name_en": "LocalApplicationData",
                    "description": "Каталог, служащий общим репозиторием данных приложения, используемых текущим пользователем, который не перемещается."
                },
                "РабочийСтол": {
                    "name": "РабочийСтол",
                    "name_en": "Desktop",
                    "description": "Логический рабочий стол, а не физическое местоположение файлов системы."
                },
                "КаталогРабочийСтол": {
                    "name": "КаталогРабочийСтол",
                    "name_en": "DesktopDirectory",
                    "description": "Каталог, используемый для физического хранения файловых объектов рабочего стола."
                },
                "МояМузыка": {
                    "name": "МояМузыка",
                    "name_en": "MyMusic",
                    "description": "Папка Моя музыка."
                },
                "МоиРисунки": {
                    "name": "МоиРисунки",
                    "name_en": "MyPictures",
                    "description": "Папка Мои рисунки."
                },
                "Шаблоны": {
                    "name": "Шаблоны",
                    "name_en": "Templates",
                    "description": "Каталог, служащий общим репозиторием для шаблонов документов."
                },
                "МоиВидеозаписи": {
                    "name": "МоиВидеозаписи",
                    "name_en": "MyVideos",
                    "description": "Каталог файловой системы, служащий репозиторием файлов видеозаписей, принадлежащих пользователю."
                },
                "ОбщиеШаблоны": {
                    "name": "ОбщиеШаблоны",
                    "name_en": "CommonTemplates",
                    "description": "Каталог файловой системы, содержащий шаблоны, доступные всем пользователям. Эта особая папка действительна только для систем Windows NT."
                },
                "ПрофильПользователя": {
                    "name": "ПрофильПользователя",
                    "name_en": "UserProfile",
                    "description": "Папка профиля пользователя."
                },
                "ОбщийКаталогДанныхПриложения": {
                    "name": "ОбщийКаталогДанныхПриложения",
                    "name_en": "CommonApplicationData",
                    "description": "Каталог, выполняющий функции общего репозитория для данных приложения, используемого всеми пользователями."
                }
            }
        },
        "КодировкаТекста": {
            "name": "КодировкаТекста",
            "name_en": "TextEncoding",
            "description": "Определяет набор допустимых кодировок текстовых файлов.",
            "values": {
                "ANSI": {
                    "name": "ANSI",
                    "name_en": "ANSI",
                    "description": "Файл в формате ANSI."
                },
                "OEM": {
                    "name": "OEM",
                    "name_en": "OEM",
                    "description": "Файл в формате DOS."
                },
                "UTF16": {
                    "name": "UTF16",
                    "name_en": "UTF16",
                    "description": "Файл в формате UTF-16."
                },
                "UTF8": {
                    "name": "UTF8",
                    "name_en": "UTF8",
                    "description": "Файл в формате UTF-8."
                },
                "UTF8NoBOM": {
                    "name": "UTF8NoBOM",
                    "name_en": "UTF8NoBOM",
                    "description": "Файл в формате UTF-8 без BOM"
                },
                "Системная": {
                    "name": "Системная",
                    "name_en": "System",
                    "description": "Кодировка текста, соответствующая системным установкам."
                }
            }
        },
        "УровеньСжатияZIP": {
            "name": "УровеньСжатияZIP",
            "name_en": "ZIPCompressionLevel",
            "description": "Содержит варианты степени сжатия ZIP файлов.",
            "values": {
                "Минимальный": {
                    "name": "Минимальный",
                    "name_en": "Minimum",
                    "description": "Минимальный уровень сжатия и время работы."
                },
                "Оптимальный": {
                    "name": "Оптимальный",
                    "name_en": "Optimal",
                    "description": "Оптимальное сжатие - оптимальный размер, оптимальное время работы."
                },
                "Максимальный": {
                    "name": "Максимальный",
                    "name_en": "Maximum",
                    "description": "Максимальное сжатие - меньший размер, большее время работы."
                }
            }
        },
        "МетодСжатияZIP": {
            "name": "МетодСжатияZIP",
            "name_en": "ZIPCompressionMethod",
            "description": "Метод сжатия ZIP",
            "values": {
                "Копирование": {
                    "name": "Копирование",
                    "name_en": "Copy",
                    "description": "Копирование"
                },
                "Сжатие": {
                    "name": "Сжатие",
                    "name_en": "Deflate",
                    "description": "Сжатие"
                }
            }
        },
        "МетодШифрованияZIP": {
            "name": "МетодШифрованияZIP",
            "name_en": "ZIPEncryptionMethod",
            "description": "Содержит варианты методов шифрования ZIP файлов.",
            "values": {
                "AES128": {
                    "name": "AES128",
                    "name_en": "AES128",
                    "description": "Шифрование методом AES 128-бит. Не совместимо со старыми версиями ZIP."
                },
                "AES192": {
                    "name": "AES192",
                    "name_en": "AES192",
                    "description": "Шифрование методом AES 192-бит. Не совместимо со старыми версиями ZIP."
                },
                "AES256": {
                    "name": "AES256",
                    "name_en": "AES256",
                    "description": "Шифрование методом AES 256-бит. Не совместимо со старыми версиями ZIP."
                },
                "Zip20": {
                    "name": "Zip20",
                    "name_en": "Zip20",
                    "description": "Шифрование методом ZIP версии 2.0. Совместимо со всеми сторонними программами."
                }
            }
        },
        "РежимВосстановленияПутейФайловZIP": {
            "name": "РежимВосстановленияПутейФайловZIP",
            "name_en": "ZIPRestoreFilePathsMode",
            "description": "Содержит варианты восстановления путей файлов при извлечении из архива.",
            "values": {
                "Восстанавливать": {
                    "name": "Восстанавливать",
                    "name_en": "Restore",
                    "description": "Требуется восстанавливать пути при извлечении элемента из архива."
                },
                "НеВосстанавливать": {
                    "name": "НеВосстанавливать",
                    "name_en": "DontRestore",
                    "description": "При извлечении из архива пути файлов игнорируются."
                }
            }
        },
        "РежимСохраненияПутейZIP": {
            "name": "РежимСохраненияПутейZIP",
            "name_en": "ZIPStorePathsMode",
            "description": "Содержит варианты методов сохранения путей файлов при помещении их в архив.",
            "values": {
                "НеСохранятьПути": {
                    "name": "НеСохранятьПути",
                    "name_en": "DontStorePath",
                    "description": "Не сохранять пути."
                },
                "СохранятьОтносительныеПути": {
                    "name": "СохранятьОтносительныеПути",
                    "name_en": "StoreRelativePath",
                    "description": "При помещении в архив сохраняются относительные пути от указанного каталога."
                },
                "СохранятьПолныеПути": {
                    "name": "СохранятьПолныеПути",
                    "name_en": "StoreFullPath",
                    "description": "При помещении в архив сохраняются полные пути файлов."
                }
            }
        },
        "РежимОбработкиПодкаталоговZIP": {
            "name": "РежимОбработкиПодкаталоговZIP",
            "name_en": "ZIPSubDirProcessingMode",
            "description": "Содержит варианты обработки масок файлов в именах для упаковки в ZIP архив.",
            "values": {
                "НеОбрабатывать": {
                    "name": "НеОбрабатывать",
                    "name_en": "DontProcess",
                    "description": "При задании маски в качестве имени для архивации подкаталоги не будут обработаны."
                },
                "ОбрабатыватьРекурсивно": {
                    "name": "ОбрабатыватьРекурсивно",
                    "name_en": "ProcessRecursively",
                    "description": "При задании маски в качестве пути для архивации подкаталоги также будут рекурсивно обработаны."
                }
            }
        },
        "ТипУзлаXML": {
            "name": "ТипУзлаXML",
            "name_en": "XMLNodeType",
            "description": "Содержит варианты узлов XML, которые могут быть получены при чтении XML с помощью объекта ЧтениеXML.",
            "values": {
                "Атрибут": {
                    "name": "Атрибут",
                    "name_en": "Attribute",
                    "description": "Соответствует атрибуту элемента XML."
                },
                "ИнструкцияОбработки": {
                    "name": "ИнструкцияОбработки",
                    "name_en": "ProcessingInstruction",
                    "description": "Соответствует инструкции обработки XML."
                },
                "Комментарий": {
                    "name": "Комментарий",
                    "name_en": "Comment",
                    "description": "Узел комментария."
                },
                "КонецСущности": {
                    "name": "КонецСущности",
                    "name_en": "EndEntity",
                    "description": "Конец разбора разыменованной сущности XML."
                },
                "КонецЭлемента": {
                    "name": "КонецЭлемента",
                    "name_en": "EndElement",
                    "description": "Соответствует концу элемента XML."
                },
                "НачалоЭлемента": {
                    "name": "НачалоЭлемента",
                    "name_en": "StartElement",
                    "description": "Соответствует узлу XML."
                },
                "Ничего": {
                    "name": "Ничего",
                    "name_en": "None",
                    "description": "Нет никакого узла. Чтение еще не начато, или уже все прочитано."
                },
                "Нотация": {
                    "name": "Нотация",
                    "name_en": "Notation",
                    "description": "Нотация XML."
                },
                "ОбъявлениеXML": {
                    "name": "ОбъявлениеXML",
                    "name_en": "XMLDeclaration",
                    "description": "Объявление документа XML."
                },
                "ОпределениеТипаДокумента": {
                    "name": "ОпределениеТипаДокумента",
                    "name_en": "DocumentTypeDefinition",
                    "description": "Узел определения типа документа (DTD)."
                },
                "ПробельныеСимволы": {
                    "name": "ПробельныеСимволы",
                    "name_en": "Whitespace",
                    "description": "Пробельные символы."
                },
                "СекцияCDATA": {
                    "name": "СекцияCDATA",
                    "name_en": "CDATASection",
                    "description": "Узел секции CDATA."
                },
                "СсылкаНаСущность": {
                    "name": "СсылкаНаСущность",
                    "name_en": "EntityReference",
                    "description": "Узел ссылки на сущность XML."
                },
                "Сущность": {
                    "name": "Сущность",
                    "name_en": "Entity",
                    "description": "Узел определения сущности XML."
                },
                "Текст": {
                    "name": "Текст",
                    "name_en": "Text",
                    "description": "Соответствует тексту элемента XML."
                }
            }
        },
        "ЭкранированиеСимволовJSON": {
            "name": "ЭкранированиеСимволовJSON",
            "name_en": "JSONCharactersEscapeMode",
            "description": "Экранирование символов JSON",
            "values": {
                "Нет": {
                    "name": "Нет",
                    "name_en": "None",
                    "description": "Нет"
                },
                "СимволыВнеASCII": {
                    "name": "СимволыВнеASCII",
                    "name_en": "NotASCIISymbols",
                    "description": "СимволыВнеASCII"
                },
                "СимволыВнеBMP": {
                    "name": "СимволыВнеBMP",
                    "name_en": "SymbolsNotInBMP",
                    "description": "СимволыВнеBMP"
                }
            }
        },
        "ПереносСтрокJSON": {
            "name": "ПереносСтрокJSON",
            "name_en": "JSONLineBreak",
            "description": "Перенос строк JSON",
            "values": {
                "Unix": {
                    "name": "Unix",
                    "name_en": "Unix",
                    "description": "Unix"
                },
                "Windows": {
                    "name": "Windows",
                    "name_en": "Windows",
                    "description": "Windows"
                },
                "Авто": {
                    "name": "Авто",
                    "name_en": "Auto",
                    "description": "Авто"
                },
                "Нет": {
                    "name": "Нет",
                    "name_en": "None",
                    "description": "Нет"
                }
            }
        },
        "ТипЗначенияJSON": {
            "name": "ТипЗначенияJSON",
            "name_en": "JSONValueType",
            "description": "Тип значения JSON",
            "values": {
                "Null": {
                    "name": "Null",
                    "name_en": "Null",
                    "description": "Null"
                },
                "Булево": {
                    "name": "Булево",
                    "name_en": "Boolean",
                    "description": "Булево"
                },
                "ИмяСвойства": {
                    "name": "ИмяСвойства",
                    "name_en": "PropertyName",
                    "description": "ИмяСвойства"
                },
                "Комментарий": {
                    "name": "Комментарий",
                    "name_en": "Comment",
                    "description": "Комментарий"
                },
                "КонецМассива": {
                    "name": "КонецМассива",
                    "name_en": "ArrayEnd",
                    "description": "КонецМассива"
                },
                "КонецОбъекта": {
                    "name": "КонецОбъекта",
                    "name_en": "ObjectEnd",
                    "description": "КонецОбъекта"
                },
                "НачалоМассива": {
                    "name": "НачалоМассива",
                    "name_en": "ArrayStart",
                    "description": "НачалоМассива"
                },
                "НачалоОбъекта": {
                    "name": "НачалоОбъекта",
                    "name_en": "ObjectStart",
                    "description": "НачалоОбъекта"
                },
                "Ничего": {
                    "name": "Ничего",
                    "name_en": "None",
                    "description": "Ничего"
                },
                "Строка": {
                    "name": "Строка",
                    "name_en": "String",
                    "description": "Строка"
                },
                "Число": {
                    "name": "Число",
                    "name_en": "Number",
                    "description": "Число"
                }
            }
        },
        "ХешФункция": {
            "name": "ХешФункция",
            "name_en": "HashFunction",
            "description": "Варианты типов хеш-функции. Определяет способ вычисления хеш-суммы и тип вычисляемого значения.",
            "values": {
                "MD5": {
                    "name": "MD5",
                    "name_en": "MD5",
                    "description": "Вычислять значение MD5."
                },
                "SHA1": {
                    "name": "SHA1",
                    "name_en": "SHA1",
                    "description": "Вычислять значение SHA-1."
                },
                "SHA256": {
                    "name": "SHA256",
                    "name_en": "SHA256",
                    "description": "Вычислять значение SHA-256."
                },
                "SHA384": {
                    "name": "SHA384",
                    "name_en": "SHA384",
                    "description": "Вычислять значение SHA-384."
                },
                "SHA512": {
                    "name": "SHA512",
                    "name_en": "SHA512",
                    "description": "Вычислять значение SHA-512."
                },
                "CRC32": {
                    "name": "CRC32",
                    "name_en": "CRC32",
                    "description": "Вычислять значение CRC32."
                }
            }
        },
        "ТипДиска": {
            "name": "ТипДиска",
            "name_en": "DriveType",
            "description": "Типы дисков: - Диск является устройством оптических дисков, такие как компакт-ДИСК или DVD-диск. - Диск является жестким диском. - Диск является сетевым диском. - Диск не имеет корневой каталог. - Диск является диском ОЗУ. - Диск является съемное запоминающее устройство, например, дисковод гибких дисков или USB-устройство флэш-памяти. - Тип диска неизвестен.",
            "values": {
                "Неизвестный": {
                    "name": "Неизвестный",
                    "name_en": "Unknown"
                },
                "НеИмеетКорневойКаталог": {
                    "name": "НеИмеетКорневойКаталог",
                    "name_en": "NoRootDirectory"
                },
                "СъемноеЗапоминающееУстройство": {
                    "name": "СъемноеЗапоминающееУстройство",
                    "name_en": "Removable"
                },
                "ЖесткийДиск": {
                    "name": "ЖесткийДиск",
                    "name_en": "Fixed"
                },
                "СетевойДиск": {
                    "name": "СетевойДиск",
                    "name_en": "Network"
                },
                "ОптическийДиск": {
                    "name": "ОптическийДиск",
                    "name_en": "CDRom"
                },
                "ДискОЗУ": {
                    "name": "ДискОЗУ",
                    "name_en": "Ram"
                }
            }
        },
        "СтатусСообщения": {
            "name": "СтатусСообщения",
            "name_en": "MessageStatus",
            "description": "Определяет набор статусов сообщений, обозначаемых при выводе сообщений цветом.",
            "values": {
                "БезСтатуса": {
                    "name": "БезСтатуса",
                    "name_en": "WithoutStatus",
                    "description": "Без цветовой окраски."
                },
                "Важное": {
                    "name": "Важное",
                    "name_en": "Important",
                    "description": "Окрашено красным цветом."
                },
                "Внимание": {
                    "name": "Внимание",
                    "name_en": "Attention",
                    "description": "Окрашено желтым цветом."
                },
                "Информация": {
                    "name": "Информация",
                    "name_en": "Information",
                    "description": "Окрашено зеленым цветом."
                },
                "Обычное": {
                    "name": "Обычное",
                    "name_en": "Ordinary",
                    "description": "Без цветовой окраски."
                },
                "ОченьВажное": {
                    "name": "ОченьВажное",
                    "name_en": "VeryImportant",
                    "description": "Окрашено красным цветом."
                }
            }
        },
        "НаправлениеСортировки": {
            "name": "НаправлениеСортировки",
            "name_en": "SortDirection",
            "description": "Определяет возможные способы сортировки.",
            "values": {
                "Возр": {
                    "name": "Возр",
                    "name_en": "ASC",
                    "description": "Сортировка по возрастанию."
                },
                "Убыв": {
                    "name": "Убыв",
                    "name_en": "DESC",
                    "description": "Сортировка по убыванию."
                }
            }
        },
        "НаправлениеПоиска": {
            "name": "НаправлениеПоиска",
            "name_en": "SearchDirection",
            "description": "Определяет направление поиска подстроки в строке.",
            "values": {
                "СНачала": {
                    "name": "СНачала",
                    "name_en": "FromBegin",
                    "description": "Задает направление поиска от начала строки в концу."
                },
                "СКонца": {
                    "name": "СКонца",
                    "name_en": "FromEnd",
                    "description": "Задает направление поиска от конца строки к ее началу."
                }
            }
        },
        "ДопустимыйЗнак": {
            "name": "ДопустимыйЗнак",
            "name_en": "AllowedSign",
            "description": "Определяет набор допустимых знаков числа. Используется для определения свойства ДопустимыйЗнак.",
            "values": {
                "Любой": {
                    "name": "Любой",
                    "name_en": "Any",
                    "description": "Число может иметь любой знак (положительный или отрицательный)."
                },
                "Неотрицательный": {
                    "name": "Неотрицательный",
                    "name_en": "Nonnegative",
                    "description": "Число должно быть строго не отрицательным."
                }
            }
        },
        "ДопустимаяДлина": {
            "name": "ДопустимаяДлина",
            "name_en": "AllowedLength",
            "description": "Определяет варианты ограничений длины строки. Используется для определения свойства ДопустимаяДлина и в конструкторе объекта КвалификаторыСтроки, если задается длина строки отличная от нуля.",
            "values": {
                "Переменная": {
                    "name": "Переменная",
                    "name_en": "Variable",
                    "description": "Строка имеет переменную длину. Если длина присваиваемой строки будет меньше установленной, то строка не будет дополняться пробелами до необходимой длины. Если длина присваиваемой строки будет больше установленной, строка будет обрезаться."
                },
                "Фиксированная": {
                    "name": "Фиксированная",
                    "name_en": "Fixed",
                    "description": "Строка имеет фиксированную длину. Если длина присваиваемой строки будет меньше установленной, то строка будет дополняться пробелами справа до необходимой длины. Если длина присваиваемой строки будет больше установленной, строка будет обрезаться."
                }
            }
        },
        "ЧастиДаты": {
            "name": "ЧастиДаты",
            "name_en": "DateFractions",
            "description": "Определяет набор вариантов использования значений типа Дата.",
            "values": {
                "Дата": {
                    "name": "Дата",
                    "name_en": "Date",
                    "description": "Значение состоит только из даты (без времени)."
                },
                "ДатаВремя": {
                    "name": "ДатаВремя",
                    "name_en": "DateTime",
                    "description": "Значение состоит из даты и времени."
                },
                "Время": {
                    "name": "Время",
                    "name_en": "Time",
                    "description": "Значение состоит только из времени (без даты)."
                }
            }
        },
        "РежимОткрытияФайла": {
            "name": "РежимОткрытияФайла",
            "name_en": "FileOpenMode",
            "description": "Режим открытия файла в потоке",
            "values": {
                "Дописать": {
                    "name": "Дописать",
                    "name_en": "Append",
                    "description": "Дописать"
                },
                "Обрезать": {
                    "name": "Обрезать",
                    "name_en": "Truncate",
                    "description": "Обрезать"
                },
                "Открыть": {
                    "name": "Открыть",
                    "name_en": "Open",
                    "description": "Открыть"
                },
                "ОткрытьИлиСоздать": {
                    "name": "ОткрытьИлиСоздать",
                    "name_en": "OpenOrCreate",
                    "description": "Открыть или создать"
                },
                "Создать": {
                    "name": "Создать",
                    "name_en": "Create",
                    "description": "Создать"
                },
                "СоздатьНовый": {
                    "name": "СоздатьНовый",
                    "name_en": "CreateNew",
                    "description": "Создать новый"
                }
            }
        },
        "ДоступКФайлу": {
            "name": "ДоступКФайлу",
            "name_en": "FileAccess",
            "description": "Доступ к файлу в потоке",
            "values": {
                "Запись": {
                    "name": "Запись",
                    "name_en": "Write",
                    "description": "Запись"
                },
                "Чтение": {
                    "name": "Чтение",
                    "name_en": "Read",
                    "description": "Чтение"
                },
                "ЧтениеИЗапись": {
                    "name": "ЧтениеИЗапись",
                    "name_en": "ReadAndWrite",
                    "description": "Чтение и запись"
                }
            }
        },
        "ПозицияВПотоке": {
            "name": "ПозицияВПотоке",
            "name_en": "StreamPosition",
            "description": "Позиция в потоке",
            "values": {
                "Начало": {
                    "name": "Начало",
                    "name_en": "Begin",
                    "description": "Начало"
                },
                "Конец": {
                    "name": "Конец",
                    "name_en": "End",
                    "description": "Конец"
                },
                "Текущая": {
                    "name": "Текущая",
                    "name_en": "Current",
                    "description": "Текущая"
                }
            }
        },
        "ПорядокБайтов": {
            "name": "ПорядокБайтов",
            "name_en": "ByteOrder",
            "description": "Порядок байтов в потоке",
            "values": {
                "BigEndian": {
                    "name": "BigEndian",
                    "name_en": "BigEndian",
                    "description": "BigEndian"
                },
                "LittleEndian": {
                    "name": "LittleEndian",
                    "name_en": "LittleEndian",
                    "description": "LittleEndian"
                }
            }
        }
    }
  }