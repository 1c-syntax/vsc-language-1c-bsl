  exports.globalfunctions = {
    ACos: {
      description: 'Вычисляет арккосинус от аргумента Число.'
    },
    ASin: {
      description: 'Вычисляет арксинус от аргумента Число.'
    },
    ATan: {
      description: 'Вычисляет арктангенс от аргумента Число.'
    },
    Base64Значение: {
      description: 'Получает из строки закодированной по алгоритму base64 двоичные данные.'
    },
    Base64Строка: {
      description: 'Получает строку, закодированную по алгоритму base64.'
    },
    Cos: {
      description: 'Вычисляет косинус от аргумента Угол, заданного в радианах.'
    },
    Exp: {
      description: 'Вычисляет результат возведения основания натурального логарифма (числа e) в степень Число.'
    },
    Log: {
      description: 'Вычисляет натуральный логарифм параметра Число.'
    },
    Log10: {
      description: 'Вычисляет десятичный логарифм параметра Число.'
    },
    Pow: {
      description: 'Возводит число X в степень Y.'
    },
    Sin: {
      description: 'Вычисляет синус от аргумента Угол, заданного в радианах.'
    },
    Sqrt: {
      description: 'Вычисляет квадратный корень параметра Число.'
    },
    Tan: {
      description: 'Вычисляет тангенс от аргумента Угол, заданного в радианах.'
    },
    XMLЗначение: {
      description: 'Выполняет преобразование из строки, полученной из текста элемента или значения атрибута XML, в значение в соответствии с указанным типом. Выполняет действие обратное действию метода XMLСтрока.'
    },
    XMLСтрока: {
      description: 'Получает XML представление значения для помещения в текст элемента или значение атрибута XML. XML представление зависит от типа значения:   - Строка - как есть;  - Булево: Истина - как "true", Ложь - как "false";  - Дата - XML представление соответствует представлению типа dateTime схемы XML (см. http://www.w3.org/TR/xmlschema-2/#dateTime);  - Число - XML представление соответствует представлению типа decimal схемы XML (см. http://www.w3.org/TR/xmlschema-2/#decimal);  - Значение системного перечисления (для перечислений, поддерживающих XML сериализацию) - как имя значения перечисления;  - УникальныйИдентификатор - как строковое представление уникального идентификатора;  - Ссылки - как XML представление уникального идентификатора ссылки;  - ХранилищеЗначения и ДвоичныеДанные - как строка в формате base64.'
    },
    XMLТип: {
      description: 'Получает тип данных XML, соответствующий переданному в качестве параметра типу.'
    },
    XMLТипЗнч: {
      description: 'Получает тип данных XML, соответствующий типу переданного в качестве параметра значения.'
    },
    АктивноеОкно: {
      description: 'Получает текущее активное окно.'
    },
    БезопасныйРежим: {
      description: 'Получает текущее значение безопасного режима.'
    },
    БезопасныйРежимРазделенияДанных: {
      description: 'Показывает, установлен ли безопасный режим разделения данных по данному разделителю. Учитывет установку режима безопасного сеанса, определяемого установкой атрибута safe=”true” элемента zone файла default.vrd.'
    },
    Булево: {
      description: 'Преобразует полученный параметр в значение типа Булево. Преобразование числа к типу Булево производится по следующим правилам:   - 0 преобразуется в Ложь;  - остальные значения преобразуются в Истина.'
    },
    ВвестиДату: {
      description: 'Вызывает диалог для ввода даты.'
    },
    ВвестиЗначение: {
      description: 'Вызывает диалог для ввода значения заданного типа. Если тип переменной не определен и Тип представляет собой составной тип данных, то в поле ввода появляется кнопка выбора типа.'
    },
    ВвестиСтроку: {
      description: 'Вызывает диалог для ввода строки.'
    },
    ВвестиЧисло: {
      description: 'Вызывает диалог для ввода числа.'
    },
    ВозможностьЧтенияXML: {
      description: 'Производит проверку возможности чтения из XML значения указанного типа.  Данный метод получает тип данных XML из объекта ЧтениеXML, а затем пытается определить, имеется ли соответствующий тип 1С:Предприятия, аналогично тому как это делает метод ПолучитьXMLТип.'
    },
    Вопрос: {
      description: 'Выводит на экран окно вопроса.'
    },
    ВосстановитьЗначение: {
      description: 'Получает значение, сохраненное ранее с помощью метода СохранитьЗначение.'
    },
    ВРег: {
      description: 'Преобразует все символы строки в верхний регистр.'
    },
    ВыгрузитьЖурналРегистрации: {
      description: 'Выгружает журнал регистрации. Существует возможность установить фильтр, задаваемый структурой специального формата, указывающий, какие записи журнала регистрации выгружать, а также указать колонки, которые необходимо выгружать. Если указано имя входного файла, то происходит выгрузка из указанного файла.'
    },
    ВыполнитьОбработкуОповещения: {
      description: 'Запускает выполнение процедуры, описанной в параметре ВыполняемоеОповещение.  Вызывающая процедура может передать процедуру обработки результата в виде объекта ОписаниеОповещения, которая будет вызвана после получения результата блокирующего метода.'
    },
    ВыполнитьПроверкуПравДоступа: {
      description: 'Выполняет проверку прав текущего пользователя. Если право отсутствует, то вызывается исключение и в журнал регистрации пишется событие ОтказВДоступе.'
    },
    Вычислить: {
      description: 'Вычисляет переданное выражение. С помощью метода можно вычислять математические и логические выражения, а также операции конкатенации. Подробнее про выражения см. раздел "Выражения языка".'
    },
    Год: {
      description: 'Определяет год в указанной дате.'
    },
    ДанныеФормыВЗначение: {
      description: 'Преобразует данные формы в объект прикладного типа.'
    },
    Дата: {
      description: 'Преобразует полученный параметр (параметры) в значение типа Дата.'
    },
    День: {
      description: 'Определяет календарный день в указанной дате.'
    },
    ДеньГода: {
      description: 'Определяет номер дня в году для указанной даты.'
    },
    ДеньНедели: {
      description: 'Определяет номер дня недели для указанной даты.'
    },
    ДобавитьМесяц: {
      description: 'Добавляет (или вычитает) к указанной дате заданное число месяцев.'
    },
    ЗаблокироватьДанныеДляРедактирования: {
      description: 'Заблокировать данные для редактирования в управляемой форме. Вызывает исключение, если объект уже заблокирован, в том числе и методом Заблокировать.'
    },
    ЗаблокироватьРаботуПользователя: {
      description: 'Блокирует работу пользователя, минимизирует окно 1С:Предприятия и выводит диалог авторизации. Продолжение работы возможно только после ввода пароля.'
    },
    ЗавершитьРаботуСистемы: {
      description: 'Позволяет принудительно вызвать завершение работы 1С:Предприятия. В зависимости от переданного параметра будут вызываться обработчики закрытия и завершения работы системы или завершает работу безусловно.'
    },
    ЗагрузитьВнешнююКомпоненту: {
      description: 'Загружает внешний компонент и подключает ее объекты к 1С:Предприятию. Объекты этого компонента должны быть построены по технологии внешних компонентов COM.'
    },
    ЗакрытьСправку: {
      description: 'Закрывает окно со справочной информацией. Когда выбран режим показа справки в нескольких окнах, метод закроет все окна справки.'
    },
    ЗаписатьJSON: {
      description: 'Выполняет сериализацию Значение в формат JSON. Результат помещает в объект ЗаписьJSON. Если методу требуется передать значение недопустимого типа, то можно использовать функцию преобразования значения (параметры ИмяФункцииПреобразования и МодульФункцииПреобразования).'
    },
    ЗаписатьXML: {
      description: 'Выполняет сериализацию значения в формат XML.'
    },
    ЗаписатьДатуJSON: {
      description: 'Преобразовывает дату в строку для последующей записи в формат JSON. Если запись выполняется в формате ISO и в качестве варианта записи даты используется ЛокальнаяДатаСоСмещением, то в силу особенностей формата будут опущены секунды смещения местного времени относительно UTC. Пример: если смещение местного времени относительно UTC составляет 02:30:17, в результате смещение будет записано в виде: +02:30.'
    },
    ЗаписьЖурналаРегистрации: {
      description: 'Записывает событие в журнал регистрации. Предназначен для записи дополнительных событий, которые не записываются системой. Средствами встроенного языка не могут записываться системные события, записываемые при записи объектов, удалении и т.д.'
    },
    ЗаполнитьЗначенияСвойств: {
      description: 'Копирует значения свойств Источника в свойства Приемника. Сопоставление производится по именам свойств. Если указаны копируемые свойства, то в заполнении участвуют только они, параметр ИсключаяСвойства игнорируется. В противном случае, если указан параметр ИсключаяСвойства, свойства перечисленные в нем, исключаются из обработки.'
    },
    ЗапроситьРазрешениеПользователя: {
      description: 'Получает у пользователя разрешение на несколько операций с файлами, которые потом будут выполнены без дополнительных вопросов. Полученное разрешение хранится до выполнения соответствующего вызова, либо до окончания работы текущего вызова встроенного языка.'
    },
    ЗапуститьПриложение: {
      description: 'Выполняет запуск внешнего приложения либо открытие файла с использованием ассоциированного с ним приложения.'
    },
    ЗапуститьСистему: {
      description: 'Запускает новый сеанс 1С:Предприятия. Новый сеанс будет запущен с текущими установками.'
    },
    ЗафиксироватьТранзакцию: {
      description: 'Завершает успешную транзакцию. Все изменения, внесенные в информационную базу в процессе транзакции, будут записаны.'
    },
    ЗначениеВДанныеФормы: {
      description: 'Преобразует объект прикладного типа в универсальный объект данных.'
    },
    ЗначениеВСтрокуВнутр: {
      description: 'Получает системное строковое представление переданного значения.'
    },
    ЗначениеВФайл: {
      description: 'Сохраняет любое сериализуемое значение в файл.'
    },
    ЗначениеЗаполнено: {
      description: 'Функция проверяет, отличается ли переданное значение от значения по умолчанию того же типа. Не работает с мутабельными значениями. При передаче мутабельного значения функция вызывает исключение.'
    },
    ЗначениеИзСтрокиВнутр: {
      description: 'Преобразует значение из строкового системного представления во внутреннее.'
    },
    ЗначениеИзФайла: {
      description: 'Получает из файла значение, ранее сохраненное в нем при помощи функции ЗначениеВФайл. Тип возвращаемого значения определяется типом значения, сохраненного в файле.'
    },
    ИзXMLТипа: {
      description: 'Получает тип, соответствующий типу данных XML.'
    },
    ИмпортМоделиXDTO: {
      description: 'Осуществляет импорт переданного набора схем XML в модель типов XDTO. Возвращаемое значение – ОбъектXDTO, имеющий тип {http://v8.1c.ru/8.1/xdto}Model. При импорте никакой проверки правильности схемы не производится. При импорте производится преобразование структуры типов схемы в структуру типов модели. Полученная модель может быть не идентична структуре типов схемы.'
    },
    ИмяКомпьютера: {
      description: 'Получает сетевое имя компьютера.'
    },
    ИмяПользователя: {
      description: 'Получает имя пользователя, указанного при запуске программы.'
    },
    ИнициализироватьПредопределенныеДанные: {
      description: 'Инициализирует предопределенные данные в текущей области информационной базы.  Предопределенные элементы создаются у объектов метаданных, при выполнении всех следующих условий:   - В сеансе установлены и используются все разделители, в состав которых включен объект метаданных.  - Автоматическое обновление предопределенных данных для этого объекта метаданных включено.  - Предопределенные данные для этого объекта в этой области данных еще не создавались.'
    },
    ИнформацияОбОшибке: {
      description: 'Получает структурированную информацию об исключении.'
    },
    КаталогВременныхФайлов: {
      description: 'Получает имя каталога, который используется программой для размещения временных файлов.'
    },
    КаталогДокументов: {
      description: 'Предоставдяет доступ к стандартному каталогу документов.'
    },
    КаталогПрограммы: {
      description: 'Получает имя каталога, в котором расположены исполняемые файлы программы.'
    },
    КодироватьСтроку: {
      description: 'Кодирует строку в соответствии с выбранным способом кодирования.'
    },
    КодЛокализацииИнформационнойБазы: {
      description: 'Получает код локализации (язык, страна), установленный для данной информационной базы.'
    },
    КодСимвола: {
      description: 'Получает код символа, расположенного в переданной строке в позиции с указанным номером.'
    },
    КомандаСистемы: {
      description: 'Вызывает на исполнение команду операционной системы, как если бы она была введена в командной строке. Замечание! Если в передаваемой командной строке Windows используются переменные среды (environment variables) и значения этих переменных содержат пробелы, то фрагменты командной строки, в которых используются перменные среды, следует обрамлять удвоенными двойными кавычками. Например: КомандаСистемы("""""%ProgramFiles%\Internet Explorer\iexplore.exe"""" 1c.ru");'
    },
    КонецГода: {
      description: 'Определяет дату и время конца года для указанной даты.'
    },
    КонецДня: {
      description: 'Определяет дату и время конца дня для указанной даты.'
    },
    КонецКвартала: {
      description: 'Определяет дату и время конца квартала для указанной даты.'
    },
    КонецМесяца: {
      description: 'Определяет дату и время конца месяца для указанной даты.'
    },
    КонецМинуты: {
      description: 'Определяет дату и время конца минуты для указанной даты.'
    },
    КонецНедели: {
      description: 'Определяет дату и время конца недели для указанной даты.'
    },
    КонецЧаса: {
      description: 'Определяет дату и время конца часа для указанной даты.'
    },
    КонфигурацияБазыДанныхИзмененаДинамически: {
      description: 'Определяет, была ли изменена конфигурация базы данных динамически после старта. Под динамическим изменением понимается такое изменение конфигурации базы данных, при которой не потребовалось проведение реструктуризации, и в момент обновления с информационной базой работали пользователи.'
    },
    КонфигурацияИзменена: {
      description: 'Определяет факт отличия основной конфигурации от конфигурации базы данных.'
    },
    КопироватьДанныеФормы: {
      description: 'Копирует данные формы, обладающие совместимой структурой.'
    },
    КопироватьФайл: {
      description: 'Копирует файл-источник в файл-приемник. Допускается перезапись файла-приемника.'
    },
    КраткоеПредставлениеОшибки: {
      description: 'Возвращает строку, аналогичную той, что показывается в стандартном сообщении об ошибке платформы 1С:Предприятие.'
    },
    Лев: {
      description: 'Выбирает первые слева символы строки.'
    },
    Макс: {
      description: 'Определяет максимальное значение из полученных параметров.  Тот или иной семантический вариант функции определяется по типу данных первого параметра. В случае несовпадения типа второго и последующих параметров с требуемым, их значения преобразуются к требуемому типу в соответствии с правилами преобразования типов. Если тип первого параметра не соответствует ни одному из допустимых типов, то в зависимости от ситуации может производиться преобразование типов или возбуждаться состояние ошибки исполнения.'
    },
    МестноеВремя: {
      description: 'Преобразует универсальное время в местное время заданного часового пояса.'
    },
    Месяц: {
      description: 'Определяет месяц в указанной дате.'
    },
    Мин: {
      description: 'Определяет минимальное значение из полученных параметров.  Тот или иной семантический вариант функции определяется по типу данных первого параметра. В случае несовпадения типа второго и последующих параметров с требуемым, их значения преобразуются к требуемому типу в соответствии с правилами преобразования типов. Если тип первого параметра не соответствует ни одному из допустимых типов, то в зависимости от ситуации может производиться преобразование типов или возбуждаться состояние ошибки исполнения.'
    },
    Минута: {
      description: 'Определяет минуту в часе указанной даты.'
    },
    МонопольныйРежим: {
      description: 'Определяет, используется ли в данный момент монопольный режим работы с информационной базой.'
    },
    Найти: {
      description: 'Функция является устаревшей! Рекомендуется использовать функцию СтрНайти. Находит первое вхождение искомой строки как подстроки в исходной строке.'
    },
    НайтиНедопустимыеСимволыXML: {
      description: 'Проверяет символы указанной строки на соответствие рекомендации XML 1.0 и 1.1. Проверка строки начинается с символа в позиции, указанной в параметре ПозицияНачала.'
    },
    НайтиОкноПоНавигационнойСсылке: {
      description: 'Получает окно клиентского приложения.'
    },
    НайтиПомеченныеНаУдаление: {
      description: 'Осуществляет поиск всех помеченных на удаление объектов, которые доступны пользователю в рамках текущего сеанса и которые попадают в область поиска, заданную параметрами ОбластьПоиска, ВключитьОбъекты и ИсключитьОбъекты. Если параметр ОбластьПоиска неопределен или используется режим совместимости Версия8_3_4 и ниже, поиск осуществляется среди всех объектов, которые доступны в рамках текущего сеанса с учетом разделения (учитывается и условное разделение). При этом параметры ВключитьОбъекты и ИсключитьОбъекты не учитываются. Поиск выполняется среди доступных пользователю данных: у пользователя должно быть право на чтение объета, данные выбираются только после проверки прав ограничения доступа.'
    },
    НайтиПоСсылкам: {
      description: 'Осуществляет поиск ссылок на объекты, переданные в параметре СписокСсылок. Поиск выполняется только в данных, которые доступны в рамках текущего сеанса с учетом разделения (условное разделение также учитывается). Поиск осуществляется среди всех данных, из которых могут быть ссылки на переданные объекты. Если у пользователя нет доступа к объекту, будет вызвано исключение..'
    },
    НайтиФайлы: {
      description: 'Осуществляет поиск файлов и каталогов по заданной маске, расположенных в заданном каталоге.'
    },
    НачалоГода: {
      description: 'Определяет дату и время начала года для указанной даты.'
    },
    НачалоДня: {
      description: 'Определяет дату и время начала дня для указанной даты.'
    },
    НачалоКвартала: {
      description: 'Определяет дату и время начала квартала для указанной даты.'
    },
    НачалоМесяца: {
      description: 'Определяет дату и время начала месяца для указанной даты.'
    },
    НачалоМинуты: {
      description: 'Определяет дату и время начала минуты для указанной даты.'
    },
    НачалоНедели: {
      description: 'Определяет дату и время начала недели для указанной даты.'
    },
    НачалоЧаса: {
      description: 'Определяет дату и время начала часа для указанной даты.'
    },
    НачатьЗапросРазрешенияПользователя: {
      description: 'Начинает получение у пользователя разрешение на несколько операций с файлами, которые потом будут выполнены без дополнительных вопросов. Полученное разрешение хранится до выполнения соответствующего вызова, либо до окончания работы текущего вызова встроенного языка.'
    },
    НачатьЗапускПриложения: {
      description: 'Начинает запуск внешнего приложения либо открытие файла с использованием ассоциированного с ним приложения.'
    },
    НачатьКопированиеФайла: {
      description: 'Начинает копирование файла-источника в файл-приемник. Допускается перезапись файла-приемника.'
    },
    НачатьПеремещениеФайла: {
      description: 'Начинает перемещение (переименование) указанного файла.'
    },
    НачатьПодключениеВнешнейКомпоненты: {
      description: 'Начинает подключение к "1С:Предприятию" объекта внешнего компонента.  Внешние компоненты могут храниться в информационной базе или макетах конфигурации в виде ZIP-архива или в виде двоичных данных. При работе на тонком клиенте и веб-клиенте компонент должен быть предварительно установлен.'
    },
    НачатьПодключениеРасширенияРаботыСКриптографией: {
      description: 'При первом обращении начинает подключение расширения для работы с криптографией. При каждом обращении проверяет готовность расширения к работе.'
    },
    НачатьПодключениеРасширенияРаботыСФайлами: {
      description: 'Начинает подключение расширения для работы с файлами.'
    },
    НачатьПоискФайлов: {
      description: 'Начинает поиск по заданной маске файлов и каталогов, расположенных в заданном каталоге.'
    },
    НачатьПолучениеКаталогаВременныхФайлов: {
      description: 'Начинает получение имени каталога, который используется программой для размещения временных файлов.'
    },
    НачатьПолучениеКаталогаДокументов: {
      description: 'Начинает получение стандартного каталога документов.'
    },
    НачатьПолучениеРабочегоКаталогаДанныхПользователя: {
      description: 'Начинает получение имени каталога текущего пользователя данной информационной базы внутри стандартного каталога данных приложения.'
    },
    НачатьПолучениеФайлов: {
      description: 'Начинает получение набора файлов и сохраняет их в локальную файловую систему пользователя.'
    },
    НачатьПомещениеФайла: {
      description: 'Помещает файл из локальной файловой системы во временное хранилище.'
    },
    НачатьПомещениеФайлов: {
      description: 'Начинает помещение набора файлов из локальной файловой системы во временное хранилище.'
    },
    НачатьСозданиеКаталога: {
      description: 'Начинает создание нового каталога файлов.'
    },
    НачатьТранзакцию: {
      description: 'Открывает транзакцию. Транзакция предназначена для записи в информационную базу согласованных изменений. Все изменения, внесенные в информационную базу после начала транзакции, будут затем либо целиком записаны, либо целиком отменены.'
    },
    НачатьУдалениеФайлов: {
      description: 'Начинает удаление указанных файлов.'
    },
    НачатьУстановкуВнешнейКомпоненты: {
      description: 'Доставляет объект внешнего компонента с сервера на клиент, после чего он становится доступен для метода ПодключитьВнешнююКомпоненту. Внешние компоненты могут храниться в информационной базе или макетах конфигурации в виде ZIP-архива или в виде двоичных данных.'
    },
    НачатьУстановкуРасширенияРаботыСКриптографией: {
      description: 'Устанавливает расширение для работы с криптографией в браузер.'
    },
    НачатьУстановкуРасширенияРаботыСФайлами: {
      description: 'Устанавливает расширение работы с файлами. В режиме запуска толстого и тонкого клиентов информирует о том, что расширение установлено. Для клиента мобильного приложения информирует о том, что расширение установлено.'
    },
    НеделяГода: {
      description: 'Определяет номер недели в году для указанной даты.'
    },
    НеобходимостьЗавершенияСоединения: {
      description: 'Позволяет определить, что клиент подсоединен к выключенному рабочему процессу. В этом случае клиентское приложение нужно перезапустить, чтобы оно подсоединилось к включенному рабочему процессу.  Выключенный рабочий процесс через некоторое время может быть завершен принудительно, и все, кто к нему подсоединен, завершатся аварийно.'
    },
    НомерСеансаИнформационнойБазы: {
      description: 'Получает номер текущего сеанса информационной базы.'
    },
    НомерСоединенияИнформационнойБазы: {
      description: 'Получает номер текущего соединения с информационной базой.'
    },
    НРег: {
      description: 'Преобразует все символы строки в нижний регистр.'
    },
    НСтр: {
      description: 'Получает строку на языке текущего пользователя или указанном языке из набора строк на разных языках конфигурации.'
    },
    ОбновитьИнтерфейс: {
      description: 'Обновляет командный интерфейс, рабочий стол и открытые формы с учетом текущих значений функциональных опций и их параметров. Вызов метода необходим, чтобы измененные параметры функциональных опций вступили в действие. Внимание! Не рекомендуется вызывать метод ОбновитьИнтерфейс() после каждого изменения значения функциональных опций или их параметров. Рекомендуется вначале выполнить изменения всех функциональных опций или их параметров, а затем однократно обновить интерфейс. Это связано c тем, что вызов метода ОбновитьИнтерфейс() приводит к очистке всех кешей клиентского приложения, а также приводит к многочисленным вызовам сервера для обновления командного интерфейса, состава форм рабочего стола, открытых форм и т.д. Эти вызовы требуют большое количество ресурсов системы для обеспечения их выполнения.'
    },
    ОбновитьНумерациюОбъектов: {
      description: 'Выполняет обновление номеров в соответствии с номерами, записанными в базе данных. После вызова данного метода все выданные, но незаписанные номера, становятся невалидными т.к. не гарантируется их уникальность. Данный метод разрешено вызывать только администратору системы.'
    },
    ОбновитьПовторноИспользуемыеЗначения: {
      description: 'Очищает все сохраненные значения функций с повторным использованием возвращаемых значений. После выполнения метода функции с повторным использованием возвращаемых значений выполняется так же, как при первом вызове.'
    },
    ОбработкаПрерыванияПользователя: {
      description: 'Предназначен для прерывания работы встроенного языка при нажатии пользователем клавиши Ctrl+Break. Метод проверяет, была ли нажата пользователем клавиша Ctrl + Break. Если клавиша была нажата, то выполнение встроенного языка прекращается и выдается соответствующее сообщение. Данный метод рекомендуется использовать в длительных циклических операциях. Метод будет иметь действия только в тех случаях, когда допускается прерывание выполнения модулей.  Прерывания выполнения допускается если оно инициировано определенным интерактивным действием пользователя. К таким действиям относятся:   - нажатие кнопки в форме;  - выбор пункта меню или кнопки командной панели в форме;  - выбор пункта меню или кнопки панели инструментов интерфейса;  - действия инициируемые обработчиками событий "Выбор" элементов управления.'
    },
    ОбъединитьФайлы: {
      description: 'Объединяет несколько файлов в один.'
    },
    Окр: {
      description: 'Округляет исходное число до нужной разрядности в соответствии с заданным режимом округления.'
    },
    ОписаниеОшибки: {
      description: 'Получает описание ошибки (исключительной ситуации), включая информацию о строке модуля и вложенных исключениях.'
    },
    Оповестить: {
      description: 'Посылает оповещение всем созданным формам и всем подключенным через метод ПодключитьОбработчикОповещения процедурам модуля управляемого приложения (модуля обычного приложения) или общего модуля. Если для формы задана процедура-обработчик события ОбработкаОповещения, то она будет запущена, в процедуру будут переданы указанные параметры. Данный механизм может, например, применяться для организации обмена сообщениями между открытыми формами.'
    },
    ОповеститьОбИзменении: {
      },
    ОтключитьОбработчикЗапросаНастроекКлиентаЛицензирования: {
      description: 'Отключает обработчик запроса настройки клиента лицензирования, подключенный ранее при помощи ПодключитьОбработчикЗапросаНастроекКлиентаЛицензирования .'
    },
    ОтключитьОбработчикОжидания: {
      description: 'Отключает подключенный ранее при помощи процедуры ПодключитьОбработчикОжидания вызов процедуры через определенный интервал времени.'
    },
    ОтключитьОбработчикОповещения: {
      description: 'Отключает подключенный ранее при помощи метода ПодключитьОбработчикОповещения вызов процедуры при вызове метода Оповестить.'
    },
    ОткрытьЗначение: {
      description: 'Показывает в диалоге переданное значение. Вид диалога зависит от типа переданного значения.'
    },
    ОткрытьИндексСправки: {
      description: 'Открывает окно со списком ключевых слов и выражений (индексом) справки по приложению.'
    },
    ОткрытьСодержаниеСправки: {
      description: 'Открывает окно с содержанием справки по приложению.'
    },
    ОткрытьСправку: {
      description: 'Открывает окно со справочной информацией по объекту метаданных.'
    },
    ОткрытьФорму: {
      description: 'Открывает и возвращает форму или управляемую форму. В тонком и веб-клиенте только управляемую форму. Перед открытием осуществляется поиск уже открытой такой же формы. Поиск осуществляется по типу формы, значениям ключевых параметров формы, владельцу формы, пользовательскому ключу уникальности. Можно открывать уже полученную форму. В этом случае в параметрах передается уже полученная форма и окно, в котором открыть форму. Можно открыть по имени формы. В этом случае в параметры передаются имя формы, параметры формы, владелец, ключ уникальности и окно, в котором должна быть открыта форма.'
    },
    ОткрытьФормуМодально: {
      description: 'Открывает форму или управляемую форму.  В тонком и веб-клиенте только управляемую форму.'
    },
    ОтменитьТранзакцию: {
      description: 'Отменяет открытую ранее транзакцию. Все изменения, внесенные в информационную базу в процессе транзакции, будут отменены.'
    },
    ОчиститьЖурналРегистрации: {
      description: 'Удаляет часть журнала регистрации в соответствии с фильтром. Очистить можно только журнал, который хранится в формате lgd.'
    },
    ОчиститьНастройкиПользователя: {
      description: 'Очищает настройки пользователя, принадлежащие информационной базе и конкретному пользователю в ней.'
    },
    ОчиститьСообщения: {
      description: 'Очищает окно сообщений.'
    },
    ПараметрыДоступа: {
      description: 'Позволяет получить права текущего пользователя на заданный объект метаданных для проверки наличия ограничения прав доступа с учетом указанных полей.'
    },
    ПерейтиПоНавигационнойСсылке: {
      description: 'Выполняет переход по ссылке так, как если бы пользователь выполнил интерактивную вспомогательную команду "Перейти по ссылке ...". Если выполняется переход по ссылке на объект информационной базы, отчет или обработку, то происходит открытие нового вспомогательного окна (если окно с этим объектом еще не открыто). Если выполняется переход по ссылке на точку навигации, то переход будет выполнен в основном окне приложения, и оно станет активным. Возможен переход по внешней ссылке. Для внешней ссылки, которая содержит сигнатуру "e1cib" выполняются следующие действия:   - Если начало ссылки совпадает с навигационной ссылкой информационной базы текущего сеанса, то выполняется переход по локальной ссылке;  - Если начало ссылки не совпадает с навигационной ссылкой информационной базы, то осуществляется поиск запущенного клиента, подключенного к базе, адрес которой соответствует ссылке. Если такой клиент найден, окно его приложения активизируется и в нем выполняется переход по ссылке.  - Если соответствующего запущенного экземпляра тонкого клиента нет, то выполняется попытка запуска нового экземляра тонкого клиента с соответствующей строкой соединения и в нем выполняется переход. Если выполняется переход по ссылке вида "http(s)" на объект в другой информационной базе, то:   - Выполняется попытка найти запущенный экземпляр тонкого клиента, работающего с соответствующей информационной базой.  - Если запущенного экземпляра тонкого клиента нет, или в нем открыт модальный диалог, выполняется попытка запуска нового экземпляра тонкого клиента с соответствующей строкой соединения.  - Если попытка запуска не успешна (например, тонкий клиент не установлен), переданная ссылка обрабатывается операционной системой. Если внешняя ссылка не является навигационной ссылкой информационной базы (например, ссылки на сайты или файлы на диске), то в тонком клиенте данная ссылка выполняется как команда операционной системы. Ссылка открывается ассоциированной с данным типом ссылки программой. Если ссылка указывает на текстовый документ, табличный документ и т.п., в тонком клиенте документ будет открыт в клиентском приложении.В веб-клиенте отрабатывают только http-ссылки, которые открываются в том же браузере в отдельном окне. Форматы навигационных ссылок описаны в документации, см. http://its.1c.ru/db/v83doc#bookmark:dev:TI000001216.'
    },
    ПереместитьФайл: {
      description: 'Выполняет перемещение (переименование) указанного файла.'
    },
    ПодключитьВнешнююКомпоненту: {
      description: 'Подключает внешний компонент к 1С:Предприятию. Внешние компоненты могут храниться в информационной базе или макетах конфигурации в виде ZIP-архива или в виде двоичных данных, а также в файле файловой системы. При работе на тонком клиенте и веб-клиенте компонент должен быть предварительно установлен.'
    },
    ПодключитьОбработчикЗапросаНастроекКлиентаЛицензирования: {
      description: 'Подключает вызов указанной процедуры глобального модуля, доступного на клиенте, или модуля приложения (обычного или управляемого), которая будет вызываться, если ответ центра лицензирования указывает на необходимость установить параметры клиента лицензирования.'
    },
    ПодключитьОбработчикОжидания: {
      description: 'Подключает вызов указанной процедуры модуля управляемого приложения (модуля обычного приложения) или глобального общего модуля через определенный интервал времени. Вызов будет осуществляться только в "состоянии покоя", то есть в тот момент, когда программа не выполняет никаких действий. Во время временной блокировки, вызванной методом ЗаблокироватьРаботуПользователя или соответствующей командой "Временная блокировка", обработчики ожидания не выполняются.'
    },
    ПодключитьОбработчикОповещения: {
      description: 'Подключает вызов указанной экспортируемой процедуры модуля управляемого приложения (модуля обычного приложения) или глобального общего модуля для обработки оповещения при вызове метода Оповестить. Процедура должна быть экспортируемой и иметь три параметра - Имя события, Параметр, Источник.'
    },
    ПодключитьРасширениеРаботыСКриптографией: {
      description: 'При первом обращении выполняет подключение расширения для работы с криптографией. При каждом обращении проверяет готовность расширения к работе.'
    },
    ПодключитьРасширениеРаботыСФайлами: {
      description: 'При первом обращении выполняет подключение расширения для работы с файлами. При каждом обращении проверяет готовность расширения к работе.'
    },
    ПодробноеПредставлениеОшибки: {
      description: 'Возвращает строку, аналогичную той, что показывается в стандартном диалоге платформы 1С:Предприятие, вызываемом при нажатии кнопки "Подробно" из сообщения об ошибке.'
    },
    ПоказатьВводДаты: {
      description: 'Открывает окно для ввода даты, но при этом не ожидает завершения ввода.'
    },
    ПоказатьВводЗначения: {
      description: 'Показывает окно для ввода значения заданного типа.'
    },
    ПоказатьВводСтроки: {
      description: 'Вызывает диалог для ввода строки, при этом не ожидает завершения ввода.'
    },
    ПоказатьВводЧисла: {
      description: 'Вызывает диалог для ввода строки, при этом не ожидает завершения ввода.'
    },
    ПоказатьВопрос: {
      description: 'Выводит на экран окно вопроса, при этом не ожидается завершения ответа пользователя.'
    },
    ПоказатьЗначение: {
      description: 'Показывает в диалоге переданное значение, при этом не ожидается его закрытие. Вид диалога зависит от типа переданного значения.'
    },
    ПоказатьИнформациюОбОшибке: {
      description: 'Предназначен для показа информации об ошибке пользователю в стандартном диалоге платформы 1С:Предприятие.'
    },
    ПоказатьНаКарте: {
      description: 'Отображает на карте переданные координаты.'
    },
    ПоказатьОповещениеПользователя: {
      description: 'Показывает окно, по умолчанию располагающееся внизу экрана, которое постепенно затухает и исчезает с экрана.  В окне может располагаться ссылка, выбор которой вызывает определенные для ссылки действия (например, открытие формы).'
    },
    ПоказатьПредупреждение: {
      description: 'Выводит на экран окно предупреждения, но не ожидает его закрытия.'
    },
    ПолноеИмяПользователя: {
      description: 'Получает полное имя пользователя, указанного при запуске программы.'
    },
    ПолучитьCOMОбъект: {
      description: 'Основное применение функции ПолучитьCOMОбъект - это получение COM-объекта, соответствующего файлу. Для этого следует в качестве первого параметра функции задать имя файла, который будет определять COM-объект. Например, фрагмент кода: Таб = ПолучитьCOMОбъект("C:\DATA\DATA.XLS"); создает объект Excel.Application и открывает с его помощью файл документа "C:\DATA\DATA.XLS". Если указанный файл во время выполнения данного фрагмента уже открыт с помощью MS Excel, то будет получена ссылка на уже существующий объект. Для файлов, указываемых в качестве параметра данной функции, должно быть установлено соответствие расширения имени файла и класса COM. Если в качестве имени файла указана пустая строка, то будет создан новый экземпляр объекта. В этом случае необходимо указать имя класса COM.  Например, фрагмент кода: Таб = ПолучитьCOMОбъект("", "Excel.Application"); создает новый документ Excel. В дальнейшем этот документ может быть программно заполнен и сохранен в файл. Если первый параметр функции пропущен, то будет произведена попытка получить активный объект указанного типа. Если активного объекта указанного типа в настоящий момент не существует, то будет вызвано исключение. Например, в результате выполнения оператора: П = ПолучитьCOMОбъект( , "Excel.Application"); Переменная П получит значение типа COMОбъект, соответствующее активному приложению MS Excel, если таковое имелось, или будет вызвано исключение, если активных экземпляров MS Excel не было.'
    },
    ПолучитьXMLТип: {
      description: 'Получает тип данных XML, который может быть прочитан в настоящий момент из объекта типа ЧтениеXML. При получении типа данных XML может быть произведена операция чтения из объекта ЧтениеXML. В случае, если тип данных XML определить невозможно, возвращается значение Неопределено. Тип данных XML определяется по следующему алгоритму: 1) Пропускаются пробельные символы, если текущая позиция объекта ЧтениеXML соответствует типу узла "Текст" и значение узла полностью состоит из пробельных символов. 2) Если тип текущего узла не соответствует значению НачалоЭлемента, то считается, что тип не определен. 3) Определяется наличие атрибута "nil" из пространства имен "http://www.w3.org/2001/XMLSchema-instance". Если атрибут существует и его значение равно "true", то считается, что тип не определен. 4) Определяется наличие атрибута "type" из пространства имен "http://www.w3.org/2001/XMLSchema-instance". Если атрибут существует, то производится анализ значения атрибута:   - значение разделяется на префикс пространства имен и локальное имя;  - по префиксу пространства имен в объекте ЧтениеXML определяется URI пространства имен, соответствующее данному префиксу (если соответствующего URI пространства имен не обнаружено - считается, что тип не определен);  - по полученному локальному имени и URI пространства имен создается значение типа данных XML. 5) Если атрибут "type" не существует, производится анализ имени элемента. Если локальное имя элемента совпадает с одним из имен типов пространства имен "http://www.w3.org/2001/XMLSchema" и пространство имен элемента не определено (пустая строка), то считается, что тип принадлежит пространству имен "http://www.w3.org/2001/XMLSchema".'
    },
    ПолучитьАдресПоМестоположению: {
      description: 'Получает адрес по географическим координатам.'
    },
    ПолучитьБлокировкуСеансов: {
      description: 'Получает объект, описывающий блокировку сеансов.'
    },
    ПолучитьВремяЗавершенияСпящегоСеанса: {
      description: 'Интервал времени в секундах, по истечении которого спящий сеанс завершается.'
    },
    ПолучитьВремяЗасыпанияПассивногоСеанса: {
      description: 'Получить интервал времени в секундах, по завершении которого неактивный сеанс переводится в спящий режим.'
    },
    ПолучитьВремяОжиданияБлокировкиДанных: {
      description: 'Получает заданное в информационной базе время ожидания блокировки данных (в секундах).'
    },
    ПолучитьДанныеВыбора: {
      description: 'Формирует список значений данных выбора при вводе по строке, автоподборе текста и быстром выборе.'
    },
    ПолучитьДополнительныйПараметрКлиентаЛицензирования: {
      description: 'Получает дополнительный параметр, используемый для обслуживания информационной базы.'
    },
    ПолучитьДопустимыеКодыЛокализации: {
      description: 'Получает массив допустимых кодов локализации.'
    },
    ПолучитьДопустимыеЧасовыеПояса: {
      description: 'Получает массив строк допустимых идентификаторов часовых поясов.'
    },
    ПолучитьЗаголовокКлиентскогоПриложения: {
      description: 'Получает заголовок приложения, который используется при формировании заголовков окон.'
    },
    ПолучитьЗаголовокСистемы: {
      description: 'Получает текст заголовка главного окна программы.'
    },
    ПолучитьЗначенияОтбораЖурналаРегистрации: {
      description: 'Позволяет получить наборы допустимых значений параметров отбора журнала регистрации: приложение, пользователь, компьютер, событие, метаданные, рабочий сервер, основной IP-порт, вспомогательный IP-порт, данные сеанса. Эти значения можно использовать для формирования параметра Фильтр метода ВыгрузитьЖурналРегистрации.'
    },
    ПолучитьИдентификаторКонфигурации: {
      description: 'Возвращает идентификатор конфигурации, с которой работает информационная база. Идентификатор составляется путем анализа и учета метаданных конфигурации.'
    },
    ПолучитьИзВременногоХранилища: {
      description: 'Получает значение из временного хранилища.'
    },
    ПолучитьИмяВременногоФайла: {
      description: 'Для записи данных во временный файл необходимо сначала сформировать имя такого файла. При этом во избежание случайных потерь имеющихся файлов требуется получить уникальное имя. Данный метод предназначен для получения такого имени. При выполнении метода файл не создается.  Если файл не будет удален средствами встроенного языка, он будет удален платформой при следующем запуске.'
    },
    ПолучитьИмяКлиентаЛицензирования: {
      description: 'Возвращает имя клиента лицензирования из информационной базы.'
    },
    ПолучитьИнформациюЭкрановКлиента: {
      description: 'Получает информацию об экранах подключенных устройств.  Информация предоставляется в виде фиксированного массива объектов ИнформацияЭкранаКлиента. Первый элемент массива описывает основной экран.'
    },
    ПолучитьИспользованиеЖурналаРегистрации: {
      description: 'Проверяет, осуществляется ли в журнале регистрация события заданного уровня важности.'
    },
    ПолучитьИспользованиеСобытияЖурналаРегистрации: {
      description: 'Получает текущее состояние управления регистрацией указанного события в журнале регистрации.'
    },
    ПолучитьКраткийЗаголовокПриложения: {
      description: 'Получает краткий заголовок приложения, размещенный в заголовке окна приложения перед текстом системного заголовка.'
    },
    ПолучитьМакетОформления: {
      description: 'Получает макет оформления.'
    },
    ПолучитьМаскуВсеФайлы: {
      description: 'Получает файловую маску, принятую для выбора всех файлов в операционной системе, в контексте которой выполняется вызов.'
    },
    ПолучитьМаскуВсеФайлыКлиента: {
      description: 'Получает файловую маску, принятую для выбора всех файлов в операционной системе, в которой выполняется клиентское приложение.'
    },
    ПолучитьМаскуВсеФайлыСервера: {
      description: 'Получает файловую маску, принятую для выбора всех файлов в операционной системе, в которой работает сервер 1С:Предприятия, обрабатывающий вызов.'
    },
    ПолучитьМестоположениеПоАдресу: {
      description: 'Получает географические координаты по адресу.'
    },
    ПолучитьМинимальнуюДлинуПаролейПользователей: {
      description: 'Получает ограничение на минимальную длину паролей, которое установлено для пользователей информационной базы.'
    },
    ПолучитьНавигационнуюСсылку: {
      description: 'Получает текст ссылки на объект информационной базы или его реквизит в формате 1С:Предприятия. В первом случае принимает в качестве параметра ссылку на объект (это может быть как ссылка, так и ключ записи регистра сведений). Объектом могут быть: справочник, документ, план счетов, план видов характеристик, план видов расчета, план обмена, ключ записи регистра сведений, бизнес процесс, задача. Во втором в качестве параметров принимает ключ объекта (это может быть как ссылка, так и ключ записи регистра сведений) и имя реквизита (ресурса). Если нужно получить ссылку на реквизит табличной части, перед именем реквизита необходимо добавить имя табличной части и точку ".".'
    },
    ПолучитьНавигационнуюСсылкуИнформационнойБазы: {
      description: 'Получает навигационную ссылку информационной базы. Форматы ссылки в зависимости от вида информационной базы:   - Файловая:   - Если путь к файловой версии является UNC путем, то формат строка имеет следующий вид e1c://file/UNC путь;  - Если путь к файловой версии содержит том, то формат строка имеет следующий вид - e1c://filev/символ тома/остальной путь;   - Клиент-сервер:   - e1c://server/имя сервера/имя ИБ.   - Веб-сервер:   - http://путь;  - https://путь. Эта ссылка может использоваться для создания абсолютной ссылки из относительной. Внимание! На сервере данный метод поддерживается только в контексте клиентского вызова. В фоновых и регламентных заданиях возвращает пустое значение.'
    },
    ПолучитьОбновлениеКонфигурацииБазыДанных: {
      description: 'Получает информацию о состоянии фонового обновления конфигурации базы данных.'
    },
    ПолучитьОбновлениеПредопределенныхДанныхИнформационнойБазы: {
      description: 'Возвращает текущее установленное в информационной базе значение режима обновления предопределенных данных.'
    },
    ПолучитьОбщийМакет: {
      description: 'Получает один из общих макетов конфигурации.'
    },
    ПолучитьОбщуюФорму: {
      description: 'Получает общую форму.'
    },
    ПолучитьОкна: {
      description: 'Получает окна приложения.'
    },
    ПолучитьОперативнуюОтметкуВремени: {
      description: 'Получает оперативную отметку времени.'
    },
    ПолучитьПараметрыФункциональныхОпцийИнтерфейса: {
      description: 'Получает параметры функциональных опций командного интерфейса.'
    },
    ПолучитьПолноеИмяПредопределенногоЗначения: {
      description: 'Выполняет действие, обратное методу ПредопределенноеЗначение. Возвращает полное имя предопределенного значения или значения системного перечисления.'
    },
    ПолучитьПредставленияНавигационныхСсылок: {
      description: 'Получает массив представлений ссылок ПредставлениеНавигационнойСсылки.'
    },
    ПолучитьПроверкуСложностиПаролейПользователей: {
      description: 'Проверяет, установлены ли ограничения на сложность паролей пользователей информационной базы.'
    },
    ПолучитьРазделительПути: {
      description: 'Получает значение разделителя пути, используемого в операционной системе, в контексте которой выполняется вызов.'
    },
    ПолучитьРазделительПутиКлиента: {
      description: 'Получает значение разделителя пути, используемого в операционной системе, в которой работает клиентское приложение.'
    },
    ПолучитьРазделительПутиСервера: {
      description: 'Получает значение разделителя пути, используемого в операционной системе, в которой работает рабочий процесс сервера.'
    },
    ПолучитьСеансыИнформационнойБазы: {
      description: 'Получает список сеансов текущей информационой базы.'
    },
    ПолучитьСкоростьКлиентскогоСоединения: {
      description: 'Возвращает скорость клиентского соединения.'
    },
    ПолучитьСоединенияИнформационнойБазы: {
      description: 'Получает массив описаний соединений с текущей информационной базой.'
    },
    ПолучитьСообщенияПользователю: {
      description: 'Получает массив объектов СообщениеПользователю, которые еще не были выведены пользователю. Такое может происходить при работе в регламентных заданиях, на стороне сервера или в Web-сервисах.'
    },
    ПолучитьСоответствиеОбъектаИФормы: {
      description: 'Получает информацию об идентификаторе формы и имени атрибута формы, связанного с передаваемым в качестве аргумента функции объектом.'
    },
    ПолучитьСоставСтандартногоИнтерфейсаOData: {
      description: 'Возвращает массив объектов метаданных, включенных в стандартный OData API. Объекты, доступные для включения в стандартный OData API:   - Справочник.ИмяСправочника  - Документ.ИмяДокумента  - ПланОбмена.ИмяПланаОбмена  - ПланСчетов.ИмяПланаСчетов  - ПланВидовРасчета.ИмяПланаВидовРасчета  - ПланВидовХарактеристик.ИмяПланаВидовХарактеристик  - РегистрБухгалтерии.ИмяРегистраБухгалтерии  - РегистрСведений.ИмяРегистраСведений  - РегистрРасчета.ИмяРегистраРасчета  - РегистрНакопления.ИмяРегистраНакопления  - ЖурналДокументов.ИмяЖурналаДокументов  - Перечисление.ИмяПеречисления  - Задача.ИмяЗадачи  - БизнесПроцесс.ИмяБизнесПроцесса  - Константа.ИмяКонстанты'
    },
    ПолучитьСтруктуруХраненияБазыДанных: {
      description: 'Получает информацию о структуре таблиц базы данных для переданных в качестве параметра массива имен объектов метаданных или массива объектов метаданных для административных действий с ней. Если параметр не используется, то возвращаемая таблица значений содержит информацию о структуре таблиц базы данных всех объектов метаданных.'
    },
    ПолучитьТекущийСеансИнформационнойБазы: {
      description: 'Возвращает текущий сеанс информационной базы.'
    },
    ПолучитьФайл: {
      description: 'Получает файл и сохраняет его в локальную файловую систему пользователя.  По умолчанию метод исполняется в интерактивном режиме, то есть когда будет выдано диалоговое окно, позволяющее указать действие с полученным файлом - запустить его или сохранить по указанному пользователем расположению.'
    },
    ПолучитьФайлы: {
      description: 'Получает набор файлов и сохраняет их в локальную файловую систему пользователя.'
    },
    ПолучитьФорму: {
      description: 'Получает форму или управляемую форму. Перед получением осуществляется поиск уже открытой такой же формы.  Поиск осуществляется по типу формы, значениям ключевых параметров формы, владельцу формы, пользовательскому ключу уникальности. Если в параметре Уникальность передано значение Истина, то поиск уже открытых форм не осуществляется.'
    },
    ПолучитьФункциональнуюОпцию: {
      description: 'Получает значения функциональной опции.'
    },
    ПолучитьФункциональнуюОпциюИнтерфейса: {
      description: 'Получает значение функциональной опции применительно к командному интерфейсу.  Для получения значения опции используются параметры, установленные с помощью метода УстановитьПараметрыФункциональныхОпцийИнтерфейса.'
    },
    ПолучитьЧасовойПоясИнформационнойБазы: {
      description: 'Получает строку идентификатора часового пояса информационной базы.'
    },
    ПользователиОС: {
      description: 'Предоставляет доступ к информации о доменах и пользователях операционной системы.'
    },
    ПоместитьВоВременноеХранилище: {
      description: 'Сохраняет сериализуемое значение во временное хранилище.'
    },
    ПоместитьФайл: {
      description: 'Помещает файл из локальной файловой системы во временное хранилище.'
    },
    ПоместитьФайлы: {
      description: 'Помещает набор файлов из локальной файловой системы во временное хранилище.'
    },
    Прав: {
      description: 'Выбирает последние справа символы строки.'
    },
    ПравоДоступа: {
      description: 'Показывает установку права доступа к объекту метаданных для текущего пользователя на момент выполнения текущей строчки кода. Вызов метода всегда требует административных прав, если явно указан третий параметр - Пользователь/Роль, права которого проверяются. Если пользователь не указан, то проверяются права текущего пользователя, и для этого наличие административных прав не требуется.  Если пользователь задан явно, то выдаются права явно заданного пользователя в соответствии с метаданными.'
    },
    ПредопределенноеЗначение: {
      description: 'Возвращает ссылку на предопределенный элемент из предопределенных данных, прикладных перечислений и точек маршрута бизнес-процессов, а также значения системных перечислений.'
    },
    ПредставлениеКодаЛокализации: {
      description: 'Локализованное наименование языка с заданным идентификатором.'
    },
    ПредставлениеПериода: {
      description: 'Формирует внешнее представление периода, заданного датами начала и окончания периода.'
    },
    ПредставлениеПрава: {
      description: 'Получает представление права по имени права.'
    },
    ПредставлениеПриложения: {
      description: 'Позволяет получить локализованное название приложения.'
    },
    ПредставлениеСобытияЖурналаРегистрации: {
      description: 'Позволяет получить локализованное название события.'
    },
    ПредставлениеЧасовогоПояса: {
      description: 'Возвращает локализованное наименование часового пояса с заданным идентификатором.'
    },
    Предупреждение: {
      description: 'Выводит на экран окно предупреждения.'
    },
    ПрекратитьРаботуСистемы: {
      description: 'Завершает работу системы независимо от наличия модальных диалогов, открытых редактируемых форм документов и справочников и т.д. При этом не вызываются процедуры-обработчики событий завершения работы системы.'
    },
    ПривилегированныйРежим: {
      description: 'Определяет включение привилегированного режима исполнения кода.'
    },
    ПрочитатьJSON: {
      description: 'Считывает значение из JSON-текста или файла. JSON-текст должен быть корректным.'
    },
    ПрочитатьXML: {
      description: 'Считывает значение в формате XML. Прочитаны могут быть значения тех типов, которые могут быть записаны методом ЗаписатьXML.'
    },
    ПрочитатьДатуJSON: {
      description: 'Выполняет преобразование строки, прочитанной в JSON-формате, в значение типа Дата.'
    },
    ПустаяСтрока: {
      description: 'Проверяет строку на наличие значащих символов.'
    },
    РабочийКаталогДанныхПользователя: {
      description: 'Предоставляет доступ к каталогу текущего пользователя данной информационной базы внутри стандартного каталога данных приложения.'
    },
    РазблокироватьДанныеДляРедактирования: {
      description: 'Снимает блокировку объекта.  Если блокировка не была установлена от имени этой формы или без указания формы, никаких действий не выполняется.'
    },
    РазделитьФайл: {
      description: 'Разделяет указанный файл на несколько частей (файлов) заданного размера. Имя каждой части образуется из имени исходного файла с прибавлением ему расширения в виде порядкового номера, включая лидирующие нули. Например, для разделения файла на части, размером каждой равной одному мегабайту, следует выполнить следующий код: РазделитьФайл("C:\Windows\Temp\Presentation.ppt", 1024 * 1024 ) В результате получим несколько файлов: C:\Windows\Temp\Presentation.ppt.001 C:\Windows\Temp\Presentation.ppt.002 ... C:\Windows\Temp\Presentation.ppt.n-1 C:\Windows\Temp\Presentation.ppt.n Все части, кроме последней, имеют размер 1 мегабайт. Размер последней части определяется как размер исходного файла минус сумма размеров всех предыдущих частей.'
    },
    РазорватьСоединениеСВнешнимИсточникомДанных: {
      description: 'Выполняет разрыв соединения с внешним источником данных.'
    },
    РаскодироватьСтроку: {
      description: 'Раскодирует строку, закодированную в соответствии с указанным способом кодирования.'
    },
    РольДоступна: {
      description: 'Определяет доступность указанной роли текущему пользователю.'
    },
    Секунда: {
      description: 'Определяет секунду в указанной дате.'
    },
    Сигнал: {
      description: 'Воспроизводит звуковой сигнал. Устройство, воспроизводящее звук, а также характер звукового сигнала зависят от программно-аппаратного состава компьютера и звуковых установок ОС.'
    },
    Символ: {
      description: 'Преобразует код символа в строку, содержащую символ.'
    },
    СкопироватьЖурналРегистрации: {
      description: 'Копирует часть журнала регистрации из одного файла в другой в соответствии с фильтром. Если файл уже существует, то он будет заменен. Если имя файла не указано, то используется журнал регистрации текущей информационной базы. Указание одного из параметров ИмяВходногоФайла или ИмяВыходногоФайла является обязательным.'
    },
    СмещениеЛетнегоВремени: {
      description: 'Получает смещение в секундах летнего времени заданного часового пояса относительно стандартного времени этого часового пояса для заданного универсального времени. Если УниверсальноеВремя = Неопределено, то возвращает смещение летнего времени, действующее в заданном часовом поясе.'
    },
    СмещениеСтандартногоВремени: {
      description: 'Получает смещение в секундах стандартного времени заданного часового пояса относительно универсального времени без учета летнего времени для заданного универсального времени. Если УниверсальноеВремя = Неопределено, то возвращает смещение стандартного времени, действующее в заданном часовом поясе.'
    },
    СоздатьКаталог: {
      description: 'Создает новый каталог файлов.'
    },
    СоздатьФабрикуXDTO: {
      },
    СокрЛ: {
      description: 'Отсекает незначащие символы, стоящие слева от первого значащего символа в строке.'
    },
    СокрЛП: {
      description: 'Отсекает незначащие символы, стоящие слева от первого значащего символа в строке, и пробелы, стоящие справа от последнего значащего символа в строке.'
    },
    СокрП: {
      description: 'Отсекает незначащие символы, стоящие справа от последнего значащего символа в строке.'
    },
    Сообщить: {
      description: 'Выводит текст сообщения в окно сообщений. Если в момент вызова окно сообщений отсутствует, то будет открыто новое окно сообщений. Сообщение, в зависимости от его смысловой нагрузки, можно пометить одной из пиктограмм, входящих в предопределенный набор.'
    },
    Состояние: {
      description: 'Выводит текст в панель состояния.'
    },
    СохранитьЗначение: {
      description: 'Сохраняет значение для использования не только в текущем, но и в последующих сеансах работы с программой. Значение хранится индивидуально для каждой пары информационная база - пользователь. Например, можно сохранять значения по умолчанию, используемые данным пользователем.'
    },
    СохранитьНастройкиПользователя: {
      description: 'Выполняет сохранение пользовательских настроек в процессе работы, не дожидаясь завершения приложения.'
    },
    Сред: {
      description: 'Выбирает строку символов, начиная с символа НачальныйНомер, общим количеством ЧислоСимволов.'
    },
    СтрДлина: {
      description: 'Получает количество символов в строке.'
    },
    СтрЗаканчиваетсяНа: {
      description: 'Определяет, заканчивается ли строка указанной подстрокой. Определение выполняется с учетом регистра, аналогично функции Найти.'
    },
    СтрЗаменить: {
      description: 'Находит в исходной строке все вхождения подстроки поиска и заменяет ее на подстроку замены.'
    },
    СтрНайти: {
      description: 'Находит первое вхождение искомой строки как подстроки в исходной строке.'
    },
    СтрНачинаетсяС: {
      description: 'Определяет, что строка начинается с указанной подстроки. Определение выполняется с учетом регистра, аналогично функции Найти.'
    },
    Строка: {
      description: 'Преобразует полученный параметр в значение типа Строка. При преобразовании к строке числа формируется его полное представление в стандартном виде, соответствующем национальным установкам. Преобразование значений типа Булево зависит от национальных установок и содержит строковое представление этих значений. При преобразовании к строке даты формируется ее полное представление в стандартном читабельном виде, соответствующем национальным установкам. Преобразование к строке значений остальных типов производится по мере возможности и обычно содержит читабельное представление значения.'
    },
    СтрокаСоединенияИнформационнойБазы: {
      description: 'Возвращает Строка соединения информационной базы, которую, например, можно использовать для запуска 1С:Предприятия средствами встроенного языка в Automation, Менеджер COM-соединений. Пример результата метода: File="C:\1cv8\Base".'
    },
    СтрПолучитьСтроку: {
      description: 'Получает строку многострочной строки по номеру.'
    },
    СтрРазделить: {
      description: 'Разделяет строку на части по указанным символам-разделителям.'
    },
    СтрСоединить: {
      description: 'Соединяет массив переданных строк в одну строку с указанным разделителем.'
    },
    СтрСравнить: {
      description: 'Выполняет сравнение строк без учета регистра, аналогичное сравнению строк с помощью объекта СравнениеЗначений.'
    },
    СтрЧислоВхождений: {
      description: 'Вычисляет число вхождений подстроки поиска в исходной строке.'
    },
    СтрЧислоСтрок: {
      description: 'Позволяет посчитать число строк в многострочной строке. Строки в многострочной строке разделены символами перевода строк (Символы.ПС).'
    },
    СтрШаблон: {
      description: 'Подставляет параметры в строку по номеру.   - Если в строке встречается символ % два раза подряд (%%), такая пара трактуется как одинарный процент, независимо от того, стоит ли сразу за ними цифра или не стоит.  - Если параметров недостаточно для заполнения в шаблоне параметра %N, генерируется исключительная ситуация "Недостаточно фактических параметров".  - Если параметров слишком много, чтобы подставить их все в шаблон, генерируется исключительная ситуация "Очень много параметров".'
    },
    ТекущаяДата: {
      description: 'Определяет текущую (системную) дату на компьютере.'
    },
    ТекущаяДатаСеанса: {
      description: 'Получает текущую дату сервера, приведенную к часовому поясу сеанса. При вычислении даты используется один из заданных часовых поясов в порядке: часовой пояс сеанса, часовой пояс информационной базы, часовой пояс сервера.'
    },
    ТекущаяУниверсальнаяДата: {
      description: 'Получает текущую универсальную дату компьютера.'
    },
    ТекущаяУниверсальнаяДатаВМиллисекундах: {
      description: 'Получает текущую универсальную дату в миллисекундах (в UTC, начиная с 01.01.0001 00:00:00).'
    },
    ТекущийВариантИнтерфейсаКлиентскогоПриложения: {
      description: 'Получает текущий вариант интерфейса.'
    },
    ТекущийВариантОсновногоШрифтаКлиентскогоПриложения: {
      description: 'Получает текущий вариант основного шрифта приложения.'
    },
    ТекущийКодЛокализации: {
      description: 'Получает код локализации (язык, страна) текущего сеанса, который может быть ключом командной строки /VL или, при запуске из Конфигуратора, установкой параметров запуска.'
    },
    ТекущийРежимЗапуска: {
      description: 'Получает режим запуска клиентского приложения текущего сеанса работы.'
    },
    ТекущийЯзык: {
      description: 'Получает язык интерфейса, выбранный для текущего пользователя или основной язык, если нет текущего пользователя или для него не указан язык.'
    },
    ТекущийЯзыкСистемы: {
      description: 'Возвращает используемый системой язык.'
    },
    Тип: {
      description: 'Получает тип по его строковому имени.'
    },
    ТипЗнч: {
      description: 'Получает тип значения.'
    },
    ТранзакцияАктивна: {
      description: 'Получить текущее состояние транзакции.'
    },
    ТРег: {
      description: 'Преобразует строку следующим образом: у каждого слова строки первый символ преобразуется к верхнему регистру. Все остальные символы преобразуются к нижнему регистру.'
    },
    УдалитьДанныеИнформационнойБазы: {
      description: 'Выполняет удаление данных информационной базы:   - Из таблиц, определяемых структурой метаданных;  - Из хранилищ настроек;  - Из истории;  - Административных параметров информационной базы;  - Из списка пользователей.'
    },
    УдалитьИзВременногоХранилища: {
      description: 'Удаляет ранее помещенное значение из временного хранилища.'
    },
    УдалитьОбъекты: {
      description: 'Удаляет объекты, ссылки на которые переданы в параметре СписокСсылок.ОбластьПоиска. При проверке ссылочной целостности поиск осуществляется среди всех данных, из которых могут быть ссылки на переданные объекты. Если на какой-либо объект нет доступа, то вызывается исключение.'
    },
    УдалитьФайлы: {
      description: 'Удаляет указанные файлы.'
    },
    УниверсальноеВремя: {
      description: 'Преобразует местное время в заданном часовом поясе в универсальное время.'
    },
    УстановитьБезопасныйРежим: {
      description: 'При выполнении на сервере или в файловом варианте информационной базы устанавливает или отменяет безопасный режим. В других случаях не вызывает никаких действий. В безопасном режиме:   - игнорируется привилегированный режим;  - запрещены внешние по отношению к платформе 1С:Предприятия действия: COM; загрузка внешних компонентов; запуск внешних приложений и команд операционной системы; доступ к файловой системе, кроме временных файлов; доступ к Интернету. Платформа обеспечивает равенство значений счетчика безопасного режима при вызове произвольного метода встроенного языка и после возврата из него.'
    },
    УстановитьБезопасныйРежимРазделенияДанных: {
      description: 'Устанавливает или отменяет безопасный режим разделения данных по заданному общему реквизиту. Установка безопасного режима действует до вызова его явной отмены или до возврата из метода встроенного языка, в котором выполнена его установка. Правила установки и отмены безопасного режима разделения данных аналогичны привилегированному режиму и безопасному режиму. Не позволяет отменить режим безопасного сеанса, определяемый установкой атрибута safe=”true” элемента zone файла default.vrd.  В каждом методе встроенного языка для каждого разделителя неявно определяется счетчик безопасного режима разделения данных с начальным значением 0. Установка безопасного режима разделения данных увеличивает значение счетчика в текущем методе, а отмена - уменьшает. Если значение текущего счетчика – 0, то отмена безопасного режима разделения данных порождает исключение.  Если при возврате из метода встроенного языка значение текущего счетчика отлично от 0, то оно принудительно сбрасывается в 0. Если суммарное значение счетчиков по текущему состоянию стека вызовов встроенного языка на сервере 1С:Предприятия отлично от нуля, то безопасный режим разделения данных включен.'
    },
    УстановитьБлокировкуСеансов: {
      description: 'Устанавливает режим блокировки сеансов.'
    },
    УстановитьВнешнююКомпоненту: {
      description: 'Доставляет объект внешнего компонента с сервера на клиент, после чего он становится доступен для метода ПодключитьВнешнююКомпоненту.'
    },
    УстановитьВремяЗавершенияСпящегоСеанса: {
      description: 'Установить интервал времени в секундах, по истечении которого спящий сеанс будет завершен.'
    },
    УстановитьВремяЗасыпанияПассивногоСеанса: {
      description: 'Устанавливает интервал времени в секундах, по истечении которого неактивный сеанс переводится в спящий режим.'
    },
    УстановитьВремяОжиданияБлокировкиДанных: {
      description: 'Устанавливает время ожидания блокировки данных (в секундах).'
    },
    УстановитьЗаголовокКлиентскогоПриложения: {
      description: 'Устанавливает заголовок приложения, которое используется при формировании заголовков окон.'
    },
    УстановитьЗаголовокСистемы: {
      description: 'Устанавливает новый заголовок главного окна программы.'
    },
    УстановитьИспользованиеЖурналаРегистрации: {
      description: 'Метод устанавливает, какие события (по уровню важности) должны регистрироваться в журнале.'
    },
    УстановитьИспользованиеСобытияЖурналаРегистрации: {
      description: 'Управляет регистрацией событий в журнале регистрации. Устанавливает для информационной базы режим регистрации события журнала регистрации. По умолчанию все события используются.'
    },
    УстановитьКраткийЗаголовокПриложения: {
      description: 'Добавляет краткий заголовок приложения.  Текст размещается в заголовке окна приложения перед текстом системного заголовка и автоматически отделяется точкой.'
    },
    УстановитьМинимальнуюДлинуПаролейПользователей: {
      description: 'Устанавливает минимальную длину, которую должны иметь пароли пользователей информационной базы. Действует только при изменении пароля существующего пользователя или при создании нового пользователя.'
    },
    УстановитьМонопольныйРежим: {
      description: 'Устанавливает и отключает использование монопольного режима.'
    },
    УстановитьНастройкиКлиентаЛицензирования: {
      description: 'Предназначен для сохранения в информационной базе имени пользователя и пароля клиента лицензирования. Эти данные используются при проверке лицензионности конфигурации.'
    },
    УстановитьОбновлениеПредопределенныхДанныхИнформационнойБазы: {
      description: 'Устанавливает новое значение режима обновления предопределенных данных для информационной базы. Для выполнения требуются права администратора информационной базы. Фактический режим обновления определяется в следующем порядке:   - Если для объекта метаданных в данных установлен режим обновления, отличный от Авто, то используется это значение.  - Иначе, если для объекта метаданных в конфигурации установлен режим обновления, отличный от Авто, то используется это значение.  - Иначе, если для информационной базы установлен режим обновления, отличный от Авто, то используется это значение.  - Иначе, если это периферийный узел РИБ, то предопределенные данные не будут обновлены. Если проверка выполняется для центрального узла РИБ, или для базы не являющейся РИБ, обновление предопределенных данных будет выполнено. Метод доступен только из неразделенного сеанса.'
    },
    УстановитьПараметрыФункциональныхОпцийИнтерфейса: {
      description: 'Устанавливает параметры функциональных опций, действие которых будет распространяться на командный интерфейс и рабочий стол. Вызывает автоматическое обновление интерфейса (включая рабочий стол). Параметры функциональных опций позволяют определить, как отобрать значения функциональной опции, привязанной к реквизиту справочника или ресурсу регистра сведений, то есть в случае, когда в одном объекте может храниться набор значений опций.  При привязке функциональной опции к ресурсу периодического регистра сведений, если период в параметрах не указывается, значение выбирается как срез последних на текущую дату. А если есть параметр Период (Period), то он используется как дата, на которую будет взят срез.'
    },
    УстановитьПривилегированныйРежим: {
      description: 'В файловом варианте информационной базы или на сервере в клиент-серверном варианте информационной базы управляет (включает или выключает) привилегированный режим исполнения кода, аналогичный режиму работы кода привилегированных модулей. В привилегированном режиме никакие проверки прав не выполняются и разрешены любые операции. В клиент-серверном варианте при выполнении на клиенте данный метод не выполняет никаких действий. Первое выполнение метода с параметром Истина в файловом варианте информационной базы или на сервере в клиент-серверном варианте информационной базы включает привилегированный режим. Для явного выключения привилегированного режима необходимо внутри процедуры или функции, в которой он был включен, вызвать метод с параметром Ложь столько же раз, сколько раз в этой же процедуре или функции был вызван метод с параметром Истина. Если этого сделано не было, то при возврате из процедуры/функции, в которой был включен привилегированный режим, он будет выключен автоматически (неявно). Если в процедуре или функции вызовов метода с параметром Ложь сделано больше, чем вызовов с параметром Истина, то будет вызвано исключение.'
    },
    УстановитьПроверкуСложностиПаролейПользователей: {
      description: 'Устанавливает или отключает следующие ограничения на сложность паролей пользователей информационной базы:   - Длина не менее 7 символов;  - Содержит не менее 3-х типов символов из перечисленных ниже:   - заглавные буквы;  - строчные буквы;  - цифры;  - спец. символы.   - Не совпадает с именем пользователя;  - Не является последовательностью символов. Действует только при изменении пароля существующего пользователя или при создании нового пользователя.'
    },
    УстановитьРасширениеРаботыСКриптографией: {
      description: 'Устанавливает расширение для работы с криптографией в браузер.'
    },
    УстановитьРасширениеРаботыСФайлами: {
      description: 'Устанавливает расширение работы с файлами. В режиме запуска толстого и тонкого клиентов информирует о том, что расширение установлено. Для клиента мобильного приложения, информирует о том, что расширение установлено.'
    },
    УстановитьСоединениеСВнешнимИсточникомДанных: {
      description: 'Устанавливает соединение с внешним источником данных.'
    },
    УстановитьСоответствиеОбъектаИФормы: {
      description: 'Устанавливает соответствие управляемой формы и объектов вида СообщениеПользователю для последующей правильной привязки сообщений к элементам управления формы. Для того, чтобы сообщение использовало данные соответствия объекта и формы, у него необходимо заполнить поле Данные. Соответствие может быть получено методом ПолучитьСоответствиеОбъектаИФормы. Получать соответствие можно до тех пор, пока существует объект, для которого оно зарегистрированно.'
    },
    УстановитьСоставСтандартногоИнтерфейсаOData: {
      description: 'Устанавливает состав объектов метаданных, доступных через стандартный сервис OData API. Объекты, доступные для включения в стандартный OData API:   - Справочник.ИмяСправочника  - Документ.ИмяДокумента  - ПланОбмена.ИмяПланаОбмена  - ПланСчетов.ИмяПланаСчетов  - ПланВидовРасчета.ИмяПланаВидовРасчета  - ПланВидовХарактеристик.ИмяПланаВидовХарактеристик  - РегистрБухгалтерии.ИмяРегистраБухгалтерии  - РегистрСведений.ИмяРегистраСведений  - РегистрРасчета.ИмяРегистраРасчета  - РегистрНакопления.ИмяРегистраНакопления  - ЖурналДокументов.ИмяЖурналаДокументов  - Перечисление.ИмяПеречисления  - Задача.ИмяЗадачи  - БизнесПроцесс.ИмяБизнесПроцесса  - Константа.ИмяКонстанты'
    },
    УстановитьЧасовойПоясИнформационнойБазы: {
      description: 'Устанавливает новый часовой пояс информационной базы и сохраняет его в базе данных. Если параметр не задан, то установка часового пояса информационной базы отменяется. В этом случае часовой пояс информационной базы совпадает с часовым поясом сервера.'
    },
    УстановитьЧасовойПоясСеанса: {
      description: 'Устанавливает часовой пояс текущего сеанса. Если параметр не задан, то часовым поясом сеанса становится часовой пояс информационной базы, если он определен, или часовой пояс компьютера сервера, если часовой пояс информационной базы не определен.'
    },
    Формат: {
      description: 'Формирует удобное для чтения представление значений. Полезно использование в отчетах и при прочем визуальном отображении значений.'
    },
    Цел: {
      description: 'Вычисляет целую часть переданного числа, полностью отсекая дробную часть.'
    },
    Час: {
      description: 'Определяет час в указанной дате.'
    },
    ЧасовойПояс: {
      description: 'Получает идентификатор часового пояса компьютера.'
    },
    ЧасовойПоясСеанса: {
      description: 'Получает идентификатор часового пояса текущего сеанса.'
    },
    Число: {
      description: 'Преобразует полученный параметр в значение типа Число. Значение типа Строка преобразуется в число в том случае, если параметр является строковым представлением литерала численного типа. При этом строковое представление анализируется как с учетом региональных установок информационной базы, так и без их учета. В противном случае будет выдано сообщение об ошибке выполнения функции. Параметр типа Булево преобразуется в число по следующим правилам:   - Ложь преобразуется в 0;  - Истина преобразуется в 1.'
    },
    ЧислоПрописью: {
      description: 'Формирует представление числа прописью в соответствии с заданными форматной строкой и параметрами предмета исчисления.'
    },
    ЭтоАдресВременногоХранилища: {
      description: 'Проверяет, является ли переданный адрес адресом файла во временном хранилище.'
    },
    Base64Value: {
      description: 'Получает из строки закодированной по алгоритму base64 двоичные данные.'
    },
    Base64String: {
      description: 'Получает строку, закодированную по алгоритму base64.'
    },
    XMLValue: {
      description: 'Выполняет преобразование из строки, полученной из текста элемента или значения атрибута XML, в значение в соответствии с указанным типом. Выполняет действие обратное действию метода XMLСтрока.'
    },
    XMLString: {
      description: 'Получает XML представление значения для помещения в текст элемента или значение атрибута XML. XML представление зависит от типа значения:   - Строка - как есть;  - Булево: Истина - как "true", Ложь - как "false";  - Дата - XML представление соответствует представлению типа dateTime схемы XML (см. http://www.w3.org/TR/xmlschema-2/#dateTime);  - Число - XML представление соответствует представлению типа decimal схемы XML (см. http://www.w3.org/TR/xmlschema-2/#decimal);  - Значение системного перечисления (для перечислений, поддерживающих XML сериализацию) - как имя значения перечисления;  - УникальныйИдентификатор - как строковое представление уникального идентификатора;  - Ссылки - как XML представление уникального идентификатора ссылки;  - ХранилищеЗначения и ДвоичныеДанные - как строка в формате base64.'
    },
    XMLType: {
      description: 'Получает тип данных XML, соответствующий переданному в качестве параметра типу.'
    },
    XMLTypeOf: {
      description: 'Получает тип данных XML, соответствующий типу переданного в качестве параметра значения.'
    },
    ActiveWindow: {
      description: 'Получает текущее активное окно.'
    },
    SafeMode: {
      description: 'Получает текущее значение безопасного режима.'
    },
    DataSeparationSafeMode: {
      description: 'Показывает, установлен ли безопасный режим разделения данных по данному разделителю. Учитывет установку режима безопасного сеанса, определяемого установкой атрибута safe=”true” элемента zone файла default.vrd.'
    },
    Boolean: {
      description: 'Преобразует полученный параметр в значение типа Булево. Преобразование числа к типу Булево производится по следующим правилам:   - 0 преобразуется в Ложь;  - остальные значения преобразуются в Истина.'
    },
    InputDate: {
      description: 'Вызывает диалог для ввода даты.'
    },
    InputValue: {
      description: 'Вызывает диалог для ввода значения заданного типа. Если тип переменной не определен и Тип представляет собой составной тип данных, то в поле ввода появляется кнопка выбора типа.'
    },
    InputString: {
      description: 'Вызывает диалог для ввода строки.'
    },
    InputNumber: {
      description: 'Вызывает диалог для ввода числа.'
    },
    CanReadXML: {
      description: 'Производит проверку возможности чтения из XML значения указанного типа.  Данный метод получает тип данных XML из объекта ЧтениеXML, а затем пытается определить, имеется ли соответствующий тип 1С:Предприятия, аналогично тому как это делает метод ПолучитьXMLТип.'
    },
    DoQueryBox: {
      description: 'Выводит на экран окно вопроса.'
    },
    RestoreValue: {
      description: 'Получает значение, сохраненное ранее с помощью метода СохранитьЗначение.'
    },
    Upper: {
      description: 'Преобразует все символы строки в верхний регистр.'
    },
    UnloadEventLog: {
      description: 'Выгружает журнал регистрации. Существует возможность установить фильтр, задаваемый структурой специального формата, указывающий, какие записи журнала регистрации выгружать, а также указать колонки, которые необходимо выгружать. Если указано имя входного файла, то происходит выгрузка из указанного файла.'
    },
    ExecuteNotifyProcessing: {
      description: 'Запускает выполнение процедуры, описанной в параметре ВыполняемоеОповещение.  Вызывающая процедура может передать процедуру обработки результата в виде объекта ОписаниеОповещения, которая будет вызвана после получения результата блокирующего метода.'
    },
    VerifyAccessRights: {
      description: 'Выполняет проверку прав текущего пользователя. Если право отсутствует, то вызывается исключение и в журнал регистрации пишется событие ОтказВДоступе.'
    },
    Eval: {
      description: 'Вычисляет переданное выражение. С помощью метода можно вычислять математические и логические выражения, а также операции конкатенации. Подробнее про выражения см. раздел "Выражения языка".'
    },
    Year: {
      description: 'Определяет год в указанной дате.'
    },
    FormDataToValue: {
      description: 'Преобразует данные формы в объект прикладного типа.'
    },
    Date: {
      description: 'Преобразует полученный параметр (параметры) в значение типа Дата.'
    },
    Day: {
      description: 'Определяет календарный день в указанной дате.'
    },
    DayOfYear: {
      description: 'Определяет номер дня в году для указанной даты.'
    },
    WeekDay: {
      description: 'Определяет номер дня недели для указанной даты.'
    },
    AddMonth: {
      description: 'Добавляет (или вычитает) к указанной дате заданное число месяцев.'
    },
    LockDataForEdit: {
      description: 'Заблокировать данные для редактирования в управляемой форме. Вызывает исключение, если объект уже заблокирован, в том числе и методом Заблокировать.'
    },
    LockApplication: {
      description: 'Блокирует работу пользователя, минимизирует окно 1С:Предприятия и выводит диалог авторизации. Продолжение работы возможно только после ввода пароля.'
    },
    Exit: {
      description: 'Позволяет принудительно вызвать завершение работы 1С:Предприятия. В зависимости от переданного параметра будут вызываться обработчики закрытия и завершения работы системы или завершает работу безусловно.'
    },
    LoadAddIn: {
      description: 'Загружает внешний компонент и подключает ее объекты к 1С:Предприятию. Объекты этого компонента должны быть построены по технологии внешних компонентов COM.'
    },
    CloseHelp: {
      description: 'Закрывает окно со справочной информацией. Когда выбран режим показа справки в нескольких окнах, метод закроет все окна справки.'
    },
    WriteJSON: {
      description: 'Выполняет сериализацию Значение в формат JSON. Результат помещает в объект ЗаписьJSON. Если методу требуется передать значение недопустимого типа, то можно использовать функцию преобразования значения (параметры ИмяФункцииПреобразования и МодульФункцииПреобразования).'
    },
    WriteXML: {
      description: 'Выполняет сериализацию значения в формат XML.'
    },
    WriteJSONDate: {
      description: 'Преобразовывает дату в строку для последующей записи в формат JSON. Если запись выполняется в формате ISO и в качестве варианта записи даты используется ЛокальнаяДатаСоСмещением, то в силу особенностей формата будут опущены секунды смещения местного времени относительно UTC. Пример: если смещение местного времени относительно UTC составляет 02:30:17, в результате смещение будет записано в виде: +02:30.'
    },
    WriteLogEvent: {
      description: 'Записывает событие в журнал регистрации. Предназначен для записи дополнительных событий, которые не записываются системой. Средствами встроенного языка не могут записываться системные события, записываемые при записи объектов, удалении и т.д.'
    },
    FillPropertyValues: {
      description: 'Копирует значения свойств Источника в свойства Приемника. Сопоставление производится по именам свойств. Если указаны копируемые свойства, то в заполнении участвуют только они, параметр ИсключаяСвойства игнорируется. В противном случае, если указан параметр ИсключаяСвойства, свойства перечисленные в нем, исключаются из обработки.'
    },
    RequestUserPermission: {
      description: 'Получает у пользователя разрешение на несколько операций с файлами, которые потом будут выполнены без дополнительных вопросов. Полученное разрешение хранится до выполнения соответствующего вызова, либо до окончания работы текущего вызова встроенного языка.'
    },
    RunApp: {
      description: 'Выполняет запуск внешнего приложения либо открытие файла с использованием ассоциированного с ним приложения.'
    },
    RunSystem: {
      description: 'Запускает новый сеанс 1С:Предприятия. Новый сеанс будет запущен с текущими установками.'
    },
    CommitTransaction: {
      description: 'Завершает успешную транзакцию. Все изменения, внесенные в информационную базу в процессе транзакции, будут записаны.'
    },
    ValueToFormData: {
      description: 'Преобразует объект прикладного типа в универсальный объект данных.'
    },
    ValueToStringInternal: {
      description: 'Получает системное строковое представление переданного значения.'
    },
    ValueToFile: {
      description: 'Сохраняет любое сериализуемое значение в файл.'
    },
    ValueIsFilled: {
      description: 'Функция проверяет, отличается ли переданное значение от значения по умолчанию того же типа. Не работает с мутабельными значениями. При передаче мутабельного значения функция вызывает исключение.'
    },
    ValueFromStringInternal: {
      description: 'Преобразует значение из строкового системного представления во внутреннее.'
    },
    ValueFromFile: {
      description: 'Получает из файла значение, ранее сохраненное в нем при помощи функции ЗначениеВФайл. Тип возвращаемого значения определяется типом значения, сохраненного в файле.'
    },
    FromXMLType: {
      description: 'Получает тип, соответствующий типу данных XML.'
    },
    ImportXDTOModel: {
      description: 'Осуществляет импорт переданного набора схем XML в модель типов XDTO. Возвращаемое значение – ОбъектXDTO, имеющий тип {http://v8.1c.ru/8.1/xdto}Model. При импорте никакой проверки правильности схемы не производится. При импорте производится преобразование структуры типов схемы в структуру типов модели. Полученная модель может быть не идентична структуре типов схемы.'
    },
    ComputerName: {
      description: 'Получает сетевое имя компьютера.'
    },
    UserName: {
      description: 'Получает имя пользователя, указанного при запуске программы.'
    },
    InitializePredefinedData: {
      description: 'Инициализирует предопределенные данные в текущей области информационной базы.  Предопределенные элементы создаются у объектов метаданных, при выполнении всех следующих условий:   - В сеансе установлены и используются все разделители, в состав которых включен объект метаданных.  - Автоматическое обновление предопределенных данных для этого объекта метаданных включено.  - Предопределенные данные для этого объекта в этой области данных еще не создавались.'
    },
    ErrorInfo: {
      description: 'Получает структурированную информацию об исключении.'
    },
    TempFilesDir: {
      description: 'Получает имя каталога, который используется программой для размещения временных файлов.'
    },
    DocumentsDir: {
      description: 'Предоставдяет доступ к стандартному каталогу документов.'
    },
    BinDir: {
      description: 'Получает имя каталога, в котором расположены исполняемые файлы программы.'
    },
    EncodeString: {
      description: 'Кодирует строку в соответствии с выбранным способом кодирования.'
    },
    InfoBaseLocaleCode: {
      description: 'Получает код локализации (язык, страна), установленный для данной информационной базы.'
    },
    CharCode: {
      description: 'Получает код символа, расположенного в переданной строке в позиции с указанным номером.'
    },
    System: {
      description: 'Вызывает на исполнение команду операционной системы, как если бы она была введена в командной строке. Замечание! Если в передаваемой командной строке Windows используются переменные среды (environment variables) и значения этих переменных содержат пробелы, то фрагменты командной строки, в которых используются перменные среды, следует обрамлять удвоенными двойными кавычками. Например: КомандаСистемы("""""%ProgramFiles%\Internet Explorer\iexplore.exe"""" 1c.ru");'
    },
    EndOfYear: {
      description: 'Определяет дату и время конца года для указанной даты.'
    },
    EndOfDay: {
      description: 'Определяет дату и время конца дня для указанной даты.'
    },
    EndOfQuarter: {
      description: 'Определяет дату и время конца квартала для указанной даты.'
    },
    EndOfMonth: {
      description: 'Определяет дату и время конца месяца для указанной даты.'
    },
    EndOfMinute: {
      description: 'Определяет дату и время конца минуты для указанной даты.'
    },
    EndOfWeek: {
      description: 'Определяет дату и время конца недели для указанной даты.'
    },
    EndOfHour: {
      description: 'Определяет дату и время конца часа для указанной даты.'
    },
    DataBaseConfigurationChangedDynamically: {
      description: 'Определяет, была ли изменена конфигурация базы данных динамически после старта. Под динамическим изменением понимается такое изменение конфигурации базы данных, при которой не потребовалось проведение реструктуризации, и в момент обновления с информационной базой работали пользователи.'
    },
    ConfigurationChanged: {
      description: 'Определяет факт отличия основной конфигурации от конфигурации базы данных.'
    },
    CopyFormData: {
      description: 'Копирует данные формы, обладающие совместимой структурой.'
    },
    FileCopy: {
      description: 'Копирует файл-источник в файл-приемник. Допускается перезапись файла-приемника.'
    },
    BriefErrorDescription: {
      description: 'Возвращает строку, аналогичную той, что показывается в стандартном сообщении об ошибке платформы 1С:Предприятие.'
    },
    Left: {
      description: 'Выбирает первые слева символы строки.'
    },
    Max: {
      description: 'Определяет максимальное значение из полученных параметров.  Тот или иной семантический вариант функции определяется по типу данных первого параметра. В случае несовпадения типа второго и последующих параметров с требуемым, их значения преобразуются к требуемому типу в соответствии с правилами преобразования типов. Если тип первого параметра не соответствует ни одному из допустимых типов, то в зависимости от ситуации может производиться преобразование типов или возбуждаться состояние ошибки исполнения.'
    },
    ToLocalTime: {
      description: 'Преобразует универсальное время в местное время заданного часового пояса.'
    },
    Month: {
      description: 'Определяет месяц в указанной дате.'
    },
    Min: {
      description: 'Определяет минимальное значение из полученных параметров.  Тот или иной семантический вариант функции определяется по типу данных первого параметра. В случае несовпадения типа второго и последующих параметров с требуемым, их значения преобразуются к требуемому типу в соответствии с правилами преобразования типов. Если тип первого параметра не соответствует ни одному из допустимых типов, то в зависимости от ситуации может производиться преобразование типов или возбуждаться состояние ошибки исполнения.'
    },
    Minute: {
      description: 'Определяет минуту в часе указанной даты.'
    },
    ExclusiveMode: {
      description: 'Определяет, используется ли в данный момент монопольный режим работы с информационной базой.'
    },
    Find: {
      description: 'Функция является устаревшей! Рекомендуется использовать функцию СтрНайти. Находит первое вхождение искомой строки как подстроки в исходной строке.'
    },
    FindDisallowedXMLCharacters: {
      description: 'Проверяет символы указанной строки на соответствие рекомендации XML 1.0 и 1.1. Проверка строки начинается с символа в позиции, указанной в параметре ПозицияНачала.'
    },
    FindWindowByURL: {
      description: 'Получает окно клиентского приложения.'
    },
    FindMarkedForDeletion: {
      description: 'Осуществляет поиск всех помеченных на удаление объектов, которые доступны пользователю в рамках текущего сеанса и которые попадают в область поиска, заданную параметрами ОбластьПоиска, ВключитьОбъекты и ИсключитьОбъекты. Если параметр ОбластьПоиска неопределен или используется режим совместимости Версия8_3_4 и ниже, поиск осуществляется среди всех объектов, которые доступны в рамках текущего сеанса с учетом разделения (учитывается и условное разделение). При этом параметры ВключитьОбъекты и ИсключитьОбъекты не учитываются. Поиск выполняется среди доступных пользователю данных: у пользователя должно быть право на чтение объета, данные выбираются только после проверки прав ограничения доступа.'
    },
    FindByRef: {
      description: 'Осуществляет поиск ссылок на объекты, переданные в параметре СписокСсылок. Поиск выполняется только в данных, которые доступны в рамках текущего сеанса с учетом разделения (условное разделение также учитывается). Поиск осуществляется среди всех данных, из которых могут быть ссылки на переданные объекты. Если у пользователя нет доступа к объекту, будет вызвано исключение..'
    },
    FindFiles: {
      description: 'Осуществляет поиск файлов и каталогов по заданной маске, расположенных в заданном каталоге.'
    },
    BegOfYear: {
      description: 'Определяет дату и время начала года для указанной даты.'
    },
    BegOfDay: {
      description: 'Определяет дату и время начала дня для указанной даты.'
    },
    BegOfQuarter: {
      description: 'Определяет дату и время начала квартала для указанной даты.'
    },
    BegOfMonth: {
      description: 'Определяет дату и время начала месяца для указанной даты.'
    },
    BegOfMinute: {
      description: 'Определяет дату и время начала минуты для указанной даты.'
    },
    BegOfWeek: {
      description: 'Определяет дату и время начала недели для указанной даты.'
    },
    BegOfHour: {
      description: 'Определяет дату и время начала часа для указанной даты.'
    },
    BeginRequestingUserPermission: {
      description: 'Начинает получение у пользователя разрешение на несколько операций с файлами, которые потом будут выполнены без дополнительных вопросов. Полученное разрешение хранится до выполнения соответствующего вызова, либо до окончания работы текущего вызова встроенного языка.'
    },
    BeginRunningApplication: {
      description: 'Начинает запуск внешнего приложения либо открытие файла с использованием ассоциированного с ним приложения.'
    },
    BeginCopyingFile: {
      description: 'Начинает копирование файла-источника в файл-приемник. Допускается перезапись файла-приемника.'
    },
    BeginMovingFile: {
      description: 'Начинает перемещение (переименование) указанного файла.'
    },
    BeginAttachingAddIn: {
      description: 'Начинает подключение к "1С:Предприятию" объекта внешнего компонента.  Внешние компоненты могут храниться в информационной базе или макетах конфигурации в виде ZIP-архива или в виде двоичных данных. При работе на тонком клиенте и веб-клиенте компонент должен быть предварительно установлен.'
    },
    BeginAttachingCryptoExtension: {
      description: 'При первом обращении начинает подключение расширения для работы с криптографией. При каждом обращении проверяет готовность расширения к работе.'
    },
    BeginAttachingFileSystemExtension: {
      description: 'Начинает подключение расширения для работы с файлами.'
    },
    BeginFindingFiles: {
      description: 'Начинает поиск по заданной маске файлов и каталогов, расположенных в заданном каталоге.'
    },
    BeginGettingTempFilesDir: {
      description: 'Начинает получение имени каталога, который используется программой для размещения временных файлов.'
    },
    BeginGettingDocumentsDir: {
      description: 'Начинает получение стандартного каталога документов.'
    },
    BeginGettingUserDataWorkDir: {
      description: 'Начинает получение имени каталога текущего пользователя данной информационной базы внутри стандартного каталога данных приложения.'
    },
    BeginGettingFiles: {
      description: 'Начинает получение набора файлов и сохраняет их в локальную файловую систему пользователя.'
    },
    BeginPutFile: {
      description: 'Помещает файл из локальной файловой системы во временное хранилище.'
    },
    BeginPuttingFiles: {
      description: 'Начинает помещение набора файлов из локальной файловой системы во временное хранилище.'
    },
    BeginCreatingDirectory: {
      description: 'Начинает создание нового каталога файлов.'
    },
    BeginTransaction: {
      description: 'Открывает транзакцию. Транзакция предназначена для записи в информационную базу согласованных изменений. Все изменения, внесенные в информационную базу после начала транзакции, будут затем либо целиком записаны, либо целиком отменены.'
    },
    BeginDeletingFiles: {
      description: 'Начинает удаление указанных файлов.'
    },
    BeginInstallAddIn: {
      description: 'Доставляет объект внешнего компонента с сервера на клиент, после чего он становится доступен для метода ПодключитьВнешнююКомпоненту. Внешние компоненты могут храниться в информационной базе или макетах конфигурации в виде ZIP-архива или в виде двоичных данных.'
    },
    BeginInstallCryptoExtension: {
      description: 'Устанавливает расширение для работы с криптографией в браузер.'
    },
    BeginInstallFileSystemExtension: {
      description: 'Устанавливает расширение работы с файлами. В режиме запуска толстого и тонкого клиентов информирует о том, что расширение установлено. Для клиента мобильного приложения информирует о том, что расширение установлено.'
    },
    WeekOfYear: {
      description: 'Определяет номер недели в году для указанной даты.'
    },
    ConnectionStopRequest: {
      description: 'Позволяет определить, что клиент подсоединен к выключенному рабочему процессу. В этом случае клиентское приложение нужно перезапустить, чтобы оно подсоединилось к включенному рабочему процессу.  Выключенный рабочий процесс через некоторое время может быть завершен принудительно, и все, кто к нему подсоединен, завершатся аварийно.'
    },
    InfoBaseSessionNumber: {
      description: 'Получает номер текущего сеанса информационной базы.'
    },
    InfoBaseConnectionNumber: {
      description: 'Получает номер текущего соединения с информационной базой.'
    },
    Lower: {
      description: 'Преобразует все символы строки в нижний регистр.'
    },
    NStr: {
      description: 'Получает строку на языке текущего пользователя или указанном языке из набора строк на разных языках конфигурации.'
    },
    RefreshInterface: {
      description: 'Обновляет командный интерфейс, рабочий стол и открытые формы с учетом текущих значений функциональных опций и их параметров. Вызов метода необходим, чтобы измененные параметры функциональных опций вступили в действие. Внимание! Не рекомендуется вызывать метод ОбновитьИнтерфейс() после каждого изменения значения функциональных опций или их параметров. Рекомендуется вначале выполнить изменения всех функциональных опций или их параметров, а затем однократно обновить интерфейс. Это связано c тем, что вызов метода ОбновитьИнтерфейс() приводит к очистке всех кешей клиентского приложения, а также приводит к многочисленным вызовам сервера для обновления командного интерфейса, состава форм рабочего стола, открытых форм и т.д. Эти вызовы требуют большое количество ресурсов системы для обеспечения их выполнения.'
    },
    RefreshObjectsNumbering: {
      description: 'Выполняет обновление номеров в соответствии с номерами, записанными в базе данных. После вызова данного метода все выданные, но незаписанные номера, становятся невалидными т.к. не гарантируется их уникальность. Данный метод разрешено вызывать только администратору системы.'
    },
    RefreshReusableValues: {
      description: 'Очищает все сохраненные значения функций с повторным использованием возвращаемых значений. После выполнения метода функции с повторным использованием возвращаемых значений выполняется так же, как при первом вызове.'
    },
    UserInterruptProcessing: {
      description: 'Предназначен для прерывания работы встроенного языка при нажатии пользователем клавиши Ctrl+Break. Метод проверяет, была ли нажата пользователем клавиша Ctrl + Break. Если клавиша была нажата, то выполнение встроенного языка прекращается и выдается соответствующее сообщение. Данный метод рекомендуется использовать в длительных циклических операциях. Метод будет иметь действия только в тех случаях, когда допускается прерывание выполнения модулей.  Прерывания выполнения допускается если оно инициировано определенным интерактивным действием пользователя. К таким действиям относятся:   - нажатие кнопки в форме;  - выбор пункта меню или кнопки командной панели в форме;  - выбор пункта меню или кнопки панели инструментов интерфейса;  - действия инициируемые обработчиками событий "Выбор" элементов управления.'
    },
    MergeFiles: {
      description: 'Объединяет несколько файлов в один.'
    },
    Round: {
      description: 'Округляет исходное число до нужной разрядности в соответствии с заданным режимом округления.'
    },
    ErrorDescription: {
      description: 'Получает описание ошибки (исключительной ситуации), включая информацию о строке модуля и вложенных исключениях.'
    },
    Notify: {
      description: 'Посылает оповещение всем созданным формам и всем подключенным через метод ПодключитьОбработчикОповещения процедурам модуля управляемого приложения (модуля обычного приложения) или общего модуля. Если для формы задана процедура-обработчик события ОбработкаОповещения, то она будет запущена, в процедуру будут переданы указанные параметры. Данный механизм может, например, применяться для организации обмена сообщениями между открытыми формами.'
    },
    NotifyChanged: {
      },
    DetachLicensingClientParametersRequestHandler: {
      description: 'Отключает обработчик запроса настройки клиента лицензирования, подключенный ранее при помощи ПодключитьОбработчикЗапросаНастроекКлиентаЛицензирования .'
    },
    DetachIdleHandler: {
      description: 'Отключает подключенный ранее при помощи процедуры ПодключитьОбработчикОжидания вызов процедуры через определенный интервал времени.'
    },
    DetachNotificationHandler: {
      description: 'Отключает подключенный ранее при помощи метода ПодключитьОбработчикОповещения вызов процедуры при вызове метода Оповестить.'
    },
    OpenValue: {
      description: 'Показывает в диалоге переданное значение. Вид диалога зависит от типа переданного значения.'
    },
    OpenHelpIndex: {
      description: 'Открывает окно со списком ключевых слов и выражений (индексом) справки по приложению.'
    },
    OpenHelpContent: {
      description: 'Открывает окно с содержанием справки по приложению.'
    },
    OpenHelp: {
      description: 'Открывает окно со справочной информацией по объекту метаданных.'
    },
    OpenForm: {
      description: 'Открывает и возвращает форму или управляемую форму. В тонком и веб-клиенте только управляемую форму. Перед открытием осуществляется поиск уже открытой такой же формы. Поиск осуществляется по типу формы, значениям ключевых параметров формы, владельцу формы, пользовательскому ключу уникальности. Можно открывать уже полученную форму. В этом случае в параметрах передается уже полученная форма и окно, в котором открыть форму. Можно открыть по имени формы. В этом случае в параметры передаются имя формы, параметры формы, владелец, ключ уникальности и окно, в котором должна быть открыта форма.'
    },
    OpenFormModal: {
      description: 'Открывает форму или управляемую форму.  В тонком и веб-клиенте только управляемую форму.'
    },
    RollbackTransaction: {
      description: 'Отменяет открытую ранее транзакцию. Все изменения, внесенные в информационную базу в процессе транзакции, будут отменены.'
    },
    ClearEventLog: {
      description: 'Удаляет часть журнала регистрации в соответствии с фильтром. Очистить можно только журнал, который хранится в формате lgd.'
    },
    ClearUserSettings: {
      description: 'Очищает настройки пользователя, принадлежащие информационной базе и конкретному пользователю в ней.'
    },
    ClearMessages: {
      description: 'Очищает окно сообщений.'
    },
    AccessParameters: {
      description: 'Позволяет получить права текущего пользователя на заданный объект метаданных для проверки наличия ограничения прав доступа с учетом указанных полей.'
    },
    GotoURL: {
      description: 'Выполняет переход по ссылке так, как если бы пользователь выполнил интерактивную вспомогательную команду "Перейти по ссылке ...". Если выполняется переход по ссылке на объект информационной базы, отчет или обработку, то происходит открытие нового вспомогательного окна (если окно с этим объектом еще не открыто). Если выполняется переход по ссылке на точку навигации, то переход будет выполнен в основном окне приложения, и оно станет активным. Возможен переход по внешней ссылке. Для внешней ссылки, которая содержит сигнатуру "e1cib" выполняются следующие действия:   - Если начало ссылки совпадает с навигационной ссылкой информационной базы текущего сеанса, то выполняется переход по локальной ссылке;  - Если начало ссылки не совпадает с навигационной ссылкой информационной базы, то осуществляется поиск запущенного клиента, подключенного к базе, адрес которой соответствует ссылке. Если такой клиент найден, окно его приложения активизируется и в нем выполняется переход по ссылке.  - Если соответствующего запущенного экземпляра тонкого клиента нет, то выполняется попытка запуска нового экземляра тонкого клиента с соответствующей строкой соединения и в нем выполняется переход. Если выполняется переход по ссылке вида "http(s)" на объект в другой информационной базе, то:   - Выполняется попытка найти запущенный экземпляр тонкого клиента, работающего с соответствующей информационной базой.  - Если запущенного экземпляра тонкого клиента нет, или в нем открыт модальный диалог, выполняется попытка запуска нового экземпляра тонкого клиента с соответствующей строкой соединения.  - Если попытка запуска не успешна (например, тонкий клиент не установлен), переданная ссылка обрабатывается операционной системой. Если внешняя ссылка не является навигационной ссылкой информационной базы (например, ссылки на сайты или файлы на диске), то в тонком клиенте данная ссылка выполняется как команда операционной системы. Ссылка открывается ассоциированной с данным типом ссылки программой. Если ссылка указывает на текстовый документ, табличный документ и т.п., в тонком клиенте документ будет открыт в клиентском приложении.В веб-клиенте отрабатывают только http-ссылки, которые открываются в том же браузере в отдельном окне. Форматы навигационных ссылок описаны в документации, см. http://its.1c.ru/db/v83doc#bookmark:dev:TI000001216.'
    },
    MoveFile: {
      description: 'Выполняет перемещение (переименование) указанного файла.'
    },
    AttachAddIn: {
      description: 'Подключает внешний компонент к 1С:Предприятию. Внешние компоненты могут храниться в информационной базе или макетах конфигурации в виде ZIP-архива или в виде двоичных данных, а также в файле файловой системы. При работе на тонком клиенте и веб-клиенте компонент должен быть предварительно установлен.'
    },
    AttachLicensingClientParametersRequestHandler: {
      description: 'Подключает вызов указанной процедуры глобального модуля, доступного на клиенте, или модуля приложения (обычного или управляемого), которая будет вызываться, если ответ центра лицензирования указывает на необходимость установить параметры клиента лицензирования.'
    },
    AttachIdleHandler: {
      description: 'Подключает вызов указанной процедуры модуля управляемого приложения (модуля обычного приложения) или глобального общего модуля через определенный интервал времени. Вызов будет осуществляться только в "состоянии покоя", то есть в тот момент, когда программа не выполняет никаких действий. Во время временной блокировки, вызванной методом ЗаблокироватьРаботуПользователя или соответствующей командой "Временная блокировка", обработчики ожидания не выполняются.'
    },
    AttachNotificationHandler: {
      description: 'Подключает вызов указанной экспортируемой процедуры модуля управляемого приложения (модуля обычного приложения) или глобального общего модуля для обработки оповещения при вызове метода Оповестить. Процедура должна быть экспортируемой и иметь три параметра - Имя события, Параметр, Источник.'
    },
    AttachCryptoExtension: {
      description: 'При первом обращении выполняет подключение расширения для работы с криптографией. При каждом обращении проверяет готовность расширения к работе.'
    },
    AttachFileSystemExtension: {
      description: 'При первом обращении выполняет подключение расширения для работы с файлами. При каждом обращении проверяет готовность расширения к работе.'
    },
    DetailErrorDescription: {
      description: 'Возвращает строку, аналогичную той, что показывается в стандартном диалоге платформы 1С:Предприятие, вызываемом при нажатии кнопки "Подробно" из сообщения об ошибке.'
    },
    ShowInputDate: {
      description: 'Открывает окно для ввода даты, но при этом не ожидает завершения ввода.'
    },
    ShowInputValue: {
      description: 'Показывает окно для ввода значения заданного типа.'
    },
    ShowInputString: {
      description: 'Вызывает диалог для ввода строки, при этом не ожидает завершения ввода.'
    },
    ShowInputNumber: {
      description: 'Вызывает диалог для ввода строки, при этом не ожидает завершения ввода.'
    },
    ShowQueryBox: {
      description: 'Выводит на экран окно вопроса, при этом не ожидается завершения ответа пользователя.'
    },
    ShowValue: {
      description: 'Показывает в диалоге переданное значение, при этом не ожидается его закрытие. Вид диалога зависит от типа переданного значения.'
    },
    ShowErrorInfo: {
      description: 'Предназначен для показа информации об ошибке пользователю в стандартном диалоге платформы 1С:Предприятие.'
    },
    ShowOnMap: {
      description: 'Отображает на карте переданные координаты.'
    },
    ShowUserNotification: {
      description: 'Показывает окно, по умолчанию располагающееся внизу экрана, которое постепенно затухает и исчезает с экрана.  В окне может располагаться ссылка, выбор которой вызывает определенные для ссылки действия (например, открытие формы).'
    },
    ShowMessageBox: {
      description: 'Выводит на экран окно предупреждения, но не ожидает его закрытия.'
    },
    UserFullName: {
      description: 'Получает полное имя пользователя, указанного при запуске программы.'
    },
    GetCOMObject: {
      description: 'Основное применение функции ПолучитьCOMОбъект - это получение COM-объекта, соответствующего файлу. Для этого следует в качестве первого параметра функции задать имя файла, который будет определять COM-объект. Например, фрагмент кода: Таб = ПолучитьCOMОбъект("C:\DATA\DATA.XLS"); создает объект Excel.Application и открывает с его помощью файл документа "C:\DATA\DATA.XLS". Если указанный файл во время выполнения данного фрагмента уже открыт с помощью MS Excel, то будет получена ссылка на уже существующий объект. Для файлов, указываемых в качестве параметра данной функции, должно быть установлено соответствие расширения имени файла и класса COM. Если в качестве имени файла указана пустая строка, то будет создан новый экземпляр объекта. В этом случае необходимо указать имя класса COM.  Например, фрагмент кода: Таб = ПолучитьCOMОбъект("", "Excel.Application"); создает новый документ Excel. В дальнейшем этот документ может быть программно заполнен и сохранен в файл. Если первый параметр функции пропущен, то будет произведена попытка получить активный объект указанного типа. Если активного объекта указанного типа в настоящий момент не существует, то будет вызвано исключение. Например, в результате выполнения оператора: П = ПолучитьCOMОбъект( , "Excel.Application"); Переменная П получит значение типа COMОбъект, соответствующее активному приложению MS Excel, если таковое имелось, или будет вызвано исключение, если активных экземпляров MS Excel не было.'
    },
    GetXMLType: {
      description: 'Получает тип данных XML, который может быть прочитан в настоящий момент из объекта типа ЧтениеXML. При получении типа данных XML может быть произведена операция чтения из объекта ЧтениеXML. В случае, если тип данных XML определить невозможно, возвращается значение Неопределено. Тип данных XML определяется по следующему алгоритму: 1) Пропускаются пробельные символы, если текущая позиция объекта ЧтениеXML соответствует типу узла "Текст" и значение узла полностью состоит из пробельных символов. 2) Если тип текущего узла не соответствует значению НачалоЭлемента, то считается, что тип не определен. 3) Определяется наличие атрибута "nil" из пространства имен "http://www.w3.org/2001/XMLSchema-instance". Если атрибут существует и его значение равно "true", то считается, что тип не определен. 4) Определяется наличие атрибута "type" из пространства имен "http://www.w3.org/2001/XMLSchema-instance". Если атрибут существует, то производится анализ значения атрибута:   - значение разделяется на префикс пространства имен и локальное имя;  - по префиксу пространства имен в объекте ЧтениеXML определяется URI пространства имен, соответствующее данному префиксу (если соответствующего URI пространства имен не обнаружено - считается, что тип не определен);  - по полученному локальному имени и URI пространства имен создается значение типа данных XML. 5) Если атрибут "type" не существует, производится анализ имени элемента. Если локальное имя элемента совпадает с одним из имен типов пространства имен "http://www.w3.org/2001/XMLSchema" и пространство имен элемента не определено (пустая строка), то считается, что тип принадлежит пространству имен "http://www.w3.org/2001/XMLSchema".'
    },
    GetAddressByLocation: {
      description: 'Получает адрес по географическим координатам.'
    },
    GetSessionsLock: {
      description: 'Получает объект, описывающий блокировку сеансов.'
    },
    GetHibernateSessionTerminateTime: {
      description: 'Интервал времени в секундах, по истечении которого спящий сеанс завершается.'
    },
    GetPassiveSessionHibernateTime: {
      description: 'Получить интервал времени в секундах, по завершении которого неактивный сеанс переводится в спящий режим.'
    },
    GetLockWaitTime: {
      description: 'Получает заданное в информационной базе время ожидания блокировки данных (в секундах).'
    },
    GetChoiceData: {
      description: 'Формирует список значений данных выбора при вводе по строке, автоподборе текста и быстром выборе.'
    },
    GetLicensingClientAdditionalParameter: {
      description: 'Получает дополнительный параметр, используемый для обслуживания информационной базы.'
    },
    GetAvailableLocaleCodes: {
      description: 'Получает массив допустимых кодов локализации.'
    },
    GetAvailableTimeZones: {
      description: 'Получает массив строк допустимых идентификаторов часовых поясов.'
    },
    GetClientApplicationCaption: {
      description: 'Получает заголовок приложения, который используется при формировании заголовков окон.'
    },
    GetCaption: {
      description: 'Получает текст заголовка главного окна программы.'
    },
    GetEventLogFilterValues: {
      description: 'Позволяет получить наборы допустимых значений параметров отбора журнала регистрации: приложение, пользователь, компьютер, событие, метаданные, рабочий сервер, основной IP-порт, вспомогательный IP-порт, данные сеанса. Эти значения можно использовать для формирования параметра Фильтр метода ВыгрузитьЖурналРегистрации.'
    },
    GetConfigurationID: {
      description: 'Возвращает идентификатор конфигурации, с которой работает информационная база. Идентификатор составляется путем анализа и учета метаданных конфигурации.'
    },
    GetFromTempStorage: {
      description: 'Получает значение из временного хранилища.'
    },
    GetTempFileName: {
      description: 'Для записи данных во временный файл необходимо сначала сформировать имя такого файла. При этом во избежание случайных потерь имеющихся файлов требуется получить уникальное имя. Данный метод предназначен для получения такого имени. При выполнении метода файл не создается.  Если файл не будет удален средствами встроенного языка, он будет удален платформой при следующем запуске.'
    },
    GetLicensingClientName: {
      description: 'Возвращает имя клиента лицензирования из информационной базы.'
    },
    GetClientDisplaysInformation: {
      description: 'Получает информацию об экранах подключенных устройств.  Информация предоставляется в виде фиксированного массива объектов ИнформацияЭкранаКлиента. Первый элемент массива описывает основной экран.'
    },
    GetEventLogUsing: {
      description: 'Проверяет, осуществляется ли в журнале регистрация события заданного уровня важности.'
    },
    GetEventLogEventUse: {
      description: 'Получает текущее состояние управления регистрацией указанного события в журнале регистрации.'
    },
    GetShortApplicationCaption: {
      description: 'Получает краткий заголовок приложения, размещенный в заголовке окна приложения перед текстом системного заголовка.'
    },
    GetAppearanceTemplate: {
      description: 'Получает макет оформления.'
    },
    GetAllFilesMask: {
      description: 'Получает файловую маску, принятую для выбора всех файлов в операционной системе, в контексте которой выполняется вызов.'
    },
    GetClientAllFilesMask: {
      description: 'Получает файловую маску, принятую для выбора всех файлов в операционной системе, в которой выполняется клиентское приложение.'
    },
    GetServerAllFilesMask: {
      description: 'Получает файловую маску, принятую для выбора всех файлов в операционной системе, в которой работает сервер 1С:Предприятия, обрабатывающий вызов.'
    },
    GetLocationByAddress: {
      description: 'Получает географические координаты по адресу.'
    },
    GetUserPasswordMinLength: {
      description: 'Получает ограничение на минимальную длину паролей, которое установлено для пользователей информационной базы.'
    },
    GetURL: {
      description: 'Получает текст ссылки на объект информационной базы или его реквизит в формате 1С:Предприятия. В первом случае принимает в качестве параметра ссылку на объект (это может быть как ссылка, так и ключ записи регистра сведений). Объектом могут быть: справочник, документ, план счетов, план видов характеристик, план видов расчета, план обмена, ключ записи регистра сведений, бизнес процесс, задача. Во втором в качестве параметров принимает ключ объекта (это может быть как ссылка, так и ключ записи регистра сведений) и имя реквизита (ресурса). Если нужно получить ссылку на реквизит табличной части, перед именем реквизита необходимо добавить имя табличной части и точку ".".'
    },
    GetInfoBaseURL: {
      description: 'Получает навигационную ссылку информационной базы. Форматы ссылки в зависимости от вида информационной базы:   - Файловая:   - Если путь к файловой версии является UNC путем, то формат строка имеет следующий вид e1c://file/UNC путь;  - Если путь к файловой версии содержит том, то формат строка имеет следующий вид - e1c://filev/символ тома/остальной путь;   - Клиент-сервер:   - e1c://server/имя сервера/имя ИБ.   - Веб-сервер:   - http://путь;  - https://путь. Эта ссылка может использоваться для создания абсолютной ссылки из относительной. Внимание! На сервере данный метод поддерживается только в контексте клиентского вызова. В фоновых и регламентных заданиях возвращает пустое значение.'
    },
    GetDataBaseConfigurationUpdate: {
      description: 'Получает информацию о состоянии фонового обновления конфигурации базы данных.'
    },
    GetInfoBasePredefinedData: {
      description: 'Возвращает текущее установленное в информационной базе значение режима обновления предопределенных данных.'
    },
    GetCommonTemplate: {
      description: 'Получает один из общих макетов конфигурации.'
    },
    GetCommonForm: {
      description: 'Получает общую форму.'
    },
    GetWindows: {
      description: 'Получает окна приложения.'
    },
    GetRealTimeTimestamp: {
      description: 'Получает оперативную отметку времени.'
    },
    GetInterfaceFunctionalOptionParameters: {
      description: 'Получает параметры функциональных опций командного интерфейса.'
    },
    GetPredefinedValueFullName: {
      description: 'Выполняет действие, обратное методу ПредопределенноеЗначение. Возвращает полное имя предопределенного значения или значения системного перечисления.'
    },
    GetURLsPresentations: {
      description: 'Получает массив представлений ссылок ПредставлениеНавигационнойСсылки.'
    },
    GetUserPasswordStrengthCheck: {
      description: 'Проверяет, установлены ли ограничения на сложность паролей пользователей информационной базы.'
    },
    GetPathSeparator: {
      description: 'Получает значение разделителя пути, используемого в операционной системе, в контексте которой выполняется вызов.'
    },
    GetClientPathSeparator: {
      description: 'Получает значение разделителя пути, используемого в операционной системе, в которой работает клиентское приложение.'
    },
    GetServerPathSeparator: {
      description: 'Получает значение разделителя пути, используемого в операционной системе, в которой работает рабочий процесс сервера.'
    },
    GetInfoBaseSessions: {
      description: 'Получает список сеансов текущей информационой базы.'
    },
    GetClientConnectionSpeed: {
      description: 'Возвращает скорость клиентского соединения.'
    },
    GetInfoBaseConnections: {
      description: 'Получает массив описаний соединений с текущей информационной базой.'
    },
    GetUserMessages: {
      description: 'Получает массив объектов СообщениеПользователю, которые еще не были выведены пользователю. Такое может происходить при работе в регламентных заданиях, на стороне сервера или в Web-сервисах.'
    },
    GetObjectAndFormConformity: {
      description: 'Получает информацию об идентификаторе формы и имени атрибута формы, связанного с передаваемым в качестве аргумента функции объектом.'
    },
    GetStandardODataInterfaceContent: {
      description: 'Возвращает массив объектов метаданных, включенных в стандартный OData API. Объекты, доступные для включения в стандартный OData API:   - Справочник.ИмяСправочника  - Документ.ИмяДокумента  - ПланОбмена.ИмяПланаОбмена  - ПланСчетов.ИмяПланаСчетов  - ПланВидовРасчета.ИмяПланаВидовРасчета  - ПланВидовХарактеристик.ИмяПланаВидовХарактеристик  - РегистрБухгалтерии.ИмяРегистраБухгалтерии  - РегистрСведений.ИмяРегистраСведений  - РегистрРасчета.ИмяРегистраРасчета  - РегистрНакопления.ИмяРегистраНакопления  - ЖурналДокументов.ИмяЖурналаДокументов  - Перечисление.ИмяПеречисления  - Задача.ИмяЗадачи  - БизнесПроцесс.ИмяБизнесПроцесса  - Константа.ИмяКонстанты'
    },
    GetDBStorageStructureInfo: {
      description: 'Получает информацию о структуре таблиц базы данных для переданных в качестве параметра массива имен объектов метаданных или массива объектов метаданных для административных действий с ней. Если параметр не используется, то возвращаемая таблица значений содержит информацию о структуре таблиц базы данных всех объектов метаданных.'
    },
    GetCurrentInfoBaseSession: {
      description: 'Возвращает текущий сеанс информационной базы.'
    },
    GetFile: {
      description: 'Получает файл и сохраняет его в локальную файловую систему пользователя.  По умолчанию метод исполняется в интерактивном режиме, то есть когда будет выдано диалоговое окно, позволяющее указать действие с полученным файлом - запустить его или сохранить по указанному пользователем расположению.'
    },
    GetFiles: {
      description: 'Получает набор файлов и сохраняет их в локальную файловую систему пользователя.'
    },
    GetForm: {
      description: 'Получает форму или управляемую форму. Перед получением осуществляется поиск уже открытой такой же формы.  Поиск осуществляется по типу формы, значениям ключевых параметров формы, владельцу формы, пользовательскому ключу уникальности. Если в параметре Уникальность передано значение Истина, то поиск уже открытых форм не осуществляется.'
    },
    GetFunctionalOption: {
      description: 'Получает значения функциональной опции.'
    },
    GetInterfaceFunctionalOption: {
      description: 'Получает значение функциональной опции применительно к командному интерфейсу.  Для получения значения опции используются параметры, установленные с помощью метода УстановитьПараметрыФункциональныхОпцийИнтерфейса.'
    },
    GetInfoBaseTimeZone: {
      description: 'Получает строку идентификатора часового пояса информационной базы.'
    },
    OSUsers: {
      description: 'Предоставляет доступ к информации о доменах и пользователях операционной системы.'
    },
    PutToTempStorage: {
      description: 'Сохраняет сериализуемое значение во временное хранилище.'
    },
    PutFile: {
      description: 'Помещает файл из локальной файловой системы во временное хранилище.'
    },
    PutFiles: {
      description: 'Помещает набор файлов из локальной файловой системы во временное хранилище.'
    },
    Right: {
      description: 'Выбирает последние справа символы строки.'
    },
    AccessRight: {
      description: 'Показывает установку права доступа к объекту метаданных для текущего пользователя на момент выполнения текущей строчки кода. Вызов метода всегда требует административных прав, если явно указан третий параметр - Пользователь/Роль, права которого проверяются. Если пользователь не указан, то проверяются права текущего пользователя, и для этого наличие административных прав не требуется.  Если пользователь задан явно, то выдаются права явно заданного пользователя в соответствии с метаданными.'
    },
    PredefinedValue: {
      description: 'Возвращает ссылку на предопределенный элемент из предопределенных данных, прикладных перечислений и точек маршрута бизнес-процессов, а также значения системных перечислений.'
    },
    LocaleCodePresentation: {
      description: 'Локализованное наименование языка с заданным идентификатором.'
    },
    PeriodPresentation: {
      description: 'Формирует внешнее представление периода, заданного датами начала и окончания периода.'
    },
    RightPresentation: {
      description: 'Получает представление права по имени права.'
    },
    ApplicationPresentation: {
      description: 'Позволяет получить локализованное название приложения.'
    },
    EventLogEventPresentation: {
      description: 'Позволяет получить локализованное название события.'
    },
    TimeZonePresentation: {
      description: 'Возвращает локализованное наименование часового пояса с заданным идентификатором.'
    },
    DoMessageBox: {
      description: 'Выводит на экран окно предупреждения.'
    },
    Terminate: {
      description: 'Завершает работу системы независимо от наличия модальных диалогов, открытых редактируемых форм документов и справочников и т.д. При этом не вызываются процедуры-обработчики событий завершения работы системы.'
    },
    PrivilegedMode: {
      description: 'Определяет включение привилегированного режима исполнения кода.'
    },
    ReadJSON: {
      description: 'Считывает значение из JSON-текста или файла. JSON-текст должен быть корректным.'
    },
    ReadXML: {
      description: 'Считывает значение в формате XML. Прочитаны могут быть значения тех типов, которые могут быть записаны методом ЗаписатьXML.'
    },
    ReadJSONDate: {
      description: 'Выполняет преобразование строки, прочитанной в JSON-формате, в значение типа Дата.'
    },
    IsBlankString: {
      description: 'Проверяет строку на наличие значащих символов.'
    },
    UserDataWorkDir: {
      description: 'Предоставляет доступ к каталогу текущего пользователя данной информационной базы внутри стандартного каталога данных приложения.'
    },
    UnlockDataForEdit: {
      description: 'Снимает блокировку объекта.  Если блокировка не была установлена от имени этой формы или без указания формы, никаких действий не выполняется.'
    },
    SplitFile: {
      description: 'Разделяет указанный файл на несколько частей (файлов) заданного размера. Имя каждой части образуется из имени исходного файла с прибавлением ему расширения в виде порядкового номера, включая лидирующие нули. Например, для разделения файла на части, размером каждой равной одному мегабайту, следует выполнить следующий код: РазделитьФайл("C:\Windows\Temp\Presentation.ppt", 1024 * 1024 ) В результате получим несколько файлов: C:\Windows\Temp\Presentation.ppt.001 C:\Windows\Temp\Presentation.ppt.002 ... C:\Windows\Temp\Presentation.ppt.n-1 C:\Windows\Temp\Presentation.ppt.n Все части, кроме последней, имеют размер 1 мегабайт. Размер последней части определяется как размер исходного файла минус сумма размеров всех предыдущих частей.'
    },
    DisconnectExternalDataSource: {
      description: 'Выполняет разрыв соединения с внешним источником данных.'
    },
    DecodeString: {
      description: 'Раскодирует строку, закодированную в соответствии с указанным способом кодирования.'
    },
    IsInRole: {
      description: 'Определяет доступность указанной роли текущему пользователю.'
    },
    Second: {
      description: 'Определяет секунду в указанной дате.'
    },
    Beep: {
      description: 'Воспроизводит звуковой сигнал. Устройство, воспроизводящее звук, а также характер звукового сигнала зависят от программно-аппаратного состава компьютера и звуковых установок ОС.'
    },
    Char: {
      description: 'Преобразует код символа в строку, содержащую символ.'
    },
    CopyEventLog: {
      description: 'Копирует часть журнала регистрации из одного файла в другой в соответствии с фильтром. Если файл уже существует, то он будет заменен. Если имя файла не указано, то используется журнал регистрации текущей информационной базы. Указание одного из параметров ИмяВходногоФайла или ИмяВыходногоФайла является обязательным.'
    },
    DaylightTimeOffset: {
      description: 'Получает смещение в секундах летнего времени заданного часового пояса относительно стандартного времени этого часового пояса для заданного универсального времени. Если УниверсальноеВремя = Неопределено, то возвращает смещение летнего времени, действующее в заданном часовом поясе.'
    },
    StandardTimeOffset: {
      description: 'Получает смещение в секундах стандартного времени заданного часового пояса относительно универсального времени без учета летнего времени для заданного универсального времени. Если УниверсальноеВремя = Неопределено, то возвращает смещение стандартного времени, действующее в заданном часовом поясе.'
    },
    CreateDirectory: {
      description: 'Создает новый каталог файлов.'
    },
    CreateXDTOFactory: {
      },
    TrimL: {
      description: 'Отсекает незначащие символы, стоящие слева от первого значащего символа в строке.'
    },
    TrimAll: {
      description: 'Отсекает незначащие символы, стоящие слева от первого значащего символа в строке, и пробелы, стоящие справа от последнего значащего символа в строке.'
    },
    TrimR: {
      description: 'Отсекает незначащие символы, стоящие справа от последнего значащего символа в строке.'
    },
    Message: {
      description: 'Выводит текст сообщения в окно сообщений. Если в момент вызова окно сообщений отсутствует, то будет открыто новое окно сообщений. Сообщение, в зависимости от его смысловой нагрузки, можно пометить одной из пиктограмм, входящих в предопределенный набор.'
    },
    Status: {
      description: 'Выводит текст в панель состояния.'
    },
    SaveValue: {
      description: 'Сохраняет значение для использования не только в текущем, но и в последующих сеансах работы с программой. Значение хранится индивидуально для каждой пары информационная база - пользователь. Например, можно сохранять значения по умолчанию, используемые данным пользователем.'
    },
    SaveUserSettings: {
      description: 'Выполняет сохранение пользовательских настроек в процессе работы, не дожидаясь завершения приложения.'
    },
    Mid: {
      description: 'Выбирает строку символов, начиная с символа НачальныйНомер, общим количеством ЧислоСимволов.'
    },
    StrLen: {
      description: 'Получает количество символов в строке.'
    },
    StrEndsWith: {
      description: 'Определяет, заканчивается ли строка указанной подстрокой. Определение выполняется с учетом регистра, аналогично функции Найти.'
    },
    StrReplace: {
      description: 'Находит в исходной строке все вхождения подстроки поиска и заменяет ее на подстроку замены.'
    },
    StrFind: {
      description: 'Находит первое вхождение искомой строки как подстроки в исходной строке.'
    },
    StrStartWith: {
      description: 'Определяет, что строка начинается с указанной подстроки. Определение выполняется с учетом регистра, аналогично функции Найти.'
    },
    String: {
      description: 'Преобразует полученный параметр в значение типа Строка. При преобразовании к строке числа формируется его полное представление в стандартном виде, соответствующем национальным установкам. Преобразование значений типа Булево зависит от национальных установок и содержит строковое представление этих значений. При преобразовании к строке даты формируется ее полное представление в стандартном читабельном виде, соответствующем национальным установкам. Преобразование к строке значений остальных типов производится по мере возможности и обычно содержит читабельное представление значения.'
    },
    InfoBaseConnectionString: {
      description: 'Возвращает Строка соединения информационной базы, которую, например, можно использовать для запуска 1С:Предприятия средствами встроенного языка в Automation, Менеджер COM-соединений. Пример результата метода: File="C:\1cv8\Base".'
    },
    StrGetLine: {
      description: 'Получает строку многострочной строки по номеру.'
    },
    StrSplit: {
      description: 'Разделяет строку на части по указанным символам-разделителям.'
    },
    StrConcat: {
      description: 'Соединяет массив переданных строк в одну строку с указанным разделителем.'
    },
    StrCompare: {
      description: 'Выполняет сравнение строк без учета регистра, аналогичное сравнению строк с помощью объекта СравнениеЗначений.'
    },
    StrOccurrenceCount: {
      description: 'Вычисляет число вхождений подстроки поиска в исходной строке.'
    },
    StrLineCount: {
      description: 'Позволяет посчитать число строк в многострочной строке. Строки в многострочной строке разделены символами перевода строк (Символы.ПС).'
    },
    StrTemplate: {
      description: 'Подставляет параметры в строку по номеру.   - Если в строке встречается символ % два раза подряд (%%), такая пара трактуется как одинарный процент, независимо от того, стоит ли сразу за ними цифра или не стоит.  - Если параметров недостаточно для заполнения в шаблоне параметра %N, генерируется исключительная ситуация "Недостаточно фактических параметров".  - Если параметров слишком много, чтобы подставить их все в шаблон, генерируется исключительная ситуация "Очень много параметров".'
    },
    CurrentDate: {
      description: 'Определяет текущую (системную) дату на компьютере.'
    },
    CurrentSessionDate: {
      description: 'Получает текущую дату сервера, приведенную к часовому поясу сеанса. При вычислении даты используется один из заданных часовых поясов в порядке: часовой пояс сеанса, часовой пояс информационной базы, часовой пояс сервера.'
    },
    CurrentUniversalDate: {
      description: 'Получает текущую универсальную дату компьютера.'
    },
    CurrentUniversalDateInMilliseconds: {
      description: 'Получает текущую универсальную дату в миллисекундах (в UTC, начиная с 01.01.0001 00:00:00).'
    },
    ClientApplicationInterfaceCurrentVariant: {
      description: 'Получает текущий вариант интерфейса.'
    },
    ClientApplicationBaseFontCurrentVariant: {
      description: 'Получает текущий вариант основного шрифта приложения.'
    },
    CurrentLocaleCode: {
      description: 'Получает код локализации (язык, страна) текущего сеанса, который может быть ключом командной строки /VL или, при запуске из Конфигуратора, установкой параметров запуска.'
    },
    CurrentRunMode: {
      description: 'Получает режим запуска клиентского приложения текущего сеанса работы.'
    },
    CurrentLanguage: {
      description: 'Получает язык интерфейса, выбранный для текущего пользователя или основной язык, если нет текущего пользователя или для него не указан язык.'
    },
    CurrentSystemLanguage: {
      description: 'Возвращает используемый системой язык.'
    },
    Type: {
      description: 'Получает тип по его строковому имени.'
    },
    TypeOf: {
      description: 'Получает тип значения.'
    },
    TransactionActive: {
      description: 'Получить текущее состояние транзакции.'
    },
    Title: {
      description: 'Преобразует строку следующим образом: у каждого слова строки первый символ преобразуется к верхнему регистру. Все остальные символы преобразуются к нижнему регистру.'
    },
    EraseInfoBaseData: {
      description: 'Выполняет удаление данных информационной базы:   - Из таблиц, определяемых структурой метаданных;  - Из хранилищ настроек;  - Из истории;  - Административных параметров информационной базы;  - Из списка пользователей.'
    },
    DeleteFromTempStorage: {
      description: 'Удаляет ранее помещенное значение из временного хранилища.'
    },
    DeleteObjects: {
      description: 'Удаляет объекты, ссылки на которые переданы в параметре СписокСсылок.ОбластьПоиска. При проверке ссылочной целостности поиск осуществляется среди всех данных, из которых могут быть ссылки на переданные объекты. Если на какой-либо объект нет доступа, то вызывается исключение.'
    },
    DeleteFiles: {
      description: 'Удаляет указанные файлы.'
    },
    ToUniversalTime: {
      description: 'Преобразует местное время в заданном часовом поясе в универсальное время.'
    },
    SetSafeMode: {
      description: 'При выполнении на сервере или в файловом варианте информационной базы устанавливает или отменяет безопасный режим. В других случаях не вызывает никаких действий. В безопасном режиме:   - игнорируется привилегированный режим;  - запрещены внешние по отношению к платформе 1С:Предприятия действия: COM; загрузка внешних компонентов; запуск внешних приложений и команд операционной системы; доступ к файловой системе, кроме временных файлов; доступ к Интернету. Платформа обеспечивает равенство значений счетчика безопасного режима при вызове произвольного метода встроенного языка и после возврата из него.'
    },
    SetDataSeparationSafeMode: {
      description: 'Устанавливает или отменяет безопасный режим разделения данных по заданному общему реквизиту. Установка безопасного режима действует до вызова его явной отмены или до возврата из метода встроенного языка, в котором выполнена его установка. Правила установки и отмены безопасного режима разделения данных аналогичны привилегированному режиму и безопасному режиму. Не позволяет отменить режим безопасного сеанса, определяемый установкой атрибута safe=”true” элемента zone файла default.vrd.  В каждом методе встроенного языка для каждого разделителя неявно определяется счетчик безопасного режима разделения данных с начальным значением 0. Установка безопасного режима разделения данных увеличивает значение счетчика в текущем методе, а отмена - уменьшает. Если значение текущего счетчика – 0, то отмена безопасного режима разделения данных порождает исключение.  Если при возврате из метода встроенного языка значение текущего счетчика отлично от 0, то оно принудительно сбрасывается в 0. Если суммарное значение счетчиков по текущему состоянию стека вызовов встроенного языка на сервере 1С:Предприятия отлично от нуля, то безопасный режим разделения данных включен.'
    },
    SetSessionsLock: {
      description: 'Устанавливает режим блокировки сеансов.'
    },
    InstallAddIn: {
      description: 'Доставляет объект внешнего компонента с сервера на клиент, после чего он становится доступен для метода ПодключитьВнешнююКомпоненту.'
    },
    SetHibernateSessionTerminateTime: {
      description: 'Установить интервал времени в секундах, по истечении которого спящий сеанс будет завершен.'
    },
    SetPassiveSessionHibernateTime: {
      description: 'Устанавливает интервал времени в секундах, по истечении которого неактивный сеанс переводится в спящий режим.'
    },
    SetLockWaitTime: {
      description: 'Устанавливает время ожидания блокировки данных (в секундах).'
    },
    SetClientApplicationCaption: {
      description: 'Устанавливает заголовок приложения, которое используется при формировании заголовков окон.'
    },
    SetCaption: {
      description: 'Устанавливает новый заголовок главного окна программы.'
    },
    SetEventLogUsing: {
      description: 'Метод устанавливает, какие события (по уровню важности) должны регистрироваться в журнале.'
    },
    SetEventLogEventUse: {
      description: 'Управляет регистрацией событий в журнале регистрации. Устанавливает для информационной базы режим регистрации события журнала регистрации. По умолчанию все события используются.'
    },
    SetShortApplicationCaption: {
      description: 'Добавляет краткий заголовок приложения.  Текст размещается в заголовке окна приложения перед текстом системного заголовка и автоматически отделяется точкой.'
    },
    SetUserPasswordMinLength: {
      description: 'Устанавливает минимальную длину, которую должны иметь пароли пользователей информационной базы. Действует только при изменении пароля существующего пользователя или при создании нового пользователя.'
    },
    SetExclusiveMode: {
      description: 'Устанавливает и отключает использование монопольного режима.'
    },
    SetLicensingClientParameters: {
      description: 'Предназначен для сохранения в информационной базе имени пользователя и пароля клиента лицензирования. Эти данные используются при проверке лицензионности конфигурации.'
    },
    SetInfoBasePredefinedDataUpdate: {
      description: 'Устанавливает новое значение режима обновления предопределенных данных для информационной базы. Для выполнения требуются права администратора информационной базы. Фактический режим обновления определяется в следующем порядке:   - Если для объекта метаданных в данных установлен режим обновления, отличный от Авто, то используется это значение.  - Иначе, если для объекта метаданных в конфигурации установлен режим обновления, отличный от Авто, то используется это значение.  - Иначе, если для информационной базы установлен режим обновления, отличный от Авто, то используется это значение.  - Иначе, если это периферийный узел РИБ, то предопределенные данные не будут обновлены. Если проверка выполняется для центрального узла РИБ, или для базы не являющейся РИБ, обновление предопределенных данных будет выполнено. Метод доступен только из неразделенного сеанса.'
    },
    SetInterfaceFunctionalOptionParameters: {
      description: 'Устанавливает параметры функциональных опций, действие которых будет распространяться на командный интерфейс и рабочий стол. Вызывает автоматическое обновление интерфейса (включая рабочий стол). Параметры функциональных опций позволяют определить, как отобрать значения функциональной опции, привязанной к реквизиту справочника или ресурсу регистра сведений, то есть в случае, когда в одном объекте может храниться набор значений опций.  При привязке функциональной опции к ресурсу периодического регистра сведений, если период в параметрах не указывается, значение выбирается как срез последних на текущую дату. А если есть параметр Период (Period), то он используется как дата, на которую будет взят срез.'
    },
    SetPrivilegedMode: {
      description: 'В файловом варианте информационной базы или на сервере в клиент-серверном варианте информационной базы управляет (включает или выключает) привилегированный режим исполнения кода, аналогичный режиму работы кода привилегированных модулей. В привилегированном режиме никакие проверки прав не выполняются и разрешены любые операции. В клиент-серверном варианте при выполнении на клиенте данный метод не выполняет никаких действий. Первое выполнение метода с параметром Истина в файловом варианте информационной базы или на сервере в клиент-серверном варианте информационной базы включает привилегированный режим. Для явного выключения привилегированного режима необходимо внутри процедуры или функции, в которой он был включен, вызвать метод с параметром Ложь столько же раз, сколько раз в этой же процедуре или функции был вызван метод с параметром Истина. Если этого сделано не было, то при возврате из процедуры/функции, в которой был включен привилегированный режим, он будет выключен автоматически (неявно). Если в процедуре или функции вызовов метода с параметром Ложь сделано больше, чем вызовов с параметром Истина, то будет вызвано исключение.'
    },
    SetUserPasswordStrengthCheck: {
      description: 'Устанавливает или отключает следующие ограничения на сложность паролей пользователей информационной базы:   - Длина не менее 7 символов;  - Содержит не менее 3-х типов символов из перечисленных ниже:   - заглавные буквы;  - строчные буквы;  - цифры;  - спец. символы.   - Не совпадает с именем пользователя;  - Не является последовательностью символов. Действует только при изменении пароля существующего пользователя или при создании нового пользователя.'
    },
    InstallCryptoExtension: {
      description: 'Устанавливает расширение для работы с криптографией в браузер.'
    },
    InstallFileSystemExtension: {
      description: 'Устанавливает расширение работы с файлами. В режиме запуска толстого и тонкого клиентов информирует о том, что расширение установлено. Для клиента мобильного приложения, информирует о том, что расширение установлено.'
    },
    ConnectExternalDataSource: {
      description: 'Устанавливает соединение с внешним источником данных.'
    },
    SetObjectAndFormConformity: {
      description: 'Устанавливает соответствие управляемой формы и объектов вида СообщениеПользователю для последующей правильной привязки сообщений к элементам управления формы. Для того, чтобы сообщение использовало данные соответствия объекта и формы, у него необходимо заполнить поле Данные. Соответствие может быть получено методом ПолучитьСоответствиеОбъектаИФормы. Получать соответствие можно до тех пор, пока существует объект, для которого оно зарегистрированно.'
    },
    SetStandardODataInterfaceContent: {
      description: 'Устанавливает состав объектов метаданных, доступных через стандартный сервис OData API. Объекты, доступные для включения в стандартный OData API:   - Справочник.ИмяСправочника  - Документ.ИмяДокумента  - ПланОбмена.ИмяПланаОбмена  - ПланСчетов.ИмяПланаСчетов  - ПланВидовРасчета.ИмяПланаВидовРасчета  - ПланВидовХарактеристик.ИмяПланаВидовХарактеристик  - РегистрБухгалтерии.ИмяРегистраБухгалтерии  - РегистрСведений.ИмяРегистраСведений  - РегистрРасчета.ИмяРегистраРасчета  - РегистрНакопления.ИмяРегистраНакопления  - ЖурналДокументов.ИмяЖурналаДокументов  - Перечисление.ИмяПеречисления  - Задача.ИмяЗадачи  - БизнесПроцесс.ИмяБизнесПроцесса  - Константа.ИмяКонстанты'
    },
    SetInfoBaseTimeZone: {
      description: 'Устанавливает новый часовой пояс информационной базы и сохраняет его в базе данных. Если параметр не задан, то установка часового пояса информационной базы отменяется. В этом случае часовой пояс информационной базы совпадает с часовым поясом сервера.'
    },
    SetSessionTimeZone: {
      description: 'Устанавливает часовой пояс текущего сеанса. Если параметр не задан, то часовым поясом сеанса становится часовой пояс информационной базы, если он определен, или часовой пояс компьютера сервера, если часовой пояс информационной базы не определен.'
    },
    Format: {
      description: 'Формирует удобное для чтения представление значений. Полезно использование в отчетах и при прочем визуальном отображении значений.'
    },
    Int: {
      description: 'Вычисляет целую часть переданного числа, полностью отсекая дробную часть.'
    },
    Hour: {
      description: 'Определяет час в указанной дате.'
    },
    TimeZone: {
      description: 'Получает идентификатор часового пояса компьютера.'
    },
    SessionTimeZone: {
      description: 'Получает идентификатор часового пояса текущего сеанса.'
    },
    Number: {
      description: 'Преобразует полученный параметр в значение типа Число. Значение типа Строка преобразуется в число в том случае, если параметр является строковым представлением литерала численного типа. При этом строковое представление анализируется как с учетом региональных установок информационной базы, так и без их учета. В противном случае будет выдано сообщение об ошибке выполнения функции. Параметр типа Булево преобразуется в число по следующим правилам:   - Ложь преобразуется в 0;  - Истина преобразуется в 1.'
    },
    NumberInWords: {
      description: 'Формирует представление числа прописью в соответствии с заданными форматной строкой и параметрами предмета исчисления.'
    },
    IsTempStorageURL: {
      description: 'Проверяет, является ли переданный адрес адресом файла во временном хранилище.'
    }  
  }

  exports.globalvariables = {
    WSСсылки: {
      description: 'Содержит менеджер ссылок на внешние Web-сервисы.'
    },
    БиблиотекаКартинок: {
      description: 'Используется для доступа к библиотеке картинок.'
    },
    БиблиотекаМакетовОформленияКомпоновкиДанных: {
      description: 'Библиотека макетов оформления компоновки данных. Доступны следующие предопределенные макеты оформления: Основной(Main), Яркий(Gaudy), Море(Sea), Арктика(Arctic), Зеленый(Green), Античный(Antique).'
    },
    БиблиотекаСтилей: {
      description: 'Используется для доступа к определенным в конфигурации стилям.'
    },
    БизнесПроцессы: {
      description: 'Используется для доступа к определенным в конфигурации бизнес-процессам.'
    },
    ВнешниеИсточникиДанных: {
      description: 'Содержит объект для управления внешними источниками данных.'
    },
    ВнешниеОбработки: {
      description: 'Используется для доступа к внешним обработкам.'
    },
    ВнешниеОтчеты: {
      description: 'Используется для доступа к внешним отчетам.'
    },
    ГлавныйИнтерфейс: {
      description: 'Используется для доступа к определенным в конфигурации пользовательским интерфейсам.'
    },
    ГлавныйСтиль: {
      description: 'Управляет стилем всего приложения, аналогично тому, как это происходит при установке стиля приложения в режиме Конфигуратор.  Может быть установлено в одно из значений коллекции стилей глобального контекста или в значение стиля по умолчанию (стиль "Авто").'
    },
    Документы: {
      description: 'Используется для доступа к определенным в конфигурации документам.'
    },
    ДоставляемыеУведомления: {
      description: 'Используется для доступа к менеджеру доставляемых уведомлений.'
    },
    ЖурналыДокументов: {
      description: 'Используется для доступа к определенным в конфигурации журналам документов.'
    },
    Задачи: {
      description: 'Используется для доступа к определенным в конфигурации задачам.'
    },
    ИспользованиеРабочейДаты: {
      description: 'Определяет режим использования рабочей даты.'
    },
    ИсторияРаботыПользователя: {
      description: 'Используется для управления историей работы пользователя. Для использования свойства требуется, чтобы для пользователя было доступно право СохранениеДанныхПользователя.'
    },
    Константы: {
      description: 'Используется для доступа к определенным в конфигурации константам.'
    },
    КритерииОтбора: {
      description: 'Используется для доступа к определенным в конфигурации критериям отбора.'
    },
    Метаданные: {
      description: 'Используется для доступа к структуре метаданных конфигурации.'
    },
    Обработки: {
      description: 'Используется для доступа к определенным в конфигурации обработкам.'
    },
    ОтправкаДоставляемыхУведомлений: {
      description: 'Используется для доступа к менеджеру отправки уведомлений.'
    },
    Отчеты: {
      description: 'Используется для доступа к определенным в конфигурации отчетам.'
    },
    ПараметрЗапуска: {
      description: 'Используется для доступа к параметру запуска, передаваемому через ключ командной строки /C.'
    },
    ПараметрыСеанса: {
      description: 'Используется для доступа к параметрам сеанса.'
    },
    Перечисления: {
      description: 'Используется для доступа к определенным в конфигурации перечислениям.'
    },
    ПланыВидовРасчета: {
      description: 'Используется для доступа к менеджеру всех планов видов расчета.'
    },
    ПланыВидовХарактеристик: {
      description: 'Используется для доступа к планам видов характеристик.'
    },
    ПланыОбмена: {
      description: 'Используется для доступа к планам обмена.'
    },
    ПланыСчетов: {
      description: 'Используется для доступа к планам счетов.'
    },
    ПолнотекстовыйПоиск: {
      description: 'Используется для управления и использования полнотекстового поиска.'
    },
    ПользователиИнформационнойБазы: {
      description: 'Используется для управления списком пользователей информационной базы.'
    },
    Последовательности: {
      description: 'Используется для доступа к определенным в конфигурации последовательностям.'
    },
    РабочаяДата: {
      description: 'Содержит рабочую дату, используемую в текущем сеансе работы с конфигурацией. Доступно для записи в случае, если свойство ИспользованиеРабочейДаты имеет значение Назначать.'
    },
    РасширенияКонфигурации: {
      description: 'Предоставляет доступ к управлению расширениями конфигурации.'
    },
    РегистрыБухгалтерии: {
      description: 'Используется для доступа к регистрам бухгалтерии.'
    },
    РегистрыНакопления: {
      description: 'Используется для доступа к определенным в конфигурации регистрам накопления.'
    },
    РегистрыРасчета: {
      description: 'Используется для доступа к менеджеру всех регистров расчета.'
    },
    РегистрыСведений: {
      description: 'Используется для доступа к определенным в конфигурации регистрам сведений.'
    },
    РегламентныеЗадания: {
      description: 'Используется для доступа к регламентным заданиям.'
    },
    СериализаторXDTO: {
      description: 'Сериализатор XDTO, соответствующий глобальной фабрики XDTO.'
    },
    Справочники: {
      description: 'Используется для доступа к определенным в конфигурации справочникам.'
    },
    СредстваГеопозиционирования: {
      description: 'Используется для доступа к средствам геопозиционирования мобильной платформы.'
    },
    СредстваКриптографии: {
      description: 'Свойство предоставляет доступ к менеджеру средств криптографии.'
    },
    СредстваМультимедиа: {
      description: 'Используется для доступа к определенным в конфигурации средствам мультимедиа мобильной платформы.'
    },
    СредстваПочты: {
      description: 'Предоставляет доступ к средствам почты мобильной платформы.'
    },
    СредстваТелефонии: {
      description: 'Предоставляет доступ к средствам телефонии мобильной платформы.'
    },
    ФабрикаXDTO: {
      description: 'Фабрика XDTO, содержащая все пакеты XDTO, имеющиеся в конфигурации, а также предопределенные пакеты (например, пакет типов XML схемы).'
    },
    ФоновыеЗадания: {
      description: 'Используется для доступа к фоновым заданиям.'
    },
    ХранилищаНастроек: {
      description: 'Предназначено для доступа к хранилищам настроек, которые созданы в конфигурации.'
    },
    ХранилищеВариантовОтчетов: {
      description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление настроек вариантов отчета.  Если в свойстве конфигурации "ХранилищеВариантовОтчетов" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления настроек вариантов отчетов. Если в свойстве конфигурации "ХранилищеВариантовОтчетов" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.  Для чтения, изменения, добавления и удаления настроек следует в параметрах методов объектов СтандартноеХранилищеНастроекМенеджер и ХранилищеНастроекМенеджер.Имя хранилища использовать следующие значения:   - Ключ объекта – указывается полное имя отчета. Например: "Отчет.Продажи".  - Ключ настройки – указывается текстовый идентификатор варианта. Например: "ПродажиПоРегионам". Тип сохраняемого значения – НастройкиКомпоновкиДанных.'
    },
    ХранилищеНастроекДанныхФорм: {
      description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление настроек данных форм.  Если в свойстве конфигурации "ХранилищеНастроекДанныхФорм" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления настроек данных форм. Если в свойстве конфигурации "ХранилищеНастроекДанныхФорм" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.'
    },
    ХранилищеОбщихНастроек: {
      description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление общих настроек.  Если в свойстве конфигурации "ХранилищеОбщихНастроек" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления вариантов отчетов. Если в свойстве конфигурации "ХранилищеОбщихНастроек" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.'
    },
    ХранилищеПользовательскихНастроекДинамическихСписков: {
      description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление настроек динамических списков.  Если в свойстве конфигурации "ХранилищеПользовательскихНастроекДинамическихСписков" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления настроек динамических списков. Если в свойстве конфигурации "ХранилищеПользовательскихНастроекДинамическихСписков" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.'
    },
    ХранилищеПользовательскихНастроекОтчетов: {
      description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление настроек отчетов.  Если в свойстве конфигурации "ХранилищеПользовательскихНастроекОтчетов" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления настроек вариантов отчетов. Если в свойстве конфигурации "ХранилищеПользовательскихНастроекОтчетов" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.'
    },
    ХранилищеСистемныхНастроек: {
      description: 'Содержит объект менеджера стандартного хранилища настроек, предназначенный для доступа к системным настройкам.'
    },
    WSReferences: {
      description: 'Содержит менеджер ссылок на внешние Web-сервисы.'
    },
    PictureLib: {
      description: 'Используется для доступа к библиотеке картинок.'
    },
    DataCompositionAppearanceTemplateLib: {
      description: 'Библиотека макетов оформления компоновки данных. Доступны следующие предопределенные макеты оформления: Основной(Main), Яркий(Gaudy), Море(Sea), Арктика(Arctic), Зеленый(Green), Античный(Antique).'
    },
    StyleLib: {
      description: 'Используется для доступа к определенным в конфигурации стилям.'
    },
    BusinessProcesses: {
      description: 'Используется для доступа к определенным в конфигурации бизнес-процессам.'
    },
    ExternalDataSources: {
      description: 'Содержит объект для управления внешними источниками данных.'
    },
    ExternalDataProcessors: {
      description: 'Используется для доступа к внешним обработкам.'
    },
    ExternalReports: {
      description: 'Используется для доступа к внешним отчетам.'
    },
    MainInterface: {
      description: 'Используется для доступа к определенным в конфигурации пользовательским интерфейсам.'
    },
    MainStyle: {
      description: 'Управляет стилем всего приложения, аналогично тому, как это происходит при установке стиля приложения в режиме Конфигуратор.  Может быть установлено в одно из значений коллекции стилей глобального контекста или в значение стиля по умолчанию (стиль "Авто").'
    },
    Documents: {
      description: 'Используется для доступа к определенным в конфигурации документам.'
    },
    DeliverableNotifications: {
      description: 'Используется для доступа к менеджеру доставляемых уведомлений.'
    },
    DocumentJournals: {
      description: 'Используется для доступа к определенным в конфигурации журналам документов.'
    },
    Tasks: {
      description: 'Используется для доступа к определенным в конфигурации задачам.'
    },
    WorkingDateUse: {
      description: 'Определяет режим использования рабочей даты.'
    },
    UserWorkHistory: {
      description: 'Используется для управления историей работы пользователя. Для использования свойства требуется, чтобы для пользователя было доступно право СохранениеДанныхПользователя.'
    },
    Constants: {
      description: 'Используется для доступа к определенным в конфигурации константам.'
    },
    FilterCriteria: {
      description: 'Используется для доступа к определенным в конфигурации критериям отбора.'
    },
    Metadata: {
      description: 'Используется для доступа к структуре метаданных конфигурации.'
    },
    DataProcessors: {
      description: 'Используется для доступа к определенным в конфигурации обработкам.'
    },
    DeliverableNotificationSend: {
      description: 'Используется для доступа к менеджеру отправки уведомлений.'
    },
    Reports: {
      description: 'Используется для доступа к определенным в конфигурации отчетам.'
    },
    LaunchParameter: {
      description: 'Используется для доступа к параметру запуска, передаваемому через ключ командной строки /C.'
    },
    SessionParameters: {
      description: 'Используется для доступа к параметрам сеанса.'
    },
    Enums: {
      description: 'Используется для доступа к определенным в конфигурации перечислениям.'
    },
    ChartsOfCalculationTypes: {
      description: 'Используется для доступа к менеджеру всех планов видов расчета.'
    },
    ChartsOfCharacteristicTypes: {
      description: 'Используется для доступа к планам видов характеристик.'
    },
    ExchangePlans: {
      description: 'Используется для доступа к планам обмена.'
    },
    ChartsOfAccounts: {
      description: 'Используется для доступа к планам счетов.'
    },
    FullTextSearch: {
      description: 'Используется для управления и использования полнотекстового поиска.'
    },
    InfoBaseUsers: {
      description: 'Используется для управления списком пользователей информационной базы.'
    },
    Sequences: {
      description: 'Используется для доступа к определенным в конфигурации последовательностям.'
    },
    WorkingDate: {
      description: 'Содержит рабочую дату, используемую в текущем сеансе работы с конфигурацией. Доступно для записи в случае, если свойство ИспользованиеРабочейДаты имеет значение Назначать.'
    },
    ConfigurationExtensions: {
      description: 'Предоставляет доступ к управлению расширениями конфигурации.'
    },
    AccountingRegisters: {
      description: 'Используется для доступа к регистрам бухгалтерии.'
    },
    AccumulationRegisters: {
      description: 'Используется для доступа к определенным в конфигурации регистрам накопления.'
    },
    CalculationRegisters: {
      description: 'Используется для доступа к менеджеру всех регистров расчета.'
    },
    InformationRegisters: {
      description: 'Используется для доступа к определенным в конфигурации регистрам сведений.'
    },
    ScheduledJobs: {
      description: 'Используется для доступа к регламентным заданиям.'
    },
    XDTOSerializer: {
      description: 'Сериализатор XDTO, соответствующий глобальной фабрики XDTO.'
    },
    Catalogs: {
      description: 'Используется для доступа к определенным в конфигурации справочникам.'
    },
    LocationTools: {
      description: 'Используется для доступа к средствам геопозиционирования мобильной платформы.'
    },
    CryptoToolsManager: {
      description: 'Свойство предоставляет доступ к менеджеру средств криптографии.'
    },
    MultimediaTools: {
      description: 'Используется для доступа к определенным в конфигурации средствам мультимедиа мобильной платформы.'
    },
    MailTools: {
      description: 'Предоставляет доступ к средствам почты мобильной платформы.'
    },
    TelephonyTools: {
      description: 'Предоставляет доступ к средствам телефонии мобильной платформы.'
    },
    XDTOFactory: {
      description: 'Фабрика XDTO, содержащая все пакеты XDTO, имеющиеся в конфигурации, а также предопределенные пакеты (например, пакет типов XML схемы).'
    },
    BackgroundJobs: {
      description: 'Используется для доступа к фоновым заданиям.'
    },
    SettingsStorages: {
      description: 'Предназначено для доступа к хранилищам настроек, которые созданы в конфигурации.'
    },
    ReportsVariantsStorage: {
      description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление настроек вариантов отчета.  Если в свойстве конфигурации "ХранилищеВариантовОтчетов" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления настроек вариантов отчетов. Если в свойстве конфигурации "ХранилищеВариантовОтчетов" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.  Для чтения, изменения, добавления и удаления настроек следует в параметрах методов объектов СтандартноеХранилищеНастроекМенеджер и ХранилищеНастроекМенеджер.Имя хранилища использовать следующие значения:   - Ключ объекта – указывается полное имя отчета. Например: "Отчет.Продажи".  - Ключ настройки – указывается текстовый идентификатор варианта. Например: "ПродажиПоРегионам". Тип сохраняемого значения – НастройкиКомпоновкиДанных.'
    },
    FormDataSettingsStorage: {
      description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление настроек данных форм.  Если в свойстве конфигурации "ХранилищеНастроекДанныхФорм" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления настроек данных форм. Если в свойстве конфигурации "ХранилищеНастроекДанныхФорм" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.'
    },
    CommonSettingsStorage: {
      description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление общих настроек.  Если в свойстве конфигурации "ХранилищеОбщихНастроек" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления вариантов отчетов. Если в свойстве конфигурации "ХранилищеОбщихНастроек" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.'
    },
    DynamicListsUserSettingsStorage: {
      description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление настроек динамических списков.  Если в свойстве конфигурации "ХранилищеПользовательскихНастроекДинамическихСписков" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления настроек динамических списков. Если в свойстве конфигурации "ХранилищеПользовательскихНастроекДинамическихСписков" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.'
    },
    ReportsUserSettingsStorage: {
      description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление настроек отчетов.  Если в свойстве конфигурации "ХранилищеПользовательскихНастроекОтчетов" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления настроек вариантов отчетов. Если в свойстве конфигурации "ХранилищеПользовательскихНастроекОтчетов" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.'
    },
    SystemSettingsStorage: {
      description: 'Содержит объект менеджера стандартного хранилища настроек, предназначенный для доступа к системным настройкам.'
    }
  }

  exports.keywords = {
    Процедура: {},
    Procedure: {},
    Функция: {},
    Function: {},
    Экспорт: {},
    Export: {},
    Перем: {},
    Var: {},
    Неопределено: {},
    Undefined: {},
    Истина: {},
    True: {},
    Ложь: {},
    False: {},
    NULL: {},
    КонецПроцедуры: {},
    EndProcedure: {},
    КонецФункции: {},
    EndFunction: {},
    Прервать: {},
    Break: {},
    Продолжить: {},
    Continue: {},
    Возврат: {},
    Return: {},
    Использовать: {},
    Use: {},
    Если: {},
    If: {},
    Иначе: {},
    Else: {},
    ИначеЕсли: {},
    ElsIf: {},
    Тогда: {},
    Then: {},
    КонецЕсли: {},
    EndIf: {},
    Попытка: {},
    Try: {},
    Исключение: {},
    Except: {},
    КонецПопытки: {},
    EndTry: {},
    ВызватьИсключение: {},
    Raise: {},
    Пока: {},
    While: {},
    Для: {},
    For: {},
    Каждого: {},
    Each: {},
    Из: {},
    In: {},
    По: {},
    To: {},
    Цикл: {},
    Do: {},
    КонецЦикла: {},
    EndDo: {},
    НЕ: {},
    NOT: {},
    И: {},
    AND: {},
    ИЛИ: {},
    OR: {}
  }
