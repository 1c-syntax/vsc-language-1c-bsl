
/* tslint:disable:quotemark */
/* tslint:disable:max-line-length */
/* tslint:disable:object-literal-sort-keys */
/* tslint:disable:trailing-comma */

export function globalfunctions(): any {
    let data = {
        "ACos": {
            name: 'ACos',
            name_en: 'ACos',
            description: 'Вычисляет арккосинус от аргумента Число.',
            returns: 'Тип: Число. Результат вычисления арккосинуса в радианах.',
            signature: {
                default: {
                    СтрокаПараметров: '(Число: Число): Число',
                    Параметры: {
                        Число: 'Аргумент функции. Определен в диапазоне -1 ... 1.'
                    }
                }
            }
        },
        "ASin": {
            name: 'ASin',
            name_en: 'ASin',
            description: 'Вычисляет арксинус от аргумента Число.',
            returns: 'Тип: Число. Результат вычисления арксинуса в радианах.',
            signature: {
                default: {
                    СтрокаПараметров: '(Число: Число): Число',
                    Параметры: {
                        Число: 'Аргумент функции. Определен в диапазоне -1 ... 1.'
                    }
                }
            }
        },
        "ATan": {
            name: 'ATan',
            name_en: 'ATan',
            description: 'Вычисляет арктангенс от аргумента Число.',
            returns: 'Тип: Число. Результат вычисления арктангенса в радианах.',
            signature: {
                default: {
                    СтрокаПараметров: '(Число: Число): Число',
                    Параметры: {
                        Число: 'Аргумент функции.'
                    }
                }
            }
        },
        "Base64Значение": {
            name: 'Base64Значение',
            name_en: 'Base64Value',
            description: 'Получает из строки закодированной по алгоритму base64 двоичные данные.',
            returns: 'Тип: ДвоичныеДанные. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка): ДвоичныеДанные',
                    Параметры: {
                        Строка: 'Строка, закодированная по алгоритму base64.'
                    }
                }
            }
        },
        "Base64Строка": {
            name: 'Base64Строка',
            name_en: 'Base64String',
            description: 'Получает строку, закодированную по алгоритму base64.',
            returns: 'Тип: Строка. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Значение: ДвоичныеДанные): Строка',
                    Параметры: {
                        Значение: 'Двоичные данные, которые необходимо закодировать по алгоритму base64.'
                    }
                }
            }
        },
        "Cos": {
            name: 'Cos',
            name_en: 'Cos',
            description: 'Вычисляет косинус от аргумента Угол, заданного в радианах.',
            returns: 'Тип: Число. Результат вычисления косинуса.',
            signature: {
                default: {
                    СтрокаПараметров: '(Угол: Число): Число',
                    Параметры: {
                        Угол: 'Аргумент функции.'
                    }
                }
            }
        },
        "Exp": {
            name: 'Exp',
            name_en: 'Exp',
            description: 'Вычисляет результат возведения основания натурального логарифма (числа e) в степень Число.',
            returns: 'Тип: Число. Результат возведения в степень.',
            signature: {
                default: {
                    СтрокаПараметров: '(Число: Число): Число',
                    Параметры: {
                        Число: 'Аргумент функции.'
                    }
                }
            }
        },
        "Log": {
            name: 'Log',
            name_en: 'Log',
            description: 'Вычисляет натуральный логарифм параметра Число.',
            returns: 'Тип: Число. Значение результата вычисления логарифма.',
            signature: {
                default: {
                    СтрокаПараметров: '(Число: Число): Число',
                    Параметры: {
                        Число: 'Исходное число, больше 0.'
                    }
                }
            }
        },
        "Log10": {
            name: 'Log10',
            name_en: 'Log10',
            description: 'Вычисляет десятичный логарифм параметра Число.',
            returns: 'Тип: Число. Значение результата вычисления логарифма.',
            signature: {
                default: {
                    СтрокаПараметров: '(Число: Число): Число',
                    Параметры: {
                        Число: 'Исходное число, больше 0.'
                    }
                }
            }
        },
        "Pow": {
            name: 'Pow',
            name_en: 'Pow',
            description: 'Возводит число X в степень Y.',
            returns: 'Тип: Число. Результат возведения в степень.',
            signature: {
                default: {
                    СтрокаПараметров: '(Основание: Число, Показатель: Число): Число',
                    Параметры: {
                        Основание: 'Основание операции возведения в степень.',
                        Показатель: 'Показатель степени.'
                    }
                }
            }
        },
        "Sin": {
            name: 'Sin',
            name_en: 'Sin',
            description: 'Вычисляет синус от аргумента Угол, заданного в радианах.',
            returns: 'Тип: Число. Результат вычисления синуса.',
            signature: {
                default: {
                    СтрокаПараметров: '(Угол: Число): Число',
                    Параметры: {
                        Угол: 'Аргумент функции.'
                    }
                }
            }
        },
        "Sqrt": {
            name: 'Sqrt',
            name_en: 'Sqrt',
            description: 'Вычисляет квадратный корень параметра Число.',
            returns: 'Тип: Число. Результат вычисления квадратного корня.',
            signature: {
                default: {
                    СтрокаПараметров: '(Число: Число): Число',
                    Параметры: {
                        Число: 'Аргумент функции. Неотрицательное число.'
                    }
                }
            }
        },
        "Tan": {
            name: 'Tan',
            name_en: 'Tan',
            description: 'Вычисляет тангенс от аргумента Угол, заданного в радианах.',
            returns: 'Тип: Число. Результат вычисления тангенса.',
            signature: {
                default: {
                    СтрокаПараметров: '(Угол: Число): Число',
                    Параметры: {
                        Угол: 'Аргумент функции.'
                    }
                }
            }
        },
        "XMLЗначение": {
            name: 'XMLЗначение',
            name_en: 'XMLValue',
            description: 'Выполняет преобразование из строки, полученной из текста элемента или значения атрибута XML, в значение в соответствии с указанным типом. Выполняет действие обратное действию метода XMLСтрока.',
            returns: 'Тип: Null, Булево, Число, Строка, Дата, УникальныйИдентификатор, ДвоичныеДанные, ХранилищеЗначения, ВидСчета, ВидДвиженияБухгалтерии, ВидДвиженияНакопления, ДопустимыйЗнак, ДопустимаяДлина, ЧастиДаты, Неопределено. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Тип: Тип, СтрокаXML: Строка): Null',
                    Параметры: {
                        Тип: 'Тип, значение которого надо получить при преобразовании из строкового представления XML.',
                        СтрокаXML: 'Строка, содержащая строковое представление значения, полученное из XML.'
                    }
                }
            }
        },
        "XMLСтрока": {
            name: 'XMLСтрока',
            name_en: 'XMLString',
            description: 'Получает XML представление значения для помещения в текст элемента или значение атрибута XML. XML представление зависит от типа значения:   - Строка - как есть;  - Булево: Истина - как "true", Ложь - как "false";  - Дата - XML представление соответствует представлению типа dateTime схемы XML (см. http://www.w3.org/TR/xmlschema-2/#dateTime);  - Число - XML представление соответствует представлению типа decimal схемы XML (см. http://www.w3.org/TR/xmlschema-2/#decimal);  - Значение системного перечисления (для перечислений, поддерживающих XML сериализацию) - как имя значения перечисления;  - УникальныйИдентификатор - как строковое представление уникального идентификатора;  - Ссылки - как XML представление уникального идентификатора ссылки;  - ХранилищеЗначения и ДвоичныеДанные - как строка в формате base64.',
            returns: 'Тип: Строка. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Значение: Неопределено): Строка',
                    Параметры: {
                        Значение: 'Значение, для которого должно быть получено строковое представление, которое может быть использовано как текст элемента или значение атрибута XML.'
                    }
                }
            }
        },
        "XMLТип": {
            name: 'XMLТип',
            name_en: 'XMLType',
            description: 'Получает тип данных XML, соответствующий переданному в качестве параметра типу.',
            returns: 'Тип: ТипДанныхXML. Неопределено, если никакой тип данных XML не соответствует указанному типу.',
            signature: {
                default: {
                    СтрокаПараметров: '(Тип: Тип): ТипДанныхXML',
                    Параметры: {
                        Тип: 'Тип значения, для которого необходимо определить соответствующий XML тип.'
                    }
                }
            }
        },
        "XMLТипЗнч": {
            name: 'XMLТипЗнч',
            name_en: 'XMLTypeOf',
            description: 'Получает тип данных XML, соответствующий типу переданного в качестве параметра значения.',
            returns: 'Тип: ТипДанныхXML, Неопределено. Если тип данных XML, соответствующий типу переданного в качестве параметра значения определен, то метод возвращает тип данных XML. Если не определен, то метод возвращает Неопределено.',
            signature: {
                default: {
                    СтрокаПараметров: '(Значение: Произвольный): ТипДанныхXML',
                    Параметры: {
                        Значение: 'Значение, для типа которого нужно получить соответствующий тип данных XML.'
                    }
                }
            }
        },
        "АктивноеОкно": {
            name: 'АктивноеОкно',
            name_en: 'ActiveWindow',
            description: 'Получает текущее активное окно.',
            returns: 'Тип: ОкноКлиентскогоПриложения, Неопределено. '
        },
        "БезопасныйРежим": {
            name: 'БезопасныйРежим',
            name_en: 'SafeMode',
            description: 'Получает текущее значение безопасного режима.',
            returns: 'Тип: Булево, Строка. Строка, содержащая имя того профиля, с которым был установлен безопасный режим. Истина, если безопасный режим был установлен без указания имени профиля. Ложь, если безопасный режим не установлен.'
        },
        "БезопасныйРежимРазделенияДанных": {
            name: 'БезопасныйРежимРазделенияДанных',
            name_en: 'DataSeparationSafeMode',
            description: 'Показывает, установлен ли безопасный режим разделения данных по данному разделителю. Учитывет установку режима безопасного сеанса, определяемого установкой атрибута safe=”true” элемента zone файла default.vrd.',
            returns: 'Тип: Булево. Истина - безопасный режим разделения данных по данному разделителю включен.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОбщийРеквизит: Строка): Булево',
                    Параметры: {
                        ОбщийРеквизит: 'Имя общего реквизита со значением "Использовать" свойства "Разделение данных", для которого должен быть получен безопасный режим разделения данных.'
                    }
                }
            }
        },
        "Булево": {
            name: 'Булево',
            name_en: 'Boolean',
            description: 'Преобразует полученный параметр в значение типа Булево. Преобразование числа к типу Булево производится по следующим правилам:   - 0 преобразуется в Ложь;  - остальные значения преобразуются в Истина.',
            returns: 'Тип: Булево. Полученное значение.',
            signature: {
                default: {
                    СтрокаПараметров: '(Значение: Число): Булево',
                    Параметры: {
                        Значение: 'Исходное значение.'
                    }
                }
            }
        },
        "ВвестиДату": {
            name: 'ВвестиДату',
            name_en: 'InputDate',
            description: 'Вызывает диалог для ввода даты.',
            returns: 'Тип: Булево. Истина - дата введена; Ложь - пользователь отказался от ввода даты.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата, Подсказка?: Строка, ЧастьДаты?: ЧастиДаты): Булево',
                    Параметры: {
                        Дата: 'Имя доступной в модуле переменной. В эту переменную будет помещено введенное значение даты. Начальное значение переменной будет использовано в качестве начального значения в диалоге.',
                        Подсказка: 'Текст заголовка окна диалога ввода даты. Может использоваться в качестве подсказки пользователю. Значение по умолчанию: Пустая строка.',
                        ЧастьДаты: 'Вводимая в диалоге часть (или части) даты. Значение по умолчанию: ДатаВремя.'
                    }
                }
            }
        },
        "ВвестиЗначение": {
            name: 'ВвестиЗначение',
            name_en: 'InputValue',
            description: 'Вызывает диалог для ввода значения заданного типа. Если тип переменной не определен и Тип представляет собой составной тип данных, то в поле ввода появляется кнопка выбора типа.',
            returns: 'Тип: Булево. Истина - в диалоге было введено значение; Ложь - пользователь отказался от ввода значения.',
            signature: {
                default: {
                    СтрокаПараметров: '(Значение: Произвольный, Подсказка?: Строка, Тип?: Тип): Булево',
                    Параметры: {
                        Значение: 'Имя доступной в модуле переменной. В эту переменную будет помещено введенное значение. Если параметр <Тип> не задан или имеет значение Неопределено, тип данной переменной используется в качестве типа вводимого в диалоге данного. Начальное значение переменной будет использовано в качестве начального значения в диалоге.',
                        Подсказка: 'Текст заголовка окна диалога ввода значения. Может использоваться в качестве подсказки пользователю. Значение по умолчанию: Пустая строка.',
                        Тип: 'Тип вводимого значения. Если параметр не указан, используется тип параметра <Значение>.'
                    }
                }
            }
        },
        "ВвестиСтроку": {
            name: 'ВвестиСтроку',
            name_en: 'InputString',
            description: 'Вызывает диалог для ввода строки.',
            returns: 'Тип: Булево. Истина - строка введена; Ложь - пользователь отказался от ввода строки.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка, Подсказка?: Строка, Длина?: Число, Многострочность?: Булево): Булево',
                    Параметры: {
                        Строка: 'Доступная в модуле переменная. В эту переменную будет помещена введенная в диалоге строка. Начальное значение переменной будет использовано в качестве начального значения в диалоге.',
                        Подсказка: 'Текст заголовка окна диалога ввода строки. Может использоваться в качестве подсказки пользователю. Значение по умолчанию: Пустая строка.',
                        Длина: 'Длина вводимой строки. Если параметр не указан, то строка неограниченной длины. Значение по умолчанию: 0.',
                        Многострочность: 'Определяет режим ввода многострочного текста: Истина - ввод многострочного текста с разделителями строк; Ложь - ввод простой строки. Значение по умолчанию: Ложь.'
                    }
                }
            }
        },
        "ВвестиЧисло": {
            name: 'ВвестиЧисло',
            name_en: 'InputNumber',
            description: 'Вызывает диалог для ввода числа.',
            returns: 'Тип: Булево. Истина - число введено; Ложь - пользователь отказался от ввода.',
            signature: {
                default: {
                    СтрокаПараметров: '(Число: Число, Подсказка?: Строка, Длина?: Число, Точность?: Число): Булево',
                    Параметры: {
                        Число: 'Имя доступной в модуле переменной. В эту переменную будет помещено введенное число. Начальное значение переменной будет использовано в качестве начального значения в диалоге.',
                        Подсказка: 'Текст заголовка окна диалога ввода числа. Может использоваться в качестве подсказки пользователю. Значение по умолчанию: Пустая строка.',
                        Длина: 'Длина вводимого числа включая дробную часть (символы разделителей не учитываются). Значение по умолчанию: 0.',
                        Точность: 'Количество знаков в дробной части вводимого числа. Значение по умолчанию: 0.'
                    }
                }
            }
        },
        "ВозможностьЧтенияXML": {
            name: 'ВозможностьЧтенияXML',
            name_en: 'CanReadXML',
            description: 'Производит проверку возможности чтения из XML значения указанного типа.  Данный метод получает тип данных XML из объекта ЧтениеXML, а затем пытается определить, имеется ли соответствующий тип 1С:Предприятия, аналогично тому как это делает метод ПолучитьXMLТип.',
            returns: 'Тип: Булево. Истина - тип 1С:Предприятия существует; Ложь - в противном случае.',
            signature: {
                default: {
                    СтрокаПараметров: '(ЧтениеXML: ЧтениеXML): Булево',
                    Параметры: {
                        ЧтениеXML: 'Объект, через который производится чтение XML.'
                    }
                }
            }
        },
        "Вопрос": {
            name: 'Вопрос',
            name_en: 'DoQueryBox',
            description: 'Выводит на экран окно вопроса.',
            returns: 'Тип: Произвольный. В зависимости от реакции пользователя возвращается значение системного перечисления или значение, связанное с нажатой кнопкой. В случае закрытия диалога по истечении времени ожидания возвращается значение Таймаут.',
            signature: {
                default: {
                    СтрокаПараметров: '(ТекстВопроса: Строка, Кнопки: РежимДиалогаВопрос, Таймаут?: Число, КнопкаПоУмолчанию?: Произвольный, Заголовок?: Строка, КнопкаТаймаута?: Произвольный): Произвольный',
                    Параметры: {
                        ТекстВопроса: 'Текст задаваемого вопроса.',
                        Кнопки: 'Задает состав и текст кнопок диалога, а также, связанные с кнопками значения. При использовании типа СписокЗначений:   - Значение – содержит значение, связанное с кнопкой. Это значение является возвращаемым значением при выборе кнопки. В качестве значения может использоваться значение перечисления КодВозвратаДиалога, а также другие значения;  - Представление – задает текст кнопки. Если представление не задано и в качестве значения используется значение перечисления КодВозвратаДиалога, то используется стандартное представление;  - Картинка – не используется (должна быть пустой);  - Пометка – не используется (должна быть пустой). При использовании типа СписокЗначений список не должен быть пустым.',
                        Таймаут: 'Интервал времени в секундах, в течение которого система будет ожидать ответа пользователя. По истечении интервала окно вопроса будет закрыто. Если параметр не указан, то время ожидания не ограничено. Если параметр имеет отрицательное значение, будет сгенерировано исключение. Значение по умолчанию: 0.',
                        КнопкаПоУмолчанию: 'Определяет кнопку по умолчанию по типу кнопки или по связанному с ней значению.',
                        Заголовок: 'Содержит заголовок окна вопроса.',
                        КнопкаТаймаута: 'Определяет кнопку (по типу кнопки или по связанному с ней значению), на которой отображается количество секунд, оставшихся до истечения таймаута.'
                    }
                }
            }
        },
        "ВосстановитьЗначение": {
            name: 'ВосстановитьЗначение',
            name_en: 'RestoreValue',
            description: 'Получает значение, сохраненное ранее с помощью метода СохранитьЗначение.',
            returns: 'Тип: Произвольный. Восстановленное значение. Если восстановить не удалось, возвращает Неопределено.',
            signature: {
                default: {
                    СтрокаПараметров: '(Имя: Строка): Произвольный',
                    Параметры: {
                        Имя: 'Имя сохраненного значения.'
                    }
                }
            }
        },
        "ВРег": {
            name: 'ВРег',
            name_en: 'Upper',
            description: 'Преобразует все символы строки в верхний регистр.',
            returns: 'Тип: Строка. Строка, полученная в результате преобразования.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка): Строка',
                    Параметры: {
                        Строка: 'Исходная строка.'
                    }
                }
            }
        },
        "ВыгрузитьЖурналРегистрации": {
            name: 'ВыгрузитьЖурналРегистрации',
            name_en: 'UnloadEventLog',
            description: 'Выгружает журнал регистрации. Существует возможность установить отбор, задаваемый структурой специального формата, указывающий, какие записи журнала регистрации выгружать, а также указать колонки, которые необходимо выгружать. Если указано имя входного файла, то происходит выгрузка из указанного файла.',
            signature: {
                default: {
                    СтрокаПараметров: '(Приемник: Строка, Отбор?: Структура, Колонки?: Строка, ИмяВходногоФайла?: Строка, МаксимальноеКоличество?: Число)',
                    Параметры: {
                        Приемник: 'Строка, содержащая имя выходного XML файла, либо таблица значений, в которую будут выгружены выбранные в соответствии с отбором записи журнала регистрации. В случае выгрузки в таблицу значений, она содержит колонки, в соответствии с параметром <Колонки>:   - Уровень (Level) - тип УровеньЖурналаРегистрации;  - Дата (Date) - тип Дата;  - Пользователь (User) - идентификатор пользователя, тип УникальныйИдентификатор;  - Компьютер (Computer) - имя компьютера, тип Строка;  - ИмяПриложения (ApplicationName) - имя приложения, тип Строка;  - Событие (Event ) - имя события, тип Строка;  - Комментарий (Comment) - комментарий, тип Строка;  - Метаданные (Metadata) - имя объекта метаданных, тип Строка; для событий "Доступ. Доступ" и "Доступ. Отказ в доступе" в этой колонке может содержаться массив имен объектов метаданных, тип Массив;  - Данные (Data) - данные, произвольного типа, в зависимости от события;  - ПредставлениеДанных (DataPresentation) - представление данных, тип Строка;  - ИмяПользователя (UserName) - имя пользователя, тип Строка;  - ПредставлениеПриложения (ApplicationPresentation) - представление имени приложения, тип Строка;  - ПредставлениеСобытия (EventPresentation) - представление события, тип Строка;  - ПредставлениеМетаданных (MetadataPresentation) - представление объекта метаданных; тип Строка; для событий "Доступ. Доступ" и "Доступ. Отказ в доступе" в этой колонке может содержаться массив представлений объектов метаданных, тип Массив;  - СтатусТранзакции (TransactionStatus) - статус транзакции, тип СтатусТранзакцииЗаписиЖурналаРегистрации;  - Транзакция (TransactionID) - представление транзакции, тип Строка;  - Сеанс (Session) - номер сеанса, тип Число;  - Соединение (Connection) - номер соединения, тип Число;  - РабочийСервер (ServerName) - имя рабочего сервера, тип Строка;  - ОсновнойIPПорт (Port) - номер основного IP-порта, тип Число;  - ВспомогательныйIPПорт (SyncPort) - номер вспомогательного IP-порта, тип Строка;  - РазделениеДанныхСеанса (SessionDataSeparation) - Структура с элементами, имена которых соответствуют именам общих реквизитов, разделяющих данные, а значения - значениям этих общих реквизитов;  - ПредставлениеРазделенияДанныхСеанса (SessionDataSeparationPresentation) - Массив строк вида: <представление общего реквизита>: <представление значения общего реквизита>.',
                        Отбор: 'Структура отбора журнала регистрации:   - ДатаНачала (StartDate) - Дата; значение по умолчанию Неопределено;  - ДатаОкончания (EndDate) - Дата; значение по умолчанию Неопределено;  - Уровень (Level) - перечисление или массив перечислений; значение по умолчанию Неопределено;  - ИмяПриложения (ApplicationName) - Строка или массив строк; значение по умолчанию Неопределено;  - Пользователь (User) - ПользовательИнформационнойБазы или массив таких объектов, или Строка. Объект ПользовательИнформационнойБазы и массив таких объектов можно получить из объекта МенеджерПользователейИнформационнойБазы. Также можно задавать пользователя по имени (строкой). Причем, пользователей, которые были удалены из информацонной базы можно задавать только таким способом. Пустая строка означает "пользователя по умолчанию", который используется, когда в информационной базе нет ни одного пользователя (от имени такого пользователя работают также фоновые задания). Если в отборе задается массив пользователей, то можно перемешивать в нем значения обоих типов - строка и ПользовательИнформационнойБазы. Значение по умолчанию Неопределено;  - Компьютер (Computer) - Строка или массив строк; значение по умолчанию Неопределено;  - Событие (Event) - Строка или массив строк; значение по умолчанию Неопределено. Допустимые системные имена событий:  - _$Access$_.Access - Доступ. Доступ; Предназначено для регистрации фактов успешного доступа пользователей системы к тем или иным данным. Поле журнала регистрации Данные (Структура) в этом случае имеет следующий состав:   - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались. Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Access$_.AccessDenied - Доступ. Отказ в доступе; Предназначено для регистрации фактов отказа в доступе к тем или иным данным пользователям системы. Поле журнала регистрации Данные (Структура). имеет следующий состав:    - Для ошибки доступа к объекту (не ограничение доступа к данным):    - Право (Right) - имя нарушенного права;  - Для ошибки ограничения доступа к данным:    - Действие (Action) - Действие, которое выполнялось с данными, для объектных таблиц: Чтение (Read), Добавление (Insert), Изменение (Update), Удаление (Delete); для не объектных таблиц, все что не Чтение, то Изменение;  - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались.Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Data$_.Delete - Данные. Удаление;  - _$Data$_.DeletePredefinedData - Данные. Удаление предопределенных данных;  - _$Data$_.New - Данные. Добавление;  - _$Data$_.NewPredefinedData - Данные. Добавление предопределенных данных;  - _$Data$_.Post - Данные. Проведение;  - _$Data$_.PredefinedDataInitialization - Данные. Инициализация предопределенных данных;  - _$Data$_.PredefinedDataInitializationDataNotFound - Данные. Инициализация предопределенных данных, данные не найдены;  - _$Data$_.SetPredefinedDataInitialization - Данные. Установка инициализации предопределенных данных;  - _$Data$_.SetStandardODataInterfaceContent - Данные. Изменение состава стандартного интерфейса OData;  - _$Data$_.TotalsMaxPeriodUpdate - Данные. Изменение максимального периода рассчитанных итогов;  - _$Data$_.TotalsMinPeriodUpdate - Данные. Изменение минимального периода рассчитанных итогов;  - _$Data$_.Unpost - Данные. Отмена проведения;  - _$Data$_.Update - Данные. Изменение;  - _$Data$_.UpdatePredefinedData - Данные. Изменение предопределенных данных;  - _$InfoBase$_.ConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.ConfigUpdate - Информационная база. Изменение конфигурации;  - _$InfoBase$_.DBConfigBackgroundUpdateCancel - Информационная база. Отмена фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateFinish - Информационная база. Завершение фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateResume - Информационная база. Продолжение (после приостановки) процесса фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateStart - Информационная база. Запуск фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateSuspend - Информационная база. Приостановка (пауза) процесса фонового обновления;  - _$InfoBase$_.DBConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации базы данных; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.DBConfigUpdate - Информационная база. Изменение конфигурации базы данных;  - _$InfoBase$_.EraseData - Информационная база. Удаление данных информационной баз;  - _$InfoBase$_.EventLogSettingsUpdate - Информационная база. Изменение параметров журнала регистрации;  - _$InfoBase$_.InfoBaseAdmParamsUpdate - Информационная база. Изменение параметров информационной базы;  - _$InfoBase$_.MasterNodeUpdate - Информационная база. Изменение главного узла;  - _$InfoBase$_.PredefinedDataUpdate - Информационная база. Обновление предопределенных данных;  - _$InfoBase$_.RegionalSettingsUpdate - Информационная база. Изменение региональных установок;  - _$InfoBase$_.SetPredefinedDataUpdate - Информационная база. Установить обновление предопределенных данных;  - _$InfoBase$_.TARImportant - Тестирование и исправление. Ошибка;  - _$InfoBase$_.TARInfo - Тестирование и исправление. Сообщение;  - _$InfoBase$_.TARMess - Тестирование и исправление. Предупреждение;  - _$Job$_.Cancel - Фоновое задание. Отмена;  - _$Job$_.Fail - Фоновое задание. Ошибка выполнения;  - _$Job$_.Start - Фоновое задание. Запуск;  - _$Job$_.Succeed - Фоновое задание. Успешное завершение;  - _$Job$_.Terminate - Фоновое задание. Принудительное завершение;  - _$OpenIDProvider$_.NegativeAssertion - Провайдер OpenID. Отклонено; записывается базой, выступающей в роли провайдера OpenID, при отправке отрицательного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию.  - _$OpenIDProvider$_.PositiveAssertion - Провайдер OpenID. Подтверждено; записывается базой, выступающей в роли провайдера OpenID, при отправке положительного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя;  - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию;  - _$PerformError$_ - Ошибка выполнения;  - _$Session$_.Authentication - Сеанс. Аутентификация; выполняется только при удачной аутентификации. Для события Аутентификация записываются поля Пользователь и ИмяПользователя. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле Данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID;  - ИдентификаторПользователяПровайдераOpenID (OpenIDProviderUserID) - идентификатор пользователя на провайдере.  - _$Session$_.AuthenticationError - Сеанс. Ошибка аутентификации; выполняется только при ошибке аутентификации. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID  - _$Session$_.ConfigExtensionApplyError - Сеанс. Ошибка применения расширения конфигурации; записывается, если в процессе применений расширения произошла ошибка. Совпадает с текстом выводимого сообщения при невозможности подключить расширение. Поле Данные заполняется структурой со следующим составом свойств:    - Имя (Name) - Строка. Имя расширения  - _$Session$_.Finish - Сеанс. Завершение;  - _$Session$_.Start - Сеанс. Начало;  - _$Transaction$_.Begin - Транзакция. Начало;  - _$Transaction$_.Commit - Транзакция. Фиксация;  - _$Transaction$_.Rollback - Транзакция. Отмена;  - _$User$_.Delete - Пользователи. Удаление; записываются как при редактировании списка пользователей в Конфигураторе, так и при удалении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя  - _$User$_.New - Пользователи. Добавление; записываются как при создани пользователей в Конфигураторе, так и методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык.  - _$User$_.Update - Пользователи. Изменение; записываются как при редактировании списка пользователей в Конфигураторе, так и при изменении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык; Метаданные (Metadata - объект описания метаданного или их массив; значение по умолчанию Неопределено; Данные (Data) - значение, тип значения – ссылка на объект (СправочикСсылка и т.д.); значение по умолчанию Неопределено; ПредставлениеДанных (DataPresentation) - Строка; Комментарий (Comment) - Строка; СтатусТранзакции (TransactionStatus) - перечисление или массив перечислений; значение по умолчанию Неопределено; Транзакция (TransactionID) - идентификатор транзакции; Строка; Сеанс (Session) - номер сеанса пользователя. Число или массив чисел; значение по умолчанию Неопределено; РабочийСервер (ServerName) - Строка или массив строк; значение по умолчанию Неопределено; ОсновнойIPПорт (Port) - номер основного IP-порта рабочего процесса; Число или массив чисел; значение по умолчанию Неопределено; ВспомогательныйIPПорт (SyncPort) - номер вспомогательного IP-порта рабочего процесса. Число или массив чисел; значение по умолчанию Неопределено. РазделениеДанныхСеанса (SessionDataSeparation) - Структура, имена элементов которой соответствуют именам общих реквизитов. В процессе отбора элементы структуры РазделениеДанныхСеанса объединяются по И: запись журнала попадает в выборку, если в ней есть соответствия для всех общих реквизитов, заданных в отборе. Значение по умолчанию Неопределено.    - Значение элемента структуры, в свою очередь, может быть:   - структурой, задающей единичное значение. Элементы структуры:   - Значение (Value) - значение общего реквизита. Значение по умолчанию - Неопределено;  - Использование (Use) - Булево. Значение по умолчанию - Истина. Задает использование общего реквизита, разделяющего данные. Если Ложь - элемент Значение игнорируется и может быть опущен. Таким образом, можно отбирать записи журнала, в которых данный общий реквизит не установлен.   - массивом, который задает набор допустимых значений общего реквизита, разделяющего данные. Массив содержит структуры, каждая из которых задает единичное значение общего реквизита (как описано выше). Элементы массива учитываются по ИЛИ: запись журнала попадает в выборку, если значение общего реквизита в ней равно одному из заданных в массиве.',
                        Колонки: 'Для того чтобы выгрузить определенные колонки журнала регистрации необходимо перечислить их имена, при этом необходимо имя каждой колонки отделять запятой. Доступны следующие колонки:   - Уровень (Level);  - Дата (Date);  - Пользователь (User);  - Компьютер (Computer);  - ИмяПриложения (ApplicationName);  - Событие (Event);  - Комментарий (Comment);  - Метаданные (Metadata);  - Данные (Data);  - ПредставлениеДанных (DataPresentation);  - ИмяПользователя (UserName);  - ПредставлениеПриложения (ApplicationPresentation);  - ПредставлениеСобытия (EventPresentation);  - ПредставлениеМетаданных (MetadataPresentation);  - СтатусТранзакции (TransactionStatus);  - Транзакция (TransactionID);  - Сеанс (Session);  - Соединение (Connection);  - РабочийСервер (ServerName);  - ОсновнойIPПорт (Port);  - ВспомогательныйIPПорт (SyncPort);  - РазделениеДанныхСеанса (SessionDataSeparation);  - ПредставлениеРазделенияДанныхСеанса (SessionDataSeparationPresentation). Если не задан, то будут выгружены значения всех колонок.',
                        ИмяВходногоФайла: 'Строка, содержащая имя входного файла.',
                        МаксимальноеКоличество: 'Ограничивает число считываемых методом событий журнала.  Если параметр не указан или равен 0 - без ограничения. Если указано конечное число, метод считывает последние в хронологическом порядке события с учетом установленного фильтра в количестве, не превышающем значения параметра.'
                    }
                }
            }
        },
        "ВыполнитьОбработкуОповещения": {
            name: 'ВыполнитьОбработкуОповещения',
            name_en: 'ExecuteNotifyProcessing',
            description: 'Запускает выполнение процедуры, описанной в параметре ВыполняемоеОповещение.  Вызывающая процедура может передать процедуру обработки результата в виде объекта ОписаниеОповещения, которая будет вызвана после получения результата блокирующего метода.',
            signature: {
                default: {
                    СтрокаПараметров: '(ВыполняемоеОповещение: ОписаниеОповещения, Результат?: Произвольный)',
                    Параметры: {
                        ВыполняемоеОповещение: 'Содержит описание процедуры, вызов которой будет произведен со следующими параметрами:   - <Результат> - значение результата, переданное вторым параметром при вызове метода,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта оповещения.',
                        Результат: 'Значение, которое будет передано в процедуру, описанную параметром <ВыполняемоеОповещение>. Содержит результат, который мог быть получен при помощи алгоритма с использованием блокирующих методов. Значение по умолчанию: Неопределено.'
                    }
                }
            }
        },
        "ВыполнитьПроверкуПравДоступа": {
            name: 'ВыполнитьПроверкуПравДоступа',
            name_en: 'VerifyAccessRights',
            description: 'Выполняет проверку прав текущего пользователя. Если право отсутствует, то вызывается исключение и в журнал регистрации пишется событие ОтказВДоступе.',
            signature: {
                default: {
                    СтрокаПараметров: '(Право: Строка, ОбъектМетаданных: ОбъектМетаданных: HTTPСервис, СтандартныйРеквизитСтандартнаяТабличнаяЧасть?: Строка)',
                    Параметры: {
                        Право: 'Проверяемое право.',
                        ОбъектМетаданных: 'Объект метаданных, права на доступ к которому проверяются.',
                        СтандартныйРеквизитСтандартнаяТабличнаяЧасть: 'Необязательное имя стандартного реквизита, имя стандартного реквизита стандартной табличной части или имя стандартной табличной части.  Для стандартного реквизита стандартной табличной части, имя табличной части указывается перед точкой до имени реквизита. Например: "ВидыСубконто.ВидСубконто".'
                    }
                }
            }
        },
        "Вычислить": {
            name: 'Вычислить',
            name_en: 'Eval',
            description: 'Вычисляет переданное выражение. С помощью метода можно вычислять математические и логические выражения, а также операции конкатенации. Подробнее про выражения см. раздел "Выражения языка".',
            returns: 'Тип: Произвольный. Результат вычисления выражения. Тип возвращаемого значения зависит от типа выражения.',
            signature: {
                default: {
                    СтрокаПараметров: '(Выражение: Строка): Произвольный',
                    Параметры: {
                        Выражение: 'Выражение, которое требуется вычислить.'
                    }
                }
            }
        },
        "Год": {
            name: 'Год',
            name_en: 'Year',
            description: 'Определяет год в указанной дате.',
            returns: 'Тип: Число. Год в указанной дате.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Число',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "ДанныеФормыВЗначение": {
            name: 'ДанныеФормыВЗначение',
            name_en: 'FormDataToValue',
            description: 'Преобразует данные формы в объект прикладного типа.',
            returns: 'Тип: Произвольный. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Объект: ДанныеФормыСтруктураСКоллекцией, Тип: Тип): Произвольный',
                    Параметры: {
                        Объект: 'Данные формы.',
                        Тип: 'Тип значения, получаемого из данных формы.'
                    }
                }
            }
        },
        "Дата": {
            name: 'Дата',
            name_en: 'Date',
            description: 'Преобразует полученный параметр (параметры) в значение типа Дата.',
            returns: 'Тип: Дата. ',
            signature: {
                ПоСтроке: {
                    СтрокаПараметров: '(Значение: Строка): Дата',
                    Параметры: {
                        Значение: 'Исходное значение даты. Строка должна содержать дату в локальном формате даты или в каноническом виде YYYYMMDDHHMMSS.'
                    }
                },
                ПоСоставляющим: {
                    СтрокаПараметров: '(Год: Число, Месяц: Число, День: Число, Час?: Число, Минута?: Число, Секунда?: Число): Дата',
                    Параметры: {
                        Год: 'Год даты.',
                        Месяц: 'Месяц даты.',
                        День: 'День даты.',
                        Час: 'Час даты.',
                        Минута: 'Минута даты.',
                        Секунда: 'Секунда даты.'
                    }
                }
            }
        },
        "День": {
            name: 'День',
            name_en: 'Day',
            description: 'Определяет календарный день в указанной дате.',
            returns: 'Тип: Число. День в указанной дате.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Число',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "ДеньГода": {
            name: 'ДеньГода',
            name_en: 'DayOfYear',
            description: 'Определяет номер дня в году для указанной даты.',
            returns: 'Тип: Число. Номер дня в году.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Число',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "ДеньНедели": {
            name: 'ДеньНедели',
            name_en: 'WeekDay',
            description: 'Определяет номер дня недели для указанной даты.',
            returns: 'Тип: Число. Номер дня недели.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Число',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "ДобавитьМесяц": {
            name: 'ДобавитьМесяц',
            name_en: 'AddMonth',
            description: 'Добавляет (или вычитает) к указанной дате заданное число месяцев.',
            returns: 'Тип: Дата. Дата, полученная в результате добавления.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата, ЧислоМесяцев: Число): Дата',
                    Параметры: {
                        Дата: 'Исходная дата.',
                        ЧислоМесяцев: 'Количество месяцев, которое необходимо добавить к исходной дате. Если принимает отрицательное значение, то число месяцев вычитается.'
                    }
                }
            }
        },
        "ЗаблокироватьДанныеДляРедактирования": {
            name: 'ЗаблокироватьДанныеДляРедактирования',
            name_en: 'LockDataForEdit',
            description: 'Заблокировать данные для редактирования в управляемой форме. Вызывает исключение, если объект уже заблокирован, в том числе и методом Заблокировать.',
            signature: {
                default: {
                    СтрокаПараметров: '(Ключ: РегистрСведенийКлючЗаписи.<Имя регистра сведений>, ВерсияДанных?: Строка, ИдентификаторФормы?: УникальныйИдентификатор)',
                    Параметры: {
                        Ключ: 'Ссылка на объект, который должен быть заблокирован, или ключ записи независимого регистра сведений, которая должна быть заблокирована.',
                        ВерсияДанных: 'Версия блокируемого объекта в формате Base64. Используется, если параметр <Ключ> имеет тип Любая ссылка на объект информационной базы.  Если указан, то при блокировке объекта проверяется версия объекта базы данных. При несовпадении версии или отсутствии объекта в базе данных генерируется исключение.',
                        ИдентификаторФормы: 'Уникальный идентификатор формы. Если параметр указан, то блокировка устанавливается на все время жизни формы, в которой установлена блокировка. Важно, что если за время отображения формы не были установлены другие блокировки от имени этой формы (при интерактивном редактировании или методом ЗаблокироватьДанныеФормыДляРедактирования), то при закрытии формы блокировка может быть отменена не сразу, а через некоторое время. Блокировка может быть снята:   - автоматически при закрытии формы или завершении сеанса;  - с помощью метода глобального контекста РазблокироватьДанныеДляРедактирования с указанием того же идентификатора формы, который указывался для установки блокировки. В этом случае блокировка снимается сразу. Если параметр не указан, то блокировка устанавливается на ограниченное время и может быть снята:   - с помощью метода РазблокироватьДанныеДляРедактирования без указания идентификатора формы;  - при окончании транзакции, если блокировка установлена в транзакции;  - при окончании работы встроенного языка (для режимов запуска "Тонкий клиент" и "Веб-клиент"; при возврате управления с сервера);  - при завершении сеанса.'
                    }
                }
            }
        },
        "ЗаблокироватьРаботуПользователя": {
            name: 'ЗаблокироватьРаботуПользователя',
            name_en: 'LockApplication',
            description: 'Блокирует работу пользователя, минимизирует окно 1С:Предприятия и выводит диалог авторизации. Продолжение работы возможно только после ввода пароля.'
        },
        "ЗавершитьРаботуСистемы": {
            name: 'ЗавершитьРаботуСистемы',
            name_en: 'Exit',
            description: 'Позволяет принудительно вызвать завершение работы 1С:Предприятия. В зависимости от переданного параметра будут вызываться обработчики закрытия и завершения работы системы или завершает работу безусловно.',
            signature: {
                default: {
                    СтрокаПараметров: '(ЗапрашиватьВозможность?: Булево, ПерезапуститьПриЗавершении?: Булево, ДополнительныеПараметрыКоманднойСтроки?: Строка)',
                    Параметры: {
                        ЗапрашиватьВозможность: 'Если Ложь, то завершение работы программы будет выполнено безусловно (независимо от наличия редактируемых данных). Если значение параметра Истина, то будут вызываться обработчики закрытия для каждой открытой формы и для всего приложения. Для редакторов текстов, табличных документов и HTML-документов будет произведен анализ модифицированности. Если нет факторов, препятствующих закрытию (например, данные модифицированы и не сохранены), то выполняется завершение работы. В противном случае (такие данные есть) будет выдан вопрос о необходимости сохранения документов. Значение по умолчанию: Истина.',
                        ПерезапуститьПриЗавершении: 'Указывает необходимость выполнения запуска нового сеанса с текущими установками после завершения работы. Значение по умолчанию: Ложь.',
                        ДополнительныеПараметрыКоманднойСтроки: 'Содержит дополнительные параметры, которые будут переданы новому сеансу. Если такие параметры уже есть среди текущих установок, переданные заменят текущие. Параметр указывается, если значение параметра <ПерезапуститьПриЗавершении>=Истина. Если режим приложения (УправляемоеПриложение/ ОбычноеПриложение) не задан явно дополнительным параметром командной строки, при запуске текущего приложения учитывается использование параметров принудительного включения режима управляемого или обычного приложения /RunModeManagedApplication и /RunModeOrdinaryApplication.'
                    }
                }
            }
        },
        "ЗагрузитьВнешнююКомпоненту": {
            name: 'ЗагрузитьВнешнююКомпоненту',
            name_en: 'LoadAddIn',
            description: 'Загружает внешний компонент и подключает ее объекты к 1С:Предприятию. Объекты этого компонента должны быть построены по технологии внешних компонентов COM.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяФайла: Строка)',
                    Параметры: {
                        ИмяФайла: 'Имя файла внешнего компонента. Файл внешнего компонента не обязательно должен находиться в каталоге исполняемых файлов программы.'
                    }
                }
            }
        },
        "ЗакрытьСправку": {
            name: 'ЗакрытьСправку',
            name_en: 'CloseHelp',
            description: 'Закрывает окно со справочной информацией. Когда выбран режим показа справки в нескольких окнах, метод закроет все окна справки.'
        },
        "ЗаписатьJSON": {
            name: 'ЗаписатьJSON',
            name_en: 'WriteJSON',
            description: 'Выполняет сериализацию Значение в формат JSON. Результат помещает в объект ЗаписьJSON. Если методу требуется передать значение недопустимого типа, то можно использовать функцию преобразования значения (параметры ИмяФункцииПреобразования и МодульФункцииПреобразования).',
            signature: {
                default: {
                    СтрокаПараметров: '(ЗаписьJSON: ЗаписьJSON, Значение: Произвольный, НастройкиСериализации?: НастройкиСериализацииJSON, ИмяФункцииПреобразования?: Строка, МодульФункцииПреобразования?: УправляемаяФорма, ДополнительныеПараметрыФункцииПреобразования?: Произвольный)',
                    Параметры: {
                        ЗаписьJSON: 'Объект, через который осуществляется запись JSON. Поток JSON должен быть подготовлен для записи значения.',
                        Значение: 'Объект записи JSON. Меняет состояние потока записи.  Представляет собой значение произвольного типа. В формате JSON допускается записывать только значения следующих типов:   - Строка,  - Число,  - Булево,  - Дата (преобразованная в строку),  - Массив,  - ФиксированныйМассив,  - Структура,  - ФиксированнаяСтруктура,  - Соответствие,  - ФиксированноеСоответствие. Ключ соответствия (или фиксированного соответствия) должен иметь тип Строка. В противном случае, будет вызвано исключение. Если будет передано значение, отличное от перечисленных, оно должно быть преобразовано с помощью функции преобразования. При попытке записать значение недопустимого типа будет вызвано исключение.',
                        НастройкиСериализации: 'Настройки сериализации в JSON.',
                        ИмяФункцииПреобразования: 'Данная функция вызывается для всех свойств, тип которых не поддерживает преобразование в формат JSON напрямую. Она должна преобразовать Значение в значение допустимого для записи в JSON типа. Функция должна предваряться директивой &НаСервере или &НаКлиенте. Использование функции вне контекста формы или модуля, или команды не допускается. Функция должна быть экспортной и иметь следующие параметры:   - <Свойство> - в параметр передается имя свойства, если выполняется запись структуры или соответствия,  - <Значение> - в параметр передается исходное значение,  - <ДополнительныеПараметры> - дополнительные параметры, которые указаны в вызове метода ЗаписатьJSON,  - <Отказ> - отказ от записи свойства. Если функция возвращает объект, который не поддерживает преобразование в JSON, то будет вызвано исключение. Если данный параметр задан и не задан параметр МодульФункцииПреобразования, и наоборот, будет вызвано исключение. Значение по умолчанию: Неопределено.',
                        МодульФункцииПреобразования: 'Указывает контекст, в котором реализована функция преобразования значения в значение формата JSON. Значение по умолчанию: Неопределено.',
                        ДополнительныеПараметрыФункцииПреобразования: 'Дополнительные параметры, которые будут переданы в функцию преобразования. Значение по умолчанию: Неопределено.'
                    }
                }
            }
        },
        "ЗаписатьXML": {
            name: 'ЗаписатьXML',
            name_en: 'WriteXML',
            description: 'Выполняет сериализацию значения в формат XML.',
            signature: {
                ЗаписатьБезИмени: {
                    СтрокаПараметров: '(ЗаписьXML: ЗаписьXML, Значение: Произвольный, НазначениеТипа?: НазначениеТипаXML)',
                    Параметры: {
                        ЗаписьXML: 'Объект, через который осуществляется запись XML.',
                        Значение: 'Записываемое в поток XML значение. Тип параметра определяется совокупностью типов, для которых определена XML-сериализация.',
                        НазначениеТипа: 'Определяет необходимость назначения типа элементу XML. Значение по умолчанию: Неявное.'
                    }
                },
                ЗаписатьСПолнымИменем: {
                    СтрокаПараметров: '(ЗаписьXML: ЗаписьXML, Значение: Произвольный, ПолноеИмя: Строка, НазначениеТипа?: НазначениеТипаXML)',
                    Параметры: {
                        ЗаписьXML: 'Объект, через который осуществляется запись XML.',
                        Значение: 'Записываемое в поток XML значение. Тип параметра определяется совокупностью типов, для которых определена XML-сериализация.',
                        ПолноеИмя: 'Полное имя элемента XML, в который будет записано значение.',
                        НазначениеТипа: 'Определяет необходимость назначения типа элементу XML. Значение по умолчанию: Неявное.'
                    }
                },
                ЗаписатьСЛокальнымИменемИПространствомИмен: {
                    СтрокаПараметров: '(ЗаписьXML: ЗаписьXML, Значение: Произвольный, ЛокальноеИмя: Строка, URIПространстваИмен: Строка, НазначениеТипа?: НазначениеТипаXML)',
                    Параметры: {
                        ЗаписьXML: 'Объект, через который осуществляется запись XML.',
                        Значение: 'Записываемое в поток XML значение. Тип параметра определяется совокупностью типов, для которых определена XML-сериализация.',
                        ЛокальноеИмя: 'Локальное имя элемента XML, в который будет записано значение.',
                        URIПространстваИмен: 'URI пространства имен, к которому принадлежит указанное ЛокальноеИмя.',
                        НазначениеТипа: 'Определяет необходимость назначения типа элементу XML. Значение по умолчанию: Неявное.'
                    }
                }
            }
        },
        "ЗаписатьДатуJSON": {
            name: 'ЗаписатьДатуJSON',
            name_en: 'WriteJSONDate',
            description: 'Преобразовывает дату в строку для последующей записи в формат JSON. Если запись выполняется в формате ISO и в качестве варианта записи даты используется ЛокальнаяДатаСоСмещением, то в силу особенностей формата будут опущены секунды смещения местного времени относительно UTC. Пример: если смещение местного времени относительно UTC составляет 02:30:17, в результате смещение будет записано в виде: +02:30.',
            returns: 'Тип: Строка. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата, Формат: ФорматДатыJSON, ВариантЗаписиДаты?: ВариантЗаписиДатыJSON): Строка',
                    Параметры: {
                        Дата: 'Дата, которую надо преобразовать в формат JSON.',
                        Формат: 'Формат записываемой даты.',
                        ВариантЗаписиДаты: 'Указывает используемый вариант записи даты JSON. Значение по умолчанию: ЛокальнаяДата.'
                    }
                }
            }
        },
        "ЗаписьЖурналаРегистрации": {
            name: 'ЗаписьЖурналаРегистрации',
            name_en: 'WriteLogEvent',
            description: 'Записывает событие в журнал регистрации. Предназначен для записи дополнительных событий, которые не записываются системой. Средствами встроенного языка не могут записываться системные события, записываемые при записи объектов, удалении и т.д.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяСобытия: Строка, Уровень?: УровеньЖурналаРегистрации, ОбъектМетаданных?: ОбъектМетаданных: HTTPСервис, Данные?: Произвольный, Комментарий?: Строка, РежимТранзакции?: РежимТранзакцииЗаписиЖурналаРегистрации)',
                    Параметры: {
                        ИмяСобытия: 'Событие указывается строкой. Может содержать точки для обозначения иерархии событий.  Запрещена запись событий использующих сочетания символов "_$" и "$_", зарезервированные для системных событий. Например: _$МоеСобытие$_ или _$МояГруппаСобытий$_.МоеСобытие.',
                        Уровень: 'Уровень важности события. Значение по умолчанию: Примечание.',
                        ОбъектМетаданных: 'Объект метаданных, к которому относится событие.',
                        Данные: 'Данные, с которыми связано событие.  Рекомендуется указывать ссылки на объекты данных (элементы справочников, документы, к которым относится событие).',
                        Комментарий: 'Произвольная строка комментария к событию. Значение по умолчанию: Пустая строка.',
                        РежимТранзакции: 'Указывает отношение записи к текущей транзакции. Значение по умолчанию: Независимая.'
                    }
                }
            }
        },
        "ЗаполнитьЗначенияСвойств": {
            name: 'ЗаполнитьЗначенияСвойств',
            name_en: 'FillPropertyValues',
            description: 'Копирует значения свойств Источника в свойства Приемника. Сопоставление производится по именам свойств. Если указаны копируемые свойства, то в заполнении участвуют только они, параметр ИсключаяСвойства игнорируется. В противном случае, если указан параметр ИсключаяСвойства, свойства перечисленные в нем, исключаются из обработки.',
            signature: {
                default: {
                    СтрокаПараметров: '(Приемник: Произвольный, Источник: Произвольный, СписокСвойств?: Строка, ИсключаяСвойства?: Строка)',
                    Параметры: {
                        Приемник: 'Значение, чьи свойства будут заполнены значениями соответствующих свойств <Источника>. Внимание! Значение данного параметра не может быть следующих типов: Неопределено, Null, Число, Строка, Дата, Булево. Дата',
                        Источник: 'Значения свойств данного объекта будут установлены в соответствующие свойства <Приемника>. Внимание! Значение данного параметра не может быть следующих типов: Неопределено, Null, Число, Строка, Дата, Булево.',
                        СписокСвойств: 'Список имен свойств <Источника> и <Приемника>, разделенный запятыми, которые необходимо заполнить. Если свойства не указаны, то копируются только те, которые представлены и в <Источнике>, и в <Приемнике>. Если свойства указаны, то они обязательно должны присутствовать в обоих объектах. Если в <Источнике> или <Приемнике> заданное свойство отсутствует, то будет вызвано исключение. Параметр игнорируется, если <Источник> задан.',
                        ИсключаяСвойства: 'Список имен свойств <Приемника>, разделенный запятыми, которые необходимо исключить из заполнения. Если свойство с именем, указанным в исключающих свойствах есть в <Приемнике>, то значение этого свойства скопировано не будет. А если свойства, указанного в исключающих свойствах не окажется в <Приемнике>, то будет вызвано исключение.'
                    }
                }
            }
        },
        "ЗапроситьРазрешениеПользователя": {
            name: 'ЗапроситьРазрешениеПользователя',
            name_en: 'RequestUserPermission',
            description: 'Получает у пользователя разрешение на несколько операций с файлами, которые потом будут выполнены без дополнительных вопросов. Полученное разрешение хранится до выполнения соответствующего вызова, либо до окончания работы текущего вызова встроенного языка.',
            returns: 'Тип: Булево. В режиме запуска тонкий и толстый клиент, а также для клиента мобильного приложения всегда возвращает Истина. Если метод получает пустой запрос (за вычетом проигнорированных записей), то возвращает Истина.',
            signature: {
                default: {
                    СтрокаПараметров: '(Вызовы: Массив): Булево',
                    Параметры: {
                        Вызовы: 'Содержит массив с описаниями вызовов, для которых получается разрешение. Каждое описание вызова это массив. Первым элементом этого массива является строка с именем метода, для которого получается разрешение. Это методы:   - ПоместитьФайлы;  - ПолучитьФайлы;  - ЗапуститьПриложение;  - УдалитьФайлы;  - НайтиФайлы;  - КопироватьФайл;  - ПереместитьФайл;  - СоздатьКаталог. Следующие элементы массива - это параметры вызова в правильном порядке.'
                    }
                }
            }
        },
        "ЗапуститьПриложение": {
            name: 'ЗапуститьПриложение',
            name_en: 'RunApp',
            description: 'Выполняет запуск внешнего приложения либо открытие файла с использованием ассоциированного с ним приложения.',
            signature: {
                default: {
                    СтрокаПараметров: '(СтрокаКоманды: Строка, ТекущийКаталог?: Строка, ДождатьсяЗавершения?: Булево, КодВозврата?: Число)',
                    Параметры: {
                        СтрокаКоманды: 'Командная строка для запуска приложения либо имя файла, ассоциированного с некоторым приложением.',
                        ТекущийКаталог: 'Задает текущий каталог запускаемого приложения. В режиме веб-клиента игнорируется.',
                        ДождатьсяЗавершения: 'Истина - дожидаться завершения запущенного приложения перед продолжением работы. Значение по умолчанию: Ложь.',
                        КодВозврата: 'Параметр (если он указан) содержит код завершения работы системы - значение, передаваемое приложением операционной системе, если работа была завершена корректно, если такой код был получен. В противном случае возвращает Неопределено. Для получения кода возврата значение параметра <ДождатьсяЗавершения> должно быть установлено в Истина, запускаемое приложение должно существовать и завершить свою работу корректно.'
                    }
                }
            }
        },
        "ЗапуститьСистему": {
            name: 'ЗапуститьСистему',
            name_en: 'RunSystem',
            description: 'Запускает новый сеанс 1С:Предприятия. Новый сеанс будет запущен с текущими установками.',
            signature: {
                default: {
                    СтрокаПараметров: '(ДополнительныеПараметрыКоманднойСтроки?: Строка, ДождатьсяЗавершения?: Булево, КодВозврата?: Число)',
                    Параметры: {
                        ДополнительныеПараметрыКоманднойСтроки: 'Содержит дополнительные параметры, которые будут переданы новому сеансу. Если такие параметры уже есть среди текущих установок, переданные заменят текущие. Если режим приложения (УправляемоеПриложение/ ОбычноеПриложение) не задан явно дополнительным параметром командной строки, при запуске текущего приложения учитывается использование параметров принудительного включения режима управляемого или обычного приложения /RunModeManagedApplication и /RunModeOrdinaryApplication.',
                        ДождатьсяЗавершения: 'Указывает необходимость дождаться завершения запуска системы для продолжения работы. Значение по умолчанию: Ложь.',
                        КодВозврата: 'Параметр (если он указан) содержит код завершения работы сеанса "1С:Предприятия"- значение, передаваемое платформой операционной системе, если работа была завершена корректно, и если такой код был получен. В противном случае возвращает Неопределено. Для получения кода возврата значение параметра <ДождатьсяЗавершения> должно быть установлено в Истина, а сеанс должен быть корректно завершен. Возможны следующие значения:   - 0 - успешное завершение;  - 1 - ошибка;  - 101 - ошибка в данных (такой код может быть возвращен при обновлении конфигурации, при проверке и исправлении конфигурации, а также при создании дистрибутива конфигурации).'
                    }
                }
            }
        },
        "ЗафиксироватьТранзакцию": {
            name: 'ЗафиксироватьТранзакцию',
            name_en: 'CommitTransaction',
            description: 'Завершает успешную транзакцию. Все изменения, внесенные в информационную базу в процессе транзакции, будут записаны.'
        },
        "ЗначениеВДанныеФормы": {
            name: 'ЗначениеВДанныеФормы',
            name_en: 'ValueToFormData',
            description: 'Преобразует объект прикладного типа в универсальный объект данных.',
            signature: {
                default: {
                    СтрокаПараметров: '(Значение: Произвольный, Объект: ДанныеФормыСтруктураСКоллекцией)',
                    Параметры: {
                        Значение: 'Значение прикладного типа, для которого определено преобразование в данные формы.',
                        Объект: 'Данные формы, имеющие совместимую структуру.'
                    }
                }
            }
        },
        "ЗначениеВСтрокуВнутр": {
            name: 'ЗначениеВСтрокуВнутр',
            name_en: 'ValueToStringInternal',
            description: 'Получает системное строковое представление переданного значения.',
            returns: 'Тип: Строка. Системное представление значения в информационной базе.',
            signature: {
                default: {
                    СтрокаПараметров: '(Значение: Произвольный): Строка',
                    Параметры: {
                        Значение: 'Преобразуемое значение.'
                    }
                }
            }
        },
        "ЗначениеВФайл": {
            name: 'ЗначениеВФайл',
            name_en: 'ValueToFile',
            description: 'Сохраняет любое сериализуемое значение в файл.',
            returns: 'Тип: Булево. Истина - сохранение значения выполнено; Ложь - в противном случае.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяФайла: Строка, Значение: Произвольный): Булево',
                    Параметры: {
                        ИмяФайла: 'Имя файла. Не может быть пустым. Если включает путь к существующему каталогу, то значение будет сохранено в файле, созданном или найденном в этом каталоге, в противном случае будет использован каталог исполняемых файлов программы.',
                        Значение: 'Сохраняемое значение.'
                    }
                }
            }
        },
        "ЗначениеЗаполнено": {
            name: 'ЗначениеЗаполнено',
            name_en: 'ValueIsFilled',
            description: 'Функция проверяет, отличается ли переданное значение от значения по умолчанию того же типа. Не работает с мутабельными значениями. При передаче мутабельного значения функция вызывает исключение.',
            returns: 'Тип: Булево. Для значений типа Булево всегда возвращается Истина. Для значений типа Строка возвращается Истина, если в строке есть непробельные символы. Для массивов и коллекций возвращается Истина, если в них есть хотя бы 1 элемент. Для Неопределено и Null всегда возвращается Ложь.',
            signature: {
                default: {
                    СтрокаПараметров: '(Значение: Произвольный): Булево',
                    Параметры: {
                        Значение: 'Значение для проверки.'
                    }
                }
            }
        },
        "ЗначениеИзСтрокиВнутр": {
            name: 'ЗначениеИзСтрокиВнутр',
            name_en: 'ValueFromStringInternal',
            description: 'Преобразует значение из строкового системного представления во внутреннее.',
            returns: 'Тип: Произвольный. Значение, полученное из строкового системного представления.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка): Произвольный',
                    Параметры: {
                        Строка: 'Системное представление значения в строковом виде.'
                    }
                }
            }
        },
        "ЗначениеИзФайла": {
            name: 'ЗначениеИзФайла',
            name_en: 'ValueFromFile',
            description: 'Получает из файла значение, ранее сохраненное в нем при помощи функции ЗначениеВФайл. Тип возвращаемого значения определяется типом значения, сохраненного в файле.',
            returns: 'Тип: Произвольный. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяФайла: Строка): Произвольный',
                    Параметры: {
                        ИмяФайла: 'Имя файла. Не может быть пустым. Если включает путь к существующему каталогу, то значение будет извлекаться из файла, найденного в этом каталоге, в противном случае будет использован каталог исполняемых файлов программы.'
                    }
                }
            }
        },
        "ИзXMLТипа": {
            name: 'ИзXMLТипа',
            name_en: 'FromXMLType',
            description: 'Получает тип, соответствующий типу данных XML.',
            returns: 'Тип: Тип, Неопределено. Неопределено, если соответствующий тип данных не обнаружен.',
            signature: {
                ПоТипуXml: {
                    СтрокаПараметров: '(ТипXML: ТипДанныхXML): Тип',
                    Параметры: {
                        ТипXML: 'Тип XML, для которого нужно получить соответствующий тип.'
                    }
                },
                ПоИмениТипаИUriПространстваИмен: {
                    СтрокаПараметров: '(ИмяТипа: Строка, URIПространстваИмен: Строка): Тип',
                    Параметры: {
                        ИмяТипа: 'Имя типа XML.',
                        URIПространстваИмен: 'URI пространства имен типа XML.'
                    }
                }
            }
        },
        "ИмпортМоделиXDTO": {
            name: 'ИмпортМоделиXDTO',
            name_en: 'ImportXDTOModel',
            description: 'Осуществляет импорт переданного набора схем XML в модель типов XDTO. Возвращаемое значение – ОбъектXDTO, имеющий тип {http://v8.1c.ru/8.1/xdto}Model. При импорте никакой проверки правильности схемы не производится. При импорте производится преобразование структуры типов схемы в структуру типов модели. Полученная модель может быть не идентична структуре типов схемы.',
            returns: 'Тип: ОбъектXDTO. ',
            signature: {
                default: {
                    СтрокаПараметров: '(НаборСхемXML: НаборСхемXML): ОбъектXDTO',
                    Параметры: {
                        НаборСхемXML: 'Импортируемый набор схем XML.'
                    }
                }
            }
        },
        "ИмяКомпьютера": {
            name: 'ИмяКомпьютера',
            name_en: 'ComputerName',
            description: 'Получает сетевое имя компьютера.',
            returns: 'Тип: Строка. Сетевое имя компьютера.'
        },
        "ИмяПользователя": {
            name: 'ИмяПользователя',
            name_en: 'UserName',
            description: 'Получает имя пользователя, указанного при запуске программы.',
            returns: 'Тип: Строка. Имя пользователя.'
        },
        "ИнициализироватьПредопределенныеДанные": {
            name: 'ИнициализироватьПредопределенныеДанные',
            name_en: 'InitializePredefinedData',
            description: 'Инициализирует предопределенные данные в текущей области информационной базы.  Предопределенные элементы создаются у объектов метаданных, при выполнении всех следующих условий:   - В сеансе установлены и используются все разделители, в состав которых включен объект метаданных.  - Автоматическое обновление предопределенных данных для этого объекта метаданных включено.  - Предопределенные данные для этого объекта в этой области данных еще не создавались.'
        },
        "ИнформацияОбОшибке": {
            name: 'ИнформацияОбОшибке',
            name_en: 'ErrorInfo',
            description: 'Получает структурированную информацию об исключении.',
            returns: 'Тип: ИнформацияОбОшибке. '
        },
        "КаталогБиблиотекиМобильногоУстройства": {
            name: 'КаталогБиблиотекиМобильногоУстройства',
            name_en: 'MobileDeviceLibraryDir',
            description: 'Получает путь к библиотекам мобильного устройства.',
            returns: 'Тип: Строка. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ТипКаталога: ТипКаталогаБиблиотекиМобильногоУстройства): Строка',
                    Параметры: {
                        ТипКаталога: 'Тип каталога.'
                    }
                }
            }
        },
        "КаталогВременныхФайлов": {
            name: 'КаталогВременныхФайлов',
            name_en: 'TempFilesDir',
            description: 'Получает имя каталога, который используется программой для размещения временных файлов.',
            returns: 'Тип: Строка. Имя каталога временных файлов пользователя, от имени которого запущено приложение.'
        },
        "КаталогДокументов": {
            name: 'КаталогДокументов',
            name_en: 'DocumentsDir',
            description: 'Предоставляет доступ к стандартному каталогу документов.',
            returns: 'Тип: Строка. Путь к каталогу. Для режимов запуска "Тонкий клиент" и "Толстый клиент":   - в MS Windows: <Personal>;  - в Linux: выбирается из надстройки gnome. Если gnome не указан, то вернем домашний каталог <Home>. Для режимов запуска "Веб клиент" (реализуются только в расширении для работы с файлами):   - при использовании веб-браузера Microsoft Internet Explorer: <Personal>;  - при использовании веб-браузера Mozilla Firefox (с помощью XPCOM интерфейса nsIDirectoryServiceProvider):   - в MS Windows: <Personal>;  - в Linux: <Home>;  - в MacOS: <Docs> ;  - в OSX: <UsrDocs>. Для мобильной платформы:   - iOS: Подкаталог \\Documents относительно домашней директории приложения. Стандартный каталог, который доступен для обмена файлов в iTunes с помощью функции NSHomeDirectory().  - Android:<Абсолютный путь>, может различаться на разных устройствах. Например:   - /mnt/sdcard/Android/data/com.e1c.mobile/files/  - /storage/emulated/0/Android/data/com.e1c.mobile/files/  - Windows:   - для смартфона: путь внутри домашней директории приложения (C:\\Users\\<User>\\AppData\\Local\\Packages\\<Application>\\RoamingState). Каталог не доступен при подключении к ПК. Доступ с ПК можно обеспечить только с помощью утилиты ISETool из комплекта Windows Phone SDK.  - для планшета: путь внутри домашней директории приложения C:\\Data\\Users\\<User>\\DefApps\\APPDATA\\Local\\Packages\\ <Application>\\RoamingState)'
        },
        "КаталогПрограммы": {
            name: 'КаталогПрограммы',
            name_en: 'BinDir',
            description: 'Получает имя каталога, в котором расположены исполняемые файлы программы.',
            returns: 'Тип: Строка. Имя каталога исполняемых файлов программы.'
        },
        "КодироватьСтроку": {
            name: 'КодироватьСтроку',
            name_en: 'EncodeString',
            description: 'Кодирует строку в соответствии с выбранным способом кодирования.',
            returns: 'Тип: Строка. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка, СпособКодированияСтроки: СпособКодированияСтроки, КодировкаСтроки?: Строка): Строка',
                    Параметры: {
                        Строка: 'Кодируемая строка.',
                        СпособКодированияСтроки: 'Способ кодирования строки.',
                        КодировкаСтроки: 'Кодировка, в которую преобразуется строка перед кодированием. Значение по умолчанию: UTF8.'
                    }
                }
            }
        },
        "КодЛокализацииИнформационнойБазы": {
            name: 'КодЛокализацииИнформационнойБазы',
            name_en: 'InfoBaseLocaleCode',
            description: 'Получает код локализации (язык, страна), установленный для данной информационной базы.',
            returns: 'Тип: Строка. '
        },
        "КодСимвола": {
            name: 'КодСимвола',
            name_en: 'CharCode',
            description: 'Получает код символа, расположенного в переданной строке в позиции с указанным номером.',
            returns: 'Тип: Число. Код переданного символа. Код возвращается в соответствии с кодировкой Unicode.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка, НомерСимвола?: Число): Число',
                    Параметры: {
                        Строка: 'Исходная строка.',
                        НомерСимвола: 'Номер символа в строке, код которого необходимо получить. Нумерация символов в строке начинается с 1. Значение по умолчанию: 1.'
                    }
                }
            }
        },
        "КомандаСистемы": {
            name: 'КомандаСистемы',
            name_en: 'System',
            description: 'Вызывает на исполнение команду операционной системы, как если бы она была введена в командной строке. Замечание! Если в передаваемой командной строке Windows используются переменные среды (environment variables) и значения этих переменных содержат пробелы, то фрагменты командной строки, в которых используются перменные среды, следует обрамлять удвоенными двойными кавычками. Например: КомандаСистемы("""""%ProgramFiles%\\Internet Explorer\\iexplore.exe"""" 1c.ru");',
            signature: {
                default: {
                    СтрокаПараметров: '(СтрокаКоманды: Строка, ТекущийКаталог?: Строка)',
                    Параметры: {
                        СтрокаКоманды: 'Команда системы. Если в передаваемой командной строке Windows используются переменные среды (environment variables) и значения этих переменных содержат пробелы, то фрагменты командной строки, в которых используются перменные среды, следует обрамлять удвоенными двойными кавычками. Например: КомандаСистемы("""""%ProgramFiles%\\Internet Explorer\\iexplore.exe"""" 1c.ru");',
                        ТекущийКаталог: 'Устанавливает текущий каталог на время выполнения команды.'
                    }
                }
            }
        },
        "КонецГода": {
            name: 'КонецГода',
            name_en: 'EndOfYear',
            description: 'Определяет дату и время конца года для указанной даты.',
            returns: 'Тип: Дата. Дата и время конца года.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Дата',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "КонецДня": {
            name: 'КонецДня',
            name_en: 'EndOfDay',
            description: 'Определяет дату и время конца дня для указанной даты.',
            returns: 'Тип: Дата. Дата и время конца дня.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Дата',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "КонецКвартала": {
            name: 'КонецКвартала',
            name_en: 'EndOfQuarter',
            description: 'Определяет дату и время конца квартала для указанной даты.',
            returns: 'Тип: Дата. Дата и время конца квартала.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Дата',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "КонецМесяца": {
            name: 'КонецМесяца',
            name_en: 'EndOfMonth',
            description: 'Определяет дату и время конца месяца для указанной даты.',
            returns: 'Тип: Дата. Дата и время конца месяца.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Дата',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "КонецМинуты": {
            name: 'КонецМинуты',
            name_en: 'EndOfMinute',
            description: 'Определяет дату и время конца минуты для указанной даты.',
            returns: 'Тип: Дата. Дата и время конца минуты.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Дата',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "КонецНедели": {
            name: 'КонецНедели',
            name_en: 'EndOfWeek',
            description: 'Определяет дату и время конца недели для указанной даты.',
            returns: 'Тип: Дата. Дата и время конца недели.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Дата',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "КонецЧаса": {
            name: 'КонецЧаса',
            name_en: 'EndOfHour',
            description: 'Определяет дату и время конца часа для указанной даты.',
            returns: 'Тип: Дата. Дата и время конца часа.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Дата',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "КонфигурацияБазыДанныхИзмененаДинамически": {
            name: 'КонфигурацияБазыДанныхИзмененаДинамически',
            name_en: 'DataBaseConfigurationChangedDynamically',
            description: 'Определяет, была ли изменена конфигурация базы данных динамически после старта. Под динамическим изменением понимается такое изменение конфигурации базы данных, при которой не потребовалось проведение реструктуризации, и в момент обновления с информационной базой работали пользователи.',
            returns: 'Тип: Булево. Истина - в процессе работы пользователя с информационной базой произошло обновление конфигурации базы данных, Ложь - в противном случае.'
        },
        "КонфигурацияИзменена": {
            name: 'КонфигурацияИзменена',
            name_en: 'ConfigurationChanged',
            description: 'Определяет факт отличия основной конфигурации от конфигурации базы данных.',
            returns: 'Тип: Булево. Истина - основная конфигурация отличается от конфигурации базы данных, Ложь - в противном случае.'
        },
        "КопироватьДанныеФормы": {
            name: 'КопироватьДанныеФормы',
            name_en: 'CopyFormData',
            description: 'Копирует данные формы, обладающие совместимой структурой.',
            returns: 'Тип: Булево. Истина - копирование произведено. Ложь - структура объектов абсолютно несовместима.',
            signature: {
                default: {
                    СтрокаПараметров: '(Источник: ДанныеФормыСтруктураСКоллекцией, Приемник: ДанныеФормыСтруктураСКоллекцией): Булево',
                    Параметры: {
                        Источник: 'Объект - источник.',
                        Приемник: 'Объект приемник.'
                    }
                }
            }
        },
        "КопироватьФайл": {
            name: 'КопироватьФайл',
            name_en: 'FileCopy',
            description: 'Копирует файл-источник в файл-приемник. Допускается перезапись файла-приемника.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяФайлаИсточника: Строка, ИмяФайлаПриемника: Строка)',
                    Параметры: {
                        ИмяФайлаИсточника: 'Полное имя файла-источника.',
                        ИмяФайлаПриемника: 'Полное имя файла-приемника.'
                    }
                }
            }
        },
        "КраткоеПредставлениеОшибки": {
            name: 'КраткоеПредставлениеОшибки',
            name_en: 'BriefErrorDescription',
            description: 'Возвращает строку, аналогичную той, что показывается в стандартном сообщении об ошибке платформы 1С:Предприятие.',
            returns: 'Тип: Строка. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ИнформацияОбОшибке: ИнформацияОбОшибке): Строка',
                    Параметры: {
                        ИнформацияОбОшибке: 'Содержит информацию об ошибке.'
                    }
                }
            }
        },
        "Лев": {
            name: 'Лев',
            name_en: 'Left',
            description: 'Выбирает первые слева символы строки.',
            returns: 'Тип: Строка. Строка выбранных символов.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка, ЧислоСимволов: Число): Строка',
                    Параметры: {
                        Строка: 'Исходная строка.',
                        ЧислоСимволов: 'Количество выбираемых символов.'
                    }
                }
            }
        },
        "Макс": {
            name: 'Макс',
            name_en: 'Max',
            description: 'Определяет максимальное значение из полученных параметров.  Тот или иной семантический вариант функции определяется по типу данных первого параметра. В случае несовпадения типа второго и последующих параметров с требуемым, их значения преобразуются к требуемому типу в соответствии с правилами преобразования типов. Если тип первого параметра не соответствует ни одному из допустимых типов, то в зависимости от ситуации может производиться преобразование типов или возбуждаться состояние ошибки исполнения.',
            returns: 'Тип: Число, Строка, Дата, Булево. Возвращается максимальное из полученных значений.',
            signature: {
                default: {
                    СтрокаПараметров: '(Значение1: Число): Число',
                    Параметры: {
                        Значение1: 'Набор параметров, который определяет перечень значений для сравнения.'
                    }
                }
            }
        },
        "МестноеВремя": {
            name: 'МестноеВремя',
            name_en: 'ToLocalTime',
            description: 'Преобразует универсальное время в местное время заданного часового пояса.',
            returns: 'Тип: Дата. ',
            signature: {
                default: {
                    СтрокаПараметров: '(УниверсальноеВремя: Дата, ЧасовойПояс?: Строка): Дата',
                    Параметры: {
                        УниверсальноеВремя: 'Универсальное время.',
                        ЧасовойПояс: 'Может быть задан только в коде, исполняемом на сервере, режиме запуска "Толстый клиент" и во внешнем соединении. Идентификатор часового пояса, в который должно быть преобразовано универсальное время. Если Неопределено (не задан), то используется часовой пояс компьютера. Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59. Значение по умолчанию: Неопределено.'
                    }
                }
            }
        },
        "Месяц": {
            name: 'Месяц',
            name_en: 'Month',
            description: 'Определяет месяц в указанной дате.',
            returns: 'Тип: Число. Месяц в указанной дате.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Число',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "Мин": {
            name: 'Мин',
            name_en: 'Min',
            description: 'Определяет минимальное значение из полученных параметров.  Тот или иной семантический вариант функции определяется по типу данных первого параметра. В случае несовпадения типа второго и последующих параметров с требуемым, их значения преобразуются к требуемому типу в соответствии с правилами преобразования типов. Если тип первого параметра не соответствует ни одному из допустимых типов, то в зависимости от ситуации может производиться преобразование типов или возбуждаться состояние ошибки исполнения.',
            returns: 'Тип: Число, Строка, Дата, Булево. Возвращается минимальное из полученных значений.',
            signature: {
                default: {
                    СтрокаПараметров: '(Значение1: Число): Число',
                    Параметры: {
                        Значение1: 'Набор параметров, который определяет перечень значений для сравнения.'
                    }
                }
            }
        },
        "Минута": {
            name: 'Минута',
            name_en: 'Minute',
            description: 'Определяет минуту в часе указанной даты.',
            returns: 'Тип: Число. Минута в часе указанной даты.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Число',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "МонопольныйРежим": {
            name: 'МонопольныйРежим',
            name_en: 'ExclusiveMode',
            description: 'Определяет, используется ли в данный момент монопольный режим работы с информационной базой.',
            returns: 'Тип: Булево. Истина - монопольная блокировка была установлена на текущую область данных сеанса или текущая область данных является подобластью монопольно заблокированной этим же сеансом области; Ложь - в противном случае. Для режима запуска "Мобильное приложение (сервер)" результат всегда Истина.'
        },
        "Найти": {
            name: 'Найти',
            name_en: 'Find',
            description: 'Функция является устаревшей! Рекомендуется использовать функцию СтрНайти. Находит первое вхождение искомой строки как подстроки в исходной строке.',
            returns: 'Тип: Число. Позиция первого знака найденной подстроки. Нумерация символов в строке начинается с 1. Если строка не содержит указанной подстроки, то возвращается 0.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка, ПодстрокаПоиска: Строка): Число',
                    Параметры: {
                        Строка: 'Исходная строка.',
                        ПодстрокаПоиска: 'Искомая подстрока.'
                    }
                }
            }
        },
        "НайтиНедопустимыеСимволыXML": {
            name: 'НайтиНедопустимыеСимволыXML',
            name_en: 'FindDisallowedXMLCharacters',
            description: 'Проверяет символы указанной строки на соответствие рекомендации XML 1.0 и 1.1. Проверка строки начинается с символа в позиции, указанной в параметре ПозицияНачала.',
            returns: 'Тип: Число. В случае обнаружения некорректного символа будет возвращена его позиция в строке, если же подобного символа не найдено – возвращаемое значение 0.',
            signature: {
                default: {
                    СтрокаПараметров: '(СтрокаСимволов: Строка, ПозицияНачала?: Число, Версия?: Строка): Число',
                    Параметры: {
                        СтрокаСимволов: 'Строка, в которой необходимо проверить символы.',
                        ПозицияНачала: 'Позиция символа в строке, начиная с которого будет производиться проверка. Значение по умолчанию: 1.',
                        Версия: 'Версия спецификации XML, используемая при проверке допустимости. Возможные значения параметра: "1.0" или "1.1". Значение по умолчанию: 1.0.'
                    }
                }
            }
        },
        "НайтиОкноПоНавигационнойСсылке": {
            name: 'НайтиОкноПоНавигационнойСсылке',
            name_en: 'FindWindowByURL',
            description: 'Получает окно клиентского приложения.',
            returns: 'Тип: ОкноКлиентскогоПриложения, Неопределено. Если окно не открыто, возвращается Неопределено.',
            signature: {
                default: {
                    СтрокаПараметров: '(НавигационнаяСcылка: Строка): ОкноКлиентскогоПриложения',
                    Параметры: {
                        НавигационнаяСcылка: 'Навигационная ссылка.'
                    }
                }
            }
        },
        "НайтиПомеченныеНаУдаление": {
            name: 'НайтиПомеченныеНаУдаление',
            name_en: 'FindMarkedForDeletion',
            description: 'Осуществляет поиск всех помеченных на удаление объектов, которые доступны пользователю в рамках текущего сеанса и которые попадают в область поиска, заданную параметрами ОбластьПоиска, ВключитьОбъекты и ИсключитьОбъекты. Если параметр ИсключитьОбъекты неопределен или используется режим совместимости Версия8_3_4 и ниже, поиск осуществляется среди всех объектов, которые доступны в рамках текущего сеанса с учетом разделения (учитывается и условное разделение). При этом параметры ВключитьОбъекты и ИсключитьОбъекты. не учитываются. Поиск выполняется среди доступных пользователю данных: у пользователя должно быть право на чтение объета, данные выбираются только после проверки прав ограничения доступа.',
            returns: 'Тип: Массив. Массив со списком ссылок помеченных на удаление объектов.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОбластьПоиска?: Массив, ВключитьОбъекты?: Массив, ИсключитьОбъекты?: Массив): Массив',
                    Параметры: {
                        ОбластьПоиска: 'Определяет область поиска объектов, помеченных на удаление. Область устанавливается комбинацией разделителей, в состав которых включены объекты метаданных, среди данных которых следует выполнять поиск. Элемент массива имеет тип Массив. Элемент вложенного массива имеет тип:   - Объект метаданных – Общий реквизит, разделяющий данные.  - Строка – имя общего реквизита, разделяющего данные. По умолчанию имеет значение Неопределено. Допустимые значения:   - Неопределено,  - Массив с комбинациями разделителей, определяющий область поиска,  - Пустой массив - область поиска определяется параметрами метода ВключитьОбъекты и ИсключитьОбъекты. Примечание. Если комбинация разделителей содержит повторы, то вызывается исключение, т.к. в конфигурации не может быть объектов метаданных, дважды включенных в состав одного разделителя. Значение по умолчанию: Неопределено.',
                        ВключитьОбъекты: 'Позволяет явно указать объекты метаданных, которые должны присутствовать в области поиска ссылок помеченных на удаление объектов. Элементом массива могут быть:   - Объект метаданных.  - Строка – полное имя объекта метаданных. Допустимые значения:   - Неопределено,  - Пустой массив,  - Массив объектов метаданных.  Значение по умолчанию: Неопределено.',
                        ИсключитьОбъекты: 'В качестве элементов массива могут выступать:   - Объект метаданных,  - Строка – полное имя объекта метаданных. Свойство позволяет явно указать объекты метаданных, которые следует исключить из области поиска объектов, помеченных на удаление. Допустимые значения:   - Неопределено  - Пустой массив (нет объектов, которые необходимо дополнительно включить в область поиска).  - Массив объектов метаданных.  Значение по умолчанию: Неопределено.'
                    }
                }
            }
        },
        "НайтиПоСсылкам": {
            name: 'НайтиПоСсылкам',
            name_en: 'FindByRef',
            description: 'Осуществляет поиск ссылок на объекты, переданные в параметре СписокСсылок. Поиск выполняется только в данных, которые доступны в рамках текущего сеанса с учетом разделения (условное разделение также учитывается). Поиск осуществляется среди всех данных, из которых могут быть ссылки на переданные объекты. Если у пользователя нет доступа к объекту, будет вызвано исключение..',
            returns: 'Тип: ТаблицаЗначений. Возвращает ссылки на найденные объекты в виде ТаблицаЗначений. Первая колонка - исходная ссылка.  Вторая колонка - ссылка на объект, если найденная ссылка соответствует объектной таблице или значение, олицетворяющее запись необъектной таблицы. Третья колонка - объект метаданных, которому соответствуют данные в которых найдена ссылка.',
            signature: {
                default: {
                    СтрокаПараметров: '(СписокСсылок: Массив, ОбластьПоиска?: Массив, ВключитьОбъекты?: Массив, ИсключитьОбъекты?: Массив): ТаблицаЗначений',
                    Параметры: {
                        СписокСсылок: 'Массив со списком ссылок на объекты, ссылки на которые нужно найти.',
                        ОбластьПоиска: 'Определяет область поиска объектов. Область устанавливается комбинацией разделителей, в состав которых включены объекты метаданных, среди данных которых следует выполнять поиск. Элемент массива имеет тип Массив. Элемент вложенного массива имеет тип:   - Объект метаданных – Общий реквизит, разделяющий данные.  - Строка – имя общего реквизита, разделяющего данные.  По умолчанию имеет значение Неопределено.  Допустимые значения:   - Неопределено,  - Массив с комбинациями разделителей, определяющий область поиска,  - Пустой массив - область поиска определяется параметрами метода ВключитьОбъекты и ИсключитьОбъекты.  Примечание. Если комбинация разделителей содержит повторы, то вызывается исключение, т.к. в конфигурации не может быть объектов метаданных, дважды включенных в состав одного разделителя. Значение по умолчанию: Неопределено.',
                        ВключитьОбъекты: 'Позволяет явно указать объекты метаданных, которые должны присутствовать в области поиска ссылок на объекты. Элементом массива могут быть:   - Объект метаданных.  - Строка – полное имя объекта метаданных. Допустимые значения:   - Неопределено,  - Пустой массив,  - Массив объектов метаданных.  Значение по умолчанию: Неопределено.',
                        ИсключитьОбъекты: 'В качестве элементов массива могут выступать:   - Объект метаданных,  - Строка – полное имя объекта метаданных. Свойство позволяет явно указать объекты метаданных, которые следует исключить из области поиска ссылок на объекты. Допустимые значения:   - Неопределено  - Пустой массив (нет объектов, которые необходимо дополнительно включить в область поиска).  - Массив объектов метаданных.  Значение по умолчанию: Неопределено.'
                    }
                }
            }
        },
        "НайтиФайлы": {
            name: 'НайтиФайлы',
            name_en: 'FindFiles',
            description: 'Осуществляет поиск файлов и каталогов по заданной маске, расположенных в заданном каталоге.',
            returns: 'Тип: Массив. Массив из значений типа Файл, содержащий найденные файлы.',
            signature: {
                default: {
                    СтрокаПараметров: '(Путь: Строка, Маска?: Строка, ИскатьВПодкаталогах?: Булево): Массив',
                    Параметры: {
                        Путь: 'Путь к каталогу, в котором производится поиск. Каталог может быть как на локальной сети, так и на ftp-сервере. При использовании этой схемы в адресах необходимо указывать прямые слеши \'/\', а не обратные \'\\\'. Допускается указание полного имени файла (путь + имя).',
                        Маска: 'Маска выбора файлов.  Если параметр задан, то первый параметр воспринимается системой как путь к каталогу, в котором требуется найти файлы, удовлетворяющие маске выбора. Для операционной системы MS Windows:  В строке маски, помимо обычных символов, допускается использование символа "*" (звездочка), обозначающего любое число произвольных символов, и "?" (знак вопроса), обозначающего один произвольный символ.  Для операционных систем Linux, MacOS:  В строке маски допускается использование следующих последовательностей:   - любой символ, допустимый в имени файла. Сопоставление указанных символов производится с учетом регистра;  - "*" (звездочка) - любая последовательность символов;  - "?" (знак вопроса) - любой символ;  - "[" - класс символов. После открывающей квадратной скобки указывается последовательность символов. Паттерн соответствует любому из указанных символов. Можно указывать диапазон, используя "-". Описание класса символов завершается "]". Для указания "-" в качестве символа класса нужно указать его первым или последним символом. Если после "[" указан знак "!", то класс описывает все символы, кроме указанных.',
                        ИскатьВПодкаталогах: 'Истина - будет произведен обход вложенных в параметр <Путь> каталогов и поиск в них.  Параметр игнорируется, если не задан параметр <Маска>, т.к. предполагается, что ищется один файл. Значение по умолчанию: Ложь.'
                    }
                }
            }
        },
        "НачалоГода": {
            name: 'НачалоГода',
            name_en: 'BegOfYear',
            description: 'Определяет дату и время начала года для указанной даты.',
            returns: 'Тип: Дата. Дата и время начала года.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Дата',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "НачалоДня": {
            name: 'НачалоДня',
            name_en: 'BegOfDay',
            description: 'Определяет дату и время начала дня для указанной даты.',
            returns: 'Тип: Дата. Дата и время начала дня.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Дата',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "НачалоКвартала": {
            name: 'НачалоКвартала',
            name_en: 'BegOfQuarter',
            description: 'Определяет дату и время начала квартала для указанной даты.',
            returns: 'Тип: Дата. Дата и время начала квартала.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Дата',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "НачалоМесяца": {
            name: 'НачалоМесяца',
            name_en: 'BegOfMonth',
            description: 'Определяет дату и время начала месяца для указанной даты.',
            returns: 'Тип: Дата. Дата и время начала месяца.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Дата',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "НачалоМинуты": {
            name: 'НачалоМинуты',
            name_en: 'BegOfMinute',
            description: 'Определяет дату и время начала минуты для указанной даты.',
            returns: 'Тип: Дата. Дата и время начала минуты.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Дата',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "НачалоНедели": {
            name: 'НачалоНедели',
            name_en: 'BegOfWeek',
            description: 'Определяет дату и время начала недели для указанной даты.',
            returns: 'Тип: Дата. Дата и время начала недели.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Дата',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "НачалоЧаса": {
            name: 'НачалоЧаса',
            name_en: 'BegOfHour',
            description: 'Определяет дату и время начала часа для указанной даты.',
            returns: 'Тип: Дата. Дата и время начала часа.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Дата',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "НачатьЗапросРазрешенияПользователя": {
            name: 'НачатьЗапросРазрешенияПользователя',
            name_en: 'BeginRequestingUserPermission',
            description: 'Начинает получение у пользователя разрешение на несколько операций с файлами, которые потом будут выполнены без дополнительных вопросов. Полученное разрешение хранится до выполнения соответствующего вызова, либо до окончания работы текущего вызова встроенного языка.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, Вызовы: Массив)',
                    Параметры: {
                        ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <РазрешенияПолучены> - помещается тип Булево.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                        Вызовы: 'Содержит массив с описаниями вызовов, для которых получается разрешение. Каждое описание вызова представляет собой массив. Первым элементом этого массива является строка с именем метода, для которого получается разрешение. Используемые методы:    - НачатьПомещениеФайлов;  - НачатьПолучениеФайлов;  - НачатьЗапускПриложения;  - НачатьУдалениеФайлов;  - НачатьПоискФайлов;  - НачатьКопированиеФайла;  - НачатьПеремещениеФайла;  - НачатьСоздание;  - НачатьОткрытие;  - НачатьОткрытиеДляЧтения;  - НачатьОткрытиеДляЗаписи;  - НачатьОткрытиеДляДописывания;  - НачатьСозданиеВременногоФайла;  - НачатьСозданиеКаталога. Следующие элементы массива - это параметры вызова в правильном порядке, исключая первый параметр ОписаниеОповещения.'
                    }
                }
            }
        },
        "НачатьЗапускПриложения": {
            name: 'НачатьЗапускПриложения',
            name_en: 'BeginRunningApplication',
            description: 'Начинает запуск внешнего приложения либо открытие файла с использованием ассоциированного с ним приложения.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, СтрокаКоманды: Строка, ТекущийКаталог?: Строка, ДождатьсяЗавершения?: Булево)',
                    Параметры: {
                        ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <КодВозврата> - код возврата, тип Число или Неопределено, если соответствующий входной параметр <ДождатьсяЗавершения> не указан;  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                        СтрокаКоманды: 'Командная строка для запуска приложения либо имя файла, ассоциированного с некоторым приложением.',
                        ТекущийКаталог: 'Задает текущий каталог запускаемого приложения. В режиме веб-клиента игнорируется.',
                        ДождатьсяЗавершения: 'Истина - дожидаться завершения запущенного приложения перед продолжением работы. Значение по умолчанию: Ложь.'
                    }
                }
            }
        },
        "НачатьКопированиеФайла": {
            name: 'НачатьКопированиеФайла',
            name_en: 'BeginCopyingFile',
            description: 'Начинает копирование файла-источника в файл-приемник. Допускается перезапись файла-приемника.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, ИмяФайлаИсточника: Строка, ИмяФайлаПриемника: Строка)',
                    Параметры: {
                        ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <СкопированныйФайл> – строка, содержащая путь к скопированному файлу,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                        ИмяФайлаИсточника: 'Полное имя файла-источника.',
                        ИмяФайлаПриемника: 'Полное имя файла-приемника.'
                    }
                }
            }
        },
        "НачатьПеремещениеФайла": {
            name: 'НачатьПеремещениеФайла',
            name_en: 'BeginMovingFile',
            description: 'Начинает перемещение (переименование) указанного файла.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, ИмяФайлаИсточника: Строка, ИмяФайлаПриемника: Строка)',
                    Параметры: {
                        ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <ПеремещаемыйФайл> – строка, содержащая путь к файлу,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                        ИмяФайлаИсточника: 'Полное имя файла-источника (полное исходное имя файла).',
                        ИмяФайлаПриемника: 'Полное имя файла-приемника (полное новое имя файла).'
                    }
                }
            }
        },
        "НачатьПодключениеВнешнейКомпоненты": {
            name: 'НачатьПодключениеВнешнейКомпоненты',
            name_en: 'BeginAttachingAddIn',
            description: 'Начинает подключение к "1С:Предприятию" объекта внешнего компонента.  Внешние компоненты могут храниться в информационной базе или макетах конфигурации в виде ZIP-архива или в виде двоичных данных. При работе на тонком клиенте и веб-клиенте компонент должен быть предварительно установлен.',
            signature: {
                ПоИдентификатору: {
                    СтрокаПараметров: '(ОписаниеОповещения?: ОписаниеОповещения, ИдентификаторОбъекта?: Строка)',
                    Параметры: {
                        ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <Подключено> – результат подключения, тип Булево.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                        ИдентификаторОбъекта: 'Идентификатор объекта в виде подключа программного идентификатора ProgID реестра Windows. Например: "AddIn.Scanner".'
                    }
                },
                ПоМестоположению: {
                    СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, Местоположение: Строка, Имя: Строка, Тип?: ТипВнешнейКомпоненты)',
                    Параметры: {
                        ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <Подключено> – результат подключения, Тип: Булево.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                        Местоположение: 'Местоположение внешнего компонента. В качестве местоположения может использоваться:   - путь к файлу внешнего компонента в файловой системе (недоступно на веб-клиенте), не ZIP-архив;  - полное имя макета, хранящего двоичные данные или ZIP-архив;  - URL к внешнему компоненту, в виде двоичных данных или ZIP-архива, в формате, аналогичном ПолучитьНавигационнуюСсылку.',
                        Имя: 'Символическое имя подключаемой внешнего компонента. Имя должно удовлетворять правилам именования встроенного языка.',
                        Тип: 'Тип подключаемого внешнего компонента. Не используется, если компонент упакован в ZIP-архив.'
                    }
                }
            }
        },
        "НачатьПодключениеРасширенияРаботыСКриптографией": {
            name: 'НачатьПодключениеРасширенияРаботыСКриптографией',
            name_en: 'BeginAttachingCryptoExtension',
            description: 'При первом обращении начинает подключение расширения для работы с криптографией. При каждом обращении проверяет готовность расширения к работе.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения)',
                    Параметры: {
                        ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <Подключено> – результат подключения, Булево.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.'
                    }
                }
            }
        },
        "НачатьПодключениеРасширенияРаботыСФайлами": {
            name: 'НачатьПодключениеРасширенияРаботыСФайлами',
            name_en: 'BeginAttachingFileSystemExtension',
            description: 'Начинает подключение расширения для работы с файлами.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения)',
                    Параметры: {
                        ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <Подключено> – результат подключения, Тип: Булево. Истина - расширение успешно подключено  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.'
                    }
                }
            }
        },
        "НачатьПоискФайлов": {
            name: 'НачатьПоискФайлов',
            name_en: 'BeginFindingFiles',
            description: 'Начинает поиск по заданной маске файлов и каталогов, расположенных в заданном каталоге.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, Путь: Строка, Маска?: Строка, ИскатьВПодкаталогах?: Булево)',
                    Параметры: {
                        ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <НайденныеФайлы> - помещается массив значений типа Файл.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                        Путь: 'Путь к каталогу, в котором производится поиск. Каталог может быть как на локальной сети, так и на ftp-сервере. При использовании этой схемы в адресах необходимо указывать прямые слеши \'/\', а не обратные \'\\\'. Допускается указание полного имени файла (путь + имя).',
                        Маска: 'Маска выбора файлов.  Если параметр задан, то первый параметр воспринимается системой как путь к каталогу, в котором требуется найти файлы, удовлетворяющие маске выбора. Для операционной системы Windows:  В строке маски, помимо обычных символов, допускается использование символа "*" (звездочка), обозначающего любое число произвольных символов, и "?" (знак вопроса), обозначающего один произвольный символ.  Для операционных систем Linux, MacOS:  В строке маски допускается использование следующих последовательностей:   - любой символ, допустимый в имени файла. Сопоставление указанных символов производится с учетом регистра;  - "*" (звездочка) - любая последовательность символов;  - "?" (знак вопроса) - любой символ;  - "[" - класс символов. После открывающей квадратной скобки указывается последовательность символов. Паттерн соответствует любому из указанных символов. Можно указывать диапазон, используя "-". Описание класса символов завершается "]". Для указания "-" в качестве символа класса нужно указать его первым или последним символом. Если после "[" указан знак "!", то класс описывает все символы, кроме указанных.',
                        ИскатьВПодкаталогах: 'Истина - будет произведен обход вложенных в параметр <Путь> каталогов и поиск в них.  Параметр игнорируется, если не задан параметр <Маска>, т.к. предполагается, что ищется один файл. Значение по умолчанию: Ложь.'
                    }
                }
            }
        },
        "НачатьПолучениеКаталогаВременныхФайлов": {
            name: 'НачатьПолучениеКаталогаВременныхФайлов',
            name_en: 'BeginGettingTempFilesDir',
            description: 'Начинает получение имени каталога, который используется программой для размещения временных файлов.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения)',
                    Параметры: {
                        ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <ИмяКаталогаВременныхФайлов> – имя временного файла, тип Строка.  - <ДополнительныеПараметры> – значение, которое было указано при создании объекта ОписаниеОповещения.'
                    }
                }
            }
        },
        "НачатьПолучениеКаталогаДокументов": {
            name: 'НачатьПолучениеКаталогаДокументов',
            name_en: 'BeginGettingDocumentsDir',
            description: 'Начинает получение стандартного каталога документов.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения)',
                    Параметры: {
                        ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <ИмяКаталогаДокументов> – имя временного файла, тип Строка.  - <ДополнительныеПараметры> – значение, которое было указано при создании объекта ОписаниеОповещения.'
                    }
                }
            }
        },
        "НачатьПолучениеРабочегоКаталогаДанныхПользователя": {
            name: 'НачатьПолучениеРабочегоКаталогаДанныхПользователя',
            name_en: 'BeginGettingUserDataWorkDir',
            description: 'Начинает получение имени каталога текущего пользователя данной информационной базы внутри стандартного каталога данных приложения.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения)',
                    Параметры: {
                        ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <КаталогДанныхПользователя> – имя временного файла, тип Строка.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.'
                    }
                }
            }
        },
        "НачатьПолучениеФайлов": {
            name: 'НачатьПолучениеФайлов',
            name_en: 'BeginGettingFiles',
            description: 'Начинает получение набора файлов и сохраняет их в локальную файловую систему пользователя.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, ПолучаемыеФайлы: Массив, РасположениеФайлов?: ДиалогВыбораФайла, Интерактивно?: Булево)',
                    Параметры: {
                        ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <ПолученныеФайлы> – массив объектов типа ОписаниеПереданногоФайла или Неопределено, если файлы не получены.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                        ПолучаемыеФайлы: 'Массив объектов типа ОписаниеПередаваемогоФайла. Каждый объект описывает получаемый файл:   - Хранение - расположение данных во временном хранилище или в информационной базе;  - Имя - это локальный путь, по которому должен быть расположен получаемый файл. Это может быть либо полный путь, либо часть пути, которая будет объединена со значением параметра <РасположениеФайлов>. Это также может быть имя файла или имя каталога (каталогов) + имя файла.',
                        РасположениеФайлов: 'Определяет общее расположение помещаемых файлов в локальной файловой системе. Может быть задан строкой либо заранее подготовленным диалогом выбора файлов в режиме выбора каталога или сохранения файлов.',
                        Интерактивно: 'Истина - задан интерактивный режим, в котором пользователю показывается диалог, в котором он может выбрать локальное расположение файлов. Ложь - на сервер передается список файлов, описанный в параметре <Файлы>. В интерактивном режиме строка, переданная в параметре <Диалог/Путь> рассматривается как начальное значения для выбора пути. Значение по умолчанию: Истина.'
                    }
                }
            }
        },
        "НачатьПомещениеФайла": {
            name: 'НачатьПомещениеФайла',
            name_en: 'BeginPutFile',
            description: 'Помещает файл из локальной файловой системы во временное хранилище.',
            returns: 'Тип: Булево. Ложь - в параметре <Интерактивно> установлен интерактивный режим (Истина) и пользователь отказался от выполнения операции в диалоге выбора файла.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещенияОЗавершении?: ОписаниеОповещения, Адрес?: Строка, НачальноеИмяФайла?: Строка, Интерактивно?: Булево, УникальныйИдентификаторФормы?: УникальныйИдентификатор): Булево',
                    Параметры: {
                        ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после завершения помещения файла со следующими параметрами:   - <Результат> - Ложь - в параметре <Интерактивно> установлен интерактивный режим (Истина) и пользователь отказался от выполнения операции в диалоге выбора файла,  - <Адрес> - расположение нового файла,  - <ВыбранноеИмяФайла> - Через этот параметр возвращается путь к файлу, указанный в диалоге выбора файла. Для неинтерактивного режима выбранное имя файла соответствует начальному имени файла. В режиме запуска "Веб-клиент" значение параметра зависит от типа браузера. Для Mozilla Firefox 3 в параметре возвращается только имя файла без пути. Для Microsoft Internet Explorer возвращаемое значение зависит от настройки текущей зоны. Подробности: http://msdn.microsoft.com/en-us/library/ms535128(VS.85).aspx,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. Если параметр не указан или имеет тип Неопределено, то по завершении никакая процедура вызвана не будет.',
                        Адрес: 'Содержит адрес файла во временном хранилище, по которому должны быть помещены данные. Если не задан или является пустой строкой, то будет создан новый файл.',
                        НачальноеИмяФайла: 'Путь файла на диске, данные из которого будут помещены во временное хранилище. Может быть не указан, если параметр <Интерактивно> = Истина. В этом случае отображается диалог выбора файла.',
                        Интерактивно: 'Указывает, используется ли интерактивный режим, в котором отображается диалог выбора файла. Этот файл будет помещен по указанному в параметре <Адрес> расположению во временном хранилище или по новому адресу, если параметр <Адрес> опущен.  Истина - интерактивный режим используется. В веб-клиенте параметр должен быть равен Истина. В противном случае будет сгенерировано сообщение об ошибке. Значение по умолчанию: Истина.',
                        УникальныйИдентификаторФормы: 'Уникальный идентификатор формы, который можно получить с помощью свойства УникальныйИдентификатор управляемой формы. Файл помещается во временное хранилище и автоматически удаляется после удаления объекта формы. Если параметр не указан, то помещенное значение будет удалено после очередного запроса сервера из общего модуля, при контекстном и неконтекстном серверном вызове из формы, при серверном вызове из модуля команды или при получении формы.'
                    }
                }
            }
        },
        "НачатьПомещениеФайлов": {
            name: 'НачатьПомещениеФайлов',
            name_en: 'BeginPuttingFiles',
            description: 'Начинает помещение набора файлов из локальной файловой системы во временное хранилище.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, ПомещаемыеФайлы?: Произвольный, НаборПомещаемыхФайлов?: ДиалогВыбораФайла, Интерактивно?: Булево, УникальныйИдентификаторФормы?: УникальныйИдентификатор)',
                    Параметры: {
                        ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:   - <ПомещенныеФайлы> – массив объектов типа ОписаниеПереданногоФайла или Неопределено, если файлы не получены.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                        ПомещаемыеФайлы: 'Массив объектов типа ОписаниеПередаваемогоФайла. Каждый объект описывает получаемый файл:   - Хранение - расположение данных во временном хранилище;  - Имя - это локальный путь, по которому должен быть получен файл. Массив может быть заполнен полностью, в этом случае известен набор помещаемых файлов и адреса, по которым они должны быть сохранены. Массив может быть заполнен частично, у элементов массива заполнены только имена. В этом случае, набор помещаемых файлов определен, а места хранения неизвестны. Файлы будут размещены в новых временных хранилищах. Массив может быть не заполнен. В этом случае набор помещаемых файлов определяется по значениям остальных параметров метода (поиском по маске либо интерактивным выбором).',
                        НаборПомещаемыхФайлов: 'Определяет набор помещаемых файлов. Может быть задан строкой поиска для метода НайтиФайлы либо заранее подготовленным диалогом выбора файлов в режиме открытия файлов. Если параметр определен, то параметр <ПомещаемыеФайлы> должен быть не определен либо быть пустым массивом.',
                        Интерактивно: 'Указывает использование интерактивного режима, при котором пользователю показывается диалог, в котором он может выбрать набор помещаемых файлов.',
                        УникальныйИдентификаторФормы: 'Уникальный идентификатор формы, который можно получить с помощью свойства УникальныйИдентификатор управляемой формы.  Файл помещается во временное хранилище и автоматически удаляется после удаления объекта формы. Если параметр не указан, помещенное значение будет удалено, после очередного запроса сервера из общего модуля, при контекстном и неконтекстном серверном вызове из формы, при серверном вызове из модуля команды или при получении формы.'
                    }
                }
            }
        },
        "НачатьСозданиеДвоичныхДанныхИзФайла": {
            name: 'НачатьСозданиеДвоичныхДанныхИзФайла',
            name_en: 'BeginCreateBinaryDataFromFile',
            description: 'Начинает создание двоичных данных из файла.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, ИмяФайла: Строка)',
                    Параметры: {
                        ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения работы метода со следующими параметрами:   - <ДвоичныеДанные> - Экземпляр объекта ДвоичныеДанные, содержащий данные из файла.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                        ИмяФайла: 'Имя файла, из которого надо создать ДвоичныеДанные.'
                    }
                }
            }
        },
        "НачатьСозданиеКаталога": {
            name: 'НачатьСозданиеКаталога',
            name_en: 'BeginCreatingDirectory',
            description: 'Начинает создание нового каталога файлов.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, ИмяКаталога: Строка)',
                    Параметры: {
                        ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <ИмяКаталога> – строка, содержащая путь к созданному каталогу,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                        ИмяКаталога: 'Полное имя создаваемого каталога. Допускается использование схемы ftp для адресации файлов. При использовании этой схемы в адресах необходимо указывать прямые слеши \'/\', а не обратные \'\\\'.'
                    }
                }
            }
        },
        "НачатьТранзакцию": {
            name: 'НачатьТранзакцию',
            name_en: 'BeginTransaction',
            description: 'Открывает транзакцию. Транзакция предназначена для записи в информационную базу согласованных изменений. Все изменения, внесенные в информационную базу после начала транзакции, будут затем либо целиком записаны, либо целиком отменены.',
            signature: {
                default: {
                    СтрокаПараметров: '(РежимБлокировок?: РежимУправленияБлокировкойДанных)',
                    Параметры: {
                        РежимБлокировок: 'Установка параметра имеет смысл, если для свойства конфигурации "Режим управления блокировкой данных" выбрано значение "Автоматический и Управляемый". Если значение параметра Автоматический, то данная транзакция будет выполняться в режиме автоматических блокировок. Если значение параметра Управляемый, то в данной транзакции будут выполняться управляемые блокировки. Если к моменту вызова данного метода была начата транзакция, выполняющаяся в автоматическом режиме управления блокировками, то установка значения параметра Управляемый не приведет к изменению режима управления блокировками. Если к моменту вызова данного метода была начата транзакция, выполняющаяся в управляемом режиме блокировок, то установка значения параметра Автоматический приведет к возникновению исключительной ситуации, которая может быть обработана конструкцией Попытка... Исключение... КонецПопытки. Если для свойства конфигурации "Режим управления блокировкой данных" выбрано значение "Управляемый", то значение параметра по умолчанию Управляемый. Значение по умолчанию: Автоматический.'
                    }
                }
            }
        },
        "НачатьУдалениеФайлов": {
            name: 'НачатьУдалениеФайлов',
            name_en: 'BeginDeletingFiles',
            description: 'Начинает удаление указанных файлов.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, Путь: Строка, Маска?: Произвольный)',
                    Параметры: {
                        ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующим параметром:    - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                        Путь: 'Путь к удаляемым файлам.',
                        Маска: 'Маска для выбора удаляемых файлов.  Если <Маска> не указана, то удаляются все файлы и каталог <Путь>. Для операционной системы Windows:  В строке маски, помимо обычных символов, допускается использование символа "*" (звездочка), обозначающего любое число произвольных символов, и "?" (знак вопроса), обозначающего один произвольный символ. Можно последовательно перечислить несколько фильтров, разделенных символом "|" (вертикальная черта). Для операционных систем Linux, MacOS:  В строке маски допускается использование следующих последовательностей:   - любой символ, допустимый в имени файла. Сопоставление указанных символов производится с учетом регистра;  - "*" (звездочка) - любая последовательность символов;  - "?" (знак вопроса) - любой символ;  - "[" - класс символов. После открывающей квадратной скобки указывается последовательность символов. Паттерн соответствует любому из указанных символов. Можно указывать диапазон, используя "-". Описание класса символов завершается "]". Для указания "-" в качестве символа класса нужно указать его первым или последним символом. Если после "[" указан знак "!", то класс описывает все символы, кроме указанных.'
                    }
                }
            }
        },
        "НачатьУстановкуВнешнейКомпоненты": {
            name: 'НачатьУстановкуВнешнейКомпоненты',
            name_en: 'BeginInstallAddIn',
            description: 'Доставляет объект внешнего компонента с сервера на клиент, после чего он становится доступен для метода ПодключитьВнешнююКомпоненту. Внешние компоненты могут храниться в информационной базе или макетах конфигурации в виде ZIP-архива или в виде двоичных данных.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещенияОЗавершении?: ОписаниеОповещения, Местоположение: Строка)',
                    Параметры: {
                        ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после завершения установки внешнего компонента со следующими параметрами:   - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. Если параметр пропущен, то по завершении никакая процедура вызвана не будет.',
                        Местоположение: 'Строка, определяющая местоположение внешнего компонента. В качестве строки может использоваться:   - полное имя макета, в котором хранится внешний компонент в архиве;  - URL к внешнему компоненту, упакованной в ZIP-архив, в формате, аналогичном ПолучитьНавигационнуюСсылку().'
                    }
                }
            }
        },
        "НачатьУстановкуРасширенияРаботыСКриптографией": {
            name: 'НачатьУстановкуРасширенияРаботыСКриптографией',
            name_en: 'BeginInstallCryptoExtension',
            description: 'Устанавливает расширение для работы с криптографией в браузер.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещенияОЗавершении?: ОписаниеОповещения)',
                    Параметры: {
                        ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после завершения установки расширения работы с криптографией со следующими параметрами:   - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. Если параметр не указан или имеет тип Неопределено, то по завершении никакая процедура вызвана не будет.'
                    }
                }
            }
        },
        "НачатьУстановкуРасширенияРаботыСФайлами": {
            name: 'НачатьУстановкуРасширенияРаботыСФайлами',
            name_en: 'BeginInstallFileSystemExtension',
            description: 'Устанавливает расширение работы с файлами. В режиме запуска толстого и тонкого клиентов информирует о том, что расширение установлено. Для клиента мобильного приложения информирует о том, что расширение установлено.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещенияОЗавершении?: ОписаниеОповещения)',
                    Параметры: {
                        ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после завершения установки расширения работы с файлами со следующими параметрами:   - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. Если параметр не указан или имеет тип Неопределено, то по завершении никакая процедура вызвана не будет.'
                    }
                }
            }
        },
        "НеделяГода": {
            name: 'НеделяГода',
            name_en: 'WeekOfYear',
            description: 'Определяет номер недели в году для указанной даты.',
            returns: 'Тип: Число. Номер недели в году.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Число',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "НеобходимостьЗавершенияСоединения": {
            name: 'НеобходимостьЗавершенияСоединения',
            name_en: 'ConnectionStopRequest',
            description: 'Позволяет определить, что клиент подсоединен к выключенному рабочему процессу. В этом случае клиентское приложение нужно перезапустить, чтобы оно подсоединилось к включенному рабочему процессу.  Выключенный рабочий процесс через некоторое время может быть завершен принудительно, и все, кто к нему подсоединен, завершатся аварийно.',
            returns: 'Тип: НеобходимостьЗавершенияСоединения. Содержит информацию о необходимости завершения соединения.'
        },
        "НомерСеансаИнформационнойБазы": {
            name: 'НомерСеансаИнформационнойБазы',
            name_en: 'InfoBaseSessionNumber',
            description: 'Получает номер текущего сеанса информационной базы.',
            returns: 'Тип: Число. '
        },
        "НомерСоединенияИнформационнойБазы": {
            name: 'НомерСоединенияИнформационнойБазы',
            name_en: 'InfoBaseConnectionNumber',
            description: 'Получает номер текущего соединения с информационной базой.',
            returns: 'Тип: Число. '
        },
        "НРег": {
            name: 'НРег',
            name_en: 'Lower',
            description: 'Преобразует все символы строки в нижний регистр.',
            returns: 'Тип: Строка. Строка, полученная в результате преобразования.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка): Строка',
                    Параметры: {
                        Строка: 'Исходная строка.'
                    }
                }
            }
        },
        "НСтр": {
            name: 'НСтр',
            name_en: 'NStr',
            description: 'Получает строку на языке текущего пользователя или указанном языке из набора строк на разных языках конфигурации.',
            returns: 'Тип: Строка. Строка, соответствующая языку пользователя или основному языку конфигурации.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИсходнаяСтрока: Строка, КодЯзыка?: Строка): Строка',
                    Параметры: {
                        ИсходнаяСтрока: 'Строки на разных языках, разделенные символом ";" (точка с запятой). Строка на одном языке состоит из кода языка, указанного в метаданных, символа "=" (равно) и собственно строки текста на данном языке в одинарных кавычках, двойных кавычках или без кавычек (когда указывается только один язык).',
                        КодЯзыка: 'Указывается код языка, на котором нужно получить строку. Если значение не указано, то строка будет выдаваться на языке, определенного для текущего пользователя. Значение по умолчанию: Пустая строка.'
                    }
                }
            }
        },
        "ОбновитьИнтерфейс": {
            name: 'ОбновитьИнтерфейс',
            name_en: 'RefreshInterface',
            description: 'Обновляет командный интерфейс, рабочий стол и открытые формы с учетом текущих значений функциональных опций и их параметров. Вызов метода необходим, чтобы измененные параметры функциональных опций вступили в действие. Внимание! Не рекомендуется вызывать метод ОбновитьИнтерфейс() после каждого изменения значения функциональных опций или их параметров. Рекомендуется вначале выполнить изменения всех функциональных опций или их параметров, а затем однократно обновить интерфейс. Это связано c тем, что вызов метода ОбновитьИнтерфейс() приводит к очистке всех кешей клиентского приложения, а также приводит к многочисленным вызовам сервера для обновления командного интерфейса, состава форм рабочего стола, открытых форм и т.д. Эти вызовы требуют большое количество ресурсов системы для обеспечения их выполнения.'
        },
        "ОбновитьНумерациюОбъектов": {
            name: 'ОбновитьНумерациюОбъектов',
            name_en: 'RefreshObjectsNumbering',
            description: 'Выполняет обновление номеров в соответствии с номерами, записанными в базе данных. После вызова данного метода все выданные, но незаписанные номера, становятся невалидными т.к. не гарантируется их уникальность. Данный метод разрешено вызывать только администратору системы.',
            signature: {
                default: {
                    СтрокаПараметров: '(Метаданные?: Массив)',
                    Параметры: {
                        Метаданные: 'Объект метаданного или массив объектов метаданных, для объектов которого будет выполнено обновление. Если значение параметра не указано, то обновление будет выполнено для всех типов объектов.'
                    }
                }
            }
        },
        "ОбновитьПовторноИспользуемыеЗначения": {
            name: 'ОбновитьПовторноИспользуемыеЗначения',
            name_en: 'RefreshReusableValues',
            description: 'Очищает все сохраненные значения функций с повторным использованием возвращаемых значений. После выполнения метода функции с повторным использованием возвращаемых значений выполняется так же, как при первом вызове.'
        },
        "ОбработкаПрерыванияПользователя": {
            name: 'ОбработкаПрерыванияПользователя',
            name_en: 'UserInterruptProcessing',
            description: 'Предназначен для прерывания работы встроенного языка при нажатии пользователем клавиши Ctrl+Break. Метод проверяет, была ли нажата пользователем клавиша Ctrl + Break. Если клавиша была нажата, то выполнение встроенного языка прекращается и выдается соответствующее сообщение. Данный метод рекомендуется использовать в длительных циклических операциях. Метод будет иметь действия только в тех случаях, когда допускается прерывание выполнения модулей.  Прерывания выполнения допускается если оно инициировано определенным интерактивным действием пользователя. К таким действиям относятся:   - нажатие кнопки в форме;  - выбор пункта меню или кнопки командной панели в форме;  - выбор пункта меню или кнопки панели инструментов интерфейса;  - действия инициируемые обработчиками событий "Выбор" элементов управления.'
        },
        "ОбъединитьФайлы": {
            name: 'ОбъединитьФайлы',
            name_en: 'MergeFiles',
            description: 'Объединяет несколько файлов в один.',
            signature: {
                ПоМассивуИменЧастейФайла: {
                    СтрокаПараметров: '(ИменаЧастей: Массив, ИмяРезультирующегоФайла: Строка)',
                    Параметры: {
                        ИменаЧастей: 'Массив имен частей файла, которые требуется объединить. Объединение будет происходить в порядке, в котором заданы имена файлов в массиве.',
                        ИмяРезультирующегоФайла: 'Имя файла, который требуется создать при объединении частей.'
                    }
                },
                ПоМаске: {
                    СтрокаПараметров: '(ШаблонПоиска: Строка, ИмяРезультирующегоФайла: Строка)',
                    Параметры: {
                        ШаблонПоиска: 'Шаблон поиска частей.',
                        ИмяРезультирующегоФайла: 'Имя файла, который требуется создать путем объединения найденных частей.'
                    }
                }
            }
        },
        "Окр": {
            name: 'Окр',
            name_en: 'Round',
            description: 'Округляет исходное число до нужной разрядности в соответствии с заданным режимом округления.',
            returns: 'Тип: Число. Число, полученное в результате округления.',
            signature: {
                default: {
                    СтрокаПараметров: '(Число: Число, Разрядность?: Число, РежимОкругления?: РежимОкругления): Число',
                    Параметры: {
                        Число: 'Исходное число.',
                        Разрядность: 'Определяет число знаков дробной части, до которых производится округление. Если параметр отрицательный, то число округляется до соответствующего разряда в целой части, начиная с младших разрядов. Параметр обязательный, если указан параметр <РежимОкругления>. Значение по умолчанию: 0.',
                        РежимОкругления: 'Определяет режим округления. Помимо системного перечисления допускается использование числового параметра: 0 - если при округлении 1.5 = 1; 1 - если при округлении 1.5 = 2. Значение по умолчанию: Окр15как20.'
                    }
                }
            }
        },
        "ОписаниеОшибки": {
            name: 'ОписаниеОшибки',
            name_en: 'ErrorDescription',
            description: 'Получает описание ошибки (исключительной ситуации), включая информацию о строке модуля и вложенных исключениях.',
            returns: 'Тип: Строка. Возвращает описание ошибки, такое же, какое было бы выдано в окне сообщений в случае отсутствия обработчика исключительной ситуации, за исключением описания модуля и строки, в которой ошибка возникла.'
        },
        "Оповестить": {
            name: 'Оповестить',
            name_en: 'Notify',
            description: 'Посылает оповещение всем созданным формам и всем подключенным через метод ПодключитьОбработчикОповещения процедурам модуля управляемого приложения (модуля обычного приложения) или общего модуля. Если для формы задана процедура-обработчик события ОбработкаОповещения, то она будет запущена, в процедуру будут переданы указанные параметры. Данный механизм может, например, применяться для организации обмена сообщениями между открытыми формами.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяСобытия?: Строка, Параметр?: Произвольный, Источник?: Произвольный)',
                    Параметры: {
                        ИмяСобытия: 'Имя события. Может быть использовано для идентификации сообщений принимающими их формами.',
                        Параметр: 'Параметр сообщения. Могут быть переданы любые необходимые данные.',
                        Источник: 'Источник события. Например, в качестве источника может быть указана другая форма.'
                    }
                }
            }
        },
        "ОповеститьОбИзменении": {
            name: 'ОповеститьОбИзменении',
            name_en: 'NotifyChanged',
            signature: {
                ИзмененОдинОбъект: {
                    СтрокаПараметров: '(Ссылка: СправочникСсылка.<Имя справочника>)',
                    Параметры: {
                        Ссылка: 'Ссылка измененного объекта или ключ измененной записи регистра, об изменении которой(го) необходимо уведомить динамические списки, чтобы они обновились. Поведение при очистке кэша (такое же, как при интерактивном изменении):    - кэш представлений ссылок - очищаются записи, соответствующие измененной ссылке;  - кэш данных через точку - удаляются те записи, которые имеют в пути ссылки того же типа, что и измененная;  - кэш данных быстрого выбора - данные хранятся по типам, очищаются данные, которые относятся к типу измененной ссылки;  - кэш ограничений по типу - данные хранятся по типам, очищаются данные, которые относятся к типу измененной ссылки.'
                    }
                },
                ИзмененоМногоОбъектов: {
                    СтрокаПараметров: '(ИзмененныйТип: Тип)',
                    Параметры: {
                        ИзмененныйТип: 'Тип изменившихся объектов, например "ДокументСсылка.РасходнаяНакладная". Поведение при очистке кэша - очищается вся информация, которая связана с измененным типом.'
                    }
                }
            }
        },
        "ОтключитьОбработчикЗапросаНастроекКлиентаЛицензирования": {
            name: 'ОтключитьОбработчикЗапросаНастроекКлиентаЛицензирования',
            name_en: 'DetachLicensingClientParametersRequestHandler',
            description: 'Отключает обработчик запроса настройки клиента лицензирования, подключенный ранее при помощи ПодключитьОбработчикЗапросаНастроекКлиентаЛицензирования .'
        },
        "ОтключитьОбработчикОжидания": {
            name: 'ОтключитьОбработчикОжидания',
            name_en: 'DetachIdleHandler',
            description: 'Отключает подключенный ранее при помощи процедуры ПодключитьОбработчикОжидания вызов процедуры через определенный интервал времени.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяПроцедуры: Строка)',
                    Параметры: {
                        ИмяПроцедуры: 'Имя процедуры модуля управляемого приложения (модуля обычного приложения) или глобального общего модуля, используемой в качестве обработчика ожидания.'
                    }
                }
            }
        },
        "ОтключитьОбработчикОповещения": {
            name: 'ОтключитьОбработчикОповещения',
            name_en: 'DetachNotificationHandler',
            description: 'Отключает подключенный ранее при помощи метода ПодключитьОбработчикОповещения вызов процедуры при вызове метода Оповестить.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяПроцедуры: Строка)',
                    Параметры: {
                        ИмяПроцедуры: 'Имя процедуры модуля управляемого приложения (модуля обычного приложения) или общего модуля, используемой в качестве обработчика.'
                    }
                }
            }
        },
        "ОткрытьЗначение": {
            name: 'ОткрытьЗначение',
            name_en: 'OpenValue',
            description: 'Показывает в диалоге переданное значение. Вид диалога зависит от типа переданного значения.',
            signature: {
                default: {
                    СтрокаПараметров: '(Значение: Произвольный)',
                    Параметры: {
                        Значение: 'Значение любого типа, который может быть показан системой в диалоге.'
                    }
                }
            }
        },
        "ОткрытьИндексСправки": {
            name: 'ОткрытьИндексСправки',
            name_en: 'OpenHelpIndex',
            description: 'Открывает окно со списком ключевых слов и выражений (индексом) справки по приложению.',
            returns: 'Тип: Булево. Истина - окно со списком ключевых слов открыто; Ложь - в противном случае.',
            signature: {
                default: {
                    СтрокаПараметров: '(ТекстДляПоиска?: Строка): Булево',
                    Параметры: {
                        ТекстДляПоиска: 'Начальный текст для позиционирования в списке ключевых слов и выражений справки по приложению.'
                    }
                }
            }
        },
        "ОткрытьСодержаниеСправки": {
            name: 'ОткрытьСодержаниеСправки',
            name_en: 'OpenHelpContent',
            description: 'Открывает окно с содержанием справки по приложению.',
            returns: 'Тип: Булево. Ложь - показ справки невозможен. Например, используется Internet Explorer версии ранее 5,5.'
        },
        "ОткрытьСправку": {
            name: 'ОткрытьСправку',
            name_en: 'OpenHelp',
            description: 'Открывает окно со справочной информацией по объекту метаданных.',
            returns: 'Тип: Булево. Ложь - показ справки невозможен. Например, используется Internet Explorer версии ранее 5,5.',
            signature: {
                default: {
                    СтрокаПараметров: '(Раздел?: ОбъектМетаданных: HTTPСервис): Булево',
                    Параметры: {
                        Раздел: 'Объект метаданных, по которому требуется вывести справочную информацию. Значение параметра может быть задано как объектом метаданных, по которому требуется вывести справочную информацию, так и строкой.  Строка представляет полное имя объекта в дереве конфигурации, для которого требуется вывести справочную информацию. Для конфигурации достаточно указать "Конфигурация". В параметре, кроме имени объекта метаданных, можно указывать ссылку (URL) на главу справки.  Для получения URL главы справки нужно:   - перейти на форму редактирования справки;  - открыть диалог добавления ссылки ("Элементы – Ссылка");  - нажать кнопку выбора (F4);  - в диалоге ”Выбор ссылки” перейти на закладку ”1С:Предприятие”;  - выбрать нужную главу. В свойствах ссылки будет искомый URL. Параметр в виде объекта метаданных доступен только в режиме запуска "Толстый клиент". Подробнее см. НайтиПоПолномуИмени.'
                    }
                }
            }
        },
        "ОткрытьФорму": {
            name: 'ОткрытьФорму',
            name_en: 'OpenForm',
            description: 'Открывает и возвращает форму или управляемую форму. В тонком и веб-клиенте только управляемую форму. Перед открытием осуществляется поиск уже открытой такой же формы. Поиск осуществляется по типу формы, значениям ключевых параметров формы, владельцу формы, пользовательскому ключу уникальности. Можно открывать уже полученную форму. В этом случае в параметрах передается уже полученная форма и окно, в котором открыть форму. Можно открыть по имени формы. В этом случае в параметры передаются имя формы, параметры формы, владелец, ключ уникальности и окно, в котором должна быть открыта форма.',
            returns: 'Тип: Форма, УправляемаяФорма. ',
            signature: {
                ПоНазванию: {
                    СтрокаПараметров: '(ИмяФормы: Строка, Параметры?: Структура, Владелец?: Произвольный, Уникальность?: Произвольный, Окно?: ОкноКлиентскогоПриложения, НавигационнаяСсылка?: Строка, ОписаниеОповещенияОЗакрытии?: ОписаниеОповещения, РежимОткрытияОкна?: РежимОткрытияОкнаФормы): Форма',
                    Параметры: {
                        ИмяФормы: 'Имя формы. Образуется как полный путь к объекту метаданных Форма (например, "Справочник.Контрагенты.Форма.ФормаОбъекта", "ОбщаяФорма.ФормаСохраненияФайла") или как полный путь к прикладному объекту, дополненный именем формы по умолчанию (например, "Справочник.Товары.ФормаВыбора"). Имена форм по умолчанию:   - ФормаОбъекта (ObjectForm) - форма объекта по умолчанию;  - ФормаГруппы (FolderForm) - форма группы по умолчанию;  - ФормаЗаписи (RecordForm) - форма записи регистра по умолчанию;  - ФормаСписка (ListForm) - форма списка по умолчанию;  - ФормаВыбора (ChoiceForm) - форма выбора по умолчанию;  - ФормаВыбораГруппы (FolderChoiceForm) - форма выбора группы по умолчанию;  - ФормаКонстант (ConstantsForm) - форма констант по умолчанию;  - Форма (Form) - форма отчета и обработки по умолчанию;  - ФормаНастроек (SettingsForm) - форма настроек отчета по умолчанию;  - ФормаЗагрузки (LoadForm) - форма загрузки настроек;  - ФормаСохранения (SaveForm) - форма сохранения настроек;  - ФормаВарианта (VariantForm) - форма редактирования варианта отчета;  - ФормаПоиска (SearchForm) - форма полнотекстового поиска в данных. Для внешних отчетов и обработок имя формы задается следующим образом:   - ВнешнийОтчет.<имя отчета>.Форма.<имя формы>;  - ВнешнийОтчет.<имя отчета>.<имя стандартной формы>;  - ВнешняяОбработка.<имя обработки>.Форма.<имя формы>;  - ВнешняяОбработка.<имя обработки>.<имя стандартной формы>. При этом внешний отчет или обработка должны быть предварительно зарегистрированы в системе с помощью метода Подключить или Подключить соответственно. <Имя отчета> и <имя обработки> - это имена, под которыми зарегистрированы внешний отчет или обработка.',
                        Параметры: 'Параметры формы. Ключ структуры - имя параметра, а значение - значение параметра формы. Имя элемента должно совпадать с именем параметра структуры. П =НовыйСтруктура("Ключ", Поставщик); Форма = ПолучитьФорму("Справочник.Контрагенты.ФормаОбъекта", П); Форма.Открыть();',
                        Владелец: 'Владелец формы - форма или элемент управления другой формы.',
                        Уникальность: 'В данном параметре может быть задан некоторый ключ, значение которого будет использоваться для поиска уже открытых форм. Если будет найдена форма с таким же ключом уникальности, вместо открытия новой формы будет активизирована найденная форма. Ложь - искать форму с ключом уникальности по умолчанию, Истина - не искать форму вообще, любое другое значение устанавливает ключ уникальности, по которому будет произведен поиск. Значение по умолчанию: Ложь.',
                        Окно: 'Окно приложения, в котором будет открыта форма.  Применимо только для управляемой формы. Окном может быть только основное окно приложения или вспомогательное окно формы. Если указан тип ВариантОткрытияОкна, окно формы будет создано согласно выбранному варианту. Используется только в управляемом приложении.',
                        НавигационнаяСсылка: 'Если содержит значение, отличное от Неопределено, то это значение присваивается свойству НавигационнаяСсылка формы, полученной в результате вызова данного метода, и свойство АвтоНавигационнаяСсылка этой формы устанавливается в Ложь. Используется только в управляемом приложении. Значение по умолчанию: Неопределено.',
                        ОписаниеОповещенияОЗакрытии: 'Содержит описание процедуры, которая будет вызвана при закрытии формы со следующими параметрами: <РезультатЗакрытия> - значение, переданное при вызове метода Закрыть открываемой формы, <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.  Если параметр не указан, то по завершению никакая процедура вызвана не будет. Используется только в управляемом приложении.',
                        РежимОткрытияОкна: 'Указывает режим открытия окна управляемой формы. Используется только в управляемом приложении. Значение по умолчанию: Неопределено.'
                    }
                },
                ПоФорме: {
                    СтрокаПараметров: '(Форма: Форма, Окно?: ОкноКлиентскогоПриложения): Форма',
                    Параметры: {
                        Форма: 'Форма или управляемая форма. В режиме тонкого и веб-клиентов только управляемая форма.',
                        Окно: 'Окно приложения, в котором будет открыта форма.  Применимо только для управляемой формы. Окном может быть только основное окно приложения или вспомогательное окно формы. В случае использования ВариантОткрытияОкна, окно формы будет создано согласно выбранному варианту.'
                    }
                }
            }
        },
        "ОткрытьФормуМодально": {
            name: 'ОткрытьФормуМодально',
            name_en: 'OpenFormModal',
            description: 'Открывает форму или управляемую форму.  В тонком и веб-клиенте только управляемую форму.',
            returns: 'Тип: Произвольный. ',
            signature: {
                ПоНазванию: {
                    СтрокаПараметров: '(ИмяФормы: Строка, Параметры?: Структура, Владелец?: Произвольный, НавигационнаяСсылка?: Строка): Произвольный',
                    Параметры: {
                        ИмяФормы: 'Имя формы. Образуется как полный путь к объекту метаданных Форма (например, "Справочник.Контрагенты.Форма.ФормаОбъекта") или как полный путь к прикладному объекту, дополненный именем формы по умолчанию (например, "Справочник.Товары.ФормаВыбора"). Имена форм по умолчанию:   - ФормаОбъекта (ObjectForm) - форма объекта по умолчанию;  - ФормаГруппы (FolderForm) - форма группы по умолчанию;  - ФормаЗаписи (RecordForm) - форма записи регистра по умолчанию;  - ФормаСписка (ListForm) - форма списка по умолчанию;  - ФормаВыбора (ChoiceForm) - форма выбора по умолчанию;  - ФормаВыбораГруппы (FolderChoiceForm) - форма выбора группы по умолчанию;  - ФормаКонстант (ConstantsForm) - форма констант по умолчанию для обычного режима, установленная как форма констант для конфигурации;  - Форма (Form) - форма константы, отчета и обработки по умолчанию;  - ФормаНастроек (SettingsForm) - форма настроек отчета по умолчанию;  - ФормаЗагрузки (LoadForm) - форма загрузки настроек;  - ФормаСохранения (SaveForm) - форма сохранения настроек;  - ФормаВарианта (VariantForm) - форма редактирования варианта отчета;  - ФормаПоиска (SearchForm) - форма полнотекстового поиска в данных.',
                        Параметры: 'Параметры формы. Ключ структуры - имя параметра, а значение - значение параметра формы. Имя элемента должно совпадать с именем параметра структуры. П =НовыйСтруктура("Ключ", Поставщик); Форма = ПолучитьФорму("Справочник.Контрагенты.ФормаОбъекта", П); Форма.Открыть();',
                        Владелец: 'Владелец формы - форма или элемент управления другой формы.',
                        НавигационнаяСсылка: 'Если содержит значение, отличное от Неопределено, то это значение присваивается свойству НавигационнаяСсылка формы, полученной в результате вызова данного метода, и свойство АвтоНавигационнаяСсылка этой формы устанавливается в Ложь. Значение по умолчанию: Неопределено.'
                    }
                },
                ПоФорме: {
                    СтрокаПараметров: '(Форма: Форма): Произвольный',
                    Параметры: {
                        Форма: 'Форма или управляемая форма.  В режимах тонкого и веб-клиента только УправляемаяФорма.'
                    }
                }
            }
        },
        "ОтменитьТранзакцию": {
            name: 'ОтменитьТранзакцию',
            name_en: 'RollbackTransaction',
            description: 'Отменяет открытую ранее транзакцию. Все изменения, внесенные в информационную базу в процессе транзакции, будут отменены.'
        },
        "ОчиститьЖурналРегистрации": {
            name: 'ОчиститьЖурналРегистрации',
            name_en: 'ClearEventLog',
            description: 'Удаляет часть журнала регистрации в соответствии с отбором. Очистить можно только журнал, который хранится в формате lgd.',
            signature: {
                default: {
                    СтрокаПараметров: '(Отбор: Структура)',
                    Параметры: {
                        Отбор: 'Структура отбора журнала регистрации:   - ДатаНачала (StartDate) - Дата; значение по умолчанию Неопределено;  - ДатаОкончания (EndDate) - Дата; значение по умолчанию Неопределено;  - Уровень (Level) - перечисление или массив перечислений; значение по умолчанию Неопределено;  - ИмяПриложения (ApplicationName) - Строка или массив строк; значение по умолчанию Неопределено;  - Пользователь (User) - ПользовательИнформационнойБазы или массив таких объектов, или Строка. Объект ПользовательИнформационнойБазы и массив таких объектов можно получить из объекта МенеджерПользователейИнформационнойБазы. Также можно задавать пользователя по имени (строкой). Причем, пользователей, которые были удалены из информацонной базы можно задавать только таким способом. Пустая строка означает "пользователя по умолчанию", который используется, когда в информационной базе нет ни одного пользователя (от имени такого пользователя работают также фоновые задания). Если в отборе задается массив пользователей, то можно перемешивать в нем значения обоих типов - строка и ПользовательИнформационнойБазы. Значение по умолчанию Неопределено;  - Компьютер (Computer) - Строка или массив строк; значение по умолчанию Неопределено;  - Событие (Event) - Строка или массив строк; значение по умолчанию Неопределено.    - Допустимые системные имена событий:  - _$Access$_.Access - Доступ. Доступ; Предназначено для регистрации фактов успешного доступа пользователей системы к тем или иным данным. Поле журнала регистрации Данные (Структура) в этом случае имеет следующий состав:   - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались. Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Access$_.AccessDenied - Доступ. Отказ в доступе; Предназначено для регистрации фактов отказа в доступе к тем или иным данным пользователям системы. Поле журнала регистрации Данные (Структура). имеет следующий состав:    - Для ошибки доступа к объекту (не ограничение доступа к данным):    - Право (Right) - имя нарушенного права;  - Для ошибки ограничения доступа к данным:    - Действие (Action) - Действие, которое выполнялось с данными, для объектных таблиц: Чтение (Read), Добавление (Insert), Изменение (Update), Удаление (Delete); для не объектных таблиц, все что не Чтение, то Изменение;  - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались.Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Data$_.Delete - Данные. Удаление;  - _$Data$_.DeletePredefinedData - Данные. Удаление предопределенных данных;  - _$Data$_.New - Данные. Добавление;  - _$Data$_.NewPredefinedData - Данные. Добавление предопределенных данных;  - _$Data$_.Post - Данные. Проведение;  - _$Data$_.PredefinedDataInitialization - Данные. Инициализация предопределенных данных;  - _$Data$_.PredefinedDataInitializationDataNotFound - Данные. Инициализация предопределенных данных, данные не найдены;  - _$Data$_.SetPredefinedDataInitialization - Данные. Установка инициализации предопределенных данных;  - _$Data$_.SetStandardODataInterfaceContent - Данные. Изменение состава стандартного интерфейса OData;  - _$Data$_.TotalsMaxPeriodUpdate - Данные. Изменение максимального периода рассчитанных итогов;  - _$Data$_.TotalsMinPeriodUpdate - Данные. Изменение минимального периода рассчитанных итогов;  - _$Data$_.Unpost - Данные. Отмена проведения;  - _$Data$_.Update - Данные. Изменение;  - _$Data$_.UpdatePredefinedData - Данные. Изменение предопределенных данных;  - _$InfoBase$_.ConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.ConfigUpdate - Информационная база. Изменение конфигурации;  - _$InfoBase$_.DBConfigBackgroundUpdateCancel - Информационная база. Отмена фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateFinish - Информационная база. Завершение фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateResume - Информационная база. Продолжение (после приостановки) процесса фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateStart - Информационная база. Запуск фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateSuspend - Информационная база. Приостановка (пауза) процесса фонового обновления;  - _$InfoBase$_.DBConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации базы данных; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.DBConfigUpdate - Информационная база. Изменение конфигурации базы данных;  - _$InfoBase$_.EraseData - Информационная база. Удаление данных информационной баз;  - _$InfoBase$_.EventLogSettingsUpdate - Информационная база. Изменение параметров журнала регистрации;  - _$InfoBase$_.InfoBaseAdmParamsUpdate - Информационная база. Изменение параметров информационной базы;  - _$InfoBase$_.MasterNodeUpdate - Информационная база. Изменение главного узла;  - _$InfoBase$_.PredefinedDataUpdate - Информационная база. Обновление предопределенных данных;  - _$InfoBase$_.RegionalSettingsUpdate - Информационная база. Изменение региональных установок;  - _$InfoBase$_.SetPredefinedDataUpdate - Информационная база. Установить обновление предопределенных данных;  - _$InfoBase$_.TARImportant - Тестирование и исправление. Ошибка;  - _$InfoBase$_.TARInfo - Тестирование и исправление. Сообщение;  - _$InfoBase$_.TARMess - Тестирование и исправление. Предупреждение;  - _$Job$_.Cancel - Фоновое задание. Отмена;  - _$Job$_.Fail - Фоновое задание. Ошибка выполнения;  - _$Job$_.Start - Фоновое задание. Запуск;  - _$Job$_.Succeed - Фоновое задание. Успешное завершение;  - _$Job$_.Terminate - Фоновое задание. Принудительное завершение;  - _$OpenIDProvider$_.NegativeAssertion - Провайдер OpenID. Отклонено; записывается базой, выступающей в роли провайдера OpenID, при отправке отрицательного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию.  - _$OpenIDProvider$_.PositiveAssertion - Провайдер OpenID. Подтверждено; записывается базой, выступающей в роли провайдера OpenID, при отправке положительного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя;  - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию;  - _$PerformError$_ - Ошибка выполнения;  - _$Session$_.Authentication - Сеанс. Аутентификация; выполняется только при удачной аутентификации. Для события Аутентификация записываются поля Пользователь и ИмяПользователя. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле Данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID;  - ИдентификаторПользователяПровайдераOpenID (OpenIDProviderUserID) - идентификатор пользователя на провайдере.  - _$Session$_.AuthenticationError - Сеанс. Ошибка аутентификации; выполняется только при ошибке аутентификации. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID  - _$Session$_.ConfigExtensionApplyError - Сеанс. Ошибка применения расширения конфигурации; записывается, если в процессе применений расширения произошла ошибка. Совпадает с текстом выводимого сообщения при невозможности подключить расширение. Поле Данные заполняется структурой со следующим составом свойств:    - Имя (Name) - Строка. Имя расширения  - _$Session$_.Finish - Сеанс. Завершение;  - _$Session$_.Start - Сеанс. Начало;  - _$Transaction$_.Begin - Транзакция. Начало;  - _$Transaction$_.Commit - Транзакция. Фиксация;  - _$Transaction$_.Rollback - Транзакция. Отмена;  - _$User$_.Delete - Пользователи. Удаление; записываются как при редактировании списка пользователей в Конфигураторе, так и при удалении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя  - _$User$_.New - Пользователи. Добавление; записываются как при создани пользователей в Конфигураторе, так и методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык.  - _$User$_.Update - Пользователи. Изменение; записываются как при редактировании списка пользователей в Конфигураторе, так и при изменении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык; Допустимые системные имена событий:  - _$Access$_.Access - Доступ. Доступ; Предназначено для регистрации фактов успешного доступа пользователей системы к тем или иным данным. Поле журнала регистрации Данные (Структура) в этом случае имеет следующий состав:   - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались. Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Access$_.AccessDenied - Доступ. Отказ в доступе; Предназначено для регистрации фактов отказа в доступе к тем или иным данным пользователям системы. Поле журнала регистрации Данные (Структура). имеет следующий состав:    - Для ошибки доступа к объекту (не ограничение доступа к данным):    - Право (Right) - имя нарушенного права;  - Для ошибки ограничения доступа к данным:    - Действие (Action) - Действие, которое выполнялось с данными, для объектных таблиц: Чтение (Read), Добавление (Insert), Изменение (Update), Удаление (Delete); для не объектных таблиц, все что не Чтение, то Изменение;  - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались.Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Data$_.Delete - Данные. Удаление;  - _$Data$_.DeletePredefinedData - Данные. Удаление предопределенных данных;  - _$Data$_.New - Данные. Добавление;  - _$Data$_.NewPredefinedData - Данные. Добавление предопределенных данных;  - _$Data$_.Post - Данные. Проведение;  - _$Data$_.PredefinedDataInitialization - Данные. Инициализация предопределенных данных;  - _$Data$_.PredefinedDataInitializationDataNotFound - Данные. Инициализация предопределенных данных, данные не найдены;  - _$Data$_.SetPredefinedDataInitialization - Данные. Установка инициализации предопределенных данных;  - _$Data$_.SetStandardODataInterfaceContent - Данные. Изменение состава стандартного интерфейса OData;  - _$Data$_.TotalsMaxPeriodUpdate - Данные. Изменение максимального периода рассчитанных итогов;  - _$Data$_.TotalsMinPeriodUpdate - Данные. Изменение минимального периода рассчитанных итогов;  - _$Data$_.Unpost - Данные. Отмена проведения;  - _$Data$_.Update - Данные. Изменение;  - _$Data$_.UpdatePredefinedData - Данные. Изменение предопределенных данных;  - _$InfoBase$_.ConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.ConfigUpdate - Информационная база. Изменение конфигурации;  - _$InfoBase$_.DBConfigBackgroundUpdateCancel - Информационная база. Отмена фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateFinish - Информационная база. Завершение фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateResume - Информационная база. Продолжение (после приостановки) процесса фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateStart - Информационная база. Запуск фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateSuspend - Информационная база. Приостановка (пауза) процесса фонового обновления;  - _$InfoBase$_.DBConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации базы данных; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.DBConfigUpdate - Информационная база. Изменение конфигурации базы данных;  - _$InfoBase$_.EraseData - Информационная база. Удаление данных информационной баз;  - _$InfoBase$_.EventLogSettingsUpdate - Информационная база. Изменение параметров журнала регистрации;  - _$InfoBase$_.InfoBaseAdmParamsUpdate - Информационная база. Изменение параметров информационной базы;  - _$InfoBase$_.MasterNodeUpdate - Информационная база. Изменение главного узла;  - _$InfoBase$_.PredefinedDataUpdate - Информационная база. Обновление предопределенных данных;  - _$InfoBase$_.RegionalSettingsUpdate - Информационная база. Изменение региональных установок;  - _$InfoBase$_.SetPredefinedDataUpdate - Информационная база. Установить обновление предопределенных данных;  - _$InfoBase$_.TARImportant - Тестирование и исправление. Ошибка;  - _$InfoBase$_.TARInfo - Тестирование и исправление. Сообщение;  - _$InfoBase$_.TARMess - Тестирование и исправление. Предупреждение;  - _$Job$_.Cancel - Фоновое задание. Отмена;  - _$Job$_.Fail - Фоновое задание. Ошибка выполнения;  - _$Job$_.Start - Фоновое задание. Запуск;  - _$Job$_.Succeed - Фоновое задание. Успешное завершение;  - _$Job$_.Terminate - Фоновое задание. Принудительное завершение;  - _$OpenIDProvider$_.NegativeAssertion - Провайдер OpenID. Отклонено; записывается базой, выступающей в роли провайдера OpenID, при отправке отрицательного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию.  - _$OpenIDProvider$_.PositiveAssertion - Провайдер OpenID. Подтверждено; записывается базой, выступающей в роли провайдера OpenID, при отправке положительного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя;  - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию;  - _$PerformError$_ - Ошибка выполнения;  - _$Session$_.Authentication - Сеанс. Аутентификация; выполняется только при удачной аутентификации. Для события Аутентификация записываются поля Пользователь и ИмяПользователя. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле Данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID;  - ИдентификаторПользователяПровайдераOpenID (OpenIDProviderUserID) - идентификатор пользователя на провайдере.  - _$Session$_.AuthenticationError - Сеанс. Ошибка аутентификации; выполняется только при ошибке аутентификации. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID  - _$Session$_.ConfigExtensionApplyError - Сеанс. Ошибка применения расширения конфигурации; записывается, если в процессе применений расширения произошла ошибка. Совпадает с текстом выводимого сообщения при невозможности подключить расширение. Поле Данные заполняется структурой со следующим составом свойств:    - Имя (Name) - Строка. Имя расширения  - _$Session$_.Finish - Сеанс. Завершение;  - _$Session$_.Start - Сеанс. Начало;  - _$Transaction$_.Begin - Транзакция. Начало;  - _$Transaction$_.Commit - Транзакция. Фиксация;  - _$Transaction$_.Rollback - Транзакция. Отмена;  - _$User$_.Delete - Пользователи. Удаление; записываются как при редактировании списка пользователей в Конфигураторе, так и при удалении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя  - _$User$_.New - Пользователи. Добавление; записываются как при создани пользователей в Конфигураторе, так и методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык.  - _$User$_.Update - Пользователи. Изменение; записываются как при редактировании списка пользователей в Конфигураторе, так и при изменении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык;   - Метаданные (Metadata - объект описания метаданного или их массив; значение по умолчанию Неопределено;  - Данные (Data) - значение, тип значения – ссылка на объект (СправочикСсылка и т.д.); значение по умолчанию Неопределено;  - ПредставлениеДанных (DataPresentation) - Строка;  - Комментарий (Comment) - Строка;  - СтатусТранзакции (TransactionStatus) - перечисление или массив перечислений; значение по умолчанию Неопределено;  - Транзакция (TransactionID) - идентификатор транзакции; Строка;  - Сеанс (Session) - номер сеанса пользователя. Число или массив чисел; значение по умолчанию Неопределено;  - РабочийСервер (ServerName) - Строка или массив строк; значение по умолчанию Неопределено;  - ОсновнойIPПорт (Port) - номер основного IP-порта рабочего процесса; Число или массив чисел; значение по умолчанию Неопределено;  - ВспомогательныйIPПорт (SyncPort) - номер вспомогательного IP-порта рабочего процесса. Число или массив чисел; значение по умолчанию Неопределено.  - РазделениеДанныхСеанса (SessionDataSeparation) - Структура, имена элементов которой соответствуют именам общих реквизитов. В процессе отбора элементы структуры РазделениеДанныхСеанса объединяются по И: запись журнала попадает в выборку, если в ней есть соответствия для всех общих реквизитов, заданных в отборе. Значение по умолчанию Неопределено.   - Значение элемента структуры, в свою очередь, может быть:   - структурой, задающей единичное значение. Элементы структуры:   - Значение (Value) - значение общего реквизита. Значение по умолчанию - Неопределено;  - Использование (Use) - Булево. Значение по умолчанию - Истина. Задает использование общего реквизита, разделяющего данные. Если Ложь - элемент Значение игнорируется и может быть опущен. Таким образом, можно отбирать записи журнала, в которых данный общий реквизит не установлен.   - массивом, который задает набор допустимых значений общего реквизита, разделяющего данные. Массив содержит структуры, каждая из которых задает единичное значение общего реквизита (как описано выше). Элементы массива учитываются по ИЛИ: запись журнала попадает в выборку, если значение общего реквизита в ней равно одному из заданных в массиве.'
                    }
                }
            }
        },
        "ОчиститьНастройкиПользователя": {
            name: 'ОчиститьНастройкиПользователя',
            name_en: 'ClearUserSettings',
            description: 'Очищает настройки пользователя, принадлежащие информационной базе и конкретному пользователю в ней.',
            signature: {
                ПоПользователюИнформационнойБазы: {
                    СтрокаПараметров: '(ПользовательИБ: ПользовательИнформационнойБазы)',
                    Параметры: {
                        ПользовательИБ: 'Пользователь информационной базы, для которого выполняется очистка настроек.'
                    }
                },
                ПоИмени: {
                    СтрокаПараметров: '(ИмяПользователяИБ: Строка)',
                    Параметры: {
                        ИмяПользователяИБ: 'Имя пользователя информационной базы.'
                    }
                }
            }
        },
        "ОчиститьСообщения": {
            name: 'ОчиститьСообщения',
            name_en: 'ClearMessages',
            description: 'Очищает окно сообщений.'
        },
        "ПараметрыДоступа": {
            name: 'ПараметрыДоступа',
            name_en: 'AccessParameters',
            description: 'Позволяет получить права текущего пользователя на заданный объект метаданных для проверки наличия ограничения прав доступа с учетом указанных полей.',
            returns: 'Тип: ПараметрыДоступа. ',
            signature: {
                default: {
                    СтрокаПараметров: '(НаименованиеПрава: Строка, ОбъектМетаданных: Произвольный, СписокПолей: Строка, Пользователь_Роль?: ПользовательИнформационнойБазы): ПараметрыДоступа',
                    Параметры: {
                        НаименованиеПрава: 'Наименование запрашиваемого на объект права, например "Read".',
                        ОбъектМетаданных: 'Объект метаданных, права на доступ к которому проверяются.  Могут быть указаны только следующие объекты метаданных:   - ОбъектМетаданных: ПланОбмена;  - ОбъектМетаданных: Константа (для режима совместимости Версия8_2_13 и ниже);  - ОбъектМетаданных: Справочник;  - ОбъектМетаданных: Документ;  - ОбъектМетаданных: ЖурналДокументов;  - ОбъектМетаданных: Последовательность;  - ОбъектМетаданных: ПланВидовХарактеристик;  - ОбъектМетаданных: ПланСчетов;  - ОбъектМетаданных: ПланВидовРасчета;  - ОбъектМетаданных: РегистрСведений;  - ОбъектМетаданных: РегистрНакопления;  - ОбъектМетаданных: РегистрБухгалтерии;  - ОбъектМетаданных: РегистрРасчета;  - ОбъектМетаданных: Перерасчет;  - ОбъектМетаданных: БизнесПроцесс;  - ОбъектМетаданных: Задача;  - ОбъектМетаданных: ВнешнийИсточникДанных.',
                        СписокПолей: 'Список полей объекта базы данных, права на доступ к которым проверяются. Поля указываются списком, через запятую. Могут присутствовать имена табличных частей, реквизитов табличных частей, в последнем случае поле описывается как <Имя табличной части>.<Имя реквизита табличной части>.',
                        Пользователь_Роль: 'Указывает пользователя или роль, для которых нужно определить доступность права. При этом возвращается значение права так, как оно определено в конфигурации.'
                    }
                }
            }
        },
        "ПерейтиПоНавигационнойСсылке": {
            name: 'ПерейтиПоНавигационнойСсылке',
            name_en: 'GotoURL',
            description: 'Выполняет переход по ссылке так, как если бы пользователь выполнил интерактивную вспомогательную команду "Перейти по ссылке ...". Если выполняется переход по ссылке на объект информационной базы, отчет или обработку, то происходит открытие нового вспомогательного окна (если окно с этим объектом еще не открыто). Если выполняется переход по ссылке на точку навигации, то переход будет выполнен в основном окне приложения, и оно станет активным. Возможен переход по внешней ссылке. Для внешней ссылки, которая содержит сигнатуру "e1cib" выполняются следующие действия:   - Если начало ссылки совпадает с навигационной ссылкой информационной базы текущего сеанса, то выполняется переход по локальной ссылке;  - Если начало ссылки не совпадает с навигационной ссылкой информационной базы, то осуществляется поиск запущенного клиента, подключенного к базе, адрес которой соответствует ссылке. Если такой клиент найден, окно его приложения активизируется и в нем выполняется переход по ссылке.  - Если соответствующего запущенного экземпляра тонкого клиента нет, то выполняется попытка запуска нового экземляра тонкого клиента с соответствующей строкой соединения и в нем выполняется переход. Если выполняется переход по ссылке вида "http(s)" на объект в другой информационной базе, то:   - Выполняется попытка найти запущенный экземпляр тонкого клиента, работающего с соответствующей информационной базой.  - Если запущенного экземпляра тонкого клиента нет, или в нем открыт модальный диалог, выполняется попытка запуска нового экземпляра тонкого клиента с соответствующей строкой соединения.  - Если попытка запуска не успешна (например, тонкий клиент не установлен), переданная ссылка обрабатывается операционной системой. Если внешняя ссылка не является навигационной ссылкой информационной базы (например, ссылки на сайты или файлы на диске), то в тонком клиенте данная ссылка выполняется как команда операционной системы. Ссылка открывается ассоциированной с данным типом ссылки программой. Если ссылка указывает на текстовый документ, табличный документ и т.п., в тонком клиенте документ будет открыт в клиентском приложении.В веб-клиенте отрабатывают только http-ссылки, которые открываются в том же браузере в отдельном окне.',
            signature: {
                default: {
                    СтрокаПараметров: '(НавигационнаяСсылка: Строка)',
                    Параметры: {
                        НавигационнаяСсылка: 'Навигационная ссылка.'
                    }
                }
            }
        },
        "ПереместитьФайл": {
            name: 'ПереместитьФайл',
            name_en: 'MoveFile',
            description: 'Выполняет перемещение (переименование) указанного файла.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяФайлаИсточника: Строка, ИмяФайлаПриемника: Строка)',
                    Параметры: {
                        ИмяФайлаИсточника: 'Полное имя файла-источника (полное исходное имя файла).',
                        ИмяФайлаПриемника: 'Полное имя файла-приемника (полное новое имя файла).'
                    }
                }
            }
        },
        "ПодключитьВнешнююКомпоненту": {
            name: 'ПодключитьВнешнююКомпоненту',
            name_en: 'AttachAddIn',
            description: 'Подключает внешний компонент к 1С:Предприятию. Внешние компоненты могут храниться в информационной базе или макетах конфигурации в виде ZIP-архива или в виде двоичных данных, а также в файле файловой системы. При работе на тонком клиенте и веб-клиенте компонент должен быть предварительно установлен.',
            returns: 'Тип: Булево. Истина - подключение прошло успешно.',
            signature: {
                ПоИмениИМестоположению: {
                    СтрокаПараметров: '(Местоположение: Строка, Имя: Строка, Тип?: ТипВнешнейКомпоненты): Булево',
                    Параметры: {
                        Местоположение: 'Местоположение внешнего компонента. В качестве местоположения может использоваться:   - путь к файлу внешнего компонента в файловой системе (недоступно на веб-клиенте), не ZIP-архив;  - полное имя макета, хранящего двоичные данные или ZIP-архив;  - URL к внешнему компоненту, в виде двоичных данных или ZIP-архива, в формате, аналогичном ПолучитьНавигационнуюСсылку.',
                        Имя: 'Символическое имя подключаемой внешнего компонента. Имя должно удовлетворять правилам именования встроенного языка.',
                        Тип: 'Тип подключаемого внешнего компонента. Не используется, если компонент упакован в ZIP-архив.'
                    }
                },
                ПоИдентификатору: {
                    СтрокаПараметров: '(ИдентификаторОбъекта: Строка): Булево',
                    Параметры: {
                        ИдентификаторОбъекта: 'Идентификатор объекта внешнего компонента в виде ProgID (Programmatic Identifier) реестра MS Windows (например: "AddIn.Scanner"). Должно соответствовать информации, находящейся в регистрационной базе данных системы (Registry).'
                    }
                }
            }
        },
        "ПодключитьОбработчикЗапросаНастроекКлиентаЛицензирования": {
            name: 'ПодключитьОбработчикЗапросаНастроекКлиентаЛицензирования',
            name_en: 'AttachLicensingClientParametersRequestHandler',
            description: 'Подключает вызов указанной процедуры глобального модуля, доступного на клиенте, или модуля приложения (обычного или управляемого), которая будет вызываться, если ответ центра лицензирования указывает на необходимость установить параметры клиента лицензирования.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяПроцедуры: Строка)',
                    Параметры: {
                        ИмяПроцедуры: 'Имя экспортируемой процедуры модуля приложения (обычного или управляемого) или глобального общего модуля. Процедура должна располагаться на клиенте. Процедура не должна содержать параметров.'
                    }
                }
            }
        },
        "ПодключитьОбработчикОжидания": {
            name: 'ПодключитьОбработчикОжидания',
            name_en: 'AttachIdleHandler',
            description: 'Подключает вызов указанной процедуры модуля управляемого приложения (модуля обычного приложения) или глобального общего модуля через определенный интервал времени. Вызов будет осуществляться только в "состоянии покоя", то есть в тот момент, когда программа не выполняет никаких действий. Во время временной блокировки, вызванной методом ЗаблокироватьРаботуПользователя или соответствующей командой "Временная блокировка", обработчики ожидания не выполняются.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяПроцедуры: Строка, Интервал: Число, Однократно?: Булево)',
                    Параметры: {
                        ИмяПроцедуры: 'Имя экспортируемой процедуры модуля управляемого приложения (модуля обычного приложения) или глобального общего модуля. Процедура должна располагаться на клиенте. Процедура не должна содержать параметров.',
                        Интервал: 'Интервал времени в секундах с точностью до 1/10 секунды, через который будет осуществляться вызов процедуры (положительное число). Если указано значение меньше 1, то значение третьего параметра должно быть равно Истина.',
                        Однократно: 'Признак однократного выполнения обработчика ожидания. Истина - указанный обработчик ожидания будет выполнен один раз. Значение по умолчанию: Ложь.'
                    }
                }
            }
        },
        "ПодключитьОбработчикОповещения": {
            name: 'ПодключитьОбработчикОповещения',
            name_en: 'AttachNotificationHandler',
            description: 'Подключает вызов указанной экспортируемой процедуры модуля управляемого приложения (модуля обычного приложения) или глобального общего модуля для обработки оповещения при вызове метода Оповестить. Процедура должна быть экспортируемой и иметь три параметра - Имя события, Параметр, Источник.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяПроцедуры: Строка)',
                    Параметры: {
                        ИмяПроцедуры: 'Имя экспортируемой процедуры модуля управляемого приложения (модуля обычного приложения) или общего глобального модуля. Процедура должна располагаться на клиенте. Процедура не должна содержать параметров.'
                    }
                }
            }
        },
        "ПодключитьРасширениеРаботыСКриптографией": {
            name: 'ПодключитьРасширениеРаботыСКриптографией',
            name_en: 'AttachCryptoExtension',
            description: 'При первом обращении выполняет подключение расширения для работы с криптографией. При каждом обращении проверяет готовность расширения к работе.',
            returns: 'Тип: Булево. В случае успешного подключения возвращает Истина, иначе - Ложь. Для тонкого и толстого клиентов результат всегда Истина.'
        },
        "ПодключитьРасширениеРаботыСФайлами": {
            name: 'ПодключитьРасширениеРаботыСФайлами',
            name_en: 'AttachFileSystemExtension',
            description: 'При первом обращении выполняет подключение расширения для работы с файлами. При каждом обращении проверяет готовность расширения к работе.',
            returns: 'Тип: Булево. В тонком клиенте результат всегда Истина. Для режима запуска "Мобильное приложение (клиент)" результат всегда Истина.'
        },
        "ПодробноеПредставлениеОшибки": {
            name: 'ПодробноеПредставлениеОшибки',
            name_en: 'DetailErrorDescription',
            description: 'Возвращает строку, аналогичную той, что показывается в стандартном диалоге платформы 1С:Предприятие, вызываемом при нажатии кнопки "Подробно" из сообщения об ошибке.',
            returns: 'Тип: Строка. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ИнформацияОбОшибке: ИнформацияОбОшибке): Строка',
                    Параметры: {
                        ИнформацияОбОшибке: 'Содержит информацию об ошибке.'
                    }
                }
            }
        },
        "ПоказатьВводДаты": {
            name: 'ПоказатьВводДаты',
            name_en: 'ShowInputDate',
            description: 'Открывает окно для ввода даты, но при этом не ожидает завершения ввода.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещенияОЗавершении: ОписаниеОповещения, Дата?: Дата, Подсказка?: Строка, ЧастьДаты?: ЧастиДаты)',
                    Параметры: {
                        ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после закрытия окна ввода даты со следующими параметрами:   - <Дата> - выбранное значение даты или Неопределено, если пользователь отказался от ввода,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                        Дата: 'Начальное значение даты, отображаемое в окне ввода. Значение по умолчанию: Неопределено.',
                        Подсказка: 'Текст заголовка окна диалога ввода даты. Может использоваться в качестве подсказки пользователю. Значение по умолчанию: Пустая строка.',
                        ЧастьДаты: 'Вводимая в диалоге часть (или части) даты. Значение по умолчанию: ДатаВремя.'
                    }
                }
            }
        },
        "ПоказатьВводЗначения": {
            name: 'ПоказатьВводЗначения',
            name_en: 'ShowInputValue',
            description: 'Показывает окно для ввода значения заданного типа.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещенияОЗавершении: ОписаниеОповещения, Значение: Произвольный, Подсказка?: Строка, Тип?: Тип)',
                    Параметры: {
                        ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после закрытия окна ввода значения со следующими параметрами:   - <Значение> - выбранное значение или Неопределено, если пользователь отказался от ввода,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                        Значение: 'Значение, которое будет использовано в качестве начального значения в диалоге.  Если параметр <Тип> не задан или имеет значение Неопределено, тип данного значения используется в качестве типа вводимого в окне данного.',
                        Подсказка: 'Текст заголовка окна ввода значения. Может использоваться в качестве подсказки пользователю. Значение по умолчанию: Пустая строка.',
                        Тип: 'Тип вводимого значения. Если параметр не указан, используется тип параметра <Значение>.'
                    }
                }
            }
        },
        "ПоказатьВводСтроки": {
            name: 'ПоказатьВводСтроки',
            name_en: 'ShowInputString',
            description: 'Вызывает диалог для ввода строки, при этом не ожидает завершения ввода.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещенияОЗавершении: ОписаниеОповещения, Строка?: Строка, Подсказка?: Строка, Длина?: Число, Многострочность?: Булево)',
                    Параметры: {
                        ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после закрытия окна ввода строки со следующими параметрами:   - <Строка> - введенное значение строки или Неопределено, если пользователь отказался от ввода,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                        Строка: 'Начальное значение строки, которое будет использовано в качестве начального значения в окне ввода.',
                        Подсказка: 'Текст заголовка окна диалога ввода строки. Может использоваться в качестве подсказки пользователю. Значение по умолчанию: Пустая строка.',
                        Длина: 'Длина вводимой строки. Если параметр не указан, то строка неограниченной длины. Значение по умолчанию: 0.',
                        Многострочность: 'Определяет режим ввода многострочного текста: Истина - ввод многострочного текста с разделителями строк; Ложь - ввод простой строки. Значение по умолчанию: Ложь.'
                    }
                }
            }
        },
        "ПоказатьВводЧисла": {
            name: 'ПоказатьВводЧисла',
            name_en: 'ShowInputNumber',
            description: 'Вызывает диалог для ввода строки, при этом не ожидает завершения ввода.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещенияОЗавершении: ОписаниеОповещения, Число: Число, Подсказка?: Строка, Длина?: Число, Точность?: Число)',
                    Параметры: {
                        ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после закрытия окна ввода числа со следующими параметрами:   - <Число> - введенное значение числа или Неопределено, если пользователь отказался от ввода,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                        Число: 'Значение числа, которое будет использовано в качестве начального значения в диалоге.',
                        Подсказка: 'Текст заголовка окна диалога ввода числа. Может использоваться в качестве подсказки пользователю. Значение по умолчанию: Пустая строка.',
                        Длина: 'Длина вводимого числа включая дробную часть (символы разделителей не учитываются). Значение по умолчанию: 0.',
                        Точность: 'Количество знаков в дробной части вводимого числа. Значение по умолчанию: 0.'
                    }
                }
            }
        },
        "ПоказатьВопрос": {
            name: 'ПоказатьВопрос',
            name_en: 'ShowQueryBox',
            description: 'Выводит на экран окно вопроса, при этом не ожидается завершения ответа пользователя.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещенияОЗавершении: ОписаниеОповещения, ТекстВопроса: Строка, Кнопки: РежимДиалогаВопрос, Таймаут?: Число, КнопкаПоУмолчанию?: Произвольный, Заголовок?: Строка, КнопкаТаймаута?: Произвольный)',
                    Параметры: {
                        ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после закрытия окна ввода значения со следующими параметрами:   - <РезультатВопроса> - результат выбора пользователя: значение системного перечисления или значение, связанное с нажатой кнопкой. В случае закрытия диалога по истечении времени - значение Таймаут,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                        ТекстВопроса: 'Текст задаваемого вопроса.',
                        Кнопки: 'Задает состав и текст кнопок диалога, а также, связанные с кнопками значения. При использовании типа СписокЗначений:   - Значение – содержит значение, связанное с кнопкой. Это значение является возвращаемым значением при выборе кнопки. В качестве значения может использоваться значение перечисления КодВозвратаДиалога, а также другие значения;  - Представление – задает текст кнопки. Если представление не задано и в качестве значения используется значение перечисления КодВозвратаДиалога, то используется стандартное представление;  - Картинка – не используется (должна быть пустой);  - Пометка – не используется (должна быть пустой). При использовании типа СписокЗначений список не должен быть пустым.',
                        Таймаут: 'Интервал времени в секундах, в течение которого система будет ожидать ответа пользователя. По истечении интервала окно вопроса будет закрыто. Если параметр не указан, то время ожидания не ограничено. Если параметр имеет отрицательное значение, будет сгенерировано исключение. Значение по умолчанию: 0.',
                        КнопкаПоУмолчанию: 'Определяет кнопку по умолчанию по типу кнопки или по связанному с ней значению.',
                        Заголовок: 'Содержит заголовок окна вопроса.',
                        КнопкаТаймаута: 'Определяет кнопку (по типу кнопки или по связанному с ней значению), на которой отображается количество секунд, оставшихся до истечения таймаута.'
                    }
                }
            }
        },
        "ПоказатьЗначение": {
            name: 'ПоказатьЗначение',
            name_en: 'ShowValue',
            description: 'Показывает в диалоге переданное значение, при этом не ожидается его закрытие. Вид диалога зависит от типа переданного значения.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещенияОЗавершении?: ОписаниеОповещения, Значение: Произвольный)',
                    Параметры: {
                        ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после закрытия окна ввода значения с параметром <ДополнительныеПараметры>, который содержит значение, указанное при создании объекта ОписаниеОповещения. Если параметр не указан, то по завершении никакая процедура вызвана не будет.',
                        Значение: 'Значение любого типа, который может быть показан системой в диалоге.'
                    }
                }
            }
        },
        "ПоказатьИнформациюОбОшибке": {
            name: 'ПоказатьИнформациюОбОшибке',
            name_en: 'ShowErrorInfo',
            description: 'Предназначен для показа информации об ошибке пользователю в стандартном диалоге платформы 1С:Предприятие.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИнформацияОбОшибке: ИнформацияОбОшибке)',
                    Параметры: {
                        ИнформацияОбОшибке: 'Информация об ошибке, которую надо показать пользователю.'
                    }
                }
            }
        },
        "ПоказатьНаКарте": {
            name: 'ПоказатьНаКарте',
            name_en: 'ShowOnMap',
            description: 'Отображает на карте переданные координаты.',
            signature: {
                default: {
                    СтрокаПараметров: '(Местоположение: ГеографическиеКоординаты)',
                    Параметры: {
                        Местоположение: 'Местоположение, которое нужно показать. Для отображения нескольких точек используется СписокЗначений, в котором значение элемента списка - это географическая координата, а представление - текст, отображаемый в точке (на булавке).'
                    }
                }
            }
        },
        "ПоказатьОповещениеПользователя": {
            name: 'ПоказатьОповещениеПользователя',
            name_en: 'ShowUserNotification',
            description: 'Показывает окно, по умолчанию располагающееся внизу экрана, которое постепенно затухает и исчезает с экрана.  В окне может располагаться ссылка, выбор которой вызывает определенные для ссылки действия (например, открытие формы).',
            signature: {
                default: {
                    СтрокаПараметров: '(Текст?: Строка, НавигационнаяСсылка?: Строка, Пояснение?: Строка, Картинка?: Картинка)',
                    Параметры: {
                        Текст: 'Текст оповещения.',
                        НавигационнаяСсылка: 'Навигационная ссылка. Показывается как гиперссылка. При нажатии на нее происходит переход по указанной ссылке.',
                        Пояснение: 'Пояснение оповещения.',
                        Картинка: 'Картинка, которая будет показана в оповещении.'
                    }
                }
            }
        },
        "ПоказатьПредупреждение": {
            name: 'ПоказатьПредупреждение',
            name_en: 'ShowMessageBox',
            description: 'Выводит на экран окно предупреждения, но не ожидает его закрытия.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОписаниеОповещенияОЗавершении?: ОписаниеОповещения, ТекстПредупреждения: Строка, Таймаут?: Число, Заголовок?: Строка)',
                    Параметры: {
                        ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после закрытия окна предупреждения со следующими параметрами:   - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. Если параметр не указан, то по завершении никакая процедура вызвана не будет.',
                        ТекстПредупреждения: 'Текст предупреждения.',
                        Таймаут: 'Интервал времени в секундах, в течение которого система будет ожидать ответа пользователя. По истечении интервала окно предупреждения будет закрыто. Если параметр не указан, то время ожидания не ограничено. Значение по умолчанию: 0.',
                        Заголовок: 'Содержит заголовок окна предупреждения.'
                    }
                }
            }
        },
        "ПолноеИмяПользователя": {
            name: 'ПолноеИмяПользователя',
            name_en: 'UserFullName',
            description: 'Получает полное имя пользователя, указанного при запуске программы.',
            returns: 'Тип: Строка. Полное имя пользователя.'
        },
        "ПолучитьCOMОбъект": {
            name: 'ПолучитьCOMОбъект',
            name_en: 'GetCOMObject',
            description: 'Основное применение функции ПолучитьCOMОбъект - это получение COM-объекта, соответствующего файлу. Для этого следует в качестве первого параметра функции задать имя файла, который будет определять COM-объект. Например, фрагмент кода: Таб = ПолучитьCOMОбъект("C:\\DATA\\DATA.XLS"); создает объект Excel.Application и открывает с его помощью файл документа "C:\\DATA\\DATA.XLS". Если указанный файл во время выполнения данного фрагмента уже открыт с помощью MS Excel, то будет получена ссылка на уже существующий объект. Для файлов, указываемых в качестве параметра данной функции, должно быть установлено соответствие расширения имени файла и класса COM. Если в качестве имени файла указана пустая строка, то будет создан новый экземпляр объекта. В этом случае необходимо указать имя класса COM.  Например, фрагмент кода: Таб = ПолучитьCOMОбъект("", "Excel.Application"); создает новый документ Excel. В дальнейшем этот документ может быть программно заполнен и сохранен в файл. Если первый параметр функции пропущен, то будет произведена попытка получить активный объект указанного типа. Если активного объекта указанного типа в настоящий момент не существует, то будет вызвано исключение. Например, в результате выполнения оператора: П = ПолучитьCOMОбъект( , "Excel.Application"); Переменная П получит значение типа COMОбъект, соответствующее активному приложению MS Excel, если таковое имелось, или будет вызвано исключение, если активных экземпляров MS Excel не было.',
            returns: 'Тип: COMОбъект. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяФайла?: Строка, ИмяКлассаCOM?: Строка): COMОбъект',
                    Параметры: {
                        ИмяФайла: 'Имя файла, включающее полный путь.',
                        ИмяКлассаCOM: 'Имя класса COM, экземпляр которого должен быть создан или получен. Если расширение имени файла, указанное в первом параметре, полностью идентифицирует класс объекта, то параметр может быть опущен.'
                    }
                }
            }
        },
        "ПолучитьXMLТип": {
            name: 'ПолучитьXMLТип',
            name_en: 'GetXMLType',
            description: 'Получает тип данных XML, который может быть прочитан в настоящий момент из объекта типа ЧтениеXML. При получении типа данных XML может быть произведена операция чтения из объекта ЧтениеXML. В случае, если тип данных XML определить невозможно, возвращается значение Неопределено. Тип данных XML определяется по следующему алгоритму: 1) Пропускаются пробельные символы, если текущая позиция объекта ЧтениеXML соответствует типу узла "Текст" и значение узла полностью состоит из пробельных символов. 2) Если тип текущего узла не соответствует значению НачалоЭлемента, то считается, что тип не определен. 3) Определяется наличие атрибута "nil" из пространства имен "http://www.w3.org/2001/XMLSchema-instance". Если атрибут существует и его значение равно "true", то считается, что тип не определен. 4) Определяется наличие атрибута "type" из пространства имен "http://www.w3.org/2001/XMLSchema-instance". Если атрибут существует, то производится анализ значения атрибута:   - значение разделяется на префикс пространства имен и локальное имя;  - по префиксу пространства имен в объекте ЧтениеXML определяется URI пространства имен, соответствующее данному префиксу (если соответствующего URI пространства имен не обнаружено - считается, что тип не определен);  - по полученному локальному имени и URI пространства имен создается значение типа данных XML. 5) Если атрибут "type" не существует, производится анализ имени элемента. Если локальное имя элемента совпадает с одним из имен типов пространства имен "http://www.w3.org/2001/XMLSchema" и пространство имен элемента не определено (пустая строка), то считается, что тип принадлежит пространству имен "http://www.w3.org/2001/XMLSchema".',
            returns: 'Тип: ТипДанныхXML, Неопределено. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ЧтениеXML: ЧтениеXML): ТипДанныхXML',
                    Параметры: {
                        ЧтениеXML: 'Объект, из которого выполняется чтение.'
                    }
                }
            }
        },
        "ПолучитьАдресПоМестоположению": {
            name: 'ПолучитьАдресПоМестоположению',
            name_en: 'GetAddressByLocation',
            description: 'Получает адрес по географическим координатам.',
            returns: 'Тип: ДанныеАдреса, Неопределено. Адрес местоположения. Его состав может различаться в разных государствах. Для России определены поля:   - Страна (Country);  - Регион (State);  - Город (City);  - Улица (Street);  - Дом (House);  - Индекс (ZipCode). Неопределено - адрес не получен.',
            signature: {
                default: {
                    СтрокаПараметров: '(Местоположение: ГеографическиеКоординаты): ДанныеАдреса',
                    Параметры: {
                        Местоположение: 'Местоположение, адрес которого нужно получить.'
                    }
                }
            }
        },
        "ПолучитьБлокировкуСеансов": {
            name: 'ПолучитьБлокировкуСеансов',
            name_en: 'GetSessionsLock',
            description: 'Получает объект, описывающий блокировку сеансов.',
            returns: 'Тип: БлокировкаСеансов. '
        },
        "ПолучитьВремяЗавершенияСпящегоСеанса": {
            name: 'ПолучитьВремяЗавершенияСпящегоСеанса',
            name_en: 'GetHibernateSessionTerminateTime',
            description: 'Интервал времени в секундах, по истечении которого спящий сеанс завершается.',
            returns: 'Тип: Число. '
        },
        "ПолучитьВремяЗасыпанияПассивногоСеанса": {
            name: 'ПолучитьВремяЗасыпанияПассивногоСеанса',
            name_en: 'GetPassiveSessionHibernateTime',
            description: 'Получить интервал времени в секундах, по завершении которого неактивный сеанс переводится в спящий режим.',
            returns: 'Тип: Число. '
        },
        "ПолучитьВремяОжиданияБлокировкиДанных": {
            name: 'ПолучитьВремяОжиданияБлокировкиДанных',
            name_en: 'GetLockWaitTime',
            description: 'Получает заданное в информационной базе время ожидания блокировки данных (в секундах).',
            returns: 'Тип: Число. '
        },
        "ПолучитьДанныеВыбора": {
            name: 'ПолучитьДанныеВыбора',
            name_en: 'GetChoiceData',
            description: 'Формирует список значений данных выбора при вводе по строке, автоподборе текста и быстром выборе.',
            returns: 'Тип: СписокЗначений. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ТипЗначения: Тип, Параметры: Структура): СписокЗначений',
                    Параметры: {
                        ТипЗначения: 'Объект метаданных, для которого выполняется формирование типа значений. Указывается в виде типа. Например: СправочникСсылка.Товары.',
                        Параметры: 'Содержит параметры для формирования списка значений. Структура, в которой обязательно должны содержаться следующие ключи:   - Отбор (Filter) - отбор, используемый для поиска данных, тип Структура; значения элементов отбора могут иметь тип Массив, СписокЗначений, ФиксированныйМассив или иной тип, не являющийся коллекцией; для типов Массив, СписокЗначений, ФиксированныйМассив сравнение выполняется с видом сравнения ВСписке, иначе вид сравнения Равно;  - СтрокаПоиска (SearchString) - содержит строку, используемую при поиске данных; для быстрого выбора содержит значение Неопределено;  - ВыборГруппИЭлементов (ChoiceFoldersAndItems) - указывается использование групп и элементов; тип ИспользованиеГруппИЭлементов; параметр может отсутствовать;  - СпособПоискаСтроки (StringSearchMode) - указывается способ поиска при вводе по строке; тип СпособПоискаСтрокиПриВводеПоСтроке; параметр может отсутствовать;  - ПолнотекстовыйПоиск (FullTextSearch) - указывается необходимость использования полнотекстового поиска при вводе по строке; тип - ПолнотекстовыйПоискПриВводеПоСтроке; параметр может отсутствовать.'
                    }
                }
            }
        },
        "ПолучитьДополнительныйПараметрКлиентаЛицензирования": {
            name: 'ПолучитьДополнительныйПараметрКлиентаЛицензирования',
            name_en: 'GetLicensingClientAdditionalParameter',
            description: 'Получает дополнительный параметр, используемый для обслуживания информационной базы.',
            returns: 'Тип: Строка. Значение дополнительного параметра.'
        },
        "ПолучитьДопустимыеКодыЛокализации": {
            name: 'ПолучитьДопустимыеКодыЛокализации',
            name_en: 'GetAvailableLocaleCodes',
            description: 'Получает массив допустимых кодов локализации.',
            returns: 'Тип: Массив. '
        },
        "ПолучитьДопустимыеЧасовыеПояса": {
            name: 'ПолучитьДопустимыеЧасовыеПояса',
            name_en: 'GetAvailableTimeZones',
            description: 'Получает массив строк допустимых идентификаторов часовых поясов.',
            returns: 'Тип: Массив. Массив содержит строки идентификаторов.  Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59.'
        },
        "ПолучитьЗаголовокКлиентскогоПриложения": {
            name: 'ПолучитьЗаголовокКлиентскогоПриложения',
            name_en: 'GetClientApplicationCaption',
            description: 'Получает заголовок приложения, который используется при формировании заголовков окон.',
            returns: 'Тип: Строка. '
        },
        "ПолучитьЗаголовокСистемы": {
            name: 'ПолучитьЗаголовокСистемы',
            name_en: 'GetCaption',
            description: 'Получает текст заголовка главного окна программы.',
            returns: 'Тип: Строка. Заголовок главного окна программы.'
        },
        "ПолучитьЗначенияОтбораЖурналаРегистрации": {
            name: 'ПолучитьЗначенияОтбораЖурналаРегистрации',
            name_en: 'GetEventLogFilterValues',
            description: 'Позволяет получить наборы допустимых значений параметров отбора журнала регистрации: приложение, пользователь, компьютер, событие, метаданные, рабочий сервер, основной IP-порт, вспомогательный IP-порт, данные сеанса. Эти значения можно использовать для формирования параметра Фильтр метода ВыгрузитьЖурналРегистрации.',
            returns: 'Тип: Структура. Значения отбора журнала регистрации. Ключ элемента структуры определяет имя параметра, а значение элемента - текущее значение параметра:    - ИмяПриложения (ApplicationName) - Соответствие, в котором ключ - идентификатор приложения, значение - представление приложения;  - Пользователь (User) - Соответствие, в котором ключ - уникальный идентификатор пользователя информационной базы, значение - имя пользователя информационной базы;  - Компьютер (Computer) - Массив строк;  - Событие (Event) - Соответствие, в котором ключ - идентификатор события, значение - представление события;  - Метаданные (Metadata) - Соответствие, в котором ключ - имя объекта метаданных, значение - представление объекта метаданных;  - РабочийСервер (ServerName) - Массив строк;  - ОсновнойIPПорт (Port) - номер основного IP-порт рабочего процесса. Массив чисел;  - ВспомогательныйIPПорт (SyncPort) - номер вспомогательного IP-порта рабочего процесса. Массив чисел;  - РазделениеДанныхСеанса (SessionDataSeparation) - общие реквизиты, разделяющие данные. Соответствие, в котором: ключ – имя общего реквизита; значение – представление общего реквизита;  - РазделениеДанныхСеансаЗначения (SessionDataSeparationValues) – содержащий Соответствие, в котором:   - ключ – имя общего реквизита;  - значение – Соответствие, в котором:   - ключ - значение общего реквизита;  - значение - представление значения общего реквизита.',
            signature: {
                default: {
                    СтрокаПараметров: '(Колонки?: Строка, ИмяВходногоФайла?: Строка): Структура',
                    Параметры: {
                        Колонки: 'Для того чтобы получить наборы допустимых значений определенных колонок журнала регистрации, необходимо в параметре перечислить их имена, при этом необходимо имя каждой колонки отделять запятой. Доступны следующие колонки:   - Пользователь (User);  - Компьютер (Computer);  - ИмяПриложения (ApplicationName);  - Событие (Event);  - Метаданные (Metadata);  - РабочийСервер (ServerName);  - ОсновнойIPПорт (Port);  - ВспомогательныйIPПорт (SyncPort);  - РазделениеДанныхСеанса (SessionDataSeparation);  - РазделениеДанныхСеанса.<имя общего реквизита> (SessionDataSeparation.<имя общего реквизита>) - в одном вызове метода может быть указано несколько общих реквизитов, входящих в данные сеанса. Используется для получения наборов допустимых значений общих реквизитов, входящих в данные сеанса. Наборы значений возвращаются в элементе РазделениеДанныхСеансаЗначения (SessionDataSeparationValues). Если не задан, то наборы допустимых значений будут получены для всех доступных колонок.',
                        ИмяВходногоФайла: 'Имя файла журнала регистрации.'
                    }
                }
            }
        },
        "ПолучитьИдентификаторКонфигурации": {
            name: 'ПолучитьИдентификаторКонфигурации',
            name_en: 'GetConfigurationID',
            description: 'Возвращает идентификатор конфигурации, с которой работает информационная база. Идентификатор составляется путем анализа и учета метаданных конфигурации.',
            returns: 'Тип: Строка. Строка, содержащая зашифрованный и закодированный в Base64 идентификатор конфигурации.'
        },
        "ПолучитьИзВременногоХранилища": {
            name: 'ПолучитьИзВременногоХранилища',
            name_en: 'GetFromTempStorage',
            description: 'Получает значение из временного хранилища.',
            returns: 'Тип: Произвольный. Значение, ранее помещенное с помощью метода ПоместитьВоВременноеХранилище.',
            signature: {
                default: {
                    СтрокаПараметров: '(Адрес: Строка): Произвольный',
                    Параметры: {
                        Адрес: 'Адрес, указывающий на значение во временном хранилище.'
                    }
                }
            }
        },
        "ПолучитьИмяВременногоФайла": {
            name: 'ПолучитьИмяВременногоФайла',
            name_en: 'GetTempFileName',
            description: 'Для записи данных во временный файл необходимо сначала сформировать имя такого файла. При этом во избежание случайных потерь имеющихся файлов требуется получить уникальное имя. Данный метод предназначен для получения такого имени. При выполнении метода файл не создается.  Если файл не будет удален средствами встроенного языка, он будет удален платформой при следующем запуске.',
            returns: 'Тип: Строка. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Расширение?: Строка): Строка',
                    Параметры: {
                        Расширение: 'Указывает желаемое расширение имени временного файла. Если параметр не задан, то создается временный файл с расширением по умолчанию (.tmp). Желаемое расширение задается строкой, которая и будет использована в качестве расширения. Указание точки в начале расширения не обязательно. Например, при указании ".xml" или "xml" результат будет одинаковый.'
                    }
                }
            }
        },
        "ПолучитьИмяКлиентаЛицензирования": {
            name: 'ПолучитьИмяКлиентаЛицензирования',
            name_en: 'GetLicensingClientName',
            description: 'Возвращает имя клиента лицензирования из информационной базы.',
            returns: 'Тип: Строка. Имя клиента лицензирования.'
        },
        "ПолучитьИнформациюЭкрановКлиента": {
            name: 'ПолучитьИнформациюЭкрановКлиента',
            name_en: 'GetClientDisplaysInformation',
            description: 'Получает информацию об экранах подключенных устройств.  Информация предоставляется в виде фиксированного массива объектов ИнформацияЭкранаКлиента. Первый элемент массива описывает основной экран.',
            returns: 'Тип: ФиксированныйМассив. Неопределено, если сеанс не связан с клиентом (фоновое задание, внешнее соединение).'
        },
        "ПолучитьИспользованиеЖурналаРегистрации": {
            name: 'ПолучитьИспользованиеЖурналаРегистрации',
            name_en: 'GetEventLogUsing',
            description: 'Проверяет, осуществляется ли в журнале регистрация события заданного уровня важности.',
            returns: 'Тип: Массив. Массив состоит из значений типа УровеньЖурналаРегистрации. для которых включена регистрация событий в журнале. Если регистрация отключена, возвращается пустой массив.'
        },
        "ПолучитьИспользованиеСобытияЖурналаРегистрации": {
            name: 'ПолучитьИспользованиеСобытияЖурналаРегистрации',
            name_en: 'GetEventLogEventUse',
            description: 'Получает текущее состояние управления регистрацией указанного события в журнале регистрации.',
            returns: 'Тип: ИспользованиеСобытияЖурналаРегистрации. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяСобытия: Строка): ИспользованиеСобытияЖурналаРегистрации',
                    Параметры: {
                        ИмяСобытия: 'Имя регистрируемого события. Допустимые системные имена событий:    - _$Access$_.Access - Доступ. Доступ; Предназначено для регистрации фактов успешного доступа пользователей системы к тем или иным данным. Поле журнала регистрации Данные (Структура) в этом случае имеет следующий состав:   - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались. Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Access$_.AccessDenied - Доступ. Отказ в доступе; Предназначено для регистрации фактов отказа в доступе к тем или иным данным пользователям системы. Поле журнала регистрации Данные (Структура). имеет следующий состав:    - Для ошибки доступа к объекту (не ограничение доступа к данным):    - Право (Right) - имя нарушенного права;  - Для ошибки ограничения доступа к данным:    - Действие (Action) - Действие, которое выполнялось с данными, для объектных таблиц: Чтение (Read), Добавление (Insert), Изменение (Update), Удаление (Delete); для не объектных таблиц, все что не Чтение, то Изменение;  - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались.Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Data$_.Delete - Данные. Удаление;  - _$Data$_.DeletePredefinedData - Данные. Удаление предопределенных данных;  - _$Data$_.New - Данные. Добавление;  - _$Data$_.NewPredefinedData - Данные. Добавление предопределенных данных;  - _$Data$_.Post - Данные. Проведение;  - _$Data$_.PredefinedDataInitialization - Данные. Инициализация предопределенных данных;  - _$Data$_.PredefinedDataInitializationDataNotFound - Данные. Инициализация предопределенных данных, данные не найдены;  - _$Data$_.SetPredefinedDataInitialization - Данные. Установка инициализации предопределенных данных;  - _$Data$_.SetStandardODataInterfaceContent - Данные. Изменение состава стандартного интерфейса OData;  - _$Data$_.TotalsMaxPeriodUpdate - Данные. Изменение максимального периода рассчитанных итогов;  - _$Data$_.TotalsMinPeriodUpdate - Данные. Изменение минимального периода рассчитанных итогов;  - _$Data$_.Unpost - Данные. Отмена проведения;  - _$Data$_.Update - Данные. Изменение;  - _$Data$_.UpdatePredefinedData - Данные. Изменение предопределенных данных;  - _$InfoBase$_.ConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.ConfigUpdate - Информационная база. Изменение конфигурации;  - _$InfoBase$_.DBConfigBackgroundUpdateCancel - Информационная база. Отмена фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateFinish - Информационная база. Завершение фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateResume - Информационная база. Продолжение (после приостановки) процесса фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateStart - Информационная база. Запуск фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateSuspend - Информационная база. Приостановка (пауза) процесса фонового обновления;  - _$InfoBase$_.DBConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации базы данных; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.DBConfigUpdate - Информационная база. Изменение конфигурации базы данных;  - _$InfoBase$_.EraseData - Информационная база. Удаление данных информационной баз;  - _$InfoBase$_.EventLogSettingsUpdate - Информационная база. Изменение параметров журнала регистрации;  - _$InfoBase$_.InfoBaseAdmParamsUpdate - Информационная база. Изменение параметров информационной базы;  - _$InfoBase$_.MasterNodeUpdate - Информационная база. Изменение главного узла;  - _$InfoBase$_.PredefinedDataUpdate - Информационная база. Обновление предопределенных данных;  - _$InfoBase$_.RegionalSettingsUpdate - Информационная база. Изменение региональных установок;  - _$InfoBase$_.SetPredefinedDataUpdate - Информационная база. Установить обновление предопределенных данных;  - _$InfoBase$_.TARImportant - Тестирование и исправление. Ошибка;  - _$InfoBase$_.TARInfo - Тестирование и исправление. Сообщение;  - _$InfoBase$_.TARMess - Тестирование и исправление. Предупреждение;  - _$Job$_.Cancel - Фоновое задание. Отмена;  - _$Job$_.Fail - Фоновое задание. Ошибка выполнения;  - _$Job$_.Start - Фоновое задание. Запуск;  - _$Job$_.Succeed - Фоновое задание. Успешное завершение;  - _$Job$_.Terminate - Фоновое задание. Принудительное завершение;  - _$OpenIDProvider$_.NegativeAssertion - Провайдер OpenID. Отклонено; записывается базой, выступающей в роли провайдера OpenID, при отправке отрицательного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию.  - _$OpenIDProvider$_.PositiveAssertion - Провайдер OpenID. Подтверждено; записывается базой, выступающей в роли провайдера OpenID, при отправке положительного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя;  - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию;  - _$PerformError$_ - Ошибка выполнения;  - _$Session$_.Authentication - Сеанс. Аутентификация; выполняется только при удачной аутентификации. Для события Аутентификация записываются поля Пользователь и ИмяПользователя. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле Данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID;  - ИдентификаторПользователяПровайдераOpenID (OpenIDProviderUserID) - идентификатор пользователя на провайдере.  - _$Session$_.AuthenticationError - Сеанс. Ошибка аутентификации; выполняется только при ошибке аутентификации. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID  - _$Session$_.ConfigExtensionApplyError - Сеанс. Ошибка применения расширения конфигурации; записывается, если в процессе применений расширения произошла ошибка. Совпадает с текстом выводимого сообщения при невозможности подключить расширение. Поле Данные заполняется структурой со следующим составом свойств:    - Имя (Name) - Строка. Имя расширения  - _$Session$_.Finish - Сеанс. Завершение;  - _$Session$_.Start - Сеанс. Начало;  - _$Transaction$_.Begin - Транзакция. Начало;  - _$Transaction$_.Commit - Транзакция. Фиксация;  - _$Transaction$_.Rollback - Транзакция. Отмена;  - _$User$_.Delete - Пользователи. Удаление; записываются как при редактировании списка пользователей в Конфигураторе, так и при удалении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя  - _$User$_.New - Пользователи. Добавление; записываются как при создани пользователей в Конфигураторе, так и методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык.  - _$User$_.Update - Пользователи. Изменение; записываются как при редактировании списка пользователей в Конфигураторе, так и при изменении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык;'
                    }
                }
            }
        },
        "ПолучитьКраткийЗаголовокПриложения": {
            name: 'ПолучитьКраткийЗаголовокПриложения',
            name_en: 'GetShortApplicationCaption',
            description: 'Получает краткий заголовок приложения, размещенный в заголовке окна приложения перед текстом системного заголовка.',
            returns: 'Тип: Строка. '
        },
        "ПолучитьМакетОформления": {
            name: 'ПолучитьМакетОформления',
            name_en: 'GetAppearanceTemplate',
            description: 'Получает макет оформления.',
            returns: 'Тип: ТабличныйДокумент. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Оформление: СтандартноеОформление): ТабличныйДокумент',
                    Параметры: {
                        Оформление: 'Содержит стандартный вариант оформления.'
                    }
                }
            }
        },
        "ПолучитьМаскуВсеФайлы": {
            name: 'ПолучитьМаскуВсеФайлы',
            name_en: 'GetAllFilesMask',
            description: 'Получает файловую маску, принятую для выбора всех файлов в операционной системе, в контексте которой выполняется вызов.',
            returns: 'Тип: Строка. Маска возвращается в виде строки. Например: "*.*".'
        },
        "ПолучитьМаскуВсеФайлыКлиента": {
            name: 'ПолучитьМаскуВсеФайлыКлиента',
            name_en: 'GetClientAllFilesMask',
            description: 'Получает файловую маску, принятую для выбора всех файлов в операционной системе, в которой выполняется клиентское приложение.',
            returns: 'Тип: Строка. Маска возвращается в виде строки. Например: "*.*".'
        },
        "ПолучитьМаскуВсеФайлыСервера": {
            name: 'ПолучитьМаскуВсеФайлыСервера',
            name_en: 'GetServerAllFilesMask',
            description: 'Получает файловую маску, принятую для выбора всех файлов в операционной системе, в которой работает сервер 1С:Предприятия, обрабатывающий вызов.',
            returns: 'Тип: Строка. Маска возвращается в виде строки. Например: "*.*".'
        },
        "ПолучитьМестоположениеПоАдресу": {
            name: 'ПолучитьМестоположениеПоАдресу',
            name_en: 'GetLocationByAddress',
            description: 'Получает географические координаты по адресу.',
            returns: 'Тип: ГеографическиеКоординаты, Неопределено. Неопределено - данные не получены.',
            signature: {
                default: {
                    СтрокаПараметров: '(Адрес?: ДанныеАдреса): ГеографическиеКоординаты',
                    Параметры: {
                        Адрес: 'Адрес местоположения. Состав адреса может различаться в разных государствах. Для России определены поля:   - Страна (Country);  - Регион (State);  - Город (City);  - Улица (Street);  - Дом (House);  - Индекс (ZipCode).'
                    }
                }
            }
        },
        "ПолучитьМинимальнуюДлинуПаролейПользователей": {
            name: 'ПолучитьМинимальнуюДлинуПаролейПользователей',
            name_en: 'GetUserPasswordMinLength',
            description: 'Получает ограничение на минимальную длину паролей, которое установлено для пользователей информационной базы.',
            returns: 'Тип: Число. '
        },
        "ПолучитьНавигационнуюСсылку": {
            name: 'ПолучитьНавигационнуюСсылку',
            name_en: 'GetURL',
            description: 'Получает текст ссылки на объект информационной базы или его реквизит в формате 1С:Предприятия. В первом случае принимает в качестве параметра ссылку на объект (это может быть как ссылка, так и ключ записи регистра сведений). Объектом могут быть: справочник, документ, план счетов, план видов характеристик, план видов расчета, план обмена, ключ записи регистра сведений, бизнес процесс, задача. Во втором в качестве параметров принимает ключ объекта (это может быть как ссылка, так и ключ записи регистра сведений) и имя реквизита (ресурса). Если нужно получить ссылку на реквизит табличной части, перед именем реквизита необходимо добавить имя табличной части и точку ".".',
            returns: 'Тип: Строка. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Объект: Произвольный, ИмяРеквизита?: Строка, Индекс?: Число): Строка',
                    Параметры: {
                        Объект: 'Ссылка на объект. Если в данном параметре передано значение, от которого нельзя получить навигационную ссылку, то:   - Если РежимСовместимости отключен, будет сгенерировано исключение о неверном значении параметра,  - Если РежимСовместимости установлен, метод вернет пустую строку.',
                        ИмяРеквизита: 'Имя реквизита объекта или ресурса Регистра сведений, для которого нужно выяснить ссылку. Если это реквизит табличной части объекта, то параметр указывается как <имя табличной части>.<имя реквизита>, то есть с разделителем "." (точка).',
                        Индекс: 'Индекс строки в табличной части, в том случае если объект является реквизитом табличной части. Первая строка имеет индекс, равный 0.'
                    }
                }
            }
        },
        "ПолучитьНавигационнуюСсылкуИнформационнойБазы": {
            name: 'ПолучитьНавигационнуюСсылкуИнформационнойБазы',
            name_en: 'GetInfoBaseURL',
            description: 'Получает навигационную ссылку информационной базы. Форматы ссылки в зависимости от вида информационной базы:   - Файловая:   - Если путь к файловой версии является UNC путем, то формат строка имеет следующий вид e1c://file/UNC путь;  - Если путь к файловой версии содержит том, то формат строка имеет следующий вид - e1c://filev/символ тома/остальной путь;   - Клиент-сервер:   - e1c://server/имя сервера/имя ИБ.   - Веб-сервер:   - http://путь;  - https://путь. Эта ссылка может использоваться для создания абсолютной ссылки из относительной. Внимание! На сервере данный метод поддерживается только в контексте клиентского вызова. В фоновых и регламентных заданиях возвращает пустое значение.',
            returns: 'Тип: Строка. '
        },
        "ПолучитьОбновлениеКонфигурацииБазыДанных": {
            name: 'ПолучитьОбновлениеКонфигурацииБазыДанных',
            name_en: 'GetDataBaseConfigurationUpdate',
            description: 'Получает информацию о состоянии фонового обновления конфигурации базы данных.',
            returns: 'Тип: ОбновлениеКонфигурацииБазыДанных. '
        },
        "ПолучитьОбновлениеПредопределенныхДанныхИнформационнойБазы": {
            name: 'ПолучитьОбновлениеПредопределенныхДанныхИнформационнойБазы',
            name_en: 'GetInfoBasePredefinedData',
            description: 'Возвращает текущее установленное в информационной базе значение режима обновления предопределенных данных.',
            returns: 'Тип: ОбновлениеПредопределенныхДанных. '
        },
        "ПолучитьОбщийМакет": {
            name: 'ПолучитьОбщийМакет',
            name_en: 'GetCommonTemplate',
            description: 'Получает один из общих макетов конфигурации.',
            returns: 'Тип: ТабличныйДокумент, ТекстовыйДокумент, ДвоичныеДанные, ОболочкаActiveDocument, ОболочкаHTMLДокумента, ПолеГеографическойСхемы, ГрафическаяСхема, СхемаКомпоновкиДанных, МакетОформленияКомпоновкиДанных. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ОбщийМакет: Строка): ТабличныйДокумент',
                    Параметры: {
                        ОбщийМакет: 'Имя общего макета, как оно задано в конфигураторе, или объект описания метаданного общего макета.'
                    }
                }
            }
        },
        "ПолучитьОбщуюФорму": {
            name: 'ПолучитьОбщуюФорму',
            name_en: 'GetCommonForm',
            description: 'Получает общую форму.',
            returns: 'Тип: Форма. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Форма?: Строка, Владелец?: Форма, КлючУникальности?: Произвольный): Форма',
                    Параметры: {
                        Форма: 'Имя формы, как оно задано в конфигураторе, или объект описания метаданного требуемой формы. Если параметр не указан, то используется основная форма, заданная в конфигураторе.',
                        Владелец: 'Объект, который будет являться владельцем открываемой формы.',
                        КлючУникальности: 'В данном параметре может быть задан некоторый ключ, значение которого будет использоваться для поиска уже открытых форм.  При поиске учитываются значения свойств открытых форм соответствующим значениям параметров метода. Если найдена открытая форма (по совпадению всех параметров), то она будет возвращена вместо новой формы.  Если из некой формы (один и тот же владелец) требуется открывать новые экземпляры другой формы, то при каждом вызове метода значение данного параметра должно быть уникально (в рамках соответствующих значений свойств открытых форм). Значение параметра присваивается свойству открываемой формы КлючУникальности. Следует учитывать, что при получении формы из "объекта" система получает форму для конкретного экземпляра объекта с учетом совокупности переданных параметров, в то время как для "ссылки" всегда существует только один объект в базе данных и форма получается одна (для одинаковой совокупности параметров).'
                    }
                }
            }
        },
        "ПолучитьОкна": {
            name: 'ПолучитьОкна',
            name_en: 'GetWindows',
            description: 'Получает окна приложения. Порядок элементов в коллекции не определен.',
            returns: 'Тип: ОкнаКлиентскогоПриложения. '
        },
        "ПолучитьОперативнуюОтметкуВремени": {
            name: 'ПолучитьОперативнуюОтметкуВремени',
            name_en: 'GetRealTimeTimestamp',
            description: 'Получает оперативную отметку времени.',
            returns: 'Тип: Дата. Возвращаемое значение соответствует текущей дате, но будет не меньше, чем последняя оперативная отметка времени, полученная каким-либо пользователем в этом сеансе работы. Если значение соответствующее текущему времени, которое уже выдавалось, то возвращается значение на 1 секунду большее. Таким образом, система обеспечивает выдачу для всех пользователей в ходе сеанса оперативной отметки времени в неубывающей последовательности. В варианте "клиент-сервер" - в качестве исходного текущего времени используется время компьютера, на котором работает сервер 1С:Предприятия. В файловом варианте - в качестве исходного текущего времени используется текущее время компьютера пользователя.'
        },
        "ПолучитьОтключениеБезопасногоРежима": {
            name: 'ПолучитьОтключениеБезопасногоРежима',
            name_en: 'GetSafeModeDisabled',
            description: 'Определяет выключение безопасного режима для текущего метода командой на время выполнения обработчиков событий объектов метаданных или вызовом метода УстановитьОтключениеБезопасногоРежима с параметром Истина непосредственно в коде метода.',
            returns: 'Тип: Булево. Истина - для текущего метода безопасный режим выключен;  Ложь - в противном случае.'
        },
        "ПолучитьПараметрыФункциональныхОпцийИнтерфейса": {
            name: 'ПолучитьПараметрыФункциональныхОпцийИнтерфейса',
            name_en: 'GetInterfaceFunctionalOptionParameters',
            description: 'Получает параметры функциональных опций командного интерфейса.',
            returns: 'Тип: Структура. Значения параметров функциональных опций, установленных для командного интерфейса. Ключ элемента структуры определяет имя параметра, а значение элемента - текущее значение параметра.'
        },
        "ПолучитьПолноеИмяПредопределенногоЗначения": {
            name: 'ПолучитьПолноеИмяПредопределенногоЗначения',
            name_en: 'GetPredefinedValueFullName',
            description: 'Выполняет действие, обратное методу ПредопределенноеЗначение. Возвращает полное имя предопределенного значения или значения системного перечисления.',
            returns: 'Тип: Строка. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ПредопределенноеЗначение: Произвольный): Строка',
                    Параметры: {
                        ПредопределенноеЗначение: 'Ссылка на предопределенный элемент из предопределенных данных, прикладных перечислений, точек маршрута бизнес-процессов или значение системного перечисления.'
                    }
                }
            }
        },
        "ПолучитьПредставленияНавигационныхСсылок": {
            name: 'ПолучитьПредставленияНавигационныхСсылок',
            name_en: 'GetURLsPresentations',
            description: 'Получает массив представлений ссылок ПредставлениеНавигационнойСсылки.',
            returns: 'Тип: Массив. Возвращает массив представлений ссылок.  Например, для ссылки, указанной в элементе массива (передаваемом в параметре) строк, возвращает объект ПредставлениеНавигационнойСсылки, у которого свойство Текст="1С:Деньги". Неопределено - объект отсутствует в информационной базе (удален).',
            signature: {
                default: {
                    СтрокаПараметров: '(МассивСсылок: Массив): Массив',
                    Параметры: {
                        МассивСсылок: 'Массив ссылок. Пример ссылки: e1cib/data/Справочник.Товары?ref="ae92005056c0000811dcf650677a5575" указывает на элемент справочника Товары с наименованием "1С:Деньги".'
                    }
                }
            }
        },
        "ПолучитьПроверкуСложностиПаролейПользователей": {
            name: 'ПолучитьПроверкуСложностиПаролейПользователей',
            name_en: 'GetUserPasswordStrengthCheck',
            description: 'Проверяет, установлены ли ограничения на сложность паролей пользователей информационной базы.',
            returns: 'Тип: Булево. Истина - ограничения установлены; Ложь - в противном случае.'
        },
        "ПолучитьРазделительПути": {
            name: 'ПолучитьРазделительПути',
            name_en: 'GetPathSeparator',
            description: 'Получает значение разделителя пути, используемого в операционной системе, в контексте которой выполняется вызов.',
            returns: 'Тип: Строка. '
        },
        "ПолучитьРазделительПутиКлиента": {
            name: 'ПолучитьРазделительПутиКлиента',
            name_en: 'GetClientPathSeparator',
            description: 'Получает значение разделителя пути, используемого в операционной системе, в которой работает клиентское приложение.',
            returns: 'Тип: Строка. '
        },
        "ПолучитьРазделительПутиСервера": {
            name: 'ПолучитьРазделительПутиСервера',
            name_en: 'GetServerPathSeparator',
            description: 'Получает значение разделителя пути, используемого в операционной системе, в которой работает рабочий процесс сервера.',
            returns: 'Тип: Строка. Разделитель пути возвращается в виде строки. Например: "\\".'
        },
        "ПолучитьСеансыИнформационнойБазы": {
            name: 'ПолучитьСеансыИнформационнойБазы',
            name_en: 'GetInfoBaseSessions',
            description: 'Получает список сеансов текущей информационой базы.',
            returns: 'Тип: Массив. Массив объектов СеансИнформационнойБазы. Если пользователь соединения не имеет права АктивныеПользователи (ActiveUsers), то вызывается исключение.'
        },
        "ПолучитьСкоростьКлиентскогоСоединения": {
            name: 'ПолучитьСкоростьКлиентскогоСоединения',
            name_en: 'GetClientConnectionSpeed',
            description: 'Возвращает скорость клиентского соединения.',
            returns: 'Тип: СкоростьКлиентскогоСоединения. '
        },
        "ПолучитьСоединенияИнформационнойБазы": {
            name: 'ПолучитьСоединенияИнформационнойБазы',
            name_en: 'GetInfoBaseConnections',
            description: 'Получает массив описаний соединений с текущей информационной базой.',
            returns: 'Тип: Массив. Массив значений типа СоединениеИнформационнойБазы.  Если пользователь соединения не имеет права АктивныеПользователи (ActiveUsers), то вызывается исключение.'
        },
        "ПолучитьСообщенияПользователю": {
            name: 'ПолучитьСообщенияПользователю',
            name_en: 'GetUserMessages',
            description: 'Получает массив объектов СообщениеПользователю, которые еще не были выведены пользователю. Такое может происходить при работе в регламентных заданиях, на стороне сервера или в Web-сервисах.',
            returns: 'Тип: ФиксированныйМассив. ',
            signature: {
                default: {
                    СтрокаПараметров: '(УдалятьПолученные?: Булево): ФиксированныйМассив',
                    Параметры: {
                        УдалятьПолученные: 'Признак необходимости удаления полученных сообщений из списка. Истина - удалять. Значение по умолчанию: Ложь.'
                    }
                }
            }
        },
        "ПолучитьСоответствиеОбъектаИФормы": {
            name: 'ПолучитьСоответствиеОбъектаИФормы',
            name_en: 'GetObjectAndFormConformity',
            description: 'Получает информацию об идентификаторе формы и имени атрибута формы, связанного с передаваемым в качестве аргумента функции объектом.',
            returns: 'Тип: Структура. Содержит элементы с именами ключей "ИдентификаторФормы" ("FormID"), "ИмяРеквизита" ("AttributeName").',
            signature: {
                default: {
                    СтрокаПараметров: '(Объект: СправочникОбъект.<Имя справочника>): Структура',
                    Параметры: {
                        Объект: 'Прикладной объект, преобразованный из универсального объекта в значение, для которого необходимо получить соответствие с именем реквизита формы.'
                    }
                }
            }
        },
        "ПолучитьСоставСтандартногоИнтерфейсаOData": {
            name: 'ПолучитьСоставСтандартногоИнтерфейсаOData',
            name_en: 'GetStandardODataInterfaceContent',
            description: 'Возвращает массив объектов метаданных, включенных в стандартный OData API. Объекты, доступные для включения в стандартный OData API:   - Справочник.ИмяСправочника  - Документ.ИмяДокумента  - ПланОбмена.ИмяПланаОбмена  - ПланСчетов.ИмяПланаСчетов  - ПланВидовРасчета.ИмяПланаВидовРасчета  - ПланВидовХарактеристик.ИмяПланаВидовХарактеристик  - РегистрБухгалтерии.ИмяРегистраБухгалтерии  - РегистрСведений.ИмяРегистраСведений  - РегистрРасчета.ИмяРегистраРасчета  - РегистрНакопления.ИмяРегистраНакопления  - ЖурналДокументов.ИмяЖурналаДокументов  - Перечисление.ИмяПеречисления  - Задача.ИмяЗадачи  - БизнесПроцесс.ИмяБизнесПроцесса  - Константа.ИмяКонстанты',
            returns: 'Тип: Массив. Массив объектов метаданных.'
        },
        "ПолучитьСтруктуруХраненияБазыДанных": {
            name: 'ПолучитьСтруктуруХраненияБазыДанных',
            name_en: 'GetDBStorageStructureInfo',
            description: 'Получает информацию о структуре таблиц базы данных для переданных в качестве параметра массива имен объектов метаданных или массива объектов метаданных для административных действий с ней. Если параметр не используется, то возвращаемая таблица значений содержит информацию о структуре таблиц базы данных всех объектов метаданных.',
            returns: 'Тип: ТаблицаЗначений. Возвращает таблицу значений с описаниями структуры таблиц, индексов и полей базы данных в терминах модели базы данных 1С:Предприятия или используемой СУБД, в зависимости от значения параметра "Имена базы данных". Если параметр не используется, то возвращаемая таблица значений содержит информацию о структуре таблиц базы данных всех объектов метаданных. Таблица значений включает следующие колонки:   - ИмяТаблицыХранения(StorageTableName) – имя таблицы модели базы данных 1С:Предприятия или базы данных;  - ИмяТаблицы(TableName) – имя таблицы в терминах языка запросов (для тех у кого оно есть);  - Метаданные(Metadata) – полное имя объекта метаданных;  - Назначение(Purpose) – назначение таблицы:   - Основная(Main) – основная;  - Константы(Constants) – константы;  - Итоги(Totals) – итоги;  - Обороты(Turnovers) – обороты;  - ИтогиПоСчетам(TotalsByAccounts) – итоги по счетам;  - ИтогиПоСчетамССубконто(TotalsByAccountsWithExtDim) – итоги по счетам с субконто;  - ИтогиМеждуСчетами(TotalsBetweenAccounts) – итоги между счетами;  - ИтогиСрезПервых(TotalsSliceFirst) – итоги срез первых регистра сведений;  - ИтогиСрезПоследних(TotalsSliceLast) – итоги срез последних регистра сведений;  - ВидыСубконто(ExtDimensionTypes) – виды субконто;  - ЗначенияСубконто(ExtDimensionsValues) – значения субконто;  - ВытесняющиеВидыРасчета(DisplacingCalculationTypes) – вытесняющие виды расчета;  - ПорядокВытеснения(DisplacementOrder) – порядок вытеснения;  - ВедущиеВидыРасчета(LeadingCalculationTypes) – ведущие виды расчета;  - БазовыеВидыРасчета(BaseCalculationTypes) – базовые виды расчета;  - ПериодыДействия(ActionPeriods) – периоды действия;  - ГраницыПоследовательности(SequenceBoundaries) – границы последовательности;  - ТочкиМаршрута(RoutePoints) – точки маршрута бизнес–процесса;  - ТабличнаяЧасть(TabularSection) – табличная часть;  - РегистрацияИзменений(ChangeRecord) – регистрация изменений;  - РегистрацияИзмененийКонстант(ConstantsChangeRecord) – регистрация изменений констант;  - РегистрацияИзмененийКонфигурации(ConfigChangeRecord) – регистрация изменений конфигурации;  - РегистрацияИзмененийВнешнихСвойствКонфигурации(ConfigExtPropertiesChangeRecord) – регистрация изменений внешних свойств конфигурации;  - CтатистикаЗапросов(AccumRgSt) – таблица статистики запросов;  - НовыеОбороты(AccumRgDl) – таблица новых оборотов по регистру;  - БуферОборотов (AccumRgBf) – таблица буфера оборотов по регистру;  - НастройкиРежимаАгрегатовРегистровНакопления(AccumRgAggOpt) – таблица настроек режима агрегатов регистра накопления;  - КодыИзмеренийАгрегатовРегистровНакопления(AccumRgAggDims) – таблица кодов измерений регистра накопления в агрегатах;  - СписокАгрегатовРегистровНакопления (AccumRgAggGrid) – таблица списка агрегатов регистра накопления;  - ХранилищеСистемныхНастроек(SystemSettings) – хранилище системных настроек;  - ХранилищеОбщихНастроек(CommonSettings) – хранилище общих настроек;  - ХранилищеПользовательскихНастроекОтчетов (ReportsSettings) – хранилище пользовательских настроек отчетов;  - ХранилищеВариантовОтчетов(ReportVariants) – хранилище вариантов отчета;  - ХранилищеНастроекДанныхФорм(FrmDtSettings) – хранилище настоек данных форм;  - АгрегатРегистраНакопления(AccumRegAgg) – таблица агрегата регистра накопления;  - ИсторияРаботыПользователей (UsersHistoryStorage) – история работы пользователей;  - Задача(Task) – таблица задач бизнесс процесса;  - НастройкиХраненияИтоговРегистровБухгалтерии(AccountRegistersOptionsTable) – таблица настроек хранения итогов регистров бухгалтерии;  - НастройкиХраненияИтоговРегистровНакопления(AccumulationRegistersOptionsTable) – таблица настроек хранения итогов регистров накопления;  - НастройкиХраненияИтоговРегистраБухгалтерии(AccountRegisterTotalsOptions) – таблица настроек хранения итогов регистра бухгалтерии;  - НастройкиХраненияИтоговРегистраНакопления(AccumulationRegisterOptionsTable) – таблица настроек хранения итогов регистра накопления;  - НастройкиХраненияИтоговРегистраСведений(InformationRegisterTotalsOptions) – таблица настроек использования итогов среза первых и среза последних регистра сведений;  - НастройкиСтандартногоИнтерфейсаOData (StandardODataInterfaceOptions) – таблица настроек стандартного интерфейса OData;  - ИнформацияОРасширенияхКонфигурации(ConfigurationExtensionsInformation) - информация о расширениях конфигурации, записанных в базу данных;  - НастройкиПлановСчетов(ChartsOfAccountsOptions) – настройки планов счетов;  - НастройкиПлановВидовХарактеристик(ChartsOfCharacteristicTypesOptions) – настройки планов видов характеристик;  - НастройкиПлановВидовРасчетов(ChartsOfCalculationTypesOptions) – настройки планов видов расчета;  - НастройкиСпискаАгрегатов(AccumRgAggOptions) – настройки списка агрегатов;  - НастройкиСправочников(ReferenceOptions) – настройки справочников;  - ИнициализированныеПредопределенныеДанныеПланаВидовХарактеристик(InitializedPredefinedDataInChartOfCharacteristicTypes) – таблица проинициализированных предопределенных данных плана видов характеристик;  - ИнициализированныеПредопределенныеДанныеПланаСчетов(InitializedPredefinedDataInChartOfAccounts) – таблица инициализированных предопределенных данных плана счетов;  - ИнициализированныеПредопределенныеДанныеПланаВидовРасчета(InitializedPredefinedDataInChartOfCalculationTypes) – таблица проинициализированных элементов плана расчетов;  - ИнициализированныеПредопределенныеДанныеСправочника(InitializedPredefinedDataInCatalog) – таблица проинициализированных предопределенных данных справочника;  - ИнформацияОРасширенияхКонфигурации/ConfigurationExtensionsInformation - информация о расширениях конфигурации, записанных в базу данных  - Поля(Fields) – таблица значений с полями таблицы базы данных:   - ИмяПоляХранения(StorageFieldName) – имя поля модели базы данных 1С:Предприятия или базы данных;  - ИмяПоля(FieldName) – имя поля в терминах языка запросов (для тех у кого оно есть);  - Метаданные(Metadata) – полное имя объекта метаданных;  - Индексы(Indexes) – таблица значений с индексами таблицы базы данных;   - ИмяИндексаХранения(StorageIndexName) – имя индекса модели базы данных 1С:Предприятия или базы данных;  - Поля(Fields) – таблица значений с полями индекса:   - ИмяПоляХранения(StorageFieldName) – имя поля модели базы данных 1С:Предприятия или базы данных;  - ИмяПоля(FieldName) – имя поля в терминах языка запросов (для тех у кого оно есть);  - Метаданные(Metadata) – полное имя объекта метаданных.  Примечание. Количество и состав таблиц, полей и индексов могут отличаться в зависимости от значения параметра ИменаБазыДанных.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОбъектыМетаданных?: Массив, ИменаБазыДанных?: Булево): ТаблицаЗначений',
                    Параметры: {
                        ОбъектыМетаданных: 'Массив имен объектов метаданных или массив объектов метаданных, для которых требуется получить структуру таблиц базы данных.',
                        ИменаБазыДанных: 'Определяет, в каких терминах выдается информация о структуре хранения. Истина - в терминах СУБД. Ложь - в терминах модели базы данных 1С:Предприятия. Значение по умолчанию: Ложь.'
                    }
                }
            }
        },
        "ПолучитьТекущийСеансИнформационнойБазы": {
            name: 'ПолучитьТекущийСеансИнформационнойБазы',
            name_en: 'GetCurrentInfoBaseSession',
            description: 'Возвращает текущий сеанс информационной базы.',
            returns: 'Тип: СеансИнформационнойБазы. '
        },
        "ПолучитьФайл": {
            name: 'ПолучитьФайл',
            name_en: 'GetFile',
            description: 'Получает файл и сохраняет его в локальную файловую систему пользователя.  По умолчанию метод исполняется в интерактивном режиме, то есть когда будет выдано диалоговое окно, позволяющее указать действие с полученным файлом - запустить его или сохранить по указанному пользователем расположению.',
            returns: 'Тип: Булево, Неопределено. Ложь - пользователь отменил операцию сохранения файлов (в интерактивном режиме). В режиме запуска "Веб-клиент" всегда возвращает Неопределено.',
            signature: {
                default: {
                    СтрокаПараметров: '(Адрес: Строка, ИмяФайла?: Строка, Интерактивно?: Булево): Булево',
                    Параметры: {
                        Адрес: 'Расположение данных во временном хранилище или в информационной базе.',
                        ИмяФайла: 'Путь к файлу, в который будут сохранены данные из информационной базы.  В неинтерактивном режиме необходимо указать значение параметра, иначе будет вызвано исключение.  В интерактивном режиме может быть не задан. Значение по умолчанию: Пустая строка.',
                        Интерактивно: 'Истина - режим, в котором пользователю показывается диалог, в котором он может выбрать действие с получаемым файлом: запустить его или сохранить по выбранному расположению. В веб-клиенте параметр должен быть равен Истина. В противном случае будет сгенерировано сообщение об ошибке. Значение по умолчанию: Истина.'
                    }
                }
            }
        },
        "ПолучитьФайлы": {
            name: 'ПолучитьФайлы',
            name_en: 'GetFiles',
            description: 'Получает набор файлов и сохраняет их в локальную файловую систему пользователя.',
            returns: 'Тип: Булево. Истина - получен хотя бы один файл; Ложь - получение всех файлов отменено пользователем.',
            signature: {
                default: {
                    СтрокаПараметров: '(ПолучаемыеФайлы: Массив, ПолученныеФайлы?: Массив, РасположениеФайлов?: ДиалогВыбораФайла, Интерактивно?: Булево): Булево',
                    Параметры: {
                        ПолучаемыеФайлы: 'Массив объектов типа ОписаниеПередаваемогоФайла. Каждый объект описывает получаемый файл:   - Хранение - расположение данных во временном хранилище или в информационной базе;  - Имя - это локальный путь, по которому должен быть расположен получаемый файл. Это может быть либо полный путь, либо часть пути, которая будет объединена со значением параметра <РасположениеФайлов>. Это также может быть имя файла или имя каталога (каталогов) + имя файла.',
                        ПолученныеФайлы: 'Массив объектов типа ОписаниеПереданногоФайла. Каждый объект описывает получаемый файл:   - Хранение - расположение данных во временном хранилище или в информационной базе;  - Имя - это локальный путь, по которому должен быть расположен получаемый файл.',
                        РасположениеФайлов: 'Определяет общее расположение помещаемых файлов в локальной файловой системе. Может быть задан строкой либо заранее подготовленным диалогом выбора файлов в режиме выбора каталога или сохранения файлов.',
                        Интерактивно: 'Истина - задан интерактивный режим, в котором пользователю показывается диалог, в котором он может выбрать локальное расположение файлов. Ложь - на сервер передается список файлов, описанный в параметре <Файлы>. В интерактивном режиме строка, переданная в параметре <Диалог/Путь> рассматривается как начальное значения для выбора пути. Значение по умолчанию: Истина.'
                    }
                }
            }
        },
        "ПолучитьФорму": {
            name: 'ПолучитьФорму',
            name_en: 'GetForm',
            description: 'Получает форму или управляемую форму. Перед получением осуществляется поиск уже открытой такой же формы.  Поиск осуществляется по типу формы, значениям ключевых параметров формы, владельцу формы, пользовательскому ключу уникальности. Если в параметре Уникальность передано значение Истина, то поиск уже открытых форм не осуществляется.',
            returns: 'Тип: Форма, УправляемаяФорма, Неопределено. Неопределено - если в обработчике ПриСозданииНаСервере установлен признак отказа от создания формы.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяФормы: Строка, Параметры?: Структура, Владелец?: Произвольный, Уникальность?: Произвольный, Окно?: ОкноКлиентскогоПриложения, НавигационнаяСсылка?: Строка): Форма',
                    Параметры: {
                        ИмяФормы: 'Имя формы. Образуется как полный путь к объекту метаданных Форма (например, "Справочник.Контрагенты.Форма.ФормаОбъекта", "ОбщаяФорма.ФормаСохраненияФайла") или как полный путь к прикладному объекту, дополненный именем формы по умолчанию (например, "Справочник.Товары.ФормаВыбора"). Имена форм по умолчанию:   - ФормаОбъекта (ObjectForm) - форма объекта по умолчанию;  - ФормаГруппы (FolderForm) - форма группы по умолчанию;  - ФормаЗаписи (RecordForm) - форма записи регистра по умолчанию;  - ФормаСписка (ListForm) - форма списка по умолчанию;  - ФормаВыбора (ChoiceForm) - форма выбора по умолчанию;  - ФормаВыбораГруппы (FolderChoiceForm) - форма выбора группы по умолчанию;  - ФормаКонстант (ConstantsForm) - форма констант по умолчанию для обычного режима, установленная как форма констант для конфигурации;  - Форма (Form) - форма константы, отчета и обработки по умолчанию;  - ОбщаяФорма (CommonForm) - общая форма;  - ФормаНастроек (SettingsForm) - форма настроек отчета по умолчанию;  - ФормаЗагрузки (LoadForm) - форма загрузки настроек;  - ФормаСохранения (SaveForm) - форма сохранения настроек;  - ФормаВарианта (VariantForm) - форма редактирования варианта отчета;  - ФормаПоиска (SearchForm) - форма полнотекстового поиска в данных. Например, для получения общей формы "ОбщиеНастройки" следует в модуле написать код: Форма = ПолучитьФорму("ОбщаяФорма.ОбщиеНастройки"); Для внешних отчетов и обработок имя формы задается следующим образом:   - ВнешнийОтчет.<имя отчета>.Форма.<имя формы>;  - ВнешнийОтчет.<имя отчета>.<имя стандартной формы>;  - ВнешняяОбработка.<имя обработки>.Форма.<имя формы>;  - ВнешняяОбработка.<имя обработки>.<имя стандартной формы>. При этом внешний отчет или обработка должны быть предварительно зарегистрированы в системе.',
                        Параметры: 'Параметры формы. Ключ структуры - имя параметра, а значение - значение параметра формы. Имя элемента должно совпадать с именем параметра структуры. П =НовыйСтруктура("Ключ", Поставщик); Форма = ПолучитьФорму("Справочник.Контрагенты.ФормаОбъекта", П); Форма.Открыть();',
                        Владелец: 'Владелец формы - форма или элемент управления другой формы.',
                        Уникальность: 'В данном параметре может быть задан некоторый ключ, значение которого будет использоваться для поиска уже открытых форм. Если будет найдена форма с таким же ключом уникальности, вместо открытия новой формы будет активизирована найденная форма. Ложь - искать форму с ключом уникальности по умолчанию, Истина - не искать форму вообще, любое другое значение устанавливает ключ уникальности, по которому будет произведен поиск. Значение по умолчанию: Ложь.',
                        Окно: 'Окно приложения, в котором будет открыта форма.  Применимо только для управляемой формы. Окном может быть только основное окно приложения или вспомогательное окно формы. Если указан тип ВариантОткрытияОкна, окно формы будет создано согласно выбранному варианту.',
                        НавигационнаяСсылка: 'Если содержит значение, отличное от Неопределено, то это значение присваивается свойству НавигационнаяСсылка формы, полученной в результате вызова данного метода, и свойство АвтоНавигационнаяСсылка этой формы устанавливается в Ложь. Значение по умолчанию: Неопределено.'
                    }
                }
            }
        },
        "ПолучитьФункциональнуюОпцию": {
            name: 'ПолучитьФункциональнуюОпцию',
            name_en: 'GetFunctionalOption',
            description: 'Получает значения функциональной опции.',
            returns: 'Тип: Произвольный. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Имя: Строка, Параметры?: Структура): Произвольный',
                    Параметры: {
                        Имя: 'Имя функциональной опции в соответствии с установленными языковыми настройками.',
                        Параметры: 'Параметры функциональных опций, необходимые для получения значения функциональной опции. Имеет смысл только для функциональных опций, источниками значения которых является реквизит справочника или ресурс регистра сведений. Для опций констант этот параметр игнорируется. Ключ элемента структуры задает имя параметра, которое должно соответствовать имени одному из объектов метаданных типа ОбъектМетаданных: ПараметрФункциональныхОпций. Значение элемента структуры должно содержать значение параметра.'
                    }
                }
            }
        },
        "ПолучитьФункциональнуюОпциюИнтерфейса": {
            name: 'ПолучитьФункциональнуюОпциюИнтерфейса',
            name_en: 'GetInterfaceFunctionalOption',
            description: 'Получает значение функциональной опции применительно к командному интерфейсу.  Для получения значения опции используются параметры, установленные с помощью метода УстановитьПараметрыФункциональныхОпцийИнтерфейса.',
            returns: 'Тип: Произвольный. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Имя: Строка): Произвольный',
                    Параметры: {
                        Имя: 'Имя функциональной опции.'
                    }
                }
            }
        },
        "ПолучитьЧасовойПоясИнформационнойБазы": {
            name: 'ПолучитьЧасовойПоясИнформационнойБазы',
            name_en: 'GetInfoBaseTimeZone',
            description: 'Получает строку идентификатора часового пояса информационной базы.',
            returns: 'Тип: Строка, Неопределено. Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59. Неопределено, если он не был установлен.'
        },
        "ПользователиОС": {
            name: 'ПользователиОС',
            name_en: 'OSUsers',
            description: 'Предоставляет доступ к информации о доменах и пользователях операционной системы.',
            returns: 'Тип: ТаблицаЗначений, Массив. Информация возвращается в виде таблицы значений, в колонках которой содержится следующая информация:   - ИмяДомена (DomainName) - имя домена (тип Строка);  - ИмяСервера (ServerName) - имя компьютера, являющегося контроллером домена (тип Строка);  - Пользователи (Users) - массив строк с именами пользователей домена;  - Локальный (Local) - признак того, что этому домену принадлежат локальные пользователи данного компьютера.'
        },
        "ПоместитьВоВременноеХранилище": {
            name: 'ПоместитьВоВременноеХранилище',
            name_en: 'PutToTempStorage',
            description: 'Сохраняет сериализуемое значение во временное хранилище.',
            returns: 'Тип: Строка. Адрес во временном хранилище.',
            signature: {
                default: {
                    СтрокаПараметров: '(Данные: Произвольный, Адрес?: УникальныйИдентификатор): Строка',
                    Параметры: {
                        Данные: 'Данные, которые необходимо поместить во временное хранилище.',
                        Адрес: 'Уникальный идентификатор формы, во временное хранилище которой надо поместить данные и вернуть новый адрес. Или адрес во временном хранилище, по которому надо поместить данные. Адрес должен быть получен ранее с помощью данного метода.  В случае, если передается УникальныйИдентификатор формы или адрес в хранилище, то значение будет автоматически удалено после закрытия этой формы. Если передан УникальныйИдентификатор, не являющийся уникальным идентификатором формы, то значение будет удалено после завершения сеанса пользователя. Если параметр не указан, помещенное значение будет удалено после очередного запроса сервера из общего модуля, при контекстном и неконтекстном серверном вызове из формы, при серверном вызове из модуля команды или при получении формы.'
                    }
                }
            }
        },
        "ПоместитьФайл": {
            name: 'ПоместитьФайл',
            name_en: 'PutFile',
            description: 'Помещает файл из локальной файловой системы во временное хранилище.',
            returns: 'Тип: Булево. Ложь - в параметре <Интерактивно> установлен интерактивный режим (Истина) и пользователь отказался от выполнения операции в диалоге выбора файла.',
            signature: {
                default: {
                    СтрокаПараметров: '(Адрес?: Строка, НачальноеИмяФайла?: Строка, ВыбранноеИмяФайла?: Строка, Интерактивно?: Булево, УникальныйИдентификаторФормы?: УникальныйИдентификатор): Булево',
                    Параметры: {
                        Адрес: 'Адрес во временном хранилище, по которому должны быть помещены данные. Если значение параметра не задано или является пустой строкой, то будет создан новый файл. Расположение нового файла возвращается в данном параметре.',
                        НачальноеИмяФайла: 'Путь к файлу, данные из которого будут помещены во временное хранилище. Если параметр <Интерактивно> = Истина, то отображается диалог выбора файла и выбранный в диалоге путь возвращается в параметре <ВыбранноеИмяФайла>.',
                        ВыбранноеИмяФайла: 'В параметре возвращается путь к файлу, указанный в диалоге выбора файла. Для неинтерактивного режима выбранное имя файла соответствует начальному имени файла. В веб-клиенте значение параметра зависит от типа браузера. Для FireFox 3 в параметре возвращается только имя файла без пути. Для Internet Explorer возвращаемое значение зависит от настройки текущей зоны. Подробности: http://msdn.microsoft.com/en-us/library/ms535128(VS.85).aspx.',
                        Интерактивно: 'Указывает использование интерактивного режима, при котором отображается диалог выбора файла. Этот файл будет помещен по указанному в параметре <Адрес> адресу во временное хранилище или по новому адресу, если второй параметр метода опущен.  Если значение параметра Истина, то метод отобразит стандартное диалоговое окно выбора файла, в котором можно выбрать файл для помещения в хранилище. В этом случае выбранный путь возвращается в параметре <Выбранное имя файла>. В веб-клиенте параметр должен быть равен Истина. В противном случае будет сгенерировано сообщение об ошибке. Значение по умолчанию: Истина.',
                        УникальныйИдентификаторФормы: 'Уникальный идентификатор формы, который можно получить с помощью свойства УникальныйИдентификатор управляемой формы.  Файл помещается во временное хранилище и автоматически удаляется после удаления объекта формы. Если параметр не указан, помещенное значение будет удалено, после очередного запроса сервера из общего модуля, при контекстном и неконтекстном серверном вызове из формы, при серверном вызове из модуля команды или при получении формы.'
                    }
                }
            }
        },
        "ПоместитьФайлы": {
            name: 'ПоместитьФайлы',
            name_en: 'PutFiles',
            description: 'Помещает набор файлов из локальной файловой системы во временное хранилище.',
            returns: 'Тип: Булево. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ПомещаемыеФайлы?: Строка, ПомещенныеФайлы?: Массив, НаборПомещаемыхФайлов?: ДиалогВыбораФайла, Интерактивно?: Булево, УникальныйИдентификаторФормы?: УникальныйИдентификатор): Булево',
                    Параметры: {
                        ПомещаемыеФайлы: 'Массив объектов типа ОписаниеПередаваемогоФайла. Каждый объект описывает получаемый файл:   - Хранение - расположение данных во временном хранилище;  - Имя - это локальный путь, по которому должен быть получен файл. Массив может быть заполнен полностью, в этом случае известен набор помещаемых файлов и адреса, по которым они должны быть сохранены. Массив может быть заполнен частично, у элементов массива заполнены только имена. В этом случае, набор помещаемых файлов определен, а места хранения неизвестны. Файлы будут размещены в новых временных хранилищах. Массив может быть не заполнен. В этом случае набор помещаемых файлов определяется по значениям остальных параметров метода (поиском по маске либо интерактивным выбором).',
                        ПомещенныеФайлы: 'Массив объектов типа ОписаниеПереданногоФайла. Каждый объект описывает помещенный файл: Хранение - расположение данных во временном хранилище; Имя - это локальный путь, по которому получен файл.',
                        НаборПомещаемыхФайлов: 'Определяет набор помещаемых файлов. Может быть задан строкой поиска для метода НайтиФайлы либо заранее подготовленным диалогом выбора файлов в режиме открытия файлов. Если параметр определен, то параметр <ПомещаемыеФайлы> должен быть не определен либо быть пустым массивом.',
                        Интерактивно: 'Указывает использование интерактивного режима, при котором пользователю показывается диалог, в котором он может выбрать набор помещаемых файлов.',
                        УникальныйИдентификаторФормы: 'Уникальный идентификатор формы, который можно получить с помощью свойства УникальныйИдентификатор управляемой формы.  Файл помещается во временное хранилище и автоматически удаляется после удаления объекта формы. Если параметр не указан, помещенное значение будет удалено, после очередного запроса сервера из общего модуля, при контекстном и неконтекстном серверном вызове из формы, при серверном вызове из модуля команды или при получении формы.'
                    }
                }
            }
        },
        "Прав": {
            name: 'Прав',
            name_en: 'Right',
            description: 'Выбирает последние справа символы строки.',
            returns: 'Тип: Строка. Строка выбранных символов.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка, ЧислоСимволов: Число): Строка',
                    Параметры: {
                        Строка: 'Исходная строка.',
                        ЧислоСимволов: 'Количество выбираемых символов.'
                    }
                }
            }
        },
        "ПравоДоступа": {
            name: 'ПравоДоступа',
            name_en: 'AccessRight',
            description: 'Показывает установку права доступа к объекту метаданных для текущего пользователя на момент выполнения текущей строчки кода. Вызов метода всегда требует административных прав, если явно указан третий параметр - Пользователь/Роль, права которого проверяются. Если пользователь не указан, то проверяются права текущего пользователя, и для этого наличие административных прав не требуется.  Если пользователь задан явно, то выдаются права явно заданного пользователя в соответствии с метаданными.',
            returns: 'Тип: Булево. Право доступа для проверяемого объекта с учетом прав на родительский объект и значения свойства "Независимые права подчиненных объектов" для роли. Истина - право доступа к объекту установлено; Ложь - в противном случае. Если в момент выполнения метода установлен привелигированный режим, то всегда возвращается Истина.',
            signature: {
                default: {
                    СтрокаПараметров: '(Право: Строка, ОбъектМетаданных: ОбъектМетаданных: ШаблонURLHTTPСервиса, Пользователь_Роль?: ПользовательИнформационнойБазы, СтандартныйРеквизитСтандартнаяТабличнаяЧасть?: Строка): Булево',
                    Параметры: {
                        Право: 'Название права доступа. Могут быть использованы следующие значения:   - Чтение (Read) - чтение;  - Добавление (Insert) - добавление;  - Изменение (Update) - изменение;  - Удаление (Delete) - удаление;  - Проведение (Posting) - проведение документов;  - ОтменаПроведения (UndoPosting) - отмена проведения документов;  - Просмотр (View) - просмотр;  - ИнтерактивноеДобавление (InteractiveInsert) - интерактивное добавление;  - Редактирование (Edit) - редактирование;  - ИнтерактивнаяПометкаУдаления (InteractiveSetDeletionMark) - интерактивная пометка на удаление;  - ИнтерактивноеСнятиеПометкиУдаления (InteractiveClearDeletionMark) - интерактивное снятие пометки на удаление;  - ИнтерактивноеУдалениеПомеченных (InteractiveDeleteMarked) - интерактивное удаление помеченных объектов;  - ИнтерактивноеПроведение (InteractivePosting) - интерактивное проведение;  - ИнтерактивноеПроведениеНеОперативное (InteractivePostingRegular) - интерактивное проведение (стандартными командами форм) документа в неоперативном режиме;  - ИнтерактивнаяОтменаПроведения (InteractiveUndoPosting) - интерактивная отмена проведения;  - ИнтерактивноеИзменениеПроведенных (InteractiveChangeOfPosted) - интерактивное редактирование проведенного документа. Если право не установлено, то пользователь не может проведенный документ удалить, установить пометку удаления, перепровести или сделать непроведенным. Форма такого документа открывается в режиме просмотра;  - ВводПоСтроке (InputByString) - использование режима ввода по строке;  - УправлениеИтогами (TotalsControl) - управление итогами регистра бухгалтерии и регистра накопления (установка периода, по который рассчитаны итоги, и пересчет итогов);  - Использование (Use) - использование;  - ИнтерактивноеУдаление (InteractiveDelete) - интерактивное непосредственное удаление;  - Администрирование (Administration) - администрирование информационной базы; требуется наличия права "Администрирование данных";  - АдминистрированиеДанных (DataAdministration) - право на административные действия над данными;  - МонопольныйРежим (ExclusiveMode) - использование монопольного режима;  - АктивныеПользователи (ActiveUsers) - просмотр списка активных пользователей;  - ЖурналРегистрации (EventLog) - журнал регистрации;  - ВнешнееСоединение (ExternalConnection) - внешнее соединение;  - Automation (Automation) - использование automation;  - ИнтерактивноеОткрытиеВнешнихОбработок (InteractiveOpenExtDataProcessors) - интерактивное открытие внешних обработок;  - ИнтерактивноеОткрытиеВнешнихОтчетов (InteractiveOpenExtReports) - интерактивное открытие внешних отчетов;  - Получение (Get) - получение значения, не хранящегося в базе данных;  - Установка (Set) - установка значения, не сохраняемого в базе данных;  - ИнтерактивнаяАктивация (InteractiveActivate) - интерактивная активация;  - Старт (Start) - старт бизнес-процесса;  - ИнтерактивныйСтарт (InteractiveStart) - интерактивный старт бизнес-процесса;  - Выполнение (Execute) - выполнение задачи;  - ИнтерактивноеВыполнение (InteractiveExecute) - интерактивное выполнение задачи;  - Вывод (Output) - вывод на печать, запись и копирование в буфер обмена;  - ОбновлениеКонфигурацииБазыДанных (UpdateDataBaseConfiguration) - обновление конфигурации базы данных;  - ТонкийКлиент (ThinClient) - право запуска тонкого клиента;  - ВебКлиент (WebClient) - право запуска веб-клиента;  - ТолстыйКлиент (ThickClient) - право запуска толстого клиента;  - РежимВсеФункции (AllFunctionsMode) - право на использования режима "Все функции";  - СохранениеДанныхПользователя (SaveUserData) - право на сохранение данных пользователя (настроек, избранного, истории);  - ИзменениеСтандартнойАутентификации (StandardAuthenticationChange) - пользователь имеет право изменять свои сохраненные параметры стандартной аутентификации внешнего источника данных;  - ИзменениеСтандартнойАутентификацииСеанса (SessionStandardAuthenticationChange) - пользователь имеет право изменять параметры стандартной аутентификации внешнего источника данных для текущего сеанса;  - ИзменениеАутентификацииОССеанса (SessionOSAuthenticationChange) - пользователь имеет право изменять параметры стандартной аутентификации внешнего источника данных для текущего сеанса и текущего пользователя;  - ИнтерактивноеУдалениеПредопределенныхДанных (InteractiveDeletePredefinedData) - интерактивное удаление предопределенных данных;  - ИнтерактивнаяПометкаУдаленияПредопределенныхДанных (InteractiveSetDeletionMarkPredefinedData) - интерактивная пометка предопределенных данных;  - ИнтерактивноеСнятиеПометкиУдаленияПредопределенных (InteractiveClearDeletionMarkPredefinedData) - интерактивное снятие пометки предопределенных данных;  - ИнтерактивноеУдалениеПомеченныхПредопределенныхДан (InteractiveDeleteMarkedPredefinedData) - интерактивное удаление помеченных предопределенных данных;  - АдминистрированиеРасширенийКонфигурации (ConfigExtensionsAdministration) - право на администрирование расширений конфигурации.',
                        ОбъектМетаданных: 'Объект метаданных.',
                        Пользователь_Роль: 'Указывает пользователя или роль, для которых нужно определить доступность права. При этом возвращается значение права так, как оно определено в конфигурации.',
                        СтандартныйРеквизитСтандартнаяТабличнаяЧасть: 'Необязательное имя стандартного реквизита, имя стандартного реквизита стандартной табличной части или имя стандартной табличной части.  Для стандартного реквизита стандартной табличной части, имя табличной части указывается перед точкой до имени реквизита. Например: "ВидыСубконто.ВидСубконто".'
                    }
                }
            }
        },
        "ПредопределенноеЗначение": {
            name: 'ПредопределенноеЗначение',
            name_en: 'PredefinedValue',
            description: 'Возвращает ссылку на предопределенный элемент из предопределенных данных, прикладных перечислений и точек маршрута бизнес-процессов, а также значения системных перечислений.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяПредопределенногоЗначения: Строка)',
                    Параметры: {
                        ИмяПредопределенногоЗначения: 'Содержит полный путь до предопределенного значения, включая имя самого значения. Например, "ПланСчетов.Основной.Счет41". Синтаксис описания предопределенного значения совпадает с синтаксисом оператора ЗНАЧЕНИЕ языка запросов: <Тип предопределенного значения>.<Имя объекта метаданных>.<Значение>. Тип предопределенного значения> может быть:    - Справочник (Catalog);  - ПланВидовХарактеристик (ChartOfCharacteristicTypes);  - ПланСчетов (ChartOfAccounts);  - ПланВидовРасчета (ChartOfCalculationTypes);  - Документ (Document) - только пустая ссылка;  - Перечисление (Enum);  - БизнесПроцесс (BusinessProcess) - только пустая ссылка и получение точек бизнес процесса;  - Задача (Task) - только пустая ссылка. В качестве <Имя объекта метаданных> указывается имя объекта метаданных, как оно задано в конфигураторе.  Для перечислений, определенных в конфигурации, <Значение> указывается как имя соответствующего объекта метаданных типа ЗначениеПеречисления. Для всех остальных типов предопределенных значений <Значение> указывается как имя предопределенного элемента данных, как оно указано в конфигураторе, или ПустаяСсылка для указания пустой ссылки. Для точек маршрутов бизнес-процессов имя предопределенного значения имеет вид: БизнесПроцесс.<Имя объекта метаданных>.ТочкаМаршрута.<Имя точки маршрута>. Также метод может быть использован для получения значения системного перечисления. В этом случае параметр формируется как: <ИмяСистемногоПеречисления>.<ИмяЗначенияСистемногоПеречисления>.'
                    }
                }
            }
        },
        "ПредставлениеКодаЛокализации": {
            name: 'ПредставлениеКодаЛокализации',
            name_en: 'LocaleCodePresentation',
            description: 'Локализованное наименование языка с заданным идентификатором.',
            returns: 'Тип: Строка. ',
            signature: {
                default: {
                    СтрокаПараметров: '(КодЛокализации: Строка): Строка',
                    Параметры: {
                        КодЛокализации: 'Код локализации, для которого должно быть получено представление.'
                    }
                }
            }
        },
        "ПредставлениеПериода": {
            name: 'ПредставлениеПериода',
            name_en: 'PeriodPresentation',
            description: 'Формирует внешнее представление периода, заданного датами начала и окончания периода.',
            returns: 'Тип: Строка. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ДатаНачалаПериода: Дата, ДатаОкончанияПериода: Дата, ФорматнаяСтрока?: Строка): Строка',
                    Параметры: {
                        ДатаНачалаПериода: 'Дата начала периода.',
                        ДатаОкончанияПериода: 'Дата окончания периода.',
                        ФорматнаяСтрока: 'Определяет способ форматирования периода. Может содержать следующие параметры:   - Л/L - код локализации. Если не указан, берется код локализации по умолчанию. Если система не поддерживает форматирование периода с указанной локализацией, генерируется исключительная ситуация.  - ФП/FP - признак "финансовый период". Влияет на форматирование в случае, если указанный датами период соответствует первому полугодию или первым 9 месяцам года. Если не указан, признак не установлен. Коды региональных установок, использование которых допустимо в форматной строке (в формате Код - Язык):   - en_US - Английский,  - az – Азербайджанский,  - be_BY – Белорусский,  - bg_BG – Болгарский,  - hu – Венгерский,  - vi_VN – Вьетнамский,  - ka_GE – Грузинский,  - kk_KZ – Казахский,  - lv_LV – Латышский,  - lt_LT – Литовский,  - de_DE – Немецкий,  - pl_PL – Польский,  - ro_RO – Румынский,  - ru_RU – Русский,  - tr_TR – Турецкий,  - tk – Туркменский,  - uk_UA – Украинский,  - fi_FI – Финский,  - fr_CA – Французский,  - et_EE – Эстонский.  Пример форматной строки: Л=en_US; ФП=Истина Значение по умолчанию: Пустая строка.'
                    }
                }
            }
        },
        "ПредставлениеПрава": {
            name: 'ПредставлениеПрава',
            name_en: 'RightPresentation',
            description: 'Получает представление права по имени права.',
            returns: 'Тип: Строка. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяПрава?: Строка): Строка',
                    Параметры: {
                        ИмяПрава: 'Содержит имя права, для которого нужно получить представление.'
                    }
                }
            }
        },
        "ПредставлениеПриложения": {
            name: 'ПредставлениеПриложения',
            name_en: 'ApplicationPresentation',
            description: 'Позволяет получить локализованное название приложения.',
            returns: 'Тип: Строка. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяПриложения: Строка): Строка',
                    Параметры: {
                        ИмяПриложения: 'Строка, идентифицирующая приложение. Допустимые имена:   - 1CV8 - идентификатор приложения 1С:Предприятие в режиме запуска "Толстый клиент";  - 1CV8C - идентификатор приложения 1С:Предприятие в режиме запуска "Тонкий клиент";  - WebClient - идентификатор приложения 1С:Предприятие в режиме запуска "Веб-клиент";  - Designer - идентификатор приложения Конфигуратор;  - COMConnection - идентификатор сессии внешнего соединения 1С:Предприятия через COM;  - WSConnection - идентификатор сессии Web-сервиса;  - BackgroundJob - идентификатор сессии обработки заданий;  - SystemBackgroundJob - идентификатор системного фонового задания;  - SrvrConsole - идентификатор сессии консоли кластера;  - COMConsole - идентификатор административной сессии внешнего соединения;  - JobScheduler - идентификатор сессии планировщика заданий;  - Debugger - идентификатор сессии отладчика;  - OpenIDProvider - провайдер OpenID;  - RAS - идентификатор сервера администрирования.'
                    }
                }
            }
        },
        "ПредставлениеСобытияЖурналаРегистрации": {
            name: 'ПредставлениеСобытияЖурналаРегистрации',
            name_en: 'EventLogEventPresentation',
            description: 'Позволяет получить локализованное название события.',
            returns: 'Тип: Строка. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ИдентификаторСобытия: Строка): Строка',
                    Параметры: {
                        ИдентификаторСобытия: 'Строка, идентифицирующая событие. Допустимые системные имена событий:    - _$Access$_.Access - Доступ. Доступ; Предназначено для регистрации фактов успешного доступа пользователей системы к тем или иным данным. Поле журнала регистрации Данные (Структура) в этом случае имеет следующий состав:   - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались. Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Access$_.AccessDenied - Доступ. Отказ в доступе; Предназначено для регистрации фактов отказа в доступе к тем или иным данным пользователям системы. Поле журнала регистрации Данные (Структура). имеет следующий состав:    - Для ошибки доступа к объекту (не ограничение доступа к данным):    - Право (Right) - имя нарушенного права;  - Для ошибки ограничения доступа к данным:    - Действие (Action) - Действие, которое выполнялось с данными, для объектных таблиц: Чтение (Read), Добавление (Insert), Изменение (Update), Удаление (Delete); для не объектных таблиц, все что не Чтение, то Изменение;  - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались.Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Data$_.Delete - Данные. Удаление;  - _$Data$_.DeletePredefinedData - Данные. Удаление предопределенных данных;  - _$Data$_.New - Данные. Добавление;  - _$Data$_.NewPredefinedData - Данные. Добавление предопределенных данных;  - _$Data$_.Post - Данные. Проведение;  - _$Data$_.PredefinedDataInitialization - Данные. Инициализация предопределенных данных;  - _$Data$_.PredefinedDataInitializationDataNotFound - Данные. Инициализация предопределенных данных, данные не найдены;  - _$Data$_.SetPredefinedDataInitialization - Данные. Установка инициализации предопределенных данных;  - _$Data$_.SetStandardODataInterfaceContent - Данные. Изменение состава стандартного интерфейса OData;  - _$Data$_.TotalsMaxPeriodUpdate - Данные. Изменение максимального периода рассчитанных итогов;  - _$Data$_.TotalsMinPeriodUpdate - Данные. Изменение минимального периода рассчитанных итогов;  - _$Data$_.Unpost - Данные. Отмена проведения;  - _$Data$_.Update - Данные. Изменение;  - _$Data$_.UpdatePredefinedData - Данные. Изменение предопределенных данных;  - _$InfoBase$_.ConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.ConfigUpdate - Информационная база. Изменение конфигурации;  - _$InfoBase$_.DBConfigBackgroundUpdateCancel - Информационная база. Отмена фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateFinish - Информационная база. Завершение фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateResume - Информационная база. Продолжение (после приостановки) процесса фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateStart - Информационная база. Запуск фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateSuspend - Информационная база. Приостановка (пауза) процесса фонового обновления;  - _$InfoBase$_.DBConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации базы данных; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.DBConfigUpdate - Информационная база. Изменение конфигурации базы данных;  - _$InfoBase$_.EraseData - Информационная база. Удаление данных информационной баз;  - _$InfoBase$_.EventLogSettingsUpdate - Информационная база. Изменение параметров журнала регистрации;  - _$InfoBase$_.InfoBaseAdmParamsUpdate - Информационная база. Изменение параметров информационной базы;  - _$InfoBase$_.MasterNodeUpdate - Информационная база. Изменение главного узла;  - _$InfoBase$_.PredefinedDataUpdate - Информационная база. Обновление предопределенных данных;  - _$InfoBase$_.RegionalSettingsUpdate - Информационная база. Изменение региональных установок;  - _$InfoBase$_.SetPredefinedDataUpdate - Информационная база. Установить обновление предопределенных данных;  - _$InfoBase$_.TARImportant - Тестирование и исправление. Ошибка;  - _$InfoBase$_.TARInfo - Тестирование и исправление. Сообщение;  - _$InfoBase$_.TARMess - Тестирование и исправление. Предупреждение;  - _$Job$_.Cancel - Фоновое задание. Отмена;  - _$Job$_.Fail - Фоновое задание. Ошибка выполнения;  - _$Job$_.Start - Фоновое задание. Запуск;  - _$Job$_.Succeed - Фоновое задание. Успешное завершение;  - _$Job$_.Terminate - Фоновое задание. Принудительное завершение;  - _$OpenIDProvider$_.NegativeAssertion - Провайдер OpenID. Отклонено; записывается базой, выступающей в роли провайдера OpenID, при отправке отрицательного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию.  - _$OpenIDProvider$_.PositiveAssertion - Провайдер OpenID. Подтверждено; записывается базой, выступающей в роли провайдера OpenID, при отправке положительного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя;  - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию;  - _$PerformError$_ - Ошибка выполнения;  - _$Session$_.Authentication - Сеанс. Аутентификация; выполняется только при удачной аутентификации. Для события Аутентификация записываются поля Пользователь и ИмяПользователя. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле Данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID;  - ИдентификаторПользователяПровайдераOpenID (OpenIDProviderUserID) - идентификатор пользователя на провайдере.  - _$Session$_.AuthenticationError - Сеанс. Ошибка аутентификации; выполняется только при ошибке аутентификации. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID  - _$Session$_.ConfigExtensionApplyError - Сеанс. Ошибка применения расширения конфигурации; записывается, если в процессе применений расширения произошла ошибка. Совпадает с текстом выводимого сообщения при невозможности подключить расширение. Поле Данные заполняется структурой со следующим составом свойств:    - Имя (Name) - Строка. Имя расширения  - _$Session$_.Finish - Сеанс. Завершение;  - _$Session$_.Start - Сеанс. Начало;  - _$Transaction$_.Begin - Транзакция. Начало;  - _$Transaction$_.Commit - Транзакция. Фиксация;  - _$Transaction$_.Rollback - Транзакция. Отмена;  - _$User$_.Delete - Пользователи. Удаление; записываются как при редактировании списка пользователей в Конфигураторе, так и при удалении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя  - _$User$_.New - Пользователи. Добавление; записываются как при создани пользователей в Конфигураторе, так и методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык.  - _$User$_.Update - Пользователи. Изменение; записываются как при редактировании списка пользователей в Конфигураторе, так и при изменении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык;'
                    }
                }
            }
        },
        "ПредставлениеЧасовогоПояса": {
            name: 'ПредставлениеЧасовогоПояса',
            name_en: 'TimeZonePresentation',
            description: 'Возвращает локализованное наименование часового пояса с заданным идентификатором.',
            returns: 'Тип: Строка. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ЧасовойПояс: Строка): Строка',
                    Параметры: {
                        ЧасовойПояс: 'Идентификатор часового пояса. Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59.'
                    }
                }
            }
        },
        "Предупреждение": {
            name: 'Предупреждение',
            name_en: 'DoMessageBox',
            description: 'Выводит на экран окно предупреждения.',
            signature: {
                default: {
                    СтрокаПараметров: '(ТекстПредупреждения: Строка, Таймаут?: Число, Заголовок?: Строка)',
                    Параметры: {
                        ТекстПредупреждения: 'Текст предупреждения.',
                        Таймаут: 'Интервал времени в секундах, в течение которого система будет ожидать ответа пользователя. По истечении интервала окно предупреждения будет закрыто. Если параметр не указан, то время ожидания не ограничено. Если параметр имеет отрицательное значение, будет сгенерировано исключение. Значение по умолчанию: 0.',
                        Заголовок: 'Содержит заголовок окна предупреждения.'
                    }
                }
            }
        },
        "ПрекратитьРаботуСистемы": {
            name: 'ПрекратитьРаботуСистемы',
            name_en: 'Terminate',
            description: 'Завершает работу системы независимо от наличия модальных диалогов, открытых редактируемых форм документов и справочников и т.д. При этом не вызываются процедуры-обработчики событий завершения работы системы.',
            signature: {
                default: {
                    СтрокаПараметров: '(ПерезапуститьПриЗавершении?: Булево, ДополнительныеПараметрыКоманднойСтроки?: Строка)',
                    Параметры: {
                        ПерезапуститьПриЗавершении: 'Указывает необходимость выполнения запуска нового сеанса с текущими установками после прекращения работы системы. Значение по умолчанию: Ложь.',
                        ДополнительныеПараметрыКоманднойСтроки: 'Содержит дополнительные параметры, которые будут переданы новому сеансу. Если такие параметры уже есть среди текущих установок, переданные заменят текущие. Параметр указывается, если значение параметра <ПерезапуститьПриЗавершении>=Истина.'
                    }
                }
            }
        },
        "ПривилегированныйРежим": {
            name: 'ПривилегированныйРежим',
            name_en: 'PrivilegedMode',
            description: 'Определяет включение привилегированного режима исполнения кода.',
            returns: 'Тип: Булево. Истина - включен привилегированный режим исполнения кода; Ложь - в противном случае.'
        },
        "ПродолжитьВызов": {
            name: 'ПродолжитьВызов',
            name_en: 'ProceedWithCall',
            description: 'Вызывает переопределенный метод или обработчик события из расширяемой конфигурации.',
            returns: 'Тип: Произвольный. Возвращаемое значение переопределенной функции.',
            signature: {
                default: {
                    СтрокаПараметров: '(<Значение1>,...,<ЗначениеN>?: Произвольный): Произвольный',
                    Параметры: {
                        ЗначениеN: 'Набор параметров, который передается в переопределенный метод из метода модуля заимствованного объекта. Количество и типы параметров определяются с помощью метода из модуля расширяемого объекта. Максимальное возможное количество параметров - 50.'
                    }
                }
            }
        },
        "ПрочитатьJSON": {
            name: 'ПрочитатьJSON',
            name_en: 'ReadJSON',
            description: 'Считывает значение из JSON-текста или файла. JSON-текст должен быть корректным.',
            returns: 'Тип: Произвольный. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ЧтениеJSON: ЧтениеJSON, ПрочитатьВСоответствие?: Булево, ИменаСвойствСоЗначениямиДата?: Массив, ОжидаемыйФорматДаты?: ФорматДатыJSON, ИмяФункцииВосстановления?: Строка, МодульФункцииВосстановления?: УправляемаяФорма, ДополнительныеПараметрыФункцииВосстановления?: Произвольный, ИменаСвойствДляОбработкиВосстановления?: Массив, МаксимальнаяВложенность?: Число): Произвольный',
                    Параметры: {
                        ЧтениеJSON: 'Объект чтения JSON.',
                        ПрочитатьВСоответствие: 'Если установлено Истина, чтение объекта JSON будет выполнено в Соответствие. Если установлено Ложь, объекты будут считываться в объект типа Структура. Примечание. При десериализации объектов JSON в структуру необходимо помнить о требованиях к ключам структуры. Если при десериализации объекта будет найдено имя свойства, недопустимое для ключа структуры, то будет вызвано исключение. Значение по умолчанию: Ложь.',
                        ИменаСвойствСоЗначениямиДата: 'Массив, элементы которого содержат имена свойств JSON, для которых нужно вызывать восстановление даты из строки. Если имя свойства указано в этом параметре и указано в параметре ИменаСвойствДляОбработкиВосстановления, то для таких свойств восстановление осуществляется в функции восстановления. Если восстановление даты из значения свойства невозможно, то будет сгенерировано исключение. Значение по умолчанию: Неопределено.',
                        ОжидаемыйФорматДаты: 'Ожидаемый формат даты при десериализации объекта в формате JSON. Если в результате десериализации значение не является строкой и имеет формат даты, отличный от ожидаемого, то будет вызвано исключение. Значение по умолчанию: ISO.',
                        ИмяФункцииВосстановления: 'Данная функция вызывается при чтении каждого свойства и должна иметь следующие параметры:   - <Свойство> - значение типа Строка, указывается только при чтении объектов JSON,  - <Значение> - значение допустимого для сериализации типа,  - <ДополнительныеПараметры>. Возвращаемое значение - произвольного типа. Если данный параметр задан и не задан параметр МодульФункцииВосстановления, и наоборот, будет вызвано исключение. Если функция не установлена, то при вызове метода ПрочитатьJSON, параметр ИменаСвойствСоЗначениямиДата игнорируется. Значение по умолчанию: Неопределено.',
                        МодульФункцииВосстановления: 'Указывает модуль, процедура которого будет использована для восстановления значения. В зависимости от типа параметра будет вызван соответствующий метод:   - УправляемаяФорма - будет вызван метод модуля указанной управляемой формы.  - КомандаКомандногоИнтерфейса - будет вызван метод модуля команды командного интерфейса.  - ОбщийМодуль - будет вызван метод неглобального общего модуля.  Значение по умолчанию: Неопределено.',
                        ДополнительныеПараметрыФункцииВосстановления: 'Дополнительные параметры, которые будут переданы в функцию восстановления значений. Значение по умолчанию: Неопределено.',
                        ИменаСвойствДляОбработкиВосстановления: 'Массив имен свойств JSON, для которых будет вызвана функция восстановления. Параметр игнорируется, если не установлен параметр ИмяФункцииВосстановления. Значение по умолчанию: Неопределено.',
                        МаксимальнаяВложенность: 'Максимальный уровень вложенности объекта JSON. При превышении уровня вложенности будет сгенерировано исключение. Значение по умолчанию: 500.'
                    }
                }
            }
        },
        "ПрочитатьXML": {
            name: 'ПрочитатьXML',
            name_en: 'ReadXML',
            description: 'Считывает значение в формате XML. Прочитаны могут быть значения тех типов, которые могут быть записаны методом ЗаписатьXML.',
            returns: 'Тип: Неопределено. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ЧтениеXML: ЧтениеXML, ТипЗначения?: Тип): Неопределено',
                    Параметры: {
                        ЧтениеXML: 'Объект, через который происходит чтение XML.',
                        ТипЗначения: 'Тип значения, которое должно быть прочитано из XML. Если тип не указан, то будет произведена попытка определения типа значения непосредственно из представления XML.'
                    }
                }
            }
        },
        "ПрочитатьДатуJSON": {
            name: 'ПрочитатьДатуJSON',
            name_en: 'ReadJSONDate',
            description: 'Выполняет преобразование строки, прочитанной в JSON-формате, в значение типа Дата.',
            returns: 'Тип: Дата. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка, Формат: ФорматДатыJSON): Дата',
                    Параметры: {
                        Строка: 'Строка, которую требуется преобразовать в дату.',
                        Формат: 'Формат, в котором представлена дата в строке, подлежащей преобразованию.'
                    }
                }
            }
        },
        "ПустаяСтрока": {
            name: 'ПустаяСтрока',
            name_en: 'IsBlankString',
            description: 'Проверяет строку на наличие значащих символов.',
            returns: 'Тип: Булево. Истина - строка не содержит значащих символов или не содержит ни одного символа (пустая); Ложь - в противном случае.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка): Булево',
                    Параметры: {
                        Строка: 'Исходная строка.'
                    }
                }
            }
        },
        "РабочийКаталогДанныхПользователя": {
            name: 'РабочийКаталогДанныхПользователя',
            name_en: 'UserDataWorkDir',
            description: 'Предоставляет доступ к каталогу текущего пользователя данной информационной базы внутри стандартного каталога данных приложения.',
            returns: 'Тип: Строка. Путь к каталогу.'
        },
        "РазблокироватьДанныеДляРедактирования": {
            name: 'РазблокироватьДанныеДляРедактирования',
            name_en: 'UnlockDataForEdit',
            description: 'Снимает блокировку объекта.  Если блокировка не была установлена от имени этой формы или без указания формы, никаких действий не выполняется.',
            signature: {
                default: {
                    СтрокаПараметров: '(Ключ?: РегистрСведенийКлючЗаписи.<Имя регистра сведений>, ИдентификаторФормы?: УникальныйИдентификатор)',
                    Параметры: {
                        Ключ: 'Ссылка на объект, который должен быть разблокирован, или ключ записи независимого регистра сведений, которая должна быть разблокирована.  Если параметр не указан, то разблокируются все объекты, заблокированные с данным идентификатором формы или без указания идентификатора формы.',
                        ИдентификаторФормы: 'Уникальный идентификатор формы.  Если параметр не указан, то разблокируются только те объекты, которые были заблокированы без указания идентификатора формы.'
                    }
                }
            }
        },
        "РазделитьФайл": {
            name: 'РазделитьФайл',
            name_en: 'SplitFile',
            description: 'Разделяет указанный файл на несколько частей (файлов) заданного размера. Имя каждой части образуется из имени исходного файла с прибавлением ему расширения в виде порядкового номера, включая лидирующие нули. Например, для разделения файла на части, размером каждой равной одному мегабайту, следует выполнить следующий код: РазделитьФайл("C:\\Windows\\Temp\\Presentation.ppt", 1024 * 1024 ) В результате получим несколько файлов: C:\\Windows\\Temp\\Presentation.ppt.001 C:\\Windows\\Temp\\Presentation.ppt.002 ... C:\\Windows\\Temp\\Presentation.ppt.n-1 C:\\Windows\\Temp\\Presentation.ppt.n Все части, кроме последней, имеют размер 1 мегабайт. Размер последней части определяется как размер исходного файла минус сумма размеров всех предыдущих частей.',
            returns: 'Тип: Массив. ',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяФайла: Строка, РазмерЧасти: Число, Путь?: Строка): Массив',
                    Параметры: {
                        ИмяФайла: 'Имя файла, который требуется разделить на части.',
                        РазмерЧасти: 'Размер одной части файла в байтах.',
                        Путь: 'Путь к каталогу, в который будут помещены файлы, созданные в результате операции разделения. Если путь не указан, файлы будут помещены в каталог исходного файла.'
                    }
                }
            }
        },
        "РазорватьСоединениеСВнешнимИсточникомДанных": {
            name: 'РазорватьСоединениеСВнешнимИсточникомДанных',
            name_en: 'DisconnectExternalDataSource',
            description: 'Выполняет разрыв соединения с внешним источником данных.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяВнешнегоИсточникаДанных?: Строка)',
                    Параметры: {
                        ИмяВнешнегоИсточникаДанных: 'Имя внешнего источника данных, с которым нужно разорвать соединение.'
                    }
                }
            }
        },
        "РаскодироватьСтроку": {
            name: 'РаскодироватьСтроку',
            name_en: 'DecodeString',
            description: 'Раскодирует строку, закодированную в соответствии с указанным способом кодирования.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка, СпособКодированияСтроки: СпособКодированияСтроки, КодировкаСтроки?: Строка)',
                    Параметры: {
                        Строка: 'Закодированная строка.',
                        СпособКодированияСтроки: 'Способ, которым была закодирована исходная строка.',
                        КодировкаСтроки: 'Кодировка, в которую была преобразована строка перед кодированием. Значение по умолчанию: UTF8.'
                    }
                }
            }
        },
        "РольДоступна": {
            name: 'РольДоступна',
            name_en: 'IsInRole',
            description: 'Определяет доступность указанной роли текущему пользователю.',
            returns: 'Тип: Булево. Истина - роль доступна текущему пользователю; Ложь - в противном случае.',
            signature: {
                default: {
                    СтрокаПараметров: '(Роль: Строка): Булево',
                    Параметры: {
                        Роль: 'Название роли как она задана в конфигураторе или объект описания метаданного роли.'
                    }
                }
            }
        },
        "Секунда": {
            name: 'Секунда',
            name_en: 'Second',
            description: 'Определяет секунду в указанной дате.',
            returns: 'Тип: Число. Секунда в указанной дате.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Число',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "Сигнал": {
            name: 'Сигнал',
            name_en: 'Beep',
            description: 'Воспроизводит звуковой сигнал. Устройство, воспроизводящее звук, а также характер звукового сигнала зависят от программно-аппаратного состава компьютера и звуковых установок ОС.'
        },
        "Символ": {
            name: 'Символ',
            name_en: 'Char',
            description: 'Преобразует код символа в строку, содержащую символ.',
            returns: 'Тип: Строка. Результирующий символ.',
            signature: {
                default: {
                    СтрокаПараметров: '(КодСимвола: Число): Строка',
                    Параметры: {
                        КодСимвола: 'Код получаемого символа. Код задается в соответствии с кодировкой Unicode.'
                    }
                }
            }
        },
        "СкопироватьЖурналРегистрации": {
            name: 'СкопироватьЖурналРегистрации',
            name_en: 'CopyEventLog',
            description: 'Копирует часть журнала регистрации из одного файла в другой в соответствии с отбором. Если файл уже существует, то он будет заменен. Если имя файла не указано, то используется журнал регистрации текущей информационной базы. Указание одного из параметров ИмяВходногоФайла или ИмяВыходногоФайла является обязательным.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяВходногоФайла?: Строка, ИмяВыходногоФайла?: Строка, Отбор: Структура)',
                    Параметры: {
                        ИмяВходногоФайла: 'Строка, содержащая имя входного файла. Если параметр не указан, то используется файл журнала регистрации текущей информационной базы.',
                        ИмяВыходногоФайла: 'Строка, содержащая имя выходного файла. Если не указана, то используется файл журнала регистрации текущей информационной базы.',
                        Отбор: 'Структура отбора журнала регистрации:   - ДатаНачала (StartDate) - Дата; значение по умолчанию Неопределено;  - ДатаОкончания (EndDate) - Дата; значение по умолчанию Неопределено;  - Уровень (Level) - перечисление или массив перечислений; значение по умолчанию Неопределено;  - ИмяПриложения (ApplicationName) - Строка или массив строк; значение по умолчанию Неопределено;  - Пользователь (User) - ПользовательИнформационнойБазы или массив таких объектов, или Строка. Объект ПользовательИнформационнойБазы и массив таких объектов можно получить из объекта МенеджерПользователейИнформационнойБазы. Также можно задавать пользователя по имени (строкой). Причем, пользователей, которые были удалены из информацонной базы можно задавать только таким способом. Пустая строка означает "пользователя по умолчанию", который используется, когда в информационной базе нет ни одного пользователя (от имени такого пользователя работают также фоновые задания). Если в отборе задается массив пользователей, то можно перемешивать в нем значения обоих типов - строка и ПользовательИнформационнойБазы. Значение по умолчанию Неопределено;  - Компьютер (Computer) - Строка или массив строк; значение по умолчанию Неопределено;  - Событие (Event) - Строка или массив строк; значение по умолчанию Неопределено.    - Допустимые системные имена событий:  - _$Access$_.Access - Доступ. Доступ; Предназначено для регистрации фактов успешного доступа пользователей системы к тем или иным данным. Поле журнала регистрации Данные (Структура) в этом случае имеет следующий состав:   - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались. Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Access$_.AccessDenied - Доступ. Отказ в доступе; Предназначено для регистрации фактов отказа в доступе к тем или иным данным пользователям системы. Поле журнала регистрации Данные (Структура). имеет следующий состав:    - Для ошибки доступа к объекту (не ограничение доступа к данным):    - Право (Right) - имя нарушенного права;  - Для ошибки ограничения доступа к данным:    - Действие (Action) - Действие, которое выполнялось с данными, для объектных таблиц: Чтение (Read), Добавление (Insert), Изменение (Update), Удаление (Delete); для не объектных таблиц, все что не Чтение, то Изменение;  - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались.Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Data$_.Delete - Данные. Удаление;  - _$Data$_.DeletePredefinedData - Данные. Удаление предопределенных данных;  - _$Data$_.New - Данные. Добавление;  - _$Data$_.NewPredefinedData - Данные. Добавление предопределенных данных;  - _$Data$_.Post - Данные. Проведение;  - _$Data$_.PredefinedDataInitialization - Данные. Инициализация предопределенных данных;  - _$Data$_.PredefinedDataInitializationDataNotFound - Данные. Инициализация предопределенных данных, данные не найдены;  - _$Data$_.SetPredefinedDataInitialization - Данные. Установка инициализации предопределенных данных;  - _$Data$_.SetStandardODataInterfaceContent - Данные. Изменение состава стандартного интерфейса OData;  - _$Data$_.TotalsMaxPeriodUpdate - Данные. Изменение максимального периода рассчитанных итогов;  - _$Data$_.TotalsMinPeriodUpdate - Данные. Изменение минимального периода рассчитанных итогов;  - _$Data$_.Unpost - Данные. Отмена проведения;  - _$Data$_.Update - Данные. Изменение;  - _$Data$_.UpdatePredefinedData - Данные. Изменение предопределенных данных;  - _$InfoBase$_.ConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.ConfigUpdate - Информационная база. Изменение конфигурации;  - _$InfoBase$_.DBConfigBackgroundUpdateCancel - Информационная база. Отмена фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateFinish - Информационная база. Завершение фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateResume - Информационная база. Продолжение (после приостановки) процесса фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateStart - Информационная база. Запуск фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateSuspend - Информационная база. Приостановка (пауза) процесса фонового обновления;  - _$InfoBase$_.DBConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации базы данных; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.DBConfigUpdate - Информационная база. Изменение конфигурации базы данных;  - _$InfoBase$_.EraseData - Информационная база. Удаление данных информационной баз;  - _$InfoBase$_.EventLogSettingsUpdate - Информационная база. Изменение параметров журнала регистрации;  - _$InfoBase$_.InfoBaseAdmParamsUpdate - Информационная база. Изменение параметров информационной базы;  - _$InfoBase$_.MasterNodeUpdate - Информационная база. Изменение главного узла;  - _$InfoBase$_.PredefinedDataUpdate - Информационная база. Обновление предопределенных данных;  - _$InfoBase$_.RegionalSettingsUpdate - Информационная база. Изменение региональных установок;  - _$InfoBase$_.SetPredefinedDataUpdate - Информационная база. Установить обновление предопределенных данных;  - _$InfoBase$_.TARImportant - Тестирование и исправление. Ошибка;  - _$InfoBase$_.TARInfo - Тестирование и исправление. Сообщение;  - _$InfoBase$_.TARMess - Тестирование и исправление. Предупреждение;  - _$Job$_.Cancel - Фоновое задание. Отмена;  - _$Job$_.Fail - Фоновое задание. Ошибка выполнения;  - _$Job$_.Start - Фоновое задание. Запуск;  - _$Job$_.Succeed - Фоновое задание. Успешное завершение;  - _$Job$_.Terminate - Фоновое задание. Принудительное завершение;  - _$OpenIDProvider$_.NegativeAssertion - Провайдер OpenID. Отклонено; записывается базой, выступающей в роли провайдера OpenID, при отправке отрицательного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию.  - _$OpenIDProvider$_.PositiveAssertion - Провайдер OpenID. Подтверждено; записывается базой, выступающей в роли провайдера OpenID, при отправке положительного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя;  - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию;  - _$PerformError$_ - Ошибка выполнения;  - _$Session$_.Authentication - Сеанс. Аутентификация; выполняется только при удачной аутентификации. Для события Аутентификация записываются поля Пользователь и ИмяПользователя. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле Данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID;  - ИдентификаторПользователяПровайдераOpenID (OpenIDProviderUserID) - идентификатор пользователя на провайдере.  - _$Session$_.AuthenticationError - Сеанс. Ошибка аутентификации; выполняется только при ошибке аутентификации. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID  - _$Session$_.ConfigExtensionApplyError - Сеанс. Ошибка применения расширения конфигурации; записывается, если в процессе применений расширения произошла ошибка. Совпадает с текстом выводимого сообщения при невозможности подключить расширение. Поле Данные заполняется структурой со следующим составом свойств:    - Имя (Name) - Строка. Имя расширения  - _$Session$_.Finish - Сеанс. Завершение;  - _$Session$_.Start - Сеанс. Начало;  - _$Transaction$_.Begin - Транзакция. Начало;  - _$Transaction$_.Commit - Транзакция. Фиксация;  - _$Transaction$_.Rollback - Транзакция. Отмена;  - _$User$_.Delete - Пользователи. Удаление; записываются как при редактировании списка пользователей в Конфигураторе, так и при удалении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя  - _$User$_.New - Пользователи. Добавление; записываются как при создани пользователей в Конфигураторе, так и методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык.  - _$User$_.Update - Пользователи. Изменение; записываются как при редактировании списка пользователей в Конфигураторе, так и при изменении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык; Допустимые системные имена событий:  - _$Access$_.Access - Доступ. Доступ; Предназначено для регистрации фактов успешного доступа пользователей системы к тем или иным данным. Поле журнала регистрации Данные (Структура) в этом случае имеет следующий состав:   - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались. Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Access$_.AccessDenied - Доступ. Отказ в доступе; Предназначено для регистрации фактов отказа в доступе к тем или иным данным пользователям системы. Поле журнала регистрации Данные (Структура). имеет следующий состав:    - Для ошибки доступа к объекту (не ограничение доступа к данным):    - Право (Right) - имя нарушенного права;  - Для ошибки ограничения доступа к данным:    - Действие (Action) - Действие, которое выполнялось с данными, для объектных таблиц: Чтение (Read), Добавление (Insert), Изменение (Update), Удаление (Delete); для не объектных таблиц, все что не Чтение, то Изменение;  - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались.Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Data$_.Delete - Данные. Удаление;  - _$Data$_.DeletePredefinedData - Данные. Удаление предопределенных данных;  - _$Data$_.New - Данные. Добавление;  - _$Data$_.NewPredefinedData - Данные. Добавление предопределенных данных;  - _$Data$_.Post - Данные. Проведение;  - _$Data$_.PredefinedDataInitialization - Данные. Инициализация предопределенных данных;  - _$Data$_.PredefinedDataInitializationDataNotFound - Данные. Инициализация предопределенных данных, данные не найдены;  - _$Data$_.SetPredefinedDataInitialization - Данные. Установка инициализации предопределенных данных;  - _$Data$_.SetStandardODataInterfaceContent - Данные. Изменение состава стандартного интерфейса OData;  - _$Data$_.TotalsMaxPeriodUpdate - Данные. Изменение максимального периода рассчитанных итогов;  - _$Data$_.TotalsMinPeriodUpdate - Данные. Изменение минимального периода рассчитанных итогов;  - _$Data$_.Unpost - Данные. Отмена проведения;  - _$Data$_.Update - Данные. Изменение;  - _$Data$_.UpdatePredefinedData - Данные. Изменение предопределенных данных;  - _$InfoBase$_.ConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.ConfigUpdate - Информационная база. Изменение конфигурации;  - _$InfoBase$_.DBConfigBackgroundUpdateCancel - Информационная база. Отмена фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateFinish - Информационная база. Завершение фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateResume - Информационная база. Продолжение (после приостановки) процесса фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateStart - Информационная база. Запуск фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateSuspend - Информационная база. Приостановка (пауза) процесса фонового обновления;  - _$InfoBase$_.DBConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации базы данных; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.DBConfigUpdate - Информационная база. Изменение конфигурации базы данных;  - _$InfoBase$_.EraseData - Информационная база. Удаление данных информационной баз;  - _$InfoBase$_.EventLogSettingsUpdate - Информационная база. Изменение параметров журнала регистрации;  - _$InfoBase$_.InfoBaseAdmParamsUpdate - Информационная база. Изменение параметров информационной базы;  - _$InfoBase$_.MasterNodeUpdate - Информационная база. Изменение главного узла;  - _$InfoBase$_.PredefinedDataUpdate - Информационная база. Обновление предопределенных данных;  - _$InfoBase$_.RegionalSettingsUpdate - Информационная база. Изменение региональных установок;  - _$InfoBase$_.SetPredefinedDataUpdate - Информационная база. Установить обновление предопределенных данных;  - _$InfoBase$_.TARImportant - Тестирование и исправление. Ошибка;  - _$InfoBase$_.TARInfo - Тестирование и исправление. Сообщение;  - _$InfoBase$_.TARMess - Тестирование и исправление. Предупреждение;  - _$Job$_.Cancel - Фоновое задание. Отмена;  - _$Job$_.Fail - Фоновое задание. Ошибка выполнения;  - _$Job$_.Start - Фоновое задание. Запуск;  - _$Job$_.Succeed - Фоновое задание. Успешное завершение;  - _$Job$_.Terminate - Фоновое задание. Принудительное завершение;  - _$OpenIDProvider$_.NegativeAssertion - Провайдер OpenID. Отклонено; записывается базой, выступающей в роли провайдера OpenID, при отправке отрицательного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию.  - _$OpenIDProvider$_.PositiveAssertion - Провайдер OpenID. Подтверждено; записывается базой, выступающей в роли провайдера OpenID, при отправке положительного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя;  - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию;  - _$PerformError$_ - Ошибка выполнения;  - _$Session$_.Authentication - Сеанс. Аутентификация; выполняется только при удачной аутентификации. Для события Аутентификация записываются поля Пользователь и ИмяПользователя. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле Данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID;  - ИдентификаторПользователяПровайдераOpenID (OpenIDProviderUserID) - идентификатор пользователя на провайдере.  - _$Session$_.AuthenticationError - Сеанс. Ошибка аутентификации; выполняется только при ошибке аутентификации. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID  - _$Session$_.ConfigExtensionApplyError - Сеанс. Ошибка применения расширения конфигурации; записывается, если в процессе применений расширения произошла ошибка. Совпадает с текстом выводимого сообщения при невозможности подключить расширение. Поле Данные заполняется структурой со следующим составом свойств:    - Имя (Name) - Строка. Имя расширения  - _$Session$_.Finish - Сеанс. Завершение;  - _$Session$_.Start - Сеанс. Начало;  - _$Transaction$_.Begin - Транзакция. Начало;  - _$Transaction$_.Commit - Транзакция. Фиксация;  - _$Transaction$_.Rollback - Транзакция. Отмена;  - _$User$_.Delete - Пользователи. Удаление; записываются как при редактировании списка пользователей в Конфигураторе, так и при удалении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя  - _$User$_.New - Пользователи. Добавление; записываются как при создани пользователей в Конфигураторе, так и методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык.  - _$User$_.Update - Пользователи. Изменение; записываются как при редактировании списка пользователей в Конфигураторе, так и при изменении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык;   - Метаданные (Metadata - объект описания метаданного или их массив; значение по умолчанию Неопределено;  - Данные (Data) - значение, тип значения – ссылка на объект (СправочикСсылка и т.д.); значение по умолчанию Неопределено;  - ПредставлениеДанных (DataPresentation) - Строка;  - Комментарий (Comment) - Строка;  - СтатусТранзакции (TransactionStatus) - перечисление или массив перечислений; значение по умолчанию Неопределено;  - Транзакция (TransactionID) - идентификатор транзакции; Строка;  - Сеанс (Session) - номер сеанса пользователя. Число или массив чисел; значение по умолчанию Неопределено;  - РабочийСервер (ServerName) - Строка или массив строк; значение по умолчанию Неопределено;  - ОсновнойIPПорт (Port) - номер основного IP-порта рабочего процесса; Число или массив чисел; значение по умолчанию Неопределено;  - ВспомогательныйIPПорт (SyncPort) - номер вспомогательного IP-порта рабочего процесса. Число или массив чисел; значение по умолчанию Неопределено.  - РазделениеДанныхСеанса (SessionDataSeparation) - Структура, имена элементов которой соответствуют именам общих реквизитов. В процессе отбора элементы структуры РазделениеДанныхСеанса объединяются по И: запись журнала попадает в выборку, если в ней есть соответствия для всех общих реквизитов, заданных в отборе. Значение по умолчанию Неопределено.   - Значение элемента структуры, в свою очередь, может быть:   - структурой, задающей единичное значение. Элементы структуры:   - Значение (Value) - значение общего реквизита. Значение по умолчанию - Неопределено;  - Использование (Use) - Булево. Значение по умолчанию - Истина. Задает использование общего реквизита, разделяющего данные. Если Ложь - элемент Значение игнорируется и может быть опущен. Таким образом, можно отбирать записи журнала, в которых данный общий реквизит не установлен.   - массивом, который задает набор допустимых значений общего реквизита, разделяющего данные. Массив содержит структуры, каждая из которых задает единичное значение общего реквизита (как описано выше). Элементы массива учитываются по ИЛИ: запись журнала попадает в выборку, если значение общего реквизита в ней равно одному из заданных в массиве.'
                    }
                }
            }
        },
        "СмещениеЛетнегоВремени": {
            name: 'СмещениеЛетнегоВремени',
            name_en: 'DaylightTimeOffset',
            description: 'Получает смещение в секундах летнего времени заданного часового пояса относительно стандартного времени этого часового пояса для заданного универсального времени. Если УниверсальноеВремя = Неопределено, то возвращает смещение летнего времени, действующее в заданном часовом поясе.',
            signature: {
                default: {
                    СтрокаПараметров: '(ЧасовойПояс?: Строка, УниверсальноеВремя?: Дата)',
                    Параметры: {
                        ЧасовойПояс: 'Идентификатор часового пояса. Если Неопределено, то часовой пояс компьютера. Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59. Значение по умолчанию: Неопределено.',
                        УниверсальноеВремя: 'Универсальное время (UTC), для которого нужно определить смещение или Неопределено. Значение по умолчанию: Неопределено.'
                    }
                }
            }
        },
        "СмещениеСтандартногоВремени": {
            name: 'СмещениеСтандартногоВремени',
            name_en: 'StandardTimeOffset',
            description: 'Получает смещение в секундах стандартного времени заданного часового пояса относительно универсального времени без учета летнего времени для заданного универсального времени. Если УниверсальноеВремя = Неопределено, то возвращает смещение стандартного времени, действующее в заданном часовом поясе.',
            signature: {
                default: {
                    СтрокаПараметров: '(ЧасовойПояс?: Строка, УниверсальноеВремя?: Дата)',
                    Параметры: {
                        ЧасовойПояс: 'Идентификатор часового пояса. Если Неопределено, то часовой пояс компьютера. Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59. Значение по умолчанию: Неопределено.',
                        УниверсальноеВремя: 'Универсальное время (UTC), для которого нужно определить смещение или Неопределено. Значение по умолчанию: Неопределено.'
                    }
                }
            }
        },
        "СоединитьБуферыДвоичныхДанных": {
            name: 'СоединитьБуферыДвоичныхДанных',
            name_en: 'ConcatBinaryDataBuffers',
            description: 'Соединяет набор буферов в один буфер. С помощью необязательного параметра Разделитель можно задать буфер, который будет использован в качестве разделителя между частями.',
            returns: 'Тип: БуферДвоичныхДанных. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Части: Массив, Разделитель?: БуферДвоичныхДанных, ПорядокБайтов?: ПорядокБайтов): БуферДвоичныхДанных',
                    Параметры: {
                        Части: 'Массив объектов типа БуферДвоичныхДанных, которые требуется объединить.',
                        Разделитель: 'Буфер, вставляемый между частями. Если не указан, буферы будут объединены без использования разделителя.',
                        ПорядокБайтов: 'Порядок байтов.'
                    }
                }
            }
        },
        "СоздатьКаталог": {
            name: 'СоздатьКаталог',
            name_en: 'CreateDirectory',
            description: 'Создает новый каталог файлов.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяКаталога: Строка)',
                    Параметры: {
                        ИмяКаталога: 'Полное имя создаваемого каталога. Допускается использование схемы ftp для адресации файлов. При использовании этой схемы в адресах необходимо указывать прямые слеши \'/\', а не обратные \'\\\'.'
                    }
                }
            }
        },
        "СоздатьФабрикуXDTO": {
            name: 'СоздатьФабрикуXDTO',
            name_en: 'CreateXDTOFactory',
            returns: 'Тип: ФабрикаXDTO. ',
            signature: {
                ПоИмениФайла: {
                    СтрокаПараметров: '(Путь: Строка, Пакеты?: Массив): ФабрикаXDTO',
                    Параметры: {
                        Путь: 'Строка, представляющая собой путь к файлу, содержащему XML схему.',
                        Пакеты: 'Массив пакетов XDTO, которые используются при разыменовании директив импорта.'
                    }
                },
                ПоСпискуИменФайлов: {
                    СтрокаПараметров: '(Пути: Массив, Пакеты?: Массив): ФабрикаXDTO',
                    Параметры: {
                        Пути: 'Массив путей к XML схемам, на основании которых необходимо создать фабрику XDTO.',
                        Пакеты: 'Массив пакетов XDTO, которые используются для разыменования директив импорта.'
                    }
                }
            }
        },
        "СокрЛ": {
            name: 'СокрЛ',
            name_en: 'TrimL',
            description: 'Отсекает незначащие символы, стоящие слева от первого значащего символа в строке.',
            returns: 'Тип: Строка. Строка, полученная в результате отсечения пробелов .',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка): Строка',
                    Параметры: {
                        Строка: 'Исходная строка.'
                    }
                }
            }
        },
        "СокрЛП": {
            name: 'СокрЛП',
            name_en: 'TrimAll',
            description: 'Отсекает незначащие символы, стоящие слева от первого значащего символа в строке, и пробелы, стоящие справа от последнего значащего символа в строке.',
            returns: 'Тип: Строка. Строка, полученная в результате отсечения пробелов .',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка): Строка',
                    Параметры: {
                        Строка: 'Исходная строка.'
                    }
                }
            }
        },
        "СокрП": {
            name: 'СокрП',
            name_en: 'TrimR',
            description: 'Отсекает незначащие символы, стоящие справа от последнего значащего символа в строке.',
            returns: 'Тип: Строка. Строка, полученная в результате отсечения пробелов .',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка): Строка',
                    Параметры: {
                        Строка: 'Исходная строка.'
                    }
                }
            }
        },
        "Сообщить": {
            name: 'Сообщить',
            name_en: 'Message',
            description: 'Выводит текст сообщения в окно сообщений. Если в момент вызова окно сообщений отсутствует, то будет открыто новое окно сообщений. Сообщение, в зависимости от его смысловой нагрузки, можно пометить одной из пиктограмм, входящих в предопределенный набор.',
            signature: {
                default: {
                    СтрокаПараметров: '(ТекстСообщения: Строка, Статус?: СтатусСообщения)',
                    Параметры: {
                        ТекстСообщения: 'Текст сообщения.',
                        Статус: 'Статус сообщения. Определяет вид пиктограммы.  В режиме управляемого приложения параметр игнорируется. Значение по умолчанию: Обычное.'
                    }
                }
            }
        },
        "Состояние": {
            name: 'Состояние',
            name_en: 'Status',
            description: 'Выводит текст в панель состояния.',
            signature: {
                default: {
                    СтрокаПараметров: '(ТекстСообщения?: Строка, Прогресс?: Число, Пояснение?: Строка, Картинка?: Картинка)',
                    Параметры: {
                        ТекстСообщения: 'Строка, предназначенная для вывода в панель состояния. Если параметр не указан, возобновляется вывод системного текста в панель состояния.',
                        Прогресс: 'Значение индикатора прогресса (от 1 до 100).  Если не задан, индикатор прогресса не отображается.',
                        Пояснение: 'Текст пояснения.',
                        Картинка: 'Картинка.'
                    }
                }
            }
        },
        "СохранитьЗначение": {
            name: 'СохранитьЗначение',
            name_en: 'SaveValue',
            description: 'Сохраняет значение для использования не только в текущем, но и в последующих сеансах работы с программой. Значение хранится индивидуально для каждой пары информационная база - пользователь. Например, можно сохранять значения по умолчанию, используемые данным пользователем.',
            signature: {
                default: {
                    СтрокаПараметров: '(Имя: Строка, Значение: Произвольный)',
                    Параметры: {
                        Имя: 'Имя, с которым сохраняется значение, используется для идентификации сохраняемых значений.',
                        Значение: 'Сохраняемое значение.'
                    }
                }
            }
        },
        "СохранитьНастройкиПользователя": {
            name: 'СохранитьНастройкиПользователя',
            name_en: 'SaveUserSettings',
            description: 'Выполняет сохранение пользовательских настроек в процессе работы, не дожидаясь завершения приложения.'
        },
        "Сред": {
            name: 'Сред',
            name_en: 'Mid',
            description: 'Выбирает строку символов, начиная с символа НачальныйНомер, общим количеством ЧислоСимволов.',
            returns: 'Тип: Строка. Строка выбранных символов.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка, НачальныйНомер: Число, ЧислоСимволов?: Число): Строка',
                    Параметры: {
                        Строка: 'Исходная строка.',
                        НачальныйНомер: 'Начальный номер символа, с которого начинается выборка. Нумерация символов в строке начинается с 1. Если указано значение, меньшее или равное нулю, то параметр принимает значение 1.',
                        ЧислоСимволов: 'Количество выбираемых символов. Если параметр не указан, то выбираются символы до конца строки.'
                    }
                }
            }
        },
        "СтрДлина": {
            name: 'СтрДлина',
            name_en: 'StrLen',
            description: 'Получает количество символов в строке.',
            returns: 'Тип: Число. Длина строки.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка): Число',
                    Параметры: {
                        Строка: 'Исходная строка.'
                    }
                }
            }
        },
        "СтрЗаканчиваетсяНа": {
            name: 'СтрЗаканчиваетсяНа',
            name_en: 'StrEndsWith',
            description: 'Определяет, заканчивается ли строка указанной подстрокой. Определение выполняется с учетом регистра, аналогично функции Найти.',
            returns: 'Тип: Булево. Истина - строка заканчивается указанной подстрокой; Ложь - в противном случае',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка, СтрокаПоиска: Строка): Булево',
                    Параметры: {
                        Строка: 'Строка, окончание которой проверяется на совпадение с подстрокой поиска.',
                        СтрокаПоиска: 'Строка, содержащая предполагаемое окончание строки. В случае если переданное значение является пустой строкой генерируется исключительная ситуация.'
                    }
                }
            }
        },
        "СтрЗаменить": {
            name: 'СтрЗаменить',
            name_en: 'StrReplace',
            description: 'Находит в исходной строке все вхождения подстроки поиска и заменяет ее на подстроку замены.',
            returns: 'Тип: Строка. Строка, полученная в результате замены.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка, ПодстрокаПоиска: Строка, ПодстрокаЗамены: Строка): Строка',
                    Параметры: {
                        Строка: 'Исходная строка.',
                        ПодстрокаПоиска: 'Искомая подстрока.',
                        ПодстрокаЗамены: 'Подстрока, на которую будет заменена подстрока поиска.'
                    }
                }
            }
        },
        "СтрНайти": {
            name: 'СтрНайти',
            name_en: 'StrFind',
            description: 'Находит первое вхождение искомой строки как подстроки в исходной строке.',
            returns: 'Тип: Число. Позиция первого знака найденной подстроки. Нумерация символов в строке начинается с 1. Если строка не содержит указанной подстроки, то возвращается 0.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка, ПодстрокаПоиска: Строка, НаправлениеПоиска?: НаправлениеПоиска, НачальнаяПозиция?: Число, НомерВхождения?: Число): Число',
                    Параметры: {
                        Строка: 'Исходная строка.',
                        ПодстрокаПоиска: 'Искомая подстрока.',
                        НаправлениеПоиска: 'Указывает направление поиска подстроки в строке. Значение по умолчанию: СНачала.',
                        НачальнаяПозиция: 'Указывает позицию в строке, с которой начинается поиск.   - Если параметр не задан и в параметре НаправлениеПоиска указано значение СНачала, то значение по-умолчанию равно 1.  - Если параметр не задан и в параметре НаправлениеПоиска указано значение СКонца, то значение по умолчанию равно длине строки. Не может быть отрицательным. В случае указания отрицательного значения выдаётся исключительная ситуация "Неверное значение параметра".',
                        НомерВхождения: 'Указывает номер вхождения искомой подстроки в исходной строке. Значение по умолчанию: 1.'
                    }
                }
            }
        },
        "СтрНачинаетсяС": {
            name: 'СтрНачинаетсяС',
            name_en: 'StrStartWith',
            description: 'Определяет, что строка начинается с указанной подстроки. Определение выполняется с учетом регистра, аналогично функции Найти.',
            returns: 'Тип: Булево. Истина - строка начинается с указанной подстроки, Ложь - в противном случае.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка, СтрокаПоиска: Строка): Булево',
                    Параметры: {
                        Строка: 'Строка, начало которой проверяется на совпадение с подстрокой поиска.',
                        СтрокаПоиска: 'Строка, содержащая предполагаемое начало строки. В случае если переданное значение является пустой строкой генерируется исключительная ситуация.'
                    }
                }
            }
        },
        "Строка": {
            name: 'Строка',
            name_en: 'String',
            description: 'Преобразует полученный параметр в значение типа Строка. При преобразовании к строке числа формируется его полное представление в стандартном виде, соответствующем национальным установкам. Преобразование значений типа Булево зависит от национальных установок и содержит строковое представление этих значений. При преобразовании к строке даты формируется ее полное представление в стандартном читабельном виде, соответствующем национальным установкам. Преобразование к строке значений остальных типов производится по мере возможности и обычно содержит читабельное представление значения.',
            returns: 'Тип: Строка. Полученное значение.',
            signature: {
                default: {
                    СтрокаПараметров: '(Значение: Произвольный): Строка',
                    Параметры: {
                        Значение: 'Исходное значение.'
                    }
                }
            }
        },
        "СтрокаСоединенияИнформационнойБазы": {
            name: 'СтрокаСоединенияИнформационнойБазы',
            name_en: 'InfoBaseConnectionString',
            description: 'Возвращает Строка соединения информационной базы, которую, например, можно использовать для запуска 1С:Предприятия средствами встроенного языка в Automation, Менеджер COM-соединений. Пример результата метода: File="C:\\1cv8\\Base".',
            returns: 'Тип: Строка. '
        },
        "СтрПолучитьСтроку": {
            name: 'СтрПолучитьСтроку',
            name_en: 'StrGetLine',
            description: 'Получает строку многострочной строки по номеру.',
            returns: 'Тип: Строка. Полученная строка.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка, НомерСтроки: Число): Строка',
                    Параметры: {
                        Строка: 'Исходная строка.',
                        НомерСтроки: 'Номер получаемой строки. Нумерация строк в многострочной строке начинается с 1.'
                    }
                }
            }
        },
        "СтрРазделить": {
            name: 'СтрРазделить',
            name_en: 'StrSplit',
            description: 'Разделяет строку на части по указанным символам-разделителям.',
            returns: 'Тип: Массив. Массив со строками, которые получились в результате разделения исходной строки.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка, Разделитель: Строка, ВключатьПустые?: Булево): Массив',
                    Параметры: {
                        Строка: 'Разделяемая строка.',
                        Разделитель: 'Строка символов, каждый из которых является индивидуальным разделителем.',
                        ВключатьПустые: 'Указывает необходимость включать в результат пустые строки, которые могут образоваться в результате разделения исходной строки. Значение по умолчанию: Истина.'
                    }
                }
            }
        },
        "СтрСоединить": {
            name: 'СтрСоединить',
            name_en: 'StrConcat',
            description: 'Соединяет массив переданных строк в одну строку с указанным разделителем.',
            returns: 'Тип: Строка. Строка, содержащая соединенные исходные строки с разделителем между ними.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строки: ФиксированныйМассив, Разделитель?: Строка): Строка',
                    Параметры: {
                        Строки: 'Массив, содержащий объединяемые строки.',
                        Разделитель: 'Строка, которая будет вставлена между объединяемыми строками. Если параметр не задан, строки будут объединены слитно друг с другом. Значение по умолчанию: Неопределено.'
                    }
                }
            }
        },
        "СтрСравнить": {
            name: 'СтрСравнить',
            name_en: 'StrCompare',
            description: 'Выполняет сравнение строк без учета регистра, аналогичное сравнению строк с помощью объекта СравнениеЗначений.',
            returns: 'Тип: Число. Возвращает:   - -1 - первая строка меньше второй.  - 1 - первая строка больше второй.  - 0 - первая строка равна второй.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка1: Строка, Строка2: Строка): Число',
                    Параметры: {
                        Строка1: 'Строка для сравнения',
                        Строка2: 'Строка для сравнения.'
                    }
                }
            }
        },
        "СтрЧислоВхождений": {
            name: 'СтрЧислоВхождений',
            name_en: 'StrOccurrenceCount',
            description: 'Вычисляет число вхождений подстроки поиска в исходной строке.',
            returns: 'Тип: Число. Число вхождений.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка, ПодстрокаПоиска: Строка): Число',
                    Параметры: {
                        Строка: 'Исходная строка.',
                        ПодстрокаПоиска: 'Искомая подстрока.'
                    }
                }
            }
        },
        "СтрЧислоСтрок": {
            name: 'СтрЧислоСтрок',
            name_en: 'StrLineCount',
            description: 'Позволяет посчитать число строк в многострочной строке. Строки в многострочной строке разделены символами перевода строк (Символы.ПС).',
            returns: 'Тип: Число. Число строк.',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка): Число',
                    Параметры: {
                        Строка: 'Исходная строка.'
                    }
                }
            }
        },
        "СтрШаблон": {
            name: 'СтрШаблон',
            name_en: 'StrTemplate',
            description: 'Подставляет параметры в строку по номеру.   - Если в строке встречается символ % два раза подряд (%%), такая пара трактуется как одинарный процент, независимо от того, стоит ли сразу за ними цифра или не стоит.  - Если параметров недостаточно для заполнения в шаблоне параметра %N, генерируется исключительная ситуация "Недостаточно фактических параметров".  - Если параметров слишком много, чтобы подставить их все в шаблон, генерируется исключительная ситуация "Очень много параметров".',
            returns: 'Тип: Строка. Строка шаблона с подставленными параметрами.',
            signature: {
                default: {
                    СтрокаПараметров: '(Шаблон: Строка, Значение1_Значение10?: Произвольный): Строка',
                    Параметры: {
                        Шаблон: 'Строка, содержащая маркеры подстановки вида: "%1..%N". Нумерация маркеров начинается с 1. N не может быть более 10.  Если требуется сразу после номера подстановки написать цифру, то для номер подставновки должен быть взят в скобки. Тогда строка может иметь следующий вид: "%(1)1cv8с.exe"',
                        Значение1_Значение10: 'Параметры, содержащие произвольные значения, строковые представления которых должны быть подставлены в шаблон. Указываются через запятую. Количество значений должно совпадать с числом N из %N. Если количество значений не совпадает с числом N из %N, тогда генерируется исключительная ситуация "Недостаточно фактических параметров".'
                    }
                }
            }
        },
        "ТекущаяДата": {
            name: 'ТекущаяДата',
            name_en: 'CurrentDate',
            description: 'Определяет текущую (системную) дату на компьютере.',
            returns: 'Тип: Дата. Текущая (системная) дата.'
        },
        "ТекущаяДатаСеанса": {
            name: 'ТекущаяДатаСеанса',
            name_en: 'CurrentSessionDate',
            description: 'Получает текущую дату сервера, приведенную к часовому поясу сеанса. При вычислении даты используется один из заданных часовых поясов в порядке: часовой пояс сеанса, часовой пояс информационной базы, часовой пояс сервера.',
            returns: 'Тип: Дата. '
        },
        "ТекущаяУниверсальнаяДата": {
            name: 'ТекущаяУниверсальнаяДата',
            name_en: 'CurrentUniversalDate',
            description: 'Получает текущую универсальную дату компьютера.',
            returns: 'Тип: Дата. '
        },
        "ТекущаяУниверсальнаяДатаВМиллисекундах": {
            name: 'ТекущаяУниверсальнаяДатаВМиллисекундах',
            name_en: 'CurrentUniversalDateInMilliseconds',
            description: 'Получает текущую универсальную дату в миллисекундах (в UTC, начиная с 01.01.0001 00:00:00).',
            returns: 'Тип: Число. '
        },
        "ТекущийВариантИнтерфейсаКлиентскогоПриложения": {
            name: 'ТекущийВариантИнтерфейсаКлиентскогоПриложения',
            name_en: 'ClientApplicationInterfaceCurrentVariant',
            description: 'Получает текущий вариант интерфейса.',
            returns: 'Тип: ВариантИнтерфейсаКлиентскогоПриложения. '
        },
        "ТекущийВариантОсновногоШрифтаКлиентскогоПриложения": {
            name: 'ТекущийВариантОсновногоШрифтаКлиентскогоПриложения',
            name_en: 'ClientApplicationBaseFontCurrentVariant',
            description: 'Получает текущий вариант основного шрифта приложения.',
            returns: 'Тип: ВариантОсновногоШрифтаКлиентскогоПриложения. '
        },
        "ТекущийКодЛокализации": {
            name: 'ТекущийКодЛокализации',
            name_en: 'CurrentLocaleCode',
            description: 'Получает код локализации (язык, страна) текущего сеанса, который может быть ключом командной строки /VL или, при запуске из Конфигуратора, установкой параметров запуска.',
            returns: 'Тип: Строка. '
        },
        "ТекущийРежимЗапуска": {
            name: 'ТекущийРежимЗапуска',
            name_en: 'CurrentRunMode',
            description: 'Получает режим запуска клиентского приложения текущего сеанса работы.',
            returns: 'Тип: РежимЗапускаКлиентскогоПриложения, Неопределено. Неопределено, если режим запуска не является ни обычным, ни управляемым - например, внешнее соединение.'
        },
        "ТекущийЯзык": {
            name: 'ТекущийЯзык',
            name_en: 'CurrentLanguage',
            description: 'Получает язык интерфейса, выбранный для текущего пользователя или основной язык, если нет текущего пользователя или для него не указан язык.',
            returns: 'Тип: ОбъектМетаданных: Язык, Строка. В режиме запуска "Толстый клиент" возвращается ОбъектМетаданных: Язык.  В режимах запуска "Тонкий клиент" и "Веб-клиент" возвращается значение свойства КодЯзыка.'
        },
        "ТекущийЯзыкСистемы": {
            name: 'ТекущийЯзыкСистемы',
            name_en: 'CurrentSystemLanguage',
            description: 'Возвращает используемый системой язык.',
            returns: 'Тип: Строка. '
        },
        "Тип": {
            name: 'Тип',
            name_en: 'Type',
            description: 'Получает тип по его строковому имени.',
            returns: 'Тип: Тип. Полученный тип значения.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяТипа: Строка): Тип',
                    Параметры: {
                        ИмяТипа: 'Имя получаемого типа.'
                    }
                }
            }
        },
        "ТипЗнч": {
            name: 'ТипЗнч',
            name_en: 'TypeOf',
            description: 'Получает тип значения.',
            returns: 'Тип: Тип. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Значение: Произвольный): Тип',
                    Параметры: {
                        Значение: 'Значение, тип которого необходимо получить.'
                    }
                }
            }
        },
        "ТранзакцияАктивна": {
            name: 'ТранзакцияАктивна',
            name_en: 'TransactionActive',
            description: 'Получить текущее состояние транзакции.',
            returns: 'Тип: Булево. Истина - в системе имеется активная транзакция, Ложь - в текущий момент в системе не имеется активных транзакций.'
        },
        "ТРег": {
            name: 'ТРег',
            name_en: 'Title',
            description: 'Преобразует строку следующим образом: у каждого слова строки первый символ преобразуется к верхнему регистру. Все остальные символы преобразуются к нижнему регистру.',
            returns: 'Тип: Строка. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Строка: Строка): Строка',
                    Параметры: {
                        Строка: 'Преобразуемая строка.'
                    }
                }
            }
        },
        "УдалитьДанныеИнформационнойБазы": {
            name: 'УдалитьДанныеИнформационнойБазы',
            name_en: 'EraseInfoBaseData',
            description: 'Выполняет удаление данных информационной базы:   - Из таблиц, определяемых структурой метаданных;  - Из хранилищ настроек;  - Из истории;  - Из списка пользователей;  - Административных параметров информационной базы;  - Расширений конфигурации.'
        },
        "УдалитьИзВременногоХранилища": {
            name: 'УдалитьИзВременногоХранилища',
            name_en: 'DeleteFromTempStorage',
            description: 'Удаляет ранее помещенное значение из временного хранилища.',
            signature: {
                default: {
                    СтрокаПараметров: '(Адрес: Строка)',
                    Параметры: {
                        Адрес: 'Адрес файла во временном хранилище, который необходимо удалить.'
                    }
                }
            }
        },
        "УдалитьОбъекты": {
            name: 'УдалитьОбъекты',
            name_en: 'DeleteObjects',
            description: 'Удаляет объекты, ссылки на которые переданы в параметре СписокСсылок.ОбластьПоиска. При проверке ссылочной целостности поиск осуществляется среди всех данных, из которых могут быть ссылки на переданные объекты. Если на какой-либо объект нет доступа, то вызывается исключение.',
            signature: {
                default: {
                    СтрокаПараметров: '(СписокСсылок: Массив, Проверять?: Булево, НайденныеДанные?: ТаблицаЗначений, ОбластьПоиска?: Массив, ВключитьОбъекты?: Массив, ИсключитьОбъекты?: Массив)',
                    Параметры: {
                        СписокСсылок: 'Список ссылок на объекты, которые нужно удалить.',
                        Проверять: 'Определяет, выполнять ли контроль ссылочной целостности при выполнении процедуры. Истина - перед удалением проверяется, нет ли ссылок на удаляемый объект. Если есть, то объект не удаляется, а ссылки помещаются в таблицу значений <НайденныеДанные>. Ложь - проверка не выполняется. Значение по умолчанию: Ложь.',
                        НайденныеДанные: 'Содержит ссылки на найденные объекты в виде ТаблицаЗначений, состоящей из колонок с индексами: 0 - искомая ссылка; 1 - ссылка на объект, если найденная ссылка соответствует объектной таблице или значение, идентифицирующее запись необъектной таблицы; 2 - объект метаданных, которому соответствуют данные, в которых найдена ссылка. В таблицу выводятся только непосредственно препятствующие удалению объекты (без рекурсии).',
                        ОбластьПоиска: 'Определяет область поиска объектов, которые следует удалить. Область устанавливается комбинацией разделителей, в состав которых включены объекты метаданных, среди данных которых следует выполнять поиск. Элемент массива имеет тип Массив. Элемент вложенного массива имеет тип:   - Объект метаданных – Общий реквизит, разделяющий данные.  - Строка – имя общего реквизита, разделяющего данные. По умолчанию имеет значение Неопределено. Допустимые значения:   - Неопределено,  - Массив с комбинациями разделителей, определяющий область поиска,  - Пустой массив - область поиска определяется параметрами метода ВключитьОбъекты и ИсключитьОбъекты. Примечание. Если комбинация разделителей содержит повторы, то вызывается исключение, т.к. в конфигурации не может быть объектов метаданных, дважды включенных в состав одного разделителя. Значение по умолчанию: Неопределено.',
                        ВключитьОбъекты: 'Позволяет явно указать объекты метаданных, которые должны присутствовать в области поиска ссылок на объекты. Элементом массива могут быть:   - Объект метаданных.  - Строка – полное имя объекта метаданных. Допустимые значения:   - Неопределено,  - Пустой массив,  - Массив объектов метаданных.  Значение по умолчанию: Неопределено.',
                        ИсключитьОбъекты: 'В качестве элементов массива могут выступать:   - Объект метаданных,  - Строка – полное имя объекта метаданных. Свойство позволяет явно указать объекты метаданных, которые следует исключить из области поиска ссылок на объекты. Допустимые значения:   - Неопределено  - Пустой массив (нет объектов, которые необходимо дополнительно включить в область поиска).  - Массив объектов метаданных.  Значение по умолчанию: Неопределено.'
                    }
                }
            }
        },
        "УдалитьФайлы": {
            name: 'УдалитьФайлы',
            name_en: 'DeleteFiles',
            description: 'Удаляет указанные файлы.',
            signature: {
                default: {
                    СтрокаПараметров: '(Путь: Строка, Маска?: Строка)',
                    Параметры: {
                        Путь: 'Путь к удаляемым файлам.',
                        Маска: 'Маска для выбора удаляемых файлов.  Если <Маска> не указана, то удаляются все файлы и каталог <Путь>. Для операционной системы MS Windows:  В строке маски, помимо обычных символов, допускается использование символа "*" (звездочка), обозначающего любое число произвольных символов, и "?" (знак вопроса), обозначающего один произвольный символ. Можно последовательно перечислить несколько фильтров, разделенных символом "|" (вертикальная черта). Для операционных систем Linux, MacOS:  В строке маски допускается использование следующих последовательностей:   - любой символ, допустимый в имени файла. Сопоставление указанных символов производится с учетом регистра;  - "*" (звездочка) - любая последовательность символов;  - "?" (знак вопроса) - любой символ;  - "[" - класс символов. После открывающей квадратной скобки указывается последовательность символов. Паттерн соответствует любому из указанных символов. Можно указывать диапазон, используя "-". Описание класса символов завершается "]". Для указания "-" в качестве символа класса нужно указать его первым или последним символом. Если после "[" указан знак "!", то класс описывает все символы, кроме указанных.'
                    }
                }
            }
        },
        "УниверсальноеВремя": {
            name: 'УниверсальноеВремя',
            name_en: 'ToUniversalTime',
            description: 'Преобразует местное время в заданном часовом поясе в универсальное время.',
            signature: {
                default: {
                    СтрокаПараметров: '(МестноеВремя: Дата, ЧасовойПояс?: Строка)',
                    Параметры: {
                        МестноеВремя: 'Локальное время.',
                        ЧасовойПояс: 'Может быть задан только в коде, исполняемом на сервере, режиме запуска "Толстый клиент" и во внешнем соединении. Идентификатор часового пояса, к которому относится местное время. Если не задан (Неопределено), то часовой пояс компьютера. Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59. Значение по умолчанию: Неопределено.'
                    }
                }
            }
        },
        "УстановитьБезопасныйРежим": {
            name: 'УстановитьБезопасныйРежим',
            name_en: 'SetSafeMode',
            description: 'В файловом варианте информационной базы или на сервере в клиент-серверном варианте информационной базы включает или выключает безопасный режим исполнения кода. В безопасном режиме:   - игнорируется привилегированный режим;  - запрещены внешние по отношению к платформе 1С:Предприятие действия:   - операции с COM-объектами;  - загрузка и подключение внешних компонентов;  - запуск внешних приложений и команд операционной системы;  - доступ к файловой системе;  - доступ к Интернету. В клиент-серверном варианте при выполнении на клиенте данный метод не выполняет никаких действий. Первое выполнение метода с любомым значением параметра, кроме Ложь, в файловом варианте информационной базы или на сервере в клиент-серверном варианте информационной базы включает безопасный режим. Для явного выключения безопасного режима необходимо внутри процедуры или функции, в которой он был включен, вызвать метод с параметром Ложь столько же раз, сколько раз в этой же процедуре или функции был вызван метод с параметром Истина или Строка. Если этого сделано не было, то при возврате из процедуры/функции, в которой был включен безопасный режим, он будет выключен автоматически (неявно). Если в процедуре или функции вызовов метода с параметром Ложь сделано больше, чем вызовов с параметром Истина или Строка, то будет вызвано исключение.',
            signature: {
                default: {
                    СтрокаПараметров: '(БезопасныйРежим: Булево)',
                    Параметры: {
                        БезопасныйРежим: 'Определяет, будет ли включен безопасный режим:   - Строка - имя профиля безопасности. Включить режим и назначить профиль безопасности. Может быть использовано имя только того профиля, у которого свойство SafeModeProfile установлено в значение Истина. Если безопасный режим уже включен, то повторный вызов метода с именем другого профиля не изменит текущий профиль безопасности;  - Истина - включить режим без указания конкретного профиля безопасности;  - Ложь - выключить режим.'
                    }
                }
            }
        },
        "УстановитьБезопасныйРежимРазделенияДанных": {
            name: 'УстановитьБезопасныйРежимРазделенияДанных',
            name_en: 'SetDataSeparationSafeMode',
            description: 'Устанавливает или отменяет безопасный режим разделения данных по заданному общему реквизиту. Установка безопасного режима действует до вызова его явной отмены или до возврата из метода встроенного языка, в котором выполнена его установка. Правила установки и отмены безопасного режима разделения данных аналогичны привилегированному режиму и безопасному режиму. Не позволяет отменить режим безопасного сеанса, определяемый установкой атрибута safe=”true” элемента zone файла default.vrd.  В каждом методе встроенного языка для каждого разделителя неявно определяется счетчик безопасного режима разделения данных с начальным значением 0. Установка безопасного режима разделения данных увеличивает значение счетчика в текущем методе, а отмена - уменьшает. Если значение текущего счетчика – 0, то отмена безопасного режима разделения данных порождает исключение.  Если при возврате из метода встроенного языка значение текущего счетчика отлично от 0, то оно принудительно сбрасывается в 0. Если суммарное значение счетчиков по текущему состоянию стека вызовов встроенного языка на сервере 1С:Предприятия отлично от нуля, то безопасный режим разделения данных включен.',
            signature: {
                default: {
                    СтрокаПараметров: '(ОбщийРеквизит: Строка, Режим: Булево)',
                    Параметры: {
                        ОбщийРеквизит: 'Имя общего реквизита со значением "Использовать" свойства "Разделение данных", для которого должен быть установлен или отменен безопасный режим.',
                        Режим: 'Истина – установить безопасный режим разделения данных по заданному общему реквизиту; Ложь – отменить безопасный режим разделения данных по заданному общему реквизиту.'
                    }
                }
            }
        },
        "УстановитьБлокировкуСеансов": {
            name: 'УстановитьБлокировкуСеансов',
            name_en: 'SetSessionsLock',
            description: 'Устанавливает режим блокировки сеансов.',
            signature: {
                default: {
                    СтрокаПараметров: '(Блокировка: БлокировкаСеансов)',
                    Параметры: {
                        Блокировка: 'Новое описание блокировки сеансов.'
                    }
                }
            }
        },
        "УстановитьВнешнююКомпоненту": {
            name: 'УстановитьВнешнююКомпоненту',
            name_en: 'InstallAddIn',
            description: 'Доставляет объект внешнего компонента с сервера на клиент, после чего он становится доступен для метода ПодключитьВнешнююКомпоненту.',
            signature: {
                default: {
                    СтрокаПараметров: '(Местоположение: Строка)',
                    Параметры: {
                        Местоположение: 'Строка, определяющая местоположение внешнего компонента. В качестве строки может использоваться:   - полное имя макета, в котором хранится внешний компонент в архиве;  - URL к внешнему компоненту, упакованному в ZIP-архив, в формате, аналогичном ПолучитьНавигационнуюСсылку().'
                    }
                }
            }
        },
        "УстановитьВремяЗавершенияСпящегоСеанса": {
            name: 'УстановитьВремяЗавершенияСпящегоСеанса',
            name_en: 'SetHibernateSessionTerminateTime',
            description: 'Установить интервал времени в секундах, по истечении которого спящий сеанс будет завершен.',
            signature: {
                default: {
                    СтрокаПараметров: '(Таймаут?: Число)',
                    Параметры: {
                        Таймаут: 'Интервал времени в секундах, по истечении которого спящий сеанс завершается. Значение по умолчанию: 86400.'
                    }
                }
            }
        },
        "УстановитьВремяЗасыпанияПассивногоСеанса": {
            name: 'УстановитьВремяЗасыпанияПассивногоСеанса',
            name_en: 'SetPassiveSessionHibernateTime',
            description: 'Устанавливает интервал времени в секундах, по истечении которого неактивный сеанс переводится в спящий режим.',
            signature: {
                default: {
                    СтрокаПараметров: '(Таймаут?: Число)',
                    Параметры: {
                        Таймаут: 'Интервал времени в секундах, по истечении которого неактивный сеанс переводится в спящий режим. Значение по умолчанию: 1200.'
                    }
                }
            }
        },
        "УстановитьВремяОжиданияБлокировкиДанных": {
            name: 'УстановитьВремяОжиданияБлокировкиДанных',
            name_en: 'SetLockWaitTime',
            description: 'Устанавливает время ожидания блокировки данных (в секундах).',
            signature: {
                default: {
                    СтрокаПараметров: '(Таймаут?: Число)',
                    Параметры: {
                        Таймаут: 'Время ожидания блокировки данных (в секундах). Значение по умолчанию: 20.'
                    }
                }
            }
        },
        "УстановитьЗаголовокКлиентскогоПриложения": {
            name: 'УстановитьЗаголовокКлиентскогоПриложения',
            name_en: 'SetClientApplicationCaption',
            description: 'Устанавливает заголовок приложения, которое используется при формировании заголовков окон.',
            signature: {
                default: {
                    СтрокаПараметров: '(ПредставлениеКлиентскогоПриложения: Строка)',
                    Параметры: {
                        ПредставлениеКлиентскогоПриложения: 'Представление клиентского приложения.'
                    }
                }
            }
        },
        "УстановитьЗаголовокСистемы": {
            name: 'УстановитьЗаголовокСистемы',
            name_en: 'SetCaption',
            description: 'Устанавливает новый заголовок главного окна программы.',
            signature: {
                default: {
                    СтрокаПараметров: '(Заголовок: Строка)',
                    Параметры: {
                        Заголовок: 'Текст, устанавливаемый в качестве заголовка главного окна программы.'
                    }
                }
            }
        },
        "УстановитьИспользованиеЖурналаРегистрации": {
            name: 'УстановитьИспользованиеЖурналаРегистрации',
            name_en: 'SetEventLogUsing',
            description: 'Метод устанавливает, какие события (по уровню важности) должны регистрироваться в журнале.',
            signature: {
                default: {
                    СтрокаПараметров: '(Уровни: Массив)',
                    Параметры: {
                        Уровни: 'Массив уровней важности регистрируемых событий. Состоит из значений типа УровеньЖурналаРегистрации. Пустой массив означает, что никакие события регистрировать не надо. Помимо пустого массива, допускаются следующие наборы значений:   - Ошибка;  - Ошибка, Предупреждение;  - Ошибка, Предупреждение, Информация;  - Ошибка, Предупреждение, Информация, Примечание. Порядок значений в массиве несущественен.'
                    }
                }
            }
        },
        "УстановитьИспользованиеСобытияЖурналаРегистрации": {
            name: 'УстановитьИспользованиеСобытияЖурналаРегистрации',
            name_en: 'SetEventLogEventUse',
            description: 'Управляет регистрацией событий в журнале регистрации. Устанавливает для информационной базы режим регистрации события журнала регистрации. По умолчанию все события используются.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяСобытия: Строка, Использование: ИспользованиеСобытияЖурналаРегистрации)',
                    Параметры: {
                        ИмяСобытия: 'Имя регистрируемого события. Допустимые системные имена событий:    - _$Access$_.Access - Доступ. Доступ; Предназначено для регистрации фактов успешного доступа пользователей системы к тем или иным данным. Поле журнала регистрации Данные (Структура) в этом случае имеет следующий состав:   - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались. Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Access$_.AccessDenied - Доступ. Отказ в доступе; Предназначено для регистрации фактов отказа в доступе к тем или иным данным пользователям системы. Поле журнала регистрации Данные (Структура). имеет следующий состав:    - Для ошибки доступа к объекту (не ограничение доступа к данным):    - Право (Right) - имя нарушенного права;  - Для ошибки ограничения доступа к данным:    - Действие (Action) - Действие, которое выполнялось с данными, для объектных таблиц: Чтение (Read), Добавление (Insert), Изменение (Update), Удаление (Delete); для не объектных таблиц, все что не Чтение, то Изменение;  - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались.Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Data$_.Delete - Данные. Удаление;  - _$Data$_.DeletePredefinedData - Данные. Удаление предопределенных данных;  - _$Data$_.New - Данные. Добавление;  - _$Data$_.NewPredefinedData - Данные. Добавление предопределенных данных;  - _$Data$_.Post - Данные. Проведение;  - _$Data$_.PredefinedDataInitialization - Данные. Инициализация предопределенных данных;  - _$Data$_.PredefinedDataInitializationDataNotFound - Данные. Инициализация предопределенных данных, данные не найдены;  - _$Data$_.SetPredefinedDataInitialization - Данные. Установка инициализации предопределенных данных;  - _$Data$_.SetStandardODataInterfaceContent - Данные. Изменение состава стандартного интерфейса OData;  - _$Data$_.TotalsMaxPeriodUpdate - Данные. Изменение максимального периода рассчитанных итогов;  - _$Data$_.TotalsMinPeriodUpdate - Данные. Изменение минимального периода рассчитанных итогов;  - _$Data$_.Unpost - Данные. Отмена проведения;  - _$Data$_.Update - Данные. Изменение;  - _$Data$_.UpdatePredefinedData - Данные. Изменение предопределенных данных;  - _$InfoBase$_.ConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.ConfigUpdate - Информационная база. Изменение конфигурации;  - _$InfoBase$_.DBConfigBackgroundUpdateCancel - Информационная база. Отмена фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateFinish - Информационная база. Завершение фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateResume - Информационная база. Продолжение (после приостановки) процесса фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateStart - Информационная база. Запуск фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateSuspend - Информационная база. Приостановка (пауза) процесса фонового обновления;  - _$InfoBase$_.DBConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации базы данных; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.DBConfigUpdate - Информационная база. Изменение конфигурации базы данных;  - _$InfoBase$_.EraseData - Информационная база. Удаление данных информационной баз;  - _$InfoBase$_.EventLogSettingsUpdate - Информационная база. Изменение параметров журнала регистрации;  - _$InfoBase$_.InfoBaseAdmParamsUpdate - Информационная база. Изменение параметров информационной базы;  - _$InfoBase$_.MasterNodeUpdate - Информационная база. Изменение главного узла;  - _$InfoBase$_.PredefinedDataUpdate - Информационная база. Обновление предопределенных данных;  - _$InfoBase$_.RegionalSettingsUpdate - Информационная база. Изменение региональных установок;  - _$InfoBase$_.SetPredefinedDataUpdate - Информационная база. Установить обновление предопределенных данных;  - _$InfoBase$_.TARImportant - Тестирование и исправление. Ошибка;  - _$InfoBase$_.TARInfo - Тестирование и исправление. Сообщение;  - _$InfoBase$_.TARMess - Тестирование и исправление. Предупреждение;  - _$Job$_.Cancel - Фоновое задание. Отмена;  - _$Job$_.Fail - Фоновое задание. Ошибка выполнения;  - _$Job$_.Start - Фоновое задание. Запуск;  - _$Job$_.Succeed - Фоновое задание. Успешное завершение;  - _$Job$_.Terminate - Фоновое задание. Принудительное завершение;  - _$OpenIDProvider$_.NegativeAssertion - Провайдер OpenID. Отклонено; записывается базой, выступающей в роли провайдера OpenID, при отправке отрицательного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию.  - _$OpenIDProvider$_.PositiveAssertion - Провайдер OpenID. Подтверждено; записывается базой, выступающей в роли провайдера OpenID, при отправке положительного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя;  - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию;  - _$PerformError$_ - Ошибка выполнения;  - _$Session$_.Authentication - Сеанс. Аутентификация; выполняется только при удачной аутентификации. Для события Аутентификация записываются поля Пользователь и ИмяПользователя. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле Данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID;  - ИдентификаторПользователяПровайдераOpenID (OpenIDProviderUserID) - идентификатор пользователя на провайдере.  - _$Session$_.AuthenticationError - Сеанс. Ошибка аутентификации; выполняется только при ошибке аутентификации. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID  - _$Session$_.ConfigExtensionApplyError - Сеанс. Ошибка применения расширения конфигурации; записывается, если в процессе применений расширения произошла ошибка. Совпадает с текстом выводимого сообщения при невозможности подключить расширение. Поле Данные заполняется структурой со следующим составом свойств:    - Имя (Name) - Строка. Имя расширения  - _$Session$_.Finish - Сеанс. Завершение;  - _$Session$_.Start - Сеанс. Начало;  - _$Transaction$_.Begin - Транзакция. Начало;  - _$Transaction$_.Commit - Транзакция. Фиксация;  - _$Transaction$_.Rollback - Транзакция. Отмена;  - _$User$_.Delete - Пользователи. Удаление; записываются как при редактировании списка пользователей в Конфигураторе, так и при удалении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя  - _$User$_.New - Пользователи. Добавление; записываются как при создани пользователей в Конфигураторе, так и методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык.  - _$User$_.Update - Пользователи. Изменение; записываются как при редактировании списка пользователей в Конфигураторе, так и при изменении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык;',
                        Использование: 'Задает использование и режим регистрации указанного в первом параметре события.  Режим регистрации управляется значением свойства ОписаниеИспользования, которое регламентировано для двух событий:   - _$Access$_.Access – массив значений типа ОписаниеИспользованияСобытияДоступЖурналаРегистрации;  - _$Access$_.AccessDenied – массив значений типа ОписаниеИспользованияСобытияОтказВДоступеЖурналаРегистрации.'
                    }
                }
            }
        },
        "УстановитьКраткийЗаголовокПриложения": {
            name: 'УстановитьКраткийЗаголовокПриложения',
            name_en: 'SetShortApplicationCaption',
            description: 'Добавляет краткий заголовок приложения.  Текст размещается в заголовке окна приложения перед текстом системного заголовка и автоматически отделяется точкой.',
            signature: {
                default: {
                    СтрокаПараметров: '(КраткийЗаголовок: Строка)',
                    Параметры: {
                        КраткийЗаголовок: 'Устанавливаемый заголовок приложения. Произвольный набор символов.'
                    }
                }
            }
        },
        "УстановитьМинимальнуюДлинуПаролейПользователей": {
            name: 'УстановитьМинимальнуюДлинуПаролейПользователей',
            name_en: 'SetUserPasswordMinLength',
            description: 'Устанавливает минимальную длину, которую должны иметь пароли пользователей информационной базы. Действует только:   - при изменении пароля существующего пользователя или при создании нового пользователя, если включена АутентификацияСтандартная или новый пароль не пустой;  - при включении АутентификацияСтандартная у существующего пользователя, если пароль пустой. Метод доступен только из сеанса, в котором все разделители не используются.',
            signature: {
                default: {
                    СтрокаПараметров: '(Длина?: Число)',
                    Параметры: {
                        Длина: 'Минимально допустимое количество символов в паролях пользователей. Значение по умолчанию: 5.'
                    }
                }
            }
        },
        "УстановитьМонопольныйРежим": {
            name: 'УстановитьМонопольныйРежим',
            name_en: 'SetExclusiveMode',
            description: 'Устанавливает и отключает использование монопольного режима.',
            signature: {
                default: {
                    СтрокаПараметров: '(МонопольныйРежим: Булево)',
                    Параметры: {
                        МонопольныйРежим: 'Истина - устанавливает монопольную блокировку текущей области данных от имени сеанса; Ложь - если установлена монопольная блокировка текущей области от имени текущего сеанса, то удаляет монопольную блокировку текущей области. Снимает монопольный режим только текущей области, т.е. области, определяемой значениями установленных в сеансе разделитей. Не затрагивает монопольные блокировки подобластей;'
                    }
                }
            }
        },
        "УстановитьНастройкиКлиентаЛицензирования": {
            name: 'УстановитьНастройкиКлиентаЛицензирования',
            name_en: 'SetLicensingClientParameters',
            description: 'Предназначен для сохранения в информационной базе имени пользователя и пароля клиента лицензирования. Эти данные используются при проверке лицензионности конфигурации.',
            signature: {
                default: {
                    СтрокаПараметров: '(Имя?: Строка, Пароль?: Строка, ДополнительныйПараметр?: Строка)',
                    Параметры: {
                        Имя: 'Имя клиента лицензирования.',
                        Пароль: 'Пароль клиента лицензирования.',
                        ДополнительныйПараметр: 'Дополнительный параметр клиента лицензирования, используемый для технической поддержки конфигурации.'
                    }
                }
            }
        },
        "УстановитьОбновлениеПредопределенныхДанныхИнформационнойБазы": {
            name: 'УстановитьОбновлениеПредопределенныхДанныхИнформационнойБазы',
            name_en: 'SetInfoBasePredefinedDataUpdate',
            description: 'Устанавливает новое значение режима обновления предопределенных данных для информационной базы. Для выполнения требуются права администратора информационной базы. Фактический режим обновления определяется в следующем порядке:   - Если для объекта метаданных в данных установлен режим обновления, отличный от Авто, то используется это значение.  - Иначе, если для объекта метаданных в конфигурации установлен режим обновления, отличный от Авто, то используется это значение.  - Иначе, если для информационной базы установлен режим обновления, отличный от Авто, то используется это значение.  - Иначе, если это периферийный узел РИБ, то предопределенные данные не будут обновлены. Если проверка выполняется для центрального узла РИБ, или для базы не являющейся РИБ, обновление предопределенных данных будет выполнено. Метод доступен только из неразделенного сеанса.',
            signature: {
                Установитьобновлениепредопределенныхданныхинформационнойбазы: {
                    СтрокаПараметров: '(ОбновлениеПредопределенных?: ОбновлениеПредопределенныхДанных)',
                    Параметры: {
                        ОбновлениеПредопределенных: 'Режим обновления предопределенных данных. Значение по умолчанию: Авто.'
                    }
                }
            }
        },
        "УстановитьОтключениеБезопасногоРежима": {
            name: 'УстановитьОтключениеБезопасногоРежима',
            name_en: 'SetSafeModeDisabled',
            description: 'Выключает текущий режим безопасности. Чтобы включить безопасный режим в той же процедуре или функции, в которой он был отключен, следует вызвать метод с параметром, установленным в значение Ложь, столько раз, сколько раз он был вызван с параметром, установленным в значение Истина. При завершении процедуры/возврате из функции, если безопасный режим был выключен, он будет включен автоматически.  Если в тексте процедуры/функции количество вызовов включения безопасного режима превышает количество вызовов его отключения, будет вызвано исключение.',
            signature: {
                default: {
                    СтрокаПараметров: '(Отключить?: Булево)',
                    Параметры: {
                        Отключить: 'Устанавливает состояние безопасного режима:   - Истина - режим будет отключен;  - Ложь - режим будет включен.'
                    }
                }
            }
        },
        "УстановитьПараметрыФункциональныхОпцийИнтерфейса": {
            name: 'УстановитьПараметрыФункциональныхОпцийИнтерфейса',
            name_en: 'SetInterfaceFunctionalOptionParameters',
            description: 'Устанавливает параметры функциональных опций, действие которых будет распространяться на командный интерфейс и рабочий стол. Вызывает автоматическое обновление интерфейса (включая рабочий стол). Параметры функциональных опций позволяют определить, как отобрать значения функциональной опции, привязанной к реквизиту справочника или ресурсу регистра сведений, то есть в случае, когда в одном объекте может храниться набор значений опций.  При привязке функциональной опции к ресурсу периодического регистра сведений, если период в параметрах не указывается, значение выбирается как срез последних на текущую дату. А если есть параметр Период (Period), то он используется как дата, на которую будет взят срез.',
            signature: {
                default: {
                    СтрокаПараметров: '(УстанавливаемыеПараметры: Структура, СбрасываемыеПараметры?: Массив)',
                    Параметры: {
                        УстанавливаемыеПараметры: 'Структура, определяющая значения параметров. Ключ элемента структуры задает имя параметра, соответствующее имени одному из объектов метаданных типа ПараметрФункциональныхОпций. Значение элемента структуры содержит значение параметра.',
                        СбрасываемыеПараметры: 'Сбрасываемые параметры функциональных опций.  Могут задаваться строкой (имена опций указываются через запятую) или массивом строк имен параметров функциональных опции, значения которых необходимо сбросить.'
                    }
                }
            }
        },
        "УстановитьПривилегированныйРежим": {
            name: 'УстановитьПривилегированныйРежим',
            name_en: 'SetPrivilegedMode',
            description: 'В файловом варианте информационной базы или на сервере в клиент-серверном варианте информационной базы управляет (включает или выключает) привилегированным режимом исполнения кода, аналогичным режиму работы кода привилегированных модулей. В привилегированном режиме никакие проверки прав не выполняются и разрешены любые операции. В клиент-серверном варианте при выполнении на клиенте данный метод не выполняет никаких действий. Первое выполнение метода с параметром Истина в файловом варианте информационной базы или на сервере в клиент-серверном варианте информационной базы включает привилегированный режим. Для явного выключения привилегированного режима необходимо внутри процедуры или функции, в которой он был включен, вызвать метод с параметром Ложь столько же раз, сколько раз в этой же процедуре или функции был вызван метод с параметром Истина. Если этого сделано не было, то при возврате из процедуры/функции, в которой был включен привилегированный режим, он будет выключен автоматически (неявно). Если в процедуре или функции вызовов метода с параметром Ложь сделано больше, чем вызовов с параметром Истина, то будет вызвано исключение.',
            signature: {
                default: {
                    СтрокаПараметров: '(Включить: Булево)',
                    Параметры: {
                        Включить: 'Определяет, будет ли включен привилегированный режим:   - Истина - включить режим;  - Ложь - выключить режим.'
                    }
                }
            }
        },
        "УстановитьПроверкуСложностиПаролейПользователей": {
            name: 'УстановитьПроверкуСложностиПаролейПользователей',
            name_en: 'SetUserPasswordStrengthCheck',
            description: 'Устанавливает или отключает следующие ограничения на сложность паролей пользователей информационной базы:   - Длина не менее 7 символов;  - Содержит не менее 3-х типов символов из перечисленных ниже:   - заглавные буквы;  - строчные буквы;  - цифры;  - спец. символы.   - Не совпадает с именем пользователя;  - Не является последовательностью символов. Действует только:   - при изменении пароля существующего пользователя или при создании нового пользователя, если включена АутентификацияСтандартная или новый пароль не пустой;  - при включении АутентификацияСтандартная у существующего пользователя, если пароль пустой. Метод доступен только из сеанса, в котором все разделители не используются.',
            signature: {
                default: {
                    СтрокаПараметров: '(СложныйПароль: Булево)',
                    Параметры: {
                        СложныйПароль: 'Истина - установить; Ложь - снять.'
                    }
                }
            }
        },
        "УстановитьРасширениеРаботыСКриптографией": {
            name: 'УстановитьРасширениеРаботыСКриптографией',
            name_en: 'InstallCryptoExtension',
            description: 'Устанавливает расширение для работы с криптографией в браузер.'
        },
        "УстановитьРасширениеРаботыСФайлами": {
            name: 'УстановитьРасширениеРаботыСФайлами',
            name_en: 'InstallFileSystemExtension',
            description: 'Устанавливает расширение работы с файлами. В режиме запуска толстого и тонкого клиентов информирует о том, что расширение установлено. Для клиента мобильного приложения, информирует о том, что расширение установлено.'
        },
        "УстановитьСоединениеСВнешнимИсточникомДанных": {
            name: 'УстановитьСоединениеСВнешнимИсточникомДанных',
            name_en: 'ConnectExternalDataSource',
            description: 'Устанавливает соединение с внешним источником данных.',
            signature: {
                default: {
                    СтрокаПараметров: '(ИмяВнешнегоИсточникаДанных?: Строка)',
                    Параметры: {
                        ИмяВнешнегоИсточникаДанных: 'Имя внешнего источника данных, с которым нужно установить соединение.'
                    }
                }
            }
        },
        "УстановитьСоответствиеОбъектаИФормы": {
            name: 'УстановитьСоответствиеОбъектаИФормы',
            name_en: 'SetObjectAndFormConformity',
            description: 'Устанавливает соответствие управляемой формы и объектов вида СообщениеПользователю для последующей правильной привязки сообщений к элементам управления формы. Для того, чтобы сообщение использовало данные соответствия объекта и формы, у него необходимо заполнить поле Данные. Соответствие может быть получено методом ПолучитьСоответствиеОбъектаИФормы. Получать соответствие можно до тех пор, пока существует объект, для которого оно зарегистрированно.',
            signature: {
                default: {
                    СтрокаПараметров: '(Объект: СправочникОбъект.<Имя справочника>, ИдентификаторФормыИИмяРеквизита: Структура)',
                    Параметры: {
                        Объект: 'Прикладной объект, преобразованный из универсального объекта в значение, для которого необходимо установить соответствие с именем реквизита формы.',
                        ИдентификаторФормыИИмяРеквизита: 'Содержит идентификатор формы и имя реквизита элемента управления, для которых выполняется установка соответствия.  Структура, передаваемая в параметр, может содержать два элемента с именами ключей: 1. "ИдентификаторФормы" ("FormID") – уникальный идентификатор формы (тип УникальныйИдентификатор); 2. "ИмяРеквизита" ("AttributeName") – имя реквизита в форме (тип Строка). Этот элемент может не указываться.'
                    }
                }
            }
        },
        "УстановитьСоставСтандартногоИнтерфейсаOData": {
            name: 'УстановитьСоставСтандартногоИнтерфейсаOData',
            name_en: 'SetStandardODataInterfaceContent',
            description: 'Устанавливает состав объектов метаданных, доступных через стандартный сервис OData API. Объекты, доступные для включения в стандартный OData API:   - Справочник.ИмяСправочника  - Документ.ИмяДокумента  - ПланОбмена.ИмяПланаОбмена  - ПланСчетов.ИмяПланаСчетов  - ПланВидовРасчета.ИмяПланаВидовРасчета  - ПланВидовХарактеристик.ИмяПланаВидовХарактеристик  - РегистрБухгалтерии.ИмяРегистраБухгалтерии  - РегистрСведений.ИмяРегистраСведений  - РегистрРасчета.ИмяРегистраРасчета  - РегистрНакопления.ИмяРегистраНакопления  - ЖурналДокументов.ИмяЖурналаДокументов  - Перечисление.ИмяПеречисления  - Задача.ИмяЗадачи  - БизнесПроцесс.ИмяБизнесПроцесса  - Константа.ИмяКонстанты',
            signature: {
                default: {
                    СтрокаПараметров: '(ОбъектыМетаданных: Массив)',
                    Параметры: {
                        ОбъектыМетаданных: 'Массив объектов метаданных и/или имен объектов метаданных.'
                    }
                }
            }
        },
        "УстановитьЧасовойПоясИнформационнойБазы": {
            name: 'УстановитьЧасовойПоясИнформационнойБазы',
            name_en: 'SetInfoBaseTimeZone',
            description: 'Устанавливает новый часовой пояс информационной базы и сохраняет его в базе данных. Если параметр не задан, то установка часового пояса информационной базы отменяется. В этом случае часовой пояс информационной базы совпадает с часовым поясом сервера.',
            signature: {
                default: {
                    СтрокаПараметров: '(ЧасовойПояс?: Строка)',
                    Параметры: {
                        ЧасовойПояс: 'Идентификатор часового пояса. Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59.'
                    }
                }
            }
        },
        "УстановитьЧасовойПоясСеанса": {
            name: 'УстановитьЧасовойПоясСеанса',
            name_en: 'SetSessionTimeZone',
            description: 'Устанавливает часовой пояс текущего сеанса. Если параметр не задан, то часовым поясом сеанса становится часовой пояс информационной базы, если он определен, или часовой пояс компьютера сервера, если часовой пояс информационной базы не определен.',
            signature: {
                default: {
                    СтрокаПараметров: '(ЧасовойПояс?: Строка)',
                    Параметры: {
                        ЧасовойПояс: 'Идентификатор часового пояса. Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59.'
                    }
                }
            }
        },
        "Формат": {
            name: 'Формат',
            name_en: 'Format',
            description: 'Формирует удобное для чтения представление значений. Полезно использование в отчетах и при прочем визуальном отображении значений.',
            returns: 'Тип: Строка. Строка, полученная в результате форматирования переданного значения.',
            signature: {
                default: {
                    СтрокаПараметров: '(Значение: Число, ФорматнаяСтрока?: Строка): Строка',
                    Параметры: {
                        Значение: 'Форматируемое значение.',
                        ФорматнаяСтрока: 'Форматная строка представляет собой строковое значение, включающее параметры форматирования.  Параметры форматирования перечисляются через символ ";". Наличие параметра означает отличие форматирования от стандартного.  Если параметр не задан, то применяется стандартное форматирование, которое в основном соответствует преобразованию значения к строке. Однако для значений типа Число и Дата по умолчанию (0 и 01.01.0001 00:00:00 соответственно) будет выдаваться пустая строка. Каждый параметр задается именем параметра, символом "=" и значением параметра. Значение параметра может указываться в одинарных или двойных кавычках. Это необходимо, если значение параметра содержит символы, используемые в синтаксисе форматной строки. Внутри значения параметра могут указываться произвольные символы, которые при формировании результирующей строки будут отображаться как есть. Таким образом, например, можно указывать разделители часов, минут и секунд при форматировании времени. Если эти символы совпадают со значениями форматной строки, их необходимо заключать в одинарные кавычки. Имена и значения параметров форматной строки:   - Л (L) - имя языка, страны, для которых будет выполняться стандартное форматирование. Доступные имена языков:   - af Африкаанс  - af_NA (af_NA) Африкаанс (Намибия)  - af_ZA Африкаанс (Южная Африка)  - am Амхарский  - am_ET Амхарский (Эфиопия)  - ar Арабский  - ar_AE Арабский (Объединенные Арабские Эмираты)  - ar_BH Арабский (Бахрейн)  - ar_DZ Арабский (Алжир)  - ar_EG Арабский (Египет)  - ar_IQ Арабский (Ирак)  - ar_JO Арабский (Иордания)  - ar_KW Арабский (Кувейт)  - ar_LB Арабский (Ливан)  - ar_LY Арабский (Ливия)  - ar_MA Арабский (Марокко)  - ar_OM Арабский (Оман)  - ar_QA Арабский (Катар)  - ar_SA Арабский (Саудовская Аравия)  - ar_SD Арабский (Судан)  - ar_SY Арабский (Сирия)  - ar_TN Арабский (Тунис)  - ar_YE Арабский (Йемен)  - as Ассамский  - as_IN Ассамский (Индия)  - az Азербайджанский  - az_AZ Азербайджанский (Азербайджан)  - az_Cyrl Азербайджанский (Кириллица)  - az_Cyrl_AZ Азербайджанский (Кириллица, Азербайджан)  - az_Latn Азербайджанский (Латиница)  - az_Latn_AZ Азербайджанский (Латиница, Азербайджан)  - be Белорусский  - be_BY Белорусский (Беларусь)  - bg Болгарский  - bg_BG Болгарский (Болгария)  - bn Бенгальский  - bn_IN Бенгальский (Индия)  - ca Каталанский  - ca_ES Каталанский (Испания)  - cs Чешский  - cs_CZ Чешский (Чешская Республика)  - cy Валлийский  - cy_GB Валлийский (Великобритания)  - da Датский  - da_DK Датский (Дания)  - de Немецкий  - de_AT Немецкий (Австрия)  - de_BE Немецкий (Бельгия)  - de_CH Немецкий (Швейцария)  - de_DE Немецкий (Германия)  - de_LI (de_LI) Немецкий (Лихтенштейн)  - de_LU Немецкий (Люксембург)  - el Греческий  - el_CY (el_CY) Греческий (Кипр)  - el_GR Греческий (Греция)  - en Английский  - en_AU Английский (Австралия)  - en_BE Английский (Бельгия)  - en_BW Английский (Ботсвана)  - en_BZ (en_BZ) Английский (Белиз)  - en_CA Английский (Канада)  - en_GB Английский (Великобритания)  - en_HK Английский (Гонконг, (Область с Особым Административным Управлением, Китай))  - en_IE Английский (Ирландия)  - en_IN Английский (Индия)  - en_JM (en_JM) Английский (Ямайка)  - en_MH (en_MH) Английский (Маршалловы Острова)  - en_MT Английский (Мальта)  - en_NA (en_NA) Английский (Намибия)  - en_NZ Английский (Новая Зеландия)  - en_PH Английский (Филиппины)  - en_PK Английский (Пакистан)  - en_SG Английский (Сингапур)  - en_TT (en_TT) Английский (Тринидад и Тобаго)  - en_US Английский (Соединенные Штаты Америки)  - en_VI Английский (Американские Виргинские Острова)  - en_ZA Английский (Южная Африка)  - en_ZW Английский (Зимбабве)  - es Испанский  - es_AR Испанский (Аргентина)  - es_BO Испанский (Боливия)  - es_CL Испанский (Чили)  - es_CO Испанский (Колумбия)  - es_CR Испанский (Коста-Рика)  - es_DO Испанский (Доминиканская Республика )  - es_EC Испанский (Эквадор)  - es_ES Испанский (Испания)  - es_GT Испанский (Гватемала)  - es_HN Испанский (Гондурас)  - es_MX Испанский (Мексика)  - es_NI Испанский (Никарагуа)  - es_PA Испанский (Панама)  - es_PE Испанский (Перу)  - es_PR Испанский (Пуэрто-Рико)  - es_PY Испанский (Парагвай)  - es_SV Испанский (Сальвадор)  - es_US Испанский (Соединенные Штаты Америки)  - es_UY Испанский (Уругвай)  - es_VE Испанский (Венесуэлла)  - et Эстонский  - et_EE Эстонский (Эстония)  - eu Баскский  - eu_ES Баскский (Испания)  - fa Персидский  - fa_AF Персидский (Афганистан)  - fa_IR Персидский (Иран)  - fi Финский  - fi_FI Финский (Финляндия)  - fo Фарерский  - fo_FO Фарерский (Фарерские острова)  - fr Французский  - fr_BE Французский (Бельгия)  - fr_CA Французский (Канада)  - fr_CH Французский (Швейцария)  - fr_FR Французский (Франция)  - fr_LU Французский (Люксембург)  - fr_MC (fr_MC) Французский (Монако)  - fr_SN (fr_SN) Французский (Сенегал)  - ga Ирландский  - ga_IE Ирландский (Ирландия)  - gl Галисийский  - gl_ES, Галисийский (Испания)  - gu Гуярати  - gu_IN Гуярати (Индия)  - he Иврит  - he_IL Иврит (Израиль)  - hi Хинди  - hi_IN Хинди (Индия)  - hr Хорватский  - hr_HR Хорватский (Хорватия)  - hu Венгерский  - hu_HU Венгерский (Венгрия)  - hy Армянский  - hy_AM Армянский (Армения)  - hy_AM_REVISED Армянский (Армения, REVISED)  - id Индонезийский  - id_ID Индонезийский (Индонезия)  - is Исландский  - is_IS Исландский (Исландия)  - it Итальянский  - it_CH, Итальянский (Швейцария)  - it_IT Итальянский (Италия)  - ja Японский  - ja_JP Японский (Япония)  - ka Грузинский  - ka_GE Грузинский (Грузия)  - kk Казахский  - kk_KZ Казахский (Казахстан)  - kl Гренландский  - kl_GL Гренландский (Гренландия)  - kn Каннада  - kn_IN Каннада (Индия)  - ko Корейский  - ko_KR Корейский (Южная Корея)  - kok Конкани  - kok_IN Конкани (Индия)  - ky Киргизский  - ky_KY Киргизский (Киргизия)  - lt Литовский  - lt_LT Литовский (Литва)  - lv Латышский  - lv_LV Латышский (Латвия)  - mk Македонский  - mk_MK Македонский (Македония)  - ml Малаялам  - ml_IN Малаялам (Индия)  - mr Маратийский  - mr_IN Маратийский (Индия)  - ms Малайский  - ms_BN Малайский (Бруней)  - ms_MY Малайский (Малайзия)  - mt Мальтийский  - mt_MT Мальтийский (Мальта)  - nb Норвежский букмол  - nb_NO Норвежский букмол (Норвегия)  - nl Голландский  - nl_BE Голландский (Бельгия)  - nl_NL Голландский (Нидерланды)  - nn Норвежский нюнорск  - nn_NO Норвежский нюнорск (Норвегия)  - om Оромо (Афан)  - om_ET Оромо (Афан) (Эфиопия)  - om_KE Оромо (Афан) (Кения)  - or Ория  - or_IN Ория (Индия)  - pa Панджабский  - pa_IN Панджабский (Индия)  - pl Польский  - pl_PL Польский (Польша)  - ps Пашто (Пушто)  - ps_AF Пашто (Пушто) (Афганистан)  - pt Португальский  - pt_BR Португальский (Бразилия)  - pt_PT Португальский (Португалия)  - ro Румынский  - ro_RO Румынский (Румыния)  - ru Русский  - ru_RU Русский (Россия)  - ru_UA Русский (Украина)  - sk Словацкий  - sk_SK Словацкий (Словакия)  - sl Словенский  - sl_SI Словенский (Словения)  - so Сомали  - so_DJ Сомали (Джибути)  - so_ET Сомали (Эфиопия)  - so_KE Сомали (Кения)  - so_SO Сомали (Сомали)  - sq Албанский  - sq_AL Албанский (Албания)  - sr Сербский  - sr_BA (sr_BA) Сербский (Босния и Герцеговина)  - sr_CS Сербский (Сербия и Черногория)  - sr_Cyrl Сербский (Кириллица)  - sr_Cyrl_BA (sr_Cyrl_BA) Сербский (Кириллица, Босния и Герцеговина)  - sr_Cyrl_CS Сербский (Кириллица, Сербия и Черногория)  - sr_Cyrl_ME (sr_Cyrl_ME) Сербский (Кириллица, Черногория)  - sr_Cyrl_RS (sr_Cyrl_RS) Сербский (Кириллица, Сербия)  - sr_Latn Сербский (Латиница)  - sr_Latn_BA (sr_Latn_BA) Сербский (Латиница, Босния и Герцеговина)  - sr_Latn_CS Сербский (Латиница, Сербия и Черногория)  - sr_Latn_ME (sr_Latn_ME) Сербский (Латиница, Черногория)  - sr_Latn_RS (sr_Latn_RS) Сербский (Латиница, Сербия)  - sr_ME (sr_ME) Сербский (Черногория)  - sr_RS (sr_RS) Сербский (Сербия)  - sv Шведский  - sv_FI Шведский (Финляндия)  - sv_SE Шведский (Швеция)  - sw Суахили  - sw_KE Суахили (Суахили)  - sw_TZ Суахили (Танзания)  - ta Тамильский  - ta_IN Тамильский (Индия)  - te Телугу  - te_IN Телугу (Индия)  - th Тайский  - th_TH Тайский (Таиланд)  - ti Тигриниа  - ti_ER Тигриниа (Эритрея)  - ti_ET Тигриниа (Эфиопия)  - tr Турецкий  - tr_TR Турецкий (Турция)  - uk Украинский  - uk_UA Украинский (Украина)  - ur Урду  - ur_PK Урду (Пакистан)  - uz Узбекский  - uz_Cyrl Узбекский (Кириллица)  - uz_Cyrl_UZ Узбекский (Кириллица, Узбекистан)  - uz_Latn Узбекский (Латиница)  - uz_Latn_UZ Узбекский (Латиница, Узбекистан)  - uz_UZ Узбекский (Узбекистан)  - vi Вьетнамский  - vi_VN Вьетнамский (Вьетнам)  - zh Китайский  - zh_CN Китайский (Китай)  - zh_Hans Китайский (Hans)  - zh_Hans_CN Китайский (Hans, Китай)  - zh_Hans_SG Китайский (Hans, Сингапур)  - zh_Hant Китайский (Hant)  - zh_Hant_HK Китайский (Hant, Гонконг (Область с Особым Административным Управлением, Китай))  - zh_Hant_MO Китайский (Hant, Макао (Область с Особым Административным Управлением, Китай))  - zh_Hant_TW Китайский (Hant, Тайвань)  - zh_HK Китайский (Гонконг (Область с Особым Административным Управлением, Китай))  - zh_MO Китайский (Макао (Область с Особым Административным Управлением, Китай))  - zh_SG Китайский (Сингапур)  - zh_TW Китайский (Тайвань)  - ЧЦ (ND) - общее число отображаемых десятичных разрядов целой и дробной частей. Исходное число округляется при этом в соответствии с правилами округления Окр15как20. Если указан этот параметр, то для отображения дробной части числа обязат  - ЧДЦ (NFD) - число десятичных разрядов в дробной части. Исходное число округляется при этом в соответствии с правилами округления Окр15как20.  - ЧС (NS) - сдвиг разрядов: положительный - деление, отрицательный - умножение. Другими словами, это означает, что исходное число будет умножено или поделено на 10*С, где С - значение параметра по модулю.  - ЧРД (NDS) - символ-разделитель целой и дробной части.  - ЧРГ (NGS) - символ-разделитель групп целой части числа. Если в качестве разделителя использовать пустую строку, то в этом случае разделителем будет символ неразрывного пробела.  - ЧН (NZ) - строка, представляющая нулевое значение числа. Если не задано, то представление в виде пустой строки. Если задано "ЧН=", то в виде строкового представления числа 0, полученного в соответствии с другими заданными параметрами форматной строки. Не использу  - ЧВН (NLZ) - нужно ли выводить лидирующие нули. Значение данного параметра не задается, собственно наличие параметра определяет вывод лидирующих нулей.  - ЧГ (NG) - порядок группировки разрядов числа. В качестве значения указываются числа, через запятую, обозначающие количество группируемых разрядов справа налево. Имеют смысл только два первых числа. Первое из них указывает первичную группировку, то есть ту, котора  - ЧО (NN) - представление отрицательных чисел.   - 0 (0) - строка вида "(1,1)";  - 1 (1) - строка вида "-1,1";  - 2 (2) - строка вида "- 1,1";  - 3 (3) - строка вида "1,1-";  - 4 (4) - строка вида "1,1 -".  - ДФ (DF) - формат даты.   - д (d) - день месяца (цифрами) без лидирующего нуля;  - дд (dd) - день месяца (цифрами) с лидирующим нулем;  - ддд (ddd) - краткое название дня недели *);  - дддд (dddd) - полное название дня недели *);  - М (M) - номер месяца (цифрами) без лидирующего нуля;  - ММ (MM) - номер месяца (цифрами) с лидирующим нулем;  - МММ (MMM) - краткое название месяца *);  - ММММ (MMMM) - полное название месяца *);  - к (q) - номер квартала в году;  - г (y) - номер года без века и лидирующего нуля;  - гг (yy) - номер года без века с лидирующим нулем;  - гггг (yyyy) - номер года с веком;  - ч (h) - час в 12 часовом варианте без лидирующих нулей;  - чч (hh) - час в 12 часовом варианте с лидирующим нулем;  - Ч (H) - час в 24 часовом варианте без лидирующих нулей;  - ЧЧ (HH) - час в 24 часовом варианте с лидирующим нулем;  - м (m) - минута без лидирующего нуля;  - мм (mm) - минута с лидирующим нулем;  - с (s) - секунда без лидирующего нуля;  - сс (ss) - секунда с лидирующим нулем;  - вв (tt) - отображение половины дня AM/PM (действительно только для языков конфигурирования, поддерживающих 12 часовой вариант представления времени).  - Примечание: *) - не используется для форматной строки поля ввода даты.  - ДЛФ (DLF) - локальный формат даты. Указывается вариант отображения частей даты.   - Д (D) - дата (цифрами);  - ДД (DD) - длинная дата (месяц прописью);  - В (T) - полное время, дата может объединяться со временем;  - ДВ (DT) - дата время.  - Пример: выражение Формат(\'20051120140323\',"ДЛФ=ДДВ") имеет значение "20 ноября 2005 г. 14:03:23".  - Важно! Порядок следования опций форматной строки для ДЛФ <дата + время> (ДВ или ДДВ) не может быть изменен.  - ДП (DE) - строка, представляющая пустую дату (например, Формат(\'00010101000000\' ,"ДП=""пустая дата""") вернет строку "пустая дата").  - БЛ (BF) - строка, представляющая логическое значение Ложь.  - БИ (BT) - строка, представляющая логическое значение Истина. Примечание. Использование параметров для поля ввода: параметр ДП (DE) не используется; параметр ДЛФ (DLF) используется только со значениями Д (D), В(T) и ДВ (DT).'
                    }
                }
            }
        },
        "Цел": {
            name: 'Цел',
            name_en: 'Int',
            description: 'Вычисляет целую часть переданного числа, полностью отсекая дробную часть.',
            returns: 'Тип: Число. Результат выделения целой части.',
            signature: {
                default: {
                    СтрокаПараметров: '(Число: Число): Число',
                    Параметры: {
                        Число: 'Исходное число.'
                    }
                }
            }
        },
        "Час": {
            name: 'Час',
            name_en: 'Hour',
            description: 'Определяет час в указанной дате.',
            returns: 'Тип: Число. Час в указанной дате.',
            signature: {
                default: {
                    СтрокаПараметров: '(Дата: Дата): Число',
                    Параметры: {
                        Дата: 'Исходная дата.'
                    }
                }
            }
        },
        "ЧасовойПояс": {
            name: 'ЧасовойПояс',
            name_en: 'TimeZone',
            description: 'Получает идентификатор часового пояса компьютера.',
            returns: 'Тип: Строка. Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59.'
        },
        "ЧасовойПоясСеанса": {
            name: 'ЧасовойПоясСеанса',
            name_en: 'SessionTimeZone',
            description: 'Получает идентификатор часового пояса текущего сеанса.',
            returns: 'Тип: Строка. Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59.'
        },
        "Число": {
            name: 'Число',
            name_en: 'Number',
            description: 'Преобразует полученный параметр в значение типа Число. Значение типа Строка преобразуется в число в том случае, если параметр является строковым представлением литерала численного типа. При этом строковое представление анализируется как с учетом региональных установок информационной базы, так и без их учета. В противном случае будет выдано сообщение об ошибке выполнения функции. Параметр типа Булево преобразуется в число по следующим правилам:   - Ложь преобразуется в 0;  - Истина преобразуется в 1.',
            returns: 'Тип: Число. Полученное значение.',
            signature: {
                default: {
                    СтрокаПараметров: '(Значение: Строка): Число',
                    Параметры: {
                        Значение: 'Исходное значение.'
                    }
                }
            }
        },
        "ЧислоПрописью": {
            name: 'ЧислоПрописью',
            name_en: 'NumberInWords',
            description: 'Формирует представление числа прописью в соответствии с заданными форматной строкой и параметрами предмета исчисления.',
            returns: 'Тип: Строка. Представление числа прописью.',
            signature: {
                default: {
                    СтрокаПараметров: '(Число: Число, ФорматнаяСтрока?: Строка, ПараметрыПредметаИсчисления?: Строка): Строка',
                    Параметры: {
                        Число: 'Число, которое необходимо преобразовать в строку прописью.',
                        ФорматнаяСтрока: 'Форматная строка представляет собой строковое значение, включающее параметры форматирования. Параметры форматирования перечисляются через символ ";" (точка с запятой). Если параметр не указывается, используется значение параметра по умолчанию. Каждый параметр задается именем параметра, символом "=" (равно) и значением параметра. Значение параметра может указываться в одинарных или двойных кавычках. Это необходимо, если значение параметра содержит символы, используемые в синтаксисе форматной строки.   - Л (L) - Код локализации. По умолчанию используется код локализации, установленный в операционной системе. Примеры кодов локализации: ru_RU - Русский (Россия); en_US - Английский (США).  - НП (SN) - Включать/не включать название предмета исчисления (Булево), по умолчанию - Истина.  - НД (FN) - Включать/не включать название десятичных частей предмета исчисления (Булево), по умолчанию - Истина.  - ДП (FS) - Дробную часть выводить прописью/числом (Булево), по умолчанию - Ложь;  - ИИ (AU) - Определяет формирование классической (с использованием союза and перед прописью десятков и/или единиц внутри прописи триады) или упрощенной (без использования союза and) прописи числа. Имеет смысл и анализируется только при англоязычной локализации (en, en_XX). Возможные значения параметра:   - НеИспользовать (DontUse) - формировать упрощенную пропись числа (используется по умолчанию);  - Использовать (Use) - формировать классическую пропись числа.',
                        ПараметрыПредметаИсчисления: 'Представляет собой строковое значение, определяющее параметры предмета исчисления. Параметры предмета исчисления перечисляются через запятую. Формат строки зависит от кода локализации. Для русского и белорусского языков (ru_RU, be_BY): "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2", где: "рубль, рубля, рублей, м" – предмет исчисления:    - рубль – единственное число именительный падеж;  - рубля – единственное число родительный падеж;  - рублей – множественное число родительный падеж;  - м – мужской род (ж – женский род, с - средний род);  - "копейка, копейки, копеек, ж" – дробная часть, аналогично предмету исчисления (может отсутствовать);  - "2" – количество разрядов дробной части (может отсутствовать, по умолчанию равно 2). Для украинского языка (uk_UA):  "гривна, гривны, гривен, м, копейка, копейки, копеек, ж, 2", где: "гривна, гривны, гривен, м" – предмет исчисления:    - "гривна – единственное число именительный падеж;  - гривны – единственное число родительный падеж;  - гривен – множественное число родительный падеж;  - м – мужской род (ж – женский род, с - средний род);  - "копейка, копейки, копеек, ж" – дробная часть, аналогично предмету исчисления (может отсутствовать);  - "2" – количество разрядов дробной части (может отсутствовать, по умолчанию равно 2). Для польского языка (pl_PL):  "złoty, złote, złotych, m, grosz, grosze, groszy, m, 2" где: "złoty, złote, złotych, m " - предмет исчисления (m - мужской род, ż - женский род, ń - средний род, mo – личностный мужской род).   - złoty - единственное число именительный падеж;  - złote - единственное число винительный падеж;  - złotych - множественное число винительный падеж;  - m - мужской род (ż - женский род, ń - средний род, mo – личностный мужской род);  - "grosz, grosze, groszy, m " - дробная часть (может отсутствовать) (аналогично целой части);  - 2 - количество разрядов дробной части (может отсутствовать, по-умолчанию равно 2). Пример: Пропись = ЧислоПрописью(1832, “L=pl_PL;SN=true;FN=true;FS=true”, “złoty, złote, złotych, m, grosz, grosze, groszy, m, 2”); Для английского, французского, финского и казахского языков (en_US, fr_CA,fi_FI, kk_KZ): "dollar, dollars, cent, cents, 2", где:   - "dollar, dollars" – предмет исчисления в единственном и множественном числе;  - "cent, cents" – дробная часть в единственном и множественном числе (может отсутствовать);  - "2" – количество разрядов дробной части (может отсутствовать, по умолчанию равно 2). Для немецкого языка (de_DE): "EURO, EURO, М, Cent, Cent, M, 2", где: "EURO, EURO, М" – предмет исчисления:    - EURO, EURO – предмет исчисления в единственном и множественном числе;  - М – мужской род (F – женский род, N - средний род); "Cent, Cent, M" – дробная часть, аналогично предмету исчисления (может отсутствовать); "2" – количество разрядов дробной части (может отсутствовать, по умолчанию равно 2). Для латышского языка (lv_LV): "lats, lati, latu, V, santīms, santīmi, santīmu, V, 2, J, J", где: "lats, lati, latu, v" – предмет исчисления:    - lats – для чисел заканчивающихся на 1, кроме 11;  - lati – для чисел заканчивающихся на 2-9 и 11;  - latu – множественное число (родительный падеж) используется после числительных 0, 10, 20,..., 90, 100, 200, ..., 1000, ..., 100000;  - v – мужской род (s – женский род); "santīms, santīmi, santīmu, V" – дробная часть, аналогично предмету исчисления (может отсутствовать); "2" – количество разрядов дробной части (может отсутствовать, по умолчанию равно 2); "J" - число 100 выводится как "Одна сотня" для предмета исчисления (N - как "Сто"); может отсутствовать, по умолчанию равно "J"; "J" - число 100 выводится как "Одна сотня" для дробной части (N - как "Сто"); может отсутствовать, по умолчанию равно "J". Для литовского языка (lt_LT): "litas, litai, litų, М, centas, centai, centų, М, 2", где: "litas, litai, litų, М" – предмет исчисления:   - litas - единственное число целой части;  - litai - множественное число целой части от 2 до 9;  - litų - множественное число целой части прочие;  - m - род целой части (f - женский род), "centas, centai, centų, М" – дробная часть, аналогично предмету исчисления (может отсутствовать); "2" - количество разрядов дробной части (может отсутствовать, по умолчанию равно 2). Для эстонского языка (et_EE): "kroon, krooni, sent, senti, 2", где: "kroon, krooni" – – предмет исчисления в единственном и множественном числе;   - "sent, senti" – дробная часть в единственном и множественном числе (может отсутствовать);  - 2 – количество разрядов дробной части (может отсутствовать, по умолчанию равно 2). Для болгарского языка (bg_BG): "лев, лева, м, стотинка, стотинки, ж, 2", где: "лев, лева, м" – предмет исчисления:   - лев - единственное число целой части;  - лева - множественное число целой части;  - м - род целой части, "стотинка, стотинки, ж" - дробная часть:   - стотинка - единственное число дробной части;  - стотинки - множественное число дробной части;  - ж - род дробной части, "2" - количество разрядов дробной части. Для румынского языка (ro_RO): "leu, lei, M, ban, bani, W, 2"; "leu, lei, M" – предмет исчисления:   - leu - единственное число целой части;  - lei - множественное число целой части;  - M - род целой части; "ban, bani, W" - дробная часть:   - ban - единственное число дробной части;  - bani - множественное число дробной части;  - W - род дробной части; "2" - количество разрядов дробной части. Для грузинского языка (ka_GE): "ლარი, თეთრი, 2";   - ლარი - целая часть;  - თეთრი - дробная часть;  - "2" - количество разрядов дробной части. Для азербайджанского(az) и туркменского языков(tk): "TL,Kr,2 " , где   - "TL" - предмет исчисления;  - "Kr" - дробная часть (может отсутствовать);  - 2 - количество разрядов дробной части (может отсутствовать, по-умолчанию - 2) Для вьетнамского языка (vi_VN): "dong, xu, 2";   - dong, - целая часть;  - xu, - дробная часть;  - 2 - количество разрядов дробной части. Для турецкого языка (tr_TR): "TL,Kr,2,Separate", где:   - TL - целая часть;  - Kr - дробная часть (может отсутствовать);  - 2 - количество разрядов дробной части (может отсутсвовать, значение по-умолчанию - 2);  - "Separate" - признак написания прописи раздельно, "Solid" - слитно (может отсутствовать, по умолчанию слитно). Для венгерского языка (hu): "Forint, fillér, 2", где   - Forint - целая часть;  - fillér - дробная часть;  - "2" - количество разрядов дробной части.  Значение по умолчанию: Пустая строка.'
                    }
                }
            }
        },
        "ЭтоАдресВременногоХранилища": {
            name: 'ЭтоАдресВременногоХранилища',
            name_en: 'IsTempStorageURL',
            description: 'Проверяет, является ли переданный адрес адресом файла во временном хранилище.',
            returns: 'Тип: Булево. ',
            signature: {
                default: {
                    СтрокаПараметров: '(Адрес: Строка): Булево',
                    Параметры: {
                        Адрес: 'Адрес файла во временном хранилище, который необходимо проверить.'
                    }
                }
            }
        }
    };
    return data;
}

export function globalvariables() {
    return {
        "WSСсылки": {
            name: 'WSСсылки',
            name_en: 'WSReferences',
            description: 'Содержит менеджер ссылок на внешние Web-сервисы.'
        },
        "БиблиотекаКартинок": {
            name: 'БиблиотекаКартинок',
            name_en: 'PictureLib',
            description: 'Используется для доступа к библиотеке картинок.'
        },
        "БиблиотекаМакетовОформленияКомпоновкиДанных": {
            name: 'БиблиотекаМакетовОформленияКомпоновкиДанных',
            name_en: 'DataCompositionAppearanceTemplateLib',
            description: 'Библиотека макетов оформления компоновки данных. Доступны следующие предопределенные макеты оформления: Основной(Main), Яркий(Gaudy), Море(Sea), Арктика(Arctic), Зеленый(Green), Античный(Antique).'
        },
        "БиблиотекаСтилей": {
            name: 'БиблиотекаСтилей',
            name_en: 'StyleLib',
            description: 'Используется для доступа к определенным в конфигурации стилям.'
        },
        "БизнесПроцессы": {
            name: 'БизнесПроцессы',
            name_en: 'BusinessProcesses',
            description: 'Используется для доступа к определенным в конфигурации бизнес-процессам.'
        },
        "ВнешниеИсточникиДанных": {
            name: 'ВнешниеИсточникиДанных',
            name_en: 'ExternalDataSources',
            description: 'Содержит объект для управления внешними источниками данных.'
        },
        "ВнешниеОбработки": {
            name: 'ВнешниеОбработки',
            name_en: 'ExternalDataProcessors',
            description: 'Используется для доступа к внешним обработкам.'
        },
        "ВнешниеОтчеты": {
            name: 'ВнешниеОтчеты',
            name_en: 'ExternalReports',
            description: 'Используется для доступа к внешним отчетам.'
        },
        "ВстроенныеПокупки": {
            name: 'ВстроенныеПокупки',
            name_en: 'InAppPurchases',
            description: 'Предоставляет доступ к средствам работы со встроенными покупками.'
        },
        "ГлавныйИнтерфейс": {
            name: 'ГлавныйИнтерфейс',
            name_en: 'MainInterface',
            description: 'Используется для доступа к определенным в конфигурации пользовательским интерфейсам.'
        },
        "ГлавныйСтиль": {
            name: 'ГлавныйСтиль',
            name_en: 'MainStyle',
            description: 'Управляет стилем всего приложения, аналогично тому, как это происходит при установке стиля приложения в режиме Конфигуратор.  Может быть установлено в одно из значений коллекции стилей глобального контекста или в значение стиля по умолчанию (стиль "Авто").'
        },
        "Документы": {
            name: 'Документы',
            name_en: 'Documents',
            description: 'Используется для доступа к определенным в конфигурации документам.'
        },
        "ДоставляемыеУведомления": {
            name: 'ДоставляемыеУведомления',
            name_en: 'DeliverableNotifications',
            description: 'Используется для доступа к менеджеру доставляемых уведомлений.'
        },
        "ЖурналыДокументов": {
            name: 'ЖурналыДокументов',
            name_en: 'DocumentJournals',
            description: 'Используется для доступа к определенным в конфигурации журналам документов.'
        },
        "Задачи": {
            name: 'Задачи',
            name_en: 'Tasks',
            description: 'Используется для доступа к определенным в конфигурации задачам.'
        },
        "ИнформацияОбИнтернетСоединении": {
            name: 'ИнформацияОбИнтернетСоединении',
            name_en: 'InternetConnectionInformation',
            description: 'Предоставляет доступ к информации об интернет-соединении.'
        },
        "ИспользованиеРабочейДаты": {
            name: 'ИспользованиеРабочейДаты',
            name_en: 'WorkingDateUse',
            description: 'Определяет режим использования рабочей даты.'
        },
        "ИсторияРаботыПользователя": {
            name: 'ИсторияРаботыПользователя',
            name_en: 'UserWorkHistory',
            description: 'Используется для управления историей работы пользователя. Для использования свойства требуется, чтобы для пользователя было доступно право СохранениеДанныхПользователя.'
        },
        "Константы": {
            name: 'Константы',
            name_en: 'Constants',
            description: 'Используется для доступа к определенным в конфигурации константам.'
        },
        "КритерииОтбора": {
            name: 'КритерииОтбора',
            name_en: 'FilterCriteria',
            description: 'Используется для доступа к определенным в конфигурации критериям отбора.'
        },
        "Метаданные": {
            name: 'Метаданные',
            name_en: 'Metadata',
            description: 'Используется для доступа к структуре метаданных конфигурации.'
        },
        "Обработки": {
            name: 'Обработки',
            name_en: 'DataProcessors',
            description: 'Используется для доступа к определенным в конфигурации обработкам.'
        },
        "ОтображениеРекламы": {
            name: 'ОтображениеРекламы',
            name_en: 'AdRepresentation',
            description: 'Предоставляет доступ к средствам отображения рекламы в мобильном приложении.'
        },
        "ОтправкаДоставляемыхУведомлений": {
            name: 'ОтправкаДоставляемыхУведомлений',
            name_en: 'DeliverableNotificationSend',
            description: 'Используется для доступа к менеджеру отправки уведомлений.'
        },
        "Отчеты": {
            name: 'Отчеты',
            name_en: 'Reports',
            description: 'Используется для доступа к определенным в конфигурации отчетам.'
        },
        "ПанельЗадачОС": {
            name: 'ПанельЗадачОС',
            name_en: 'OSTaskbar',
            description: 'Используется для управления кнопкой программы на панели задач. Функционал работает в ОС Windows 7 и выше, а также в Ubuntu Unity. Не влияет на поведение в других операционных системах.'
        },
        "ПараметрЗапуска": {
            name: 'ПараметрЗапуска',
            name_en: 'LaunchParameter',
            description: 'Используется для доступа к параметру запуска, передаваемому через ключ командной строки /C.'
        },
        "ПараметрыСеанса": {
            name: 'ПараметрыСеанса',
            name_en: 'SessionParameters',
            description: 'Используется для доступа к параметрам сеанса.'
        },
        "Перечисления": {
            name: 'Перечисления',
            name_en: 'Enums',
            description: 'Используется для доступа к определенным в конфигурации перечислениям.'
        },
        "ПланыВидовРасчета": {
            name: 'ПланыВидовРасчета',
            name_en: 'ChartsOfCalculationTypes',
            description: 'Используется для доступа к менеджеру всех планов видов расчета.'
        },
        "ПланыВидовХарактеристик": {
            name: 'ПланыВидовХарактеристик',
            name_en: 'ChartsOfCharacteristicTypes',
            description: 'Используется для доступа к планам видов характеристик.'
        },
        "ПланыОбмена": {
            name: 'ПланыОбмена',
            name_en: 'ExchangePlans',
            description: 'Используется для доступа к планам обмена.'
        },
        "ПланыСчетов": {
            name: 'ПланыСчетов',
            name_en: 'ChartsOfAccounts',
            description: 'Используется для доступа к планам счетов.'
        },
        "ПолнотекстовыйПоиск": {
            name: 'ПолнотекстовыйПоиск',
            name_en: 'FullTextSearch',
            description: 'Используется для управления и использования полнотекстового поиска.'
        },
        "ПользователиИнформационнойБазы": {
            name: 'ПользователиИнформационнойБазы',
            name_en: 'InfoBaseUsers',
            description: 'Используется для управления списком пользователей информационной базы.'
        },
        "Последовательности": {
            name: 'Последовательности',
            name_en: 'Sequences',
            description: 'Используется для доступа к определенным в конфигурации последовательностям.'
        },
        "ПроверкаВстроенныхПокупок": {
            name: 'ПроверкаВстроенныхПокупок',
            name_en: 'InAppPurchasesValidation',
            description: 'Предоставляет доступ к средствам проверки квитанций встроенных покупок.'
        },
        "РабочаяДата": {
            name: 'РабочаяДата',
            name_en: 'WorkingDate',
            description: 'Содержит рабочую дату, используемую в текущем сеансе работы с конфигурацией. Доступно для записи в случае, если свойство ИспользованиеРабочейДаты имеет значение Назначать.'
        },
        "РасширенияКонфигурации": {
            name: 'РасширенияКонфигурации',
            name_en: 'ConfigurationExtensions',
            description: 'Предоставляет доступ к управлению расширениями конфигурации.'
        },
        "РегистрыБухгалтерии": {
            name: 'РегистрыБухгалтерии',
            name_en: 'AccountingRegisters',
            description: 'Используется для доступа к регистрам бухгалтерии.'
        },
        "РегистрыНакопления": {
            name: 'РегистрыНакопления',
            name_en: 'AccumulationRegisters',
            description: 'Используется для доступа к определенным в конфигурации регистрам накопления.'
        },
        "РегистрыРасчета": {
            name: 'РегистрыРасчета',
            name_en: 'CalculationRegisters',
            description: 'Используется для доступа к менеджеру всех регистров расчета.'
        },
        "РегистрыСведений": {
            name: 'РегистрыСведений',
            name_en: 'InformationRegisters',
            description: 'Используется для доступа к определенным в конфигурации регистрам сведений.'
        },
        "РегламентныеЗадания": {
            name: 'РегламентныеЗадания',
            name_en: 'ScheduledJobs',
            description: 'Используется для доступа к регламентным заданиям.'
        },
        "СериализаторXDTO": {
            name: 'СериализаторXDTO',
            name_en: 'XDTOSerializer',
            description: 'Сериализатор XDTO, соответствующий глобальной фабрики XDTO.'
        },
        "Справочники": {
            name: 'Справочники',
            name_en: 'Catalogs',
            description: 'Используется для доступа к определенным в конфигурации справочникам.'
        },
        "СредстваГеопозиционирования": {
            name: 'СредстваГеопозиционирования',
            name_en: 'LocationTools',
            description: 'Используется для доступа к средствам геопозиционирования мобильной платформы.'
        },
        "СредстваКриптографии": {
            name: 'СредстваКриптографии',
            name_en: 'CryptoToolsManager',
            description: 'Свойство предоставляет доступ к менеджеру средств криптографии.'
        },
        "СредстваМультимедиа": {
            name: 'СредстваМультимедиа',
            name_en: 'MultimediaTools',
            description: 'Используется для доступа к определенным в конфигурации средствам мультимедиа мобильной платформы.'
        },
        "СредстваОтображенияРекламы": {
            name: 'СредстваОтображенияРекламы',
            name_en: 'AdvertisingPresentationTools',
            description: 'Предоставляет доступ к средствам отображения рекламы на мобильной платформы.'
        },
        "СредстваПочты": {
            name: 'СредстваПочты',
            name_en: 'MailTools',
            description: 'Предоставляет доступ к средствам почты мобильной платформы.'
        },
        "СредстваТелефонии": {
            name: 'СредстваТелефонии',
            name_en: 'TelephonyTools',
            description: 'Предоставляет доступ к средствам телефонии мобильной платформы.'
        },
        "ФабрикаXDTO": {
            name: 'ФабрикаXDTO',
            name_en: 'XDTOFactory',
            description: 'Фабрика XDTO, содержащая все пакеты XDTO, имеющиеся в конфигурации, а также предопределенные пакеты (например, пакет типов XML схемы).'
        },
        "ФайловыеПотоки": {
            name: 'ФайловыеПотоки',
            name_en: 'FileStreams',
            description: 'Предоставляет доступ к менеджеру файловых потоков.'
        },
        "ФоновыеЗадания": {
            name: 'ФоновыеЗадания',
            name_en: 'BackgroundJobs',
            description: 'Используется для доступа к фоновым заданиям.'
        },
        "ХранилищаНастроек": {
            name: 'ХранилищаНастроек',
            name_en: 'SettingsStorages',
            description: 'Предназначено для доступа к хранилищам настроек, которые созданы в конфигурации.'
        },
        "ХранилищеВариантовОтчетов": {
            name: 'ХранилищеВариантовОтчетов',
            name_en: 'ReportsVariantsStorage',
            description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление настроек вариантов отчета.  Если в свойстве конфигурации "ХранилищеВариантовОтчетов" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления настроек вариантов отчетов. Если в свойстве конфигурации "ХранилищеВариантовОтчетов" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.  Для чтения, изменения, добавления и удаления настроек следует в параметрах методов объектов СтандартноеХранилищеНастроекМенеджер и ХранилищеНастроекМенеджер.Имя хранилища использовать следующие значения:   - Ключ объекта – указывается полное имя отчета. Например: "Отчет.Продажи".  - Ключ настройки – указывается текстовый идентификатор варианта. Например: "ПродажиПоРегионам". Тип сохраняемого значения – НастройкиКомпоновкиДанных.'
        },
        "ХранилищеНастроекДанныхФорм": {
            name: 'ХранилищеНастроекДанныхФорм',
            name_en: 'FormDataSettingsStorage',
            description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление настроек данных форм.  Если в свойстве конфигурации "ХранилищеНастроекДанныхФорм" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления настроек данных форм. Если в свойстве конфигурации "ХранилищеНастроекДанныхФорм" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.'
        },
        "ХранилищеОбщихНастроек": {
            name: 'ХранилищеОбщихНастроек',
            name_en: 'CommonSettingsStorage',
            description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление общих настроек.  Если в свойстве конфигурации "ХранилищеОбщихНастроек" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления вариантов отчетов. Если в свойстве конфигурации "ХранилищеОбщихНастроек" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.'
        },
        "ХранилищеПользовательскихНастроекДинамическихСписков": {
            name: 'ХранилищеПользовательскихНастроекДинамическихСписков',
            name_en: 'DynamicListsUserSettingsStorage',
            description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление настроек динамических списков.  Если в свойстве конфигурации "ХранилищеПользовательскихНастроекДинамическихСписков" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления настроек динамических списков. Если в свойстве конфигурации "ХранилищеПользовательскихНастроекДинамическихСписков" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.'
        },
        "ХранилищеПользовательскихНастроекОтчетов": {
            name: 'ХранилищеПользовательскихНастроекОтчетов',
            name_en: 'ReportsUserSettingsStorage',
            description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление настроек отчетов.  Если в свойстве конфигурации "ХранилищеПользовательскихНастроекОтчетов" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления настроек вариантов отчетов. Если в свойстве конфигурации "ХранилищеПользовательскихНастроекОтчетов" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.'
        },
        "ХранилищеСистемныхНастроек": {
            name: 'ХранилищеСистемныхНастроек',
            name_en: 'SystemSettingsStorage',
            description: 'Содержит объект менеджера стандартного хранилища настроек, предназначенный для доступа к системным настройкам.'
        }
    };
}

export function keywords() {
    return {
        ru: {
            Процедура: {},
            Функция: {},
            Экспорт: {},
            Перем: {},
            Неопределено: {},
            Истина: {},
            Ложь: {},
            КонецПроцедуры: {},
            КонецФункции: {},
            Прервать: {},
            Продолжить: {},
            Возврат: {},
            Использовать: {},
            ВызватьИсключение: {},
            Если: {},
            Тогда: {},
            ИначеЕсли: {},
            КонецЦикла: {},
            Иначе: {},
            Исключение: {},
            КонецПопытки: {},
            КонецЕсли: {},
            Попытка: {},
            Пока: {},
            Для: {},
            Каждого: {},
            Из: {},
            По: {},
            Цикл: {},
            НЕ: {},
            И: {},
            ИЛИ: {},
            NULL: {}
        },
        en: {
            Procedure: {},
            Function: {},
            Export: {},
            Var: {},
            Undefined: {},
            True: {},
            False: {},
            NULL: {},
            EndProcedure: {},
            EndFunction: {},
            Break: {},
            Continue: {},
            Return: {},
            Use: {},
            If: {},
            Else: {},
            ElsIf: {},
            Then: {},
            EndIf: {},
            Try: {},
            Except: {},
            EndTry: {},
            Raise: {},
            While: {},
            For: {},
            Each: {},
            In: {},
            To: {},
            Do: {},
            EndDo: {},
            NOT: {},
            AND: {},
            OR: {}
        }
    };
}

export function classes() {
    return {
        "COMОбъект": {
            name: 'COMОбъект',
            name_en: 'COMObject',
            description: 'Создает COM-объект (например, Word, Excel и т.д.). Методы и свойства СОМ-объектов в дальнейшем становятся доступными через данный объект.',
            constructors: {
                "По имени приложения": {
                    description: 'Создает COM-объект внешнего приложения.',
                    signature: '(Имя: Строка, ИмяСервера?: Строка)',
                    params: {
                        "Имя": 'ProgID класса COM, с которым он зарегистрирован в системе. Например, "Excel.Application".',
                        "ИмяСервера": 'Имя компьютера, на котором надо создать указанный объект. Если параметр опущен, то создается на данном компьютере.'
                    }
                },
            }
        },
        "HTTPЗапрос": {
            name: 'HTTPЗапрос',
            name_en: 'HTTPRequest',
            description: 'Предназначен для описания HTTP-запросов, отправляемых через объект HTTPСоединение. Позволяет задать адрес запрашиваемого ресурса, заголовки и тело запроса.',
            methods: {
                "ПолучитьИмяФайлаТела": {
                    name: 'ПолучитьИмяФайлаТела',
                    name_en: 'GetBodyFileName',
                    description: 'Получает имя файла, откуда будет считано тело запроса при отправке.',
                    returns: 'Тип: Строка, Неопределено. Неопределено - имя файла не было установлено.'
                },
                "ПолучитьТелоКакДвоичныеДанные": {
                    name: 'ПолучитьТелоКакДвоичныеДанные',
                    name_en: 'GetBodyAsBinary',
                    description: 'Получает тело запроса как ДвоичныеДанные.',
                    returns: 'Тип: ДвоичныеДанные, Неопределено. Неопределено - тело не было установлено или был установлен файл тела.'
                },
                "ПолучитьТелоКакСтроку": {
                    name: 'ПолучитьТелоКакСтроку',
                    name_en: 'GetBodyAsString',
                    description: 'Получает тело запроса как строку.',
                    returns: 'Тип: Строка, Неопределено. Неопределено - тело не было установлено или был установлен файл тела.'
                },
                "УстановитьИмяФайлаТела": {
                    name: 'УстановитьИмяФайлаТела',
                    name_en: 'SetBodyFileName',
                    description: 'Устанавливает имя файла, из которого будет прочитано тело запроса.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ПутьКФайлу: Строка)',
                            Параметры: {
                                ПутьКФайлу: 'Указывает путь к файлу.'
                            }
                        }
                    }
                },
                "УстановитьТелоИзДвоичныхДанных": {
                    name: 'УстановитьТелоИзДвоичныхДанных',
                    name_en: 'SetBodyFromBinary',
                    description: 'Устанавливает тело запроса из двоичных данных.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Данные: ДвоичныеДанные)',
                            Параметры: {
                                Данные: 'Содержит тело запроса в виде двоичных данных.'
                            }
                        }
                    }
                },
                "УстановитьТелоИзСтроки": {
                    name: 'УстановитьТелоИзСтроки',
                    name_en: 'SetBodyFromString',
                    description: 'Устанавливает тело запроса из строки.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ТелоКакСтрока: Строка, Кодировка?: КодировкаТекста, ИспользоватьBOM?: ИспользованиеByteOrderMark)',
                            Параметры: {
                                ТелоКакСтрока: 'Содержит тело запроса в виде строки.',
                                Кодировка: 'Определяет кодировку, в которой будет отправлен HTTP-запрос. Если параметр не задан, то тело отправляется в кодировке UTF8. Установка этого параметра не вызывает автоматической установки соответствующего HTTP-заголовка. Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки. Поддерживаемые названия кодировок:   - UTF-8  - UTF-16  - UTF-16BE  - UTF-16LE  - UTF-32  - UTF-32BE  - UTF-32LE  - UTF16_PlatformEndian  - UTF16_OppositeEndian  - UTF32_PlatformEndian  - UTF32_OppositeEndian  - UTF-7  - IMAP-mailbox-name  - SCSU  - BOCU-1  - CESU-8  - ISO-8859-1  - US-ASCII  - gb18030  - IBM367  - iso-8859-2  - iso-8859-3  - iso-8859-4  - iso-8859-5  - iso-8859-6  - iso-8859-7  - iso-8859-8  - iso-8859-9  - iso-8859-13  - iso-8859-15  - cp932  - Shift_JIS  - EUC-JP  - cp33722  - windows-950  - Big5  - cp950  - Big5-HKSCS  - cp1386  - GBK  - GB2312  - GB_2312-80  - cp964  - cp949  - cp949c  - EUC-KR  - ibm-971  - KSC_5601  - ibm-1363  - windows-949  - windows-874  - cp874  - ibm-1162  - cp437  - cp737  - cp775  - cp850  - cp851  - cp852  - cp855  - cp856  - cp857  - cp858  - cp860  - cp861  - cp862  - cp863  - cp864  - cp865  - cp866  - ibm-867  - CP868  - cp869  - KOI8-R  - ibm-901  - ibm-902  - cp922  - KOI8-U  - ibm-4909  - windows-1250  - windows-1251  - windows-1252  - windows-1253  - windows-1254  - windows-1255  - windows-1256  - windows-1257  - windows-1258  - macintosh  - x-mac-greek  - x-mac-cyrillic  - x-mac-centraleurroman  - x-mac-turkish  - hp-roman8  - Adobe-Standard-Encoding  - cp1006  - cp1098  - cp1124  - cp1125  - ibm-1129  - cp1131  - ibm-1133  - ISO-2022-JP  - JIS_Encoding  - ISO-2022-JP-2  - ISO_2022,locale=ja,version=3  - ISO_2022,locale=ja,version=4  - ISO-2022-KR  - ISO_2022,locale=ko,version=1  - ISO-2022-CN  - ISO-2022-CN-EXT  - HZ-GB-2312  - windows-57002  - windows-57003  - windows-57011  - windows-57010  - windows-57007  - windows-57004  - windows-57005  - windows-57008  - windows-57009  - LMBCS-1  - LMBCS-2  - LMBCS-3  - LMBCS-4  - LMBCS-5  - LMBCS-6  - LMBCS-8  - LMBCS-11  - LMBCS-16  - LMBCS-17  - LMBCS-18  - LMBCS-19  - IBM037  - ebcdic-de  - ebcdic-dk  - IBM278  - IBM280  - IBM284  - IBM285  - IBM290  - IBM297  - IBM420  - IBM424  - IBM500  - ibm-803  - IBM-Thai  - IBM870  - IBM871  - cp875  - IBM918  - cp930  - cp933  - cp935  - cp937  - cp939  - cp1025  - IBM1026  - IBM1047  - cp1097  - cp1112  - cp1122  - cp1123  - ibm-1130  - ibm-1132  - ibm-1137  - IBM01140  - IBM01141  - IBM01142  - IBM01143  - IBM01144  - IBM01145  - IBM01146  - IBM01147  - IBM01148  - IBM01149  - ibm-1153  - ibm-1154  - ibm-1155  - ibm-1156  - ibm-1157  - ibm-1158  - ibm-1160  - ibm-1164  - ibm-1364  - ibm-1371  - ibm-1388  - ibm-1390  - ibm-1399  - ibm-5123  - ibm-8482  - ibm-16684  - ibm-4899  - ibm-4971  - ebcdic-he  - ebcdic-ar  - ibm-37_P100-1995,swaplfnl  - ibm-1047_P100-1995,swaplfnl  - ibm-1140_P100-1997,swaplfnl  - ibm-1142_P100-1997,swaplfnl  - ibm-1143_P100-1997,swaplfnl  - ibm-1144_P100-1997,swaplfnl  - ibm-1145_P100-1997,swaplfnl  - ibm-1146_P100-1997,swaplfnl  - ibm-1147_P100-1997,swaplfnl  - ibm-1148_P100-1997,swaplfnl  - ibm-1149_P100-1997,swaplfnl  - ibm-1153_P100-1999,swaplfnl  - ibm-12712_P100-1998,swaplfnl  - ibm-16804_X110-1999,swaplfnl  - ebcdic-xml-us .',
                                ИспользоватьBOM: 'Использовать метку порядка байтов (BOM) для кодировок, которые ее поддерживают: UTF-8, UTF-16 и др. В режиме совместимости значение по умолчанию - Использовать. Значение по умолчанию: Авто.'
                            }
                        }
                    }
                },
            },
            properties: {
                "АдресРесурса": {
                    name: 'АдресРесурса',
                    name_en: 'ResourceAddress',
                    description: 'Строка http-ресурса, к которому будет отправлен запрос.'
                },
                "Заголовки": {
                    name: 'Заголовки',
                    name_en: 'Headers',
                    description: 'Заголовки, которые будут отправлены на сервер в виде соответствия: "Заголовок" - "Значение".'
                },
            },
            constructors: {
                "По адресу ресурса и заголовкам": {
                    description: 'Создает объект по адресу ресурса и заголовкам.',
                    signature: '(АдресРесурса: Строка, Заголовки?: Соответствие)',
                    params: {
                        "АдресРесурса": 'Адрес ресурса, к которому будет происходить HTTP-запрос.',
                        "Заголовки": 'Содержит заголовки в виде соответствия "Название заголовка" - "Значение".'
                    }
                },
                "Формирование неинициализированного объекта": {
                    description: 'Создает неинициализированный объект.',
                    signature: '()'
                },
            }
        },
        "HTTPОтвет": {
            name: 'HTTPОтвет',
            name_en: 'HTTPResponse',
            description: 'Предоставляет доступ к содержимому ответа HTTP-сервера на запрос.',
            methods: {
                "ПолучитьИмяФайлаТела": {
                    name: 'ПолучитьИмяФайлаТела',
                    name_en: 'GetBodyFileName',
                    description: 'Получает имя файла, в который было записано тело ответа.',
                    returns: 'Тип: Строка, Неопределено. Неопределено - тело ответа не записывалось в файл.'
                },
                "ПолучитьТелоКакДвоичныеДанные": {
                    name: 'ПолучитьТелоКакДвоичныеДанные',
                    name_en: 'GetBodyAsBinaryData',
                    description: 'Получает тело HTTP-ответа сервера в виде объекта двоичных данных.',
                    returns: 'Тип: ДвоичныеДанные, Неопределено. Неопределено - если при вызове методов ОтправитьДляОбработки или Получить был установлен параметр <ИмяВыходногоФайла>.'
                },
                "ПолучитьТелоКакСтроку": {
                    name: 'ПолучитьТелоКакСтроку',
                    name_en: 'GetBodyAsString',
                    description: 'Получает тело объекта как строку.',
                    returns: 'Тип: Строка, Неопределено. Неопределено - если при вызове методов ОтправитьДляОбработки или Получить был установлен параметр <ИмяВыходногоФайла>.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Кодировка?: КодировкаТекста): Строка|Неопределено',
                            Параметры: {
                                Кодировка: 'Указывает кодировку, в которой должно интерпретироваться тело ответа.  Если не задан, то кодировка определяется из HTTP-заголовка Content-Type. Если сервер не указал кодировку в заголовке, то используется UTF8. Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки. Поддерживаемые названия кодировок:   - UTF-8  - UTF-16  - UTF-16BE  - UTF-16LE  - UTF-32  - UTF-32BE  - UTF-32LE  - UTF16_PlatformEndian  - UTF16_OppositeEndian  - UTF32_PlatformEndian  - UTF32_OppositeEndian  - UTF-7  - IMAP-mailbox-name  - SCSU  - BOCU-1  - CESU-8  - ISO-8859-1  - US-ASCII  - gb18030  - IBM367  - iso-8859-2  - iso-8859-3  - iso-8859-4  - iso-8859-5  - iso-8859-6  - iso-8859-7  - iso-8859-8  - iso-8859-9  - iso-8859-13  - iso-8859-15  - cp932  - Shift_JIS  - EUC-JP  - cp33722  - windows-950  - Big5  - cp950  - Big5-HKSCS  - cp1386  - GBK  - GB2312  - GB_2312-80  - cp964  - cp949  - cp949c  - EUC-KR  - ibm-971  - KSC_5601  - ibm-1363  - windows-949  - windows-874  - cp874  - ibm-1162  - cp437  - cp737  - cp775  - cp850  - cp851  - cp852  - cp855  - cp856  - cp857  - cp858  - cp860  - cp861  - cp862  - cp863  - cp864  - cp865  - cp866  - ibm-867  - CP868  - cp869  - KOI8-R  - ibm-901  - ibm-902  - cp922  - KOI8-U  - ibm-4909  - windows-1250  - windows-1251  - windows-1252  - windows-1253  - windows-1254  - windows-1255  - windows-1256  - windows-1257  - windows-1258  - macintosh  - x-mac-greek  - x-mac-cyrillic  - x-mac-centraleurroman  - x-mac-turkish  - hp-roman8  - Adobe-Standard-Encoding  - cp1006  - cp1098  - cp1124  - cp1125  - ibm-1129  - cp1131  - ibm-1133  - ISO-2022-JP  - JIS_Encoding  - ISO-2022-JP-2  - ISO_2022,locale=ja,version=3  - ISO_2022,locale=ja,version=4  - ISO-2022-KR  - ISO_2022,locale=ko,version=1  - ISO-2022-CN  - ISO-2022-CN-EXT  - HZ-GB-2312  - windows-57002  - windows-57003  - windows-57011  - windows-57010  - windows-57007  - windows-57004  - windows-57005  - windows-57008  - windows-57009  - LMBCS-1  - LMBCS-2  - LMBCS-3  - LMBCS-4  - LMBCS-5  - LMBCS-6  - LMBCS-8  - LMBCS-11  - LMBCS-16  - LMBCS-17  - LMBCS-18  - LMBCS-19  - IBM037  - ebcdic-de  - ebcdic-dk  - IBM278  - IBM280  - IBM284  - IBM285  - IBM290  - IBM297  - IBM420  - IBM424  - IBM500  - ibm-803  - IBM-Thai  - IBM870  - IBM871  - cp875  - IBM918  - cp930  - cp933  - cp935  - cp937  - cp939  - cp1025  - IBM1026  - IBM1047  - cp1097  - cp1112  - cp1122  - cp1123  - ibm-1130  - ibm-1132  - ibm-1137  - IBM01140  - IBM01141  - IBM01142  - IBM01143  - IBM01144  - IBM01145  - IBM01146  - IBM01147  - IBM01148  - IBM01149  - ibm-1153  - ibm-1154  - ibm-1155  - ibm-1156  - ibm-1157  - ibm-1158  - ibm-1160  - ibm-1164  - ibm-1364  - ibm-1371  - ibm-1388  - ibm-1390  - ibm-1399  - ibm-5123  - ibm-8482  - ibm-16684  - ibm-4899  - ibm-4971  - ebcdic-he  - ebcdic-ar  - ibm-37_P100-1995,swaplfnl  - ibm-1047_P100-1995,swaplfnl  - ibm-1140_P100-1997,swaplfnl  - ibm-1142_P100-1997,swaplfnl  - ibm-1143_P100-1997,swaplfnl  - ibm-1144_P100-1997,swaplfnl  - ibm-1145_P100-1997,swaplfnl  - ibm-1146_P100-1997,swaplfnl  - ibm-1147_P100-1997,swaplfnl  - ibm-1148_P100-1997,swaplfnl  - ibm-1149_P100-1997,swaplfnl  - ibm-1153_P100-1999,swaplfnl  - ibm-12712_P100-1998,swaplfnl  - ibm-16804_X110-1999,swaplfnl  - ebcdic-xml-us .'
                            }
                        }
                    }
                },
            },
            properties: {
                "Заголовки": {
                    name: 'Заголовки',
                    name_en: 'Headers',
                    description: 'HTTP-заголовки ответа сервера в виде соответствия: "Название заголовка" - "Значение".'
                },
                "КодСостояния": {
                    name: 'КодСостояния',
                    name_en: 'StatusCode',
                    description: 'Код состояния (ответа) HTTP-сервера. Подробности см. на: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html.'
                },
            },
        },
        "HTTPСоединение": {
            name: 'HTTPСоединение',
            name_en: 'HTTPConnection',
            description: 'Предназначен для взаимодействия с внешними системами по протоколу HTTP, в т.ч. для передачи файлов. Поддерживаются следующие протоколы: HTTP 1.0 и HTTP 1.1. Для защиты соединения может быть использован протокол TLS 1.2.',
            methods: {
                "ВызватьHTTPМетод": {
                    name: 'ВызватьHTTPМетод',
                    name_en: 'CallHTTPMethod',
                    description: 'Отправляет данные на указанный адрес для обработки с использованием указанного HTTP-метода.',
                    returns: 'Тип: HTTPОтвет. Если задан параметр ИмяВыходногоФайла, то тело ответа будет записано в файл. В противном случае, тело ответа можно получить методами ПолучитьТелоКакСтроку и ПолучитьТелоКакДвоичныеДанные объекта HTTPОтвет.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(HTTPМетод: Строка, HTTPЗапрос: HTTPЗапрос, ИмяВыходногоФайла?: Строка): HTTPОтвет',
                            Параметры: {
                                HTTPМетод: 'Строка, содержащая имя HTTP-метода для запроса. Согласно стандарту RFC2616 (http://www.w3.org/Protocols/rfc2616/rfc2616), строка должна содержать только латинские символы.',
                                HTTPЗапрос: 'Запрос, передаваемый на сервер.',
                                ИмяВыходногоФайла: 'Имя файла, в который записывается тело ответа. Если не задано, то тело ответа может быть получено из объекта HTTPОтвет. Значение по умолчанию: Пустая строка.'
                            }
                        }
                    }
                },
                "Записать": {
                    name: 'Записать',
                    name_en: 'Put',
                    description: 'Используется для отправки данных на HTTP-сервер с помощью PUT-запроса.',
                    returns: 'Тип: HTTPОтвет. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(HTTPЗапрос: HTTPЗапрос): HTTPОтвет',
                            Параметры: {
                                HTTPЗапрос: 'HTTP-запрос.'
                            }
                        }
                    }
                },
                "Изменить": {
                    name: 'Изменить',
                    name_en: 'Patch',
                    description: 'Изменяет данные на сервере при помощи PATCH-запроса. Передаются только изменения объекта.',
                    returns: 'Тип: HTTPОтвет. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(HTTPЗапрос: HTTPЗапрос): HTTPОтвет',
                            Параметры: {
                                HTTPЗапрос: 'Запрос, передаваемый на сервер.'
                            }
                        }
                    }
                },
                "ОтправитьДляОбработки": {
                    name: 'ОтправитьДляОбработки',
                    name_en: 'Post',
                    description: 'Отправляет данные на указанный адрес для обработки при помощи HTTP-запроса POST.',
                    returns: 'Тип: HTTPОтвет. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(HTTPЗапрос: HTTPЗапрос, ИмяВыходногоФайла?: Строка): HTTPОтвет',
                            Параметры: {
                                HTTPЗапрос: 'HTTP-запрос.',
                                ИмяВыходногоФайла: 'Имя выходного файла, в который записываются полученные с сервера данные. Если не указан или содержит пустую строку, то тело ответа может быть получено из объекта HTTPОтвет.'
                            }
                        }
                    }
                },
                "Получить": {
                    name: 'Получить',
                    name_en: 'Get',
                    description: 'Получает данные с HTTP-сервера, используя GET-запрос.',
                    returns: 'Тип: HTTPОтвет. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(HTTPЗапрос: HTTPЗапрос, ИмяВыходногоФайла?: Строка): HTTPОтвет',
                            Параметры: {
                                HTTPЗапрос: 'HTTP-запрос.',
                                ИмяВыходногоФайла: 'Имя файла, в который помещаются данные полученного ресурса. Если не указан или содержит пустую строку, то тело ответа может быть получено из объекта HTTPОтвет.'
                            }
                        }
                    }
                },
                "ПолучитьЗаголовки": {
                    name: 'ПолучитьЗаголовки',
                    name_en: 'Head',
                    description: 'Получает при помощи HEAD-запроса информацию о запрашиваемых данных, содержащуюся в заголовках, не получая сами данные.',
                    returns: 'Тип: HTTPОтвет. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(HTTPЗапрос: HTTPЗапрос): HTTPОтвет',
                            Параметры: {
                                HTTPЗапрос: 'Запрос, передаваемый на сервер.'
                            }
                        }
                    }
                },
                "Удалить": {
                    name: 'Удалить',
                    name_en: 'Delete',
                    description: 'Удаляет ресурс на сервере при помощи HTTP-запроса DELETE.',
                    returns: 'Тип: HTTPОтвет. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(HTTPЗапрос: HTTPЗапрос): HTTPОтвет',
                            Параметры: {
                                HTTPЗапрос: 'HTTP-запрос.'
                            }
                        }
                    }
                },
            },
            properties: {
                "ЗащищенноеСоединение": {
                    name: 'ЗащищенноеСоединение',
                    name_en: 'SecureConnection',
                    description: 'Содержит объект защищенного соединения для осуществления HTTPS-соединения, если указан.'
                },
                "ИспользоватьАутентификациюОС": {
                    name: 'ИспользоватьАутентификациюОС',
                    name_en: 'UseOSAuthentication',
                    description: 'Содержит текущее значение использования аутентификации NTLM или Negotiate на сервере.'
                },
                "Пароль": {
                    name: 'Пароль',
                    name_en: 'Password',
                    description: 'Пароль пользователя, от имени которого установлено соединение.'
                },
                "Пользователь": {
                    name: 'Пользователь',
                    name_en: 'User',
                    description: 'Пользователь, от имени которого установлено соединение.'
                },
                "Порт": {
                    name: 'Порт',
                    name_en: 'Port',
                    description: 'Порт сервера, с которым произведено соединение.'
                },
                "Прокси": {
                    name: 'Прокси',
                    name_en: 'Proxy',
                    description: 'Прокси, через который установлено соединение.'
                },
                "Сервер": {
                    name: 'Сервер',
                    name_en: 'Host',
                    description: 'Сервер, с которым произведено соединение.'
                },
                "Таймаут": {
                    name: 'Таймаут',
                    name_en: 'Timeout',
                    description: 'Определяет время ожидания осуществляемого соединения и операций, в секундах. 0 - таймаут не установлен.'
                },
            },
            constructors: {
                "По указанному серверу": {
                    description: 'Создает объект HTTPСоединение.',
                    signature: '(Сервер: Строка, Порт?: Число, Пользователь?: Строка, Пароль?: Строка, Прокси?: ИнтернетПрокси, Таймаут?: Число, ЗащищенноеСоединение?: ЗащищенноеСоединениеOpenSSL, ИспользоватьАутентификациюОС?: Булево)',
                    params: {
                        "Сервер": 'Хост сервера, с которым осуществляется соединение. Примечание: Имя хоста не должно содержать указание протокола. Например, 1c.ru.',
                        "Порт": 'Порт сервера, с которым осуществляется соединение.  Значение по умолчанию для HTTP соединений равно 80, для защищенных HTTPS соединений - 443. Значение по умолчанию: порт по умолчанию для используемого протокола.',
                        "Пользователь": 'Имя пользователя на указанном сервере.',
                        "Пароль": 'Пароль пользователя на указанном сервере.',
                        "Прокси": 'Прокси, используемый для соединения с сервером.',
                        "Таймаут": 'Таймаут осуществляемого соединения и операций, в секундах. 0 - не устанавливать таймаут. Значение по умолчанию: 0.',
                        "ЗащищенноеСоединение": 'Объект защищенного соединения для осуществления HTTPS соединения, если указан. Значение по умолчанию: Неопределено.',
                        "ИспользоватьАутентификациюОС": 'Включает использование авторизации NTLM или Negotiate на сервере. Значение по умолчанию: Ложь.'
                    }
                },
            }
        },
        "ГенераторСлучайныхЧисел": {
            name: 'ГенераторСлучайныхЧисел',
            name_en: 'RandomNumberGenerator',
            description: 'Генератор случайных чисел.',
            methods: {
                "СлучайноеЧисло": {
                    name: 'СлучайноеЧисло',
                    name_en: 'RandomNumber',
                    description: 'Возвращает случайное целое число в заданном диапазоне. Нижняя граница диапазона не может быть меньше 0, а верхняя - не может быть больше 2^32 - 1.',
                    returns: 'Тип: Число. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(НижняяГраница?: Число, ВерхняяГраница?: Число): Число',
                            Параметры: {
                                НижняяГраница: 'Нижняя граница диапазона. Задается целым числом и не может быть меньше 0. Значение по умолчанию: 0.',
                                ВерхняяГраница: 'Верхняя граница диапазона. Задается целым числом и не может быть больше 4294967295 (2^32 - 1), а также меньше значения параметра <НижнийДиапазон>. Значение по умолчанию: 4294967295.'
                            }
                        }
                    }
                },
            },
            constructors: {
                "Конструктор по умолчанию": {
                    description: 'Генератор случайных чисел инициализируется начальным числом из параметра.  Последовательность случайных чисел для одного и того же начального числа будет одинакова.',
                    signature: '(НачальноеЧисло?: Число)',
                    params: {
                        "НачальноеЧисло": 'Начальное число, которым инициализируется генератор случайных чисел.'
                    }
                },
                "Формирование неинициализированного объекта": {
                    description: 'Генератор случайных чисел инициализируется временем работы операционной системы с момента старта.',
                    signature: '()'
                },
            }
        },
        "ДвоичныеДанные": {
            name: 'ДвоичныеДанные',
            name_en: 'BinaryData',
            description: 'Значение содержит двоичные данные, которые считываются из файла. Значение может быть сохранено в ХранилищеЗначения. Хранимые данные могут быть записаны в файл.',
            methods: {
                "Записать": {
                    name: 'Записать',
                    name_en: 'Write',
                    description: 'Записывает двоичные данные в файл или поток.',
                    signature: {
                        ВФайл: {
                            СтрокаПараметров: '(ИмяФайла: Строка)',
                            Параметры: {
                                ИмяФайла: 'Имя файла, в который требуется записать двоичные данные. Если файл не существует, он будет создан. В противном случае, его содержимое будет перезаписано.'
                            }
                        },
                        ЗаписьВПоток: {
                            СтрокаПараметров: '(Поток: Поток)',
                            Параметры: {
                                Поток: 'Поток, в который необходимо записать двоичные данные.'
                            }
                        }
                    }
                },
                "НачатьЗапись": {
                    name: 'НачатьЗапись',
                    name_en: 'BeginWrite',
                    description: 'Начинает запись двоичных данных в файл или поток.',
                    signature: {
                        ВФайл: {
                            СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, ИмяФайла: Строка)',
                            Параметры: {
                                ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения работы метода со следующими параметрами:   - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                                ИмяФайла: 'Имя файла, в который требуется записать двоичные данные.'
                            }
                        },
                        ЗаписьВПоток: {
                            СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, Поток: Поток)',
                            Параметры: {
                                ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения операции со следующими параметрами:   - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                                Поток: 'Поток, в который требуется записать двоичные данные.'
                            }
                        }
                    }
                },
                "ОткрытьПотокДляЧтения": {
                    name: 'ОткрытьПотокДляЧтения',
                    name_en: 'OpenStreamForRead',
                    description: 'Открывает поток для чтения двоичных данных.',
                    returns: 'Тип: Поток. Возвращает Поток, позиция которого установлена в начало двоичных данных.'
                },
                "Размер": {
                    name: 'Размер',
                    name_en: 'Size',
                    description: 'Получает размер двоичных данных в байтах.',
                    returns: 'Тип: Число. '
                },
            },
            constructors: {
                "На основании файла": {
                    description: 'Создает объект и помещает в него двоичные данные, взятые из файла. В режиме веб-клиента для создания двоичных данных из файла можно использовать метод глобального контекста НачатьСозданиеДвоичныхДанныхИзФайла.',
                    signature: '(ИмяФайла: Строка)',
                    params: {
                        "ИмяФайла": 'Имя файла, из которого будет загружено значение в виде двоичных данных.'
                    }
                },
            }
        },
        "ДеревоЗначений": {
            name: 'ДеревоЗначений',
            name_en: 'ValueTree',
            description: 'Используется для доступа к свойствам и методам дерева значений в целом. Объект, представляющий собой древовидную структуру, обладает сходной функциональностью с таблицей значений, а также обладает возможностью добавлять подчиненные строки к какой-либо строке дерева.  Внимание! В толстом клиенте (обычное приложение) передача значений данного типа с клиента на сервер и обратно приводит к возникновению исключения.',
            methods: {
                "ВыбратьСтроку": {
                    name: 'ВыбратьСтроку',
                    name_en: 'ChooseRow',
                    description: 'Вызывает модальное окно для выбора строки из дерева значений.',
                    returns: 'Тип: СтрокаДереваЗначений, Неопределено. Если пользователь отказался от выбора, возвращает Неопределено.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Заголовок?: Строка, НачальнаяСтрока?: СтрокаДереваЗначений): СтрокаДереваЗначений|Неопределено',
                            Параметры: {
                                Заголовок: 'Заголовок диалога выбора строки. Если заголовок не указан, то будет использован стандартный заголовок "Выберите строку".',
                                НачальнаяСтрока: 'Начальная строка дерева (будет выделенной при открытии диалога). Если не указана, то выделенной будет первая строка дерева.'
                            }
                        }
                    }
                },
                "Скопировать": {
                    name: 'Скопировать',
                    name_en: 'Copy',
                    description: 'Создает полную копию исходного дерева значений.',
                    returns: 'Тип: ДеревоЗначений. '
                },
            },
            properties: {
                "Колонки": {
                    name: 'Колонки',
                    name_en: 'Columns',
                    description: 'Содержит коллекцию колонок дерева значений.'
                },
                "Строки": {
                    name: 'Строки',
                    name_en: 'Rows',
                    description: 'Содержит коллекцию строк 1-го уровня дерева значений.'
                },
            },
            constructors: {
                "По умолчанию": {
                    signature: '()'
                },
            }
        },
        "ЗаписьXML": {
            name: 'ЗаписьXML',
            name_en: 'XMLWriter',
            description: 'Предназначен для организации последовательной записи документов и фрагментов XML.',
            methods: {
                "Закрыть": {
                    name: 'Закрыть',
                    name_en: 'Close',
                    description: 'Завершает запись текста XML. Если производилась запись в файл, то файл закрывается. Если производилась запись в строку, то результирующая строка будет получена в качестве возвращаемого значения метода. Если производилась запись в файл, то метод вернет пустую строку.',
                    returns: 'Тип: Строка. '
                },
                "ЗаписатьАтрибут": {
                    name: 'ЗаписатьАтрибут',
                    name_en: 'WriteAttribute',
                    description: 'Записывает атрибут элемента.',
                    signature: {
                        ЗаписьАтрибутаСПолнымИменем: {
                            СтрокаПараметров: '(ПолноеИмя: Строка, Значение: Строка)',
                            Параметры: {
                                ПолноеИмя: 'Полное имя атрибута. Может включать префикс.',
                                Значение: 'Значение атрибута.'
                            }
                        },
                        ЗаписьАтрибутаСЛокальнымИменемИUriПространстваИмен: {
                            СтрокаПараметров: '(ЛокальноеИмя: Строка, URIПространстваИмен: Строка, Значение: Строка)',
                            Параметры: {
                                ЛокальноеИмя: 'Локальное имя атрибута.',
                                URIПространстваИмен: 'URI пространства имен для локального имени атрибута.',
                                Значение: 'Значение атрибута.'
                            }
                        }
                    }
                },
                "ЗаписатьБезОбработки": {
                    name: 'ЗаписатьБезОбработки',
                    name_en: 'WriteRaw',
                    description: 'Записывает XML фрагмент текста без обработки в результирующий текст. Например, можно приготовить фрагмент XML-документа и потом вставить его в целевой документ с помощью данного метода.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Текст: Строка)',
                            Параметры: {
                                Текст: 'Текст, помещаемый без обработки в формируемый документ или фрагмент XML.'
                            }
                        }
                    }
                },
                "ЗаписатьИнструкциюОбработки": {
                    name: 'ЗаписатьИнструкциюОбработки',
                    name_en: 'WriteProcessingInstruction',
                    description: 'Записывает инструкцию обработки XML.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Имя: Строка, Текст: Строка)',
                            Параметры: {
                                Имя: 'Имя инструкции обработки.',
                                Текст: 'Текст инструкции обработки.'
                            }
                        }
                    }
                },
                "ЗаписатьКомментарий": {
                    name: 'ЗаписатьКомментарий',
                    name_en: 'WriteComment',
                    description: 'Записывает XML-комментарий.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Комментарий: Строка)',
                            Параметры: {
                                Комментарий: 'Текст комментария, помещаемый в XML-документ.'
                            }
                        }
                    }
                },
                "ЗаписатьКонецАтрибута": {
                    name: 'ЗаписатьКонецАтрибута',
                    name_en: 'WriteEndAttribute',
                    description: 'Завершает запись атрибута XML. Начало атрибута записывается при вызове метода ЗаписьXML.ЗаписатьНачалоАтрибута. После записи начала атрибута все, что записывается - относится к данному атрибуту: текст, ссылки на сущности. Для завершения атрибута следует вызвать данный метод. Каждому вызову метода ЗаписьXML.ЗаписатьНачалоАтрибута должен соответствовать вызов данного метода.'
                },
                "ЗаписатьКонецЭлемента": {
                    name: 'ЗаписатьКонецЭлемента',
                    name_en: 'WriteEndElement',
                    description: 'Завершает запись элемента XML. Начало элемента записывается при вызове метода ЗаписьXML.ЗаписатьНачалоЭлемента. После записи начала элемента все, что записывается, относится к данному элементу: вложенные элементы, атрибуты, текст и т. п. Для завершения элемента следует вызвать данный метод. Каждому вызову метода ЗаписьXML.ЗаписатьНачалоЭлемента должен соответствовать вызов данного метода.'
                },
                "ЗаписатьНачалоАтрибута": {
                    name: 'ЗаписатьНачалоАтрибута',
                    name_en: 'WriteStartAttribute',
                    description: 'Записывает начало атрибута. Может вызываться после вызова метода ЗаписьXML.ЗаписатьНачалоЭлемента, но до вызова методов ЗаписьXML.ЗаписатьКонецЭлемента, ЗаписьXML.ЗаписатьТекст, ЗаписьXML.ЗаписатьКомментарий, ЗаписьXML.ЗаписатьСекциюCDATA или ЗаписьXML.ЗаписатьНачалоАтрибута.',
                    signature: {
                        ЗаписьСПолнымИменемАтрибута: {
                            СтрокаПараметров: '(ПолноеИмя: Строка)',
                            Параметры: {
                                ПолноеИмя: 'Полное имя записываемого атрибута. Может включать префикс. Например: "nsp:weight".'
                            }
                        },
                        ЗаписьСЛокальнымИменемИUriПространстваИмен: {
                            СтрокаПараметров: '(ЛокальноеИмя: Строка, URIПространстваИмен: Строка)',
                            Параметры: {
                                ЛокальноеИмя: 'Локальное имя атрибута (без префикса).',
                                URIПространстваИмен: 'URI пространства имен для имени атрибута.'
                            }
                        }
                    }
                },
                "ЗаписатьНачалоЭлемента": {
                    name: 'ЗаписатьНачалоЭлемента',
                    name_en: 'WriteStartElement',
                    description: 'Записывает начало элемента.',
                    signature: {
                        ЗаписьНачалаЭлементаСПолнымИменемЭлемента: {
                            СтрокаПараметров: '(ПолноеИмя: Строка)',
                            Параметры: {
                                ПолноеИмя: 'Полное имя записываемого элемента. Может включать префикс. Например: "nsp:weight".'
                            }
                        },
                        ЗаписьНачалаЭлементаСЛокальнымИменемИUriПространстваИмен: {
                            СтрокаПараметров: '(ЛокальноеИмя: Строка, URIПространстваИмен: Строка)',
                            Параметры: {
                                ЛокальноеИмя: 'Локальное имя элемента (без префикса).',
                                URIПространстваИмен: 'URI пространства имен для имени элемента.'
                            }
                        }
                    }
                },
                "ЗаписатьОбъявлениеXML": {
                    name: 'ЗаписатьОбъявлениеXML',
                    name_en: 'WriteXMLDeclaration',
                    description: 'Записывает объявление XML.  Если формируется XML-документ, а не фрагмент XML-документа, то в начало документа надо поместить его объявление. Для того чтобы поместить в документ его объявление, необходимо вызвать данный метод. При этом в начало документа помещается текст следующего вида: ?xml version="1.0"?. Если при открытии файла или установке строки была указана кодировка, то в объявление также помещается и атрибут \'encoding\'. Например: ?xml version="1.0" encoding="UTF-8"?. Запись объявления XML должна выполняться перед другими операциями записи XML.'
                },
                "ЗаписатьСекциюCDATA": {
                    name: 'ЗаписатьСекциюCDATA',
                    name_en: 'WriteCDATASection',
                    description: 'Осуществляет запись секции CDATA.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Данные: Строка)',
                            Параметры: {
                                Данные: 'Символьные данные - содержимое секции CDATA.'
                            }
                        }
                    }
                },
                "ЗаписатьСоответствиеПространстваИмен": {
                    name: 'ЗаписатьСоответствиеПространстваИмен',
                    name_en: 'WriteNamespaceMapping',
                    description: 'Записывает соответствие префикса и URI пространства имен. Данный метод должен вызываться после обращения к методу ЗаписьXML.ЗаписатьНачалоЭлемента и до записи вложенных элементов и текста элемента. Соответствие действует в рамках текущего элемента и всех вложенных.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Префикс: Строка, URIПространстваИмен: Строка)',
                            Параметры: {
                                Префикс: 'Префикс имени.',
                                URIПространстваИмен: 'URI пространства имен, для которого устанавливается соответствующий префикс.'
                            }
                        }
                    }
                },
                "ЗаписатьСсылкуНаСущность": {
                    name: 'ЗаписатьСсылкуНаСущность',
                    name_en: 'WriteEntityReference',
                    description: 'Осуществляет запись ссылки на сущность.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Имя: Строка)',
                            Параметры: {
                                Имя: 'Имя ссылки на сущность.'
                            }
                        }
                    }
                },
                "ЗаписатьТекст": {
                    name: 'ЗаписатьТекст',
                    name_en: 'WriteText',
                    description: 'Записывает текст элемента. Перед вызовом данного метода должен быть вызван метод ЗаписьXML.ЗаписатьНачалоЭлемента, так как иначе непонятно, к какому элементу относится текст. Для одного элемента данный метод может вызываться неоднократно. То есть текст элемента может записываться по частям.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Текст: Строка)',
                            Параметры: {
                                Текст: 'Текст, помещаемый в элемент XML.'
                            }
                        }
                    }
                },
                "ЗаписатьТекущий": {
                    name: 'ЗаписатьТекущий',
                    name_en: 'WriteCurrent',
                    description: 'Записывает текущее состояние объекта чтения XML. Чтение данных XML при этом не выполняется.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ЧтениеXML: ЧтениеУзловDOM)',
                            Параметры: {
                                ЧтениеXML: 'Объект чтения XML, текущее состояние которого будет использовано для записи очередных данных в объект записи XML.'
                            }
                        }
                    }
                },
                "ЗаписатьТипДокумента": {
                    name: 'ЗаписатьТипДокумента',
                    name_en: 'WriteDocumentType',
                    signature: {
                        ИмяИОпределение: {
                            СтрокаПараметров: '(Имя: Строка, ВнутреннееПодмножество: Строка)',
                            Параметры: {
                                Имя: 'Имя документа.',
                                ВнутреннееПодмножество: 'Внутреннее подмножество - собственно определение типа документа.'
                            }
                        },
                        Имя_СистемныйИдентификаторИВнутреннееПодмножество: {
                            СтрокаПараметров: '(Имя: Строка, СистемныйИдентификатор: Строка, ВнутреннееПодмножество: Строка)',
                            Параметры: {
                                Имя: 'Имя документа.',
                                СистемныйИдентификатор: 'Системный идентификатор документа.',
                                ВнутреннееПодмножество: 'Внутреннее подмножество - собственно определение типа документа.'
                            }
                        },
                        Имя_ПубличныйИдентификатор_СистемныйИдентификаторИВнутреннееПодмножество: {
                            СтрокаПараметров: '(Имя: Строка, ПубличныйИдентификатор: Строка, СистемныйИдентификатор: Строка, ВнутреннееПодмножество: Строка)',
                            Параметры: {
                                Имя: 'Имя документа.',
                                ПубличныйИдентификатор: 'Публичный идентификатор документа.',
                                СистемныйИдентификатор: 'Системный идентификатор документа.',
                                ВнутреннееПодмножество: 'Внутреннее подмножество - собственно определение типа документа.'
                            }
                        }
                    }
                },
                "НайтиПрефикс": {
                    name: 'НайтиПрефикс',
                    name_en: 'LookupPrefix',
                    description: 'Осуществляет поиск префикса для указанного URI пространства имен.',
                    returns: 'Тип: Строка, Неопределено. Если префикс не обнаружен (соответствие URI пространства имен не было записано), возвращается Неопределено.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(URIПространстваИмен: Строка): Строка|Неопределено',
                            Параметры: {
                                URIПространстваИмен: 'URI пространства имен, для которого необходимо найти префикс.'
                            }
                        }
                    }
                },
                "ОткрытьФайл": {
                    name: 'ОткрытьФайл',
                    name_en: 'OpenFile',
                    description: 'Открывает файл для записи XML. Позволяет указать тип кодировки, который будет использован для записи файла XML.',
                    signature: {
                        ПоИмениИТипуКодировки: {
                            СтрокаПараметров: '(ИмяФайлаXML: Строка, ТипКодировки?: Строка, ДобавлятьBOM?: Булево)',
                            Параметры: {
                                ИмяФайлаXML: 'Имя файла, в который будет записываться текст XML.',
                                ТипКодировки: 'В качестве типа кодировки может быть указана одна из возможных кодировок текста. В этом случае файл будет записан в соответствующей кодировке. При этом в объявлении XML-документа (если таковое будет записано) будет присутствовать атрибут \'encoding\', имеющий соответствующее значение. Если же в качестве параметра указана пустая строка или ничего не указано, то для записи файла будет использована кодировка UTF8, а атрибут \'encoding\' не будет присутствовать в объявлении XML-документа. Поддерживаемые коды кодировок:   - UTF-8  - UTF-16  - UTF-16BE  - UTF-16LE  - UTF-32  - UTF-32BE  - UTF-32LE  - UTF16_PlatformEndian  - UTF16_OppositeEndian  - UTF32_PlatformEndian  - UTF32_OppositeEndian  - UTF-7  - IMAP-mailbox-name  - SCSU  - BOCU-1  - CESU-8  - ISO-8859-1  - US-ASCII  - gb18030  - IBM367  - iso-8859-2  - iso-8859-3  - iso-8859-4  - iso-8859-5  - iso-8859-6  - iso-8859-7  - iso-8859-8  - iso-8859-9  - iso-8859-13  - iso-8859-15  - cp932  - Shift_JIS  - EUC-JP  - cp33722  - windows-950  - Big5  - cp950  - Big5-HKSCS  - cp1386  - GBK  - GB2312  - GB_2312-80  - cp964  - cp949  - cp949c  - EUC-KR  - ibm-971  - KSC_5601  - ibm-1363  - windows-949  - windows-874  - cp874  - ibm-1162  - cp437  - cp737  - cp775  - cp850  - cp851  - cp852  - cp855  - cp856  - cp857  - cp858  - cp860  - cp861  - cp862  - cp863  - cp864  - cp865  - cp866  - ibm-867  - CP868  - cp869  - KOI8-R  - ibm-901  - ibm-902  - cp922  - KOI8-U  - ibm-4909  - windows-1250  - windows-1251  - windows-1252  - windows-1253  - windows-1254  - windows-1255  - windows-1256  - windows-1257  - windows-1258  - macintosh  - x-mac-greek  - x-mac-cyrillic  - x-mac-centraleurroman  - x-mac-turkish  - hp-roman8  - Adobe-Standard-Encoding  - cp1006  - cp1098  - cp1124  - cp1125  - ibm-1129  - cp1131  - ibm-1133  - ISO-2022-JP  - JIS_Encoding  - ISO-2022-JP-2  - ISO_2022,locale=ja,version=3  - ISO_2022,locale=ja,version=4  - ISO-2022-KR  - ISO_2022,locale=ko,version=1  - ISO-2022-CN  - ISO-2022-CN-EXT  - HZ-GB-2312  - windows-57002  - windows-57003  - windows-57011  - windows-57010  - windows-57007  - windows-57004  - windows-57005  - windows-57008  - windows-57009  - LMBCS-1  - LMBCS-2  - LMBCS-3  - LMBCS-4  - LMBCS-5  - LMBCS-6  - LMBCS-8  - LMBCS-11  - LMBCS-16  - LMBCS-17  - LMBCS-18  - LMBCS-19  - IBM037  - ebcdic-de  - ebcdic-dk  - IBM278  - IBM280  - IBM284  - IBM285  - IBM290  - IBM297  - IBM420  - IBM424  - IBM500  - ibm-803  - IBM-Thai  - IBM870  - IBM871  - cp875  - IBM918  - cp930  - cp933  - cp935  - cp937  - cp939  - cp1025  - IBM1026  - IBM1047  - cp1097  - cp1112  - cp1122  - cp1123  - ibm-1130  - ibm-1132  - ibm-1137  - IBM01140  - IBM01141  - IBM01142  - IBM01143  - IBM01144  - IBM01145  - IBM01146  - IBM01147  - IBM01148  - IBM01149  - ibm-1153  - ibm-1154  - ibm-1155  - ibm-1156  - ibm-1157  - ibm-1158  - ibm-1160  - ibm-1164  - ibm-1364  - ibm-1371  - ibm-1388  - ibm-1390  - ibm-1399  - ibm-5123  - ibm-8482  - ibm-16684  - ibm-4899  - ibm-4971  - ebcdic-he  - ebcdic-ar  - ibm-37_P100-1995,swaplfnl  - ibm-1047_P100-1995,swaplfnl  - ibm-1140_P100-1997,swaplfnl  - ibm-1142_P100-1997,swaplfnl  - ibm-1143_P100-1997,swaplfnl  - ibm-1144_P100-1997,swaplfnl  - ibm-1145_P100-1997,swaplfnl  - ibm-1146_P100-1997,swaplfnl  - ibm-1147_P100-1997,swaplfnl  - ibm-1148_P100-1997,swaplfnl  - ibm-1149_P100-1997,swaplfnl  - ibm-1153_P100-1999,swaplfnl  - ibm-12712_P100-1998,swaplfnl  - ibm-16804_X110-1999,swaplfnl  - ebcdic-xml-us',
                                ДобавлятьBOM: 'Определяет, будет ли добавлена метка порядка байт (BOM) к результирующему файлу XML. Значение по умолчанию: Истина.'
                            }
                        },
                        СПараметрамиЗаписи: {
                            СтрокаПараметров: '(ИмяФайлаXML: Строка, ПараметрыЗаписи: ПараметрыЗаписиXML, ДобавлятьBOM?: Булево)',
                            Параметры: {
                                ИмяФайлаXML: 'Имя файла, в который будет записываться текст XML.',
                                ПараметрыЗаписи: 'Параметры записи XML.',
                                ДобавлятьBOM: 'Определяет, будет ли добавлена метка порядка байт (BOM) к результирующему файлу XML. Значение по умолчанию: Истина.'
                            }
                        }
                    }
                },
                "УстановитьСтроку": {
                    name: 'УстановитьСтроку',
                    name_en: 'SetString',
                    description: 'Инициализирует объект для вывода результирующего XML в строку.',
                    signature: {
                        ПоТипуКодировки: {
                            СтрокаПараметров: '(ТипКодировки?: Строка)',
                            Параметры: {
                                ТипКодировки: 'В качестве типа кодировки может быть указано имя одной из возможных кодировок. Это никак не влияет на формируемую строку. Но если будет записано объявление XML-документа, то объявление будет содержать атрибут \'encoding\', имеющий соответствующее значение. Если же в качестве параметра указана пустая строка или ничего не указано, то атрибут \'encoding\' не будет присутствовать в объявлении XML-документа. Поддерживаемые коды кодировок:   - UTF-8  - UTF-16  - UTF-16BE  - UTF-16LE  - UTF-32  - UTF-32BE  - UTF-32LE  - UTF16_PlatformEndian  - UTF16_OppositeEndian  - UTF32_PlatformEndian  - UTF32_OppositeEndian  - UTF-7  - IMAP-mailbox-name  - SCSU  - BOCU-1  - CESU-8  - ISO-8859-1  - US-ASCII  - gb18030  - IBM367  - iso-8859-2  - iso-8859-3  - iso-8859-4  - iso-8859-5  - iso-8859-6  - iso-8859-7  - iso-8859-8  - iso-8859-9  - iso-8859-13  - iso-8859-15  - cp932  - Shift_JIS  - EUC-JP  - cp33722  - windows-950  - Big5  - cp950  - Big5-HKSCS  - cp1386  - GBK  - GB2312  - GB_2312-80  - cp964  - cp949  - cp949c  - EUC-KR  - ibm-971  - KSC_5601  - ibm-1363  - windows-949  - windows-874  - cp874  - ibm-1162  - cp437  - cp737  - cp775  - cp850  - cp851  - cp852  - cp855  - cp856  - cp857  - cp858  - cp860  - cp861  - cp862  - cp863  - cp864  - cp865  - cp866  - ibm-867  - CP868  - cp869  - KOI8-R  - ibm-901  - ibm-902  - cp922  - KOI8-U  - ibm-4909  - windows-1250  - windows-1251  - windows-1252  - windows-1253  - windows-1254  - windows-1255  - windows-1256  - windows-1257  - windows-1258  - macintosh  - x-mac-greek  - x-mac-cyrillic  - x-mac-centraleurroman  - x-mac-turkish  - hp-roman8  - Adobe-Standard-Encoding  - cp1006  - cp1098  - cp1124  - cp1125  - ibm-1129  - cp1131  - ibm-1133  - ISO-2022-JP  - JIS_Encoding  - ISO-2022-JP-2  - ISO_2022,locale=ja,version=3  - ISO_2022,locale=ja,version=4  - ISO-2022-KR  - ISO_2022,locale=ko,version=1  - ISO-2022-CN  - ISO-2022-CN-EXT  - HZ-GB-2312  - windows-57002  - windows-57003  - windows-57011  - windows-57010  - windows-57007  - windows-57004  - windows-57005  - windows-57008  - windows-57009  - LMBCS-1  - LMBCS-2  - LMBCS-3  - LMBCS-4  - LMBCS-5  - LMBCS-6  - LMBCS-8  - LMBCS-11  - LMBCS-16  - LMBCS-17  - LMBCS-18  - LMBCS-19  - IBM037  - ebcdic-de  - ebcdic-dk  - IBM278  - IBM280  - IBM284  - IBM285  - IBM290  - IBM297  - IBM420  - IBM424  - IBM500  - ibm-803  - IBM-Thai  - IBM870  - IBM871  - cp875  - IBM918  - cp930  - cp933  - cp935  - cp937  - cp939  - cp1025  - IBM1026  - IBM1047  - cp1097  - cp1112  - cp1122  - cp1123  - ibm-1130  - ibm-1132  - ibm-1137  - IBM01140  - IBM01141  - IBM01142  - IBM01143  - IBM01144  - IBM01145  - IBM01146  - IBM01147  - IBM01148  - IBM01149  - ibm-1153  - ibm-1154  - ibm-1155  - ibm-1156  - ibm-1157  - ibm-1158  - ibm-1160  - ibm-1164  - ibm-1364  - ibm-1371  - ibm-1388  - ibm-1390  - ibm-1399  - ibm-5123  - ibm-8482  - ibm-16684  - ibm-4899  - ibm-4971  - ebcdic-he  - ebcdic-ar  - ibm-37_P100-1995,swaplfnl  - ibm-1047_P100-1995,swaplfnl  - ibm-1140_P100-1997,swaplfnl  - ibm-1142_P100-1997,swaplfnl  - ibm-1143_P100-1997,swaplfnl  - ibm-1144_P100-1997,swaplfnl  - ibm-1145_P100-1997,swaplfnl  - ibm-1146_P100-1997,swaplfnl  - ibm-1147_P100-1997,swaplfnl  - ibm-1148_P100-1997,swaplfnl  - ibm-1149_P100-1997,swaplfnl  - ibm-1153_P100-1999,swaplfnl  - ibm-12712_P100-1998,swaplfnl  - ibm-16804_X110-1999,swaplfnl  - ebcdic-xml-us'
                            }
                        },
                        СПараметрамиЗаписи: {
                            СтрокаПараметров: '(ПараметрыЗаписи?: ПараметрыЗаписиXML)',
                            Параметры: {
                                ПараметрыЗаписи: 'Параметры записи XML.'
                            }
                        }
                    }
                },
            },
            properties: {
                "КонтекстПространствИмен": {
                    name: 'КонтекстПространствИмен',
                    name_en: 'NamespaceContext',
                    description: 'Текущий контекст пространств имен XML.'
                },
                "Отступ": {
                    name: 'Отступ',
                    name_en: 'Indent',
                    description: 'Показывает, будут ли в результирующем тексте делаться отступы для показа структуры вложенности элементов XML. Установка данного свойства не имеет немедленного эффекта. Установленное значение свойства будет использовано только после открытия файла или установки строки. После создания объекта данное свойство имеет значение Истина.'
                },
                "Параметры": {
                    name: 'Параметры',
                    name_en: 'Settings',
                    description: 'Определяет текущие параметры записи XML.'
                },
            },
            constructors: {
                "По умолчанию": {
                    signature: '()'
                },
            }
        },
        "ЗаписьZipФайла": {
            name: 'ЗаписьZipФайла',
            name_en: 'ZipFileWriter',
            description: 'Предназначен для записи в ZIP архив.',
            methods: {
                "Добавить": {
                    name: 'Добавить',
                    name_en: 'Add',
                    description: 'Добавляет новый файл в архив.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ИмяФайла: Строка, МетодСохраненияПутей?: РежимСохраненияПутейZIP, РекурсивнаяОбработкаПодпапок?: РежимОбработкиПодкаталоговZIP)',
                            Параметры: {
                                ИмяФайла: 'Имя файла, помещаемого в архив, или маска. Недопустимо использование в именах файлов и папок букв национальных алфавитов, которые при преобразовании из символов UNICODE в узкие символы могут быть преобразованы с потерей информации. Рекомендуется использовать в именах файлов и папок символы латинского алфавита. Запрещены символы: > < | ? * / \\ : ".',
                                МетодСохраненияПутей: 'Метод сохранения путей к файлу в архиве. Значение по умолчанию: НеСохранятьПути.',
                                РекурсивнаяОбработкаПодпапок: 'В случае добавления файлов по маске обрабатывать дополнительно подкаталоги. Значение по умолчанию: НеОбрабатывать.'
                            }
                        }
                    }
                },
                "Записать": {
                    name: 'Записать',
                    name_en: 'Write',
                    description: 'Записывает и закрывает файл архива.'
                },
                "Открыть": {
                    name: 'Открыть',
                    name_en: 'Open',
                    description: 'Открывает ZIP архив для записи.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ИмяФайла: Строка, Пароль?: Строка, Комментарий?: Строка, МетодСжатия?: МетодСжатияZIP, УровеньСжатия?: УровеньСжатияZIP, МетодШифрования?: МетодШифрованияZIP, КодировкаИменФайлов?: КодировкаИменФайловВZipФайле)',
                            Параметры: {
                                ИмяФайла: 'Имя файла, куда будет записан архив.',
                                Пароль: 'Пароль, который будет назначен архиву.  Если пароль не назначен или является пустой строкой, то шифрование не происходит.',
                                Комментарий: 'Комментарий, описывающий ZIP файл.',
                                МетодСжатия: 'Метод сжатия, которым будет сжиматься архив. Значение по умолчанию: Сжатие.',
                                УровеньСжатия: 'Уровень сжатия данных. Значение по умолчанию: Оптимальный.',
                                МетодШифрования: 'Метод шифрования, которым будет зашифрован архив. Значение по умолчанию: Zip20.',
                                КодировкаИменФайлов: 'Определяет способ кодировки имен файлов внутри ZIP-файла. Значение по умолчанию: Авто.'
                            }
                        }
                    }
                },
            },
            constructors: {
                "На основании имени файла": {
                    description: 'Создает ZIP файл для записи. Аналогичен методу Открыть.',
                    signature: '(ИмяФайла: Строка, Пароль?: Строка, Комментарий?: Строка, МетодСжатия?: МетодСжатияZIP, УровеньСжатия?: УровеньСжатияZIP, МетодШифрования?: МетодШифрованияZIP, Кодировка?: КодировкаИменФайловВZipФайле)',
                    params: {
                        "ИмяФайла": 'Имя файла, куда будет записан архив.',
                        "Пароль": 'Пароль, который будет назначен архиву.  Если пароль не назначен или является пустой строкой, то шифрование не происходит.',
                        "Комментарий": 'Комментарий, описывающий ZIP файл.',
                        "МетодСжатия": 'Метод сжатия, которым будет сжиматься архив. Значение по умолчанию: Сжатие.',
                        "УровеньСжатия": 'Уровень сжатия данных. Значение по умолчанию: Оптимальный.',
                        "МетодШифрования": 'Метод шифрования, которым будет зашифрован архив. Значение по умолчанию: Zip20.',
                        "Кодировка": 'Определяет способ кодировки имен файлов внутри ZIP-файла. Значение по умолчанию: Авто; КодировкаИменФайловВZipФайле.'
                    }
                },
                "Формирование неинициализированного объекта": {
                    description: 'Создает неинициализированный объект ЗаписьZipФайла.',
                    signature: '()'
                },
            }
        },
        "ЗаписьТекста": {
            name: 'ЗаписьТекста',
            name_en: 'TextWriter',
            description: 'Предназначен для последовательной записи в текстовые файлы.',
            methods: {
                "Закрыть": {
                    name: 'Закрыть',
                    name_en: 'Close',
                    description: 'Закрывает открытый текстовый файл. Закрытие файла выполняется автоматически при удалении объекта ЗаписьТекста.'
                },
                "Записать": {
                    name: 'Записать',
                    name_en: 'Write',
                    description: 'Записывает строку текста в файл. Разделитель за записываемой строкой не ставится.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Строка: Строка)',
                            Параметры: {
                                Строка: 'Записываемая строка.'
                            }
                        }
                    }
                },
                "ЗаписатьСтроку": {
                    name: 'ЗаписатьСтроку',
                    name_en: 'WriteLine',
                    description: 'Записывает строку текста в файл. В конце строки записывается разделитель.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Строка: Строка, Разделитель?: Строка)',
                            Параметры: {
                                Строка: 'Записываемая строка. После записи строки в файл помещается разделитель строк.',
                                Разделитель: 'Разделитель строк. Если не указан, то совпадает с указанным при открытии файла. Значение по умолчанию: ПС.'
                            }
                        }
                    }
                },
                "Открыть": {
                    name: 'Открыть',
                    name_en: 'Open',
                    description: 'Открывает (монопольно) текстовый файл для записи.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ИмяФайла: Строка, Кодировка?: КодировкаТекста, РазделительСтрок?: Строка, Дописывать?: Булево, КонвертируемыйРазделительСтрок?: Строка)',
                            Параметры: {
                                ИмяФайла: 'Имя записываемого файла.',
                                Кодировка: 'Кодировка текста.  Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки. Поддерживаемые названия кодировок:   - UTF-8  - UTF-16  - UTF-16BE  - UTF-16LE  - UTF-32  - UTF-32BE  - UTF-32LE  - UTF16_PlatformEndian  - UTF16_OppositeEndian  - UTF32_PlatformEndian  - UTF32_OppositeEndian  - UTF-7  - IMAP-mailbox-name  - SCSU  - BOCU-1  - CESU-8  - ISO-8859-1  - US-ASCII  - gb18030  - IBM367  - iso-8859-2  - iso-8859-3  - iso-8859-4  - iso-8859-5  - iso-8859-6  - iso-8859-7  - iso-8859-8  - iso-8859-9  - iso-8859-13  - iso-8859-15  - cp932  - Shift_JIS  - EUC-JP  - cp33722  - windows-950  - Big5  - cp950  - Big5-HKSCS  - cp1386  - GBK  - GB2312  - GB_2312-80  - cp964  - cp949  - cp949c  - EUC-KR  - ibm-971  - KSC_5601  - ibm-1363  - windows-949  - windows-874  - cp874  - ibm-1162  - cp437  - cp737  - cp775  - cp850  - cp851  - cp852  - cp855  - cp856  - cp857  - cp858  - cp860  - cp861  - cp862  - cp863  - cp864  - cp865  - cp866  - ibm-867  - CP868  - cp869  - KOI8-R  - ibm-901  - ibm-902  - cp922  - KOI8-U  - ibm-4909  - windows-1250  - windows-1251  - windows-1252  - windows-1253  - windows-1254  - windows-1255  - windows-1256  - windows-1257  - windows-1258  - macintosh  - x-mac-greek  - x-mac-cyrillic  - x-mac-centraleurroman  - x-mac-turkish  - hp-roman8  - Adobe-Standard-Encoding  - cp1006  - cp1098  - cp1124  - cp1125  - ibm-1129  - cp1131  - ibm-1133  - ISO-2022-JP  - JIS_Encoding  - ISO-2022-JP-2  - ISO_2022,locale=ja,version=3  - ISO_2022,locale=ja,version=4  - ISO-2022-KR  - ISO_2022,locale=ko,version=1  - ISO-2022-CN  - ISO-2022-CN-EXT  - HZ-GB-2312  - windows-57002  - windows-57003  - windows-57011  - windows-57010  - windows-57007  - windows-57004  - windows-57005  - windows-57008  - windows-57009  - LMBCS-1  - LMBCS-2  - LMBCS-3  - LMBCS-4  - LMBCS-5  - LMBCS-6  - LMBCS-8  - LMBCS-11  - LMBCS-16  - LMBCS-17  - LMBCS-18  - LMBCS-19  - IBM037  - ebcdic-de  - ebcdic-dk  - IBM278  - IBM280  - IBM284  - IBM285  - IBM290  - IBM297  - IBM420  - IBM424  - IBM500  - ibm-803  - IBM-Thai  - IBM870  - IBM871  - cp875  - IBM918  - cp930  - cp933  - cp935  - cp937  - cp939  - cp1025  - IBM1026  - IBM1047  - cp1097  - cp1112  - cp1122  - cp1123  - ibm-1130  - ibm-1132  - ibm-1137  - IBM01140  - IBM01141  - IBM01142  - IBM01143  - IBM01144  - IBM01145  - IBM01146  - IBM01147  - IBM01148  - IBM01149  - ibm-1153  - ibm-1154  - ibm-1155  - ibm-1156  - ibm-1157  - ibm-1158  - ibm-1160  - ibm-1164  - ibm-1364  - ibm-1371  - ibm-1388  - ibm-1390  - ibm-1399  - ibm-5123  - ibm-8482  - ibm-16684  - ibm-4899  - ibm-4971  - ebcdic-he  - ebcdic-ar  - ibm-37_P100-1995,swaplfnl  - ibm-1047_P100-1995,swaplfnl  - ibm-1140_P100-1997,swaplfnl  - ibm-1142_P100-1997,swaplfnl  - ibm-1143_P100-1997,swaplfnl  - ibm-1144_P100-1997,swaplfnl  - ibm-1145_P100-1997,swaplfnl  - ibm-1146_P100-1997,swaplfnl  - ibm-1147_P100-1997,swaplfnl  - ibm-1148_P100-1997,swaplfnl  - ibm-1149_P100-1997,swaplfnl  - ibm-1153_P100-1999,swaplfnl  - ibm-12712_P100-1998,swaplfnl  - ibm-16804_X110-1999,swaplfnl  - ebcdic-xml-us  Значение по умолчанию: UTF8.',
                                РазделительСтрок: 'Разделяет строки в записываемом файле. Значение по умолчанию: ПС.',
                                Дописывать: 'Если параметр принимает значение Истина, то содержимое файла сохраняется, если файл уже существует. Если файла не существует, создается новый с именем, указанным в первом параметре метода. Значение по умолчанию: Ложь.',
                                КонвертируемыйРазделительСтрок: 'Указывает разделитель строк в файле при конвертации в стандартный перевод строк ПС. Значение по умолчанию: ВК + ПС.'
                            }
                        }
                    }
                },
            },
            constructors: {
                "По имени файла": {
                    description: 'Открывает текстовый файл для записи. Аналогичен методу Открыть.',
                    signature: '(ИмяФайла: Строка, Кодировка?: КодировкаТекста, РазделительСтрок?: Строка, Дописывать?: Булево, РазделительСтрокВФайле?: Строка)',
                    params: {
                        "ИмяФайла": 'Имя текстового файла для записи.',
                        "Кодировка": 'Кодировка записываемого текста (согласована с текстовым документом).  Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки. Поддерживаемые кодировки:   - UTF-8  - UTF-16  - UTF-16BE  - UTF-16LE  - UTF-32  - UTF-32BE  - UTF-32LE  - UTF16_PlatformEndian  - UTF16_OppositeEndian  - UTF32_PlatformEndian  - UTF32_OppositeEndian  - UTF-7  - IMAP-mailbox-name  - SCSU  - BOCU-1  - CESU-8  - ISO-8859-1  - US-ASCII  - gb18030  - IBM367  - iso-8859-2  - iso-8859-3  - iso-8859-4  - iso-8859-5  - iso-8859-6  - iso-8859-7  - iso-8859-8  - iso-8859-9  - iso-8859-13  - iso-8859-15  - cp932  - Shift_JIS  - EUC-JP  - cp33722  - windows-950  - Big5  - cp950  - Big5-HKSCS  - cp1386  - GBK  - GB2312  - GB_2312-80  - cp964  - cp949  - cp949c  - EUC-KR  - ibm-971  - KSC_5601  - ibm-1363  - windows-949  - windows-874  - cp874  - ibm-1162  - cp437  - cp737  - cp775  - cp850  - cp851  - cp852  - cp855  - cp856  - cp857  - cp858  - cp860  - cp861  - cp862  - cp863  - cp864  - cp865  - cp866  - ibm-867  - CP868  - cp869  - KOI8-R  - ibm-901  - ibm-902  - cp922  - KOI8-U  - ibm-4909  - windows-1250  - windows-1251  - windows-1252  - windows-1253  - windows-1254  - windows-1255  - windows-1256  - windows-1257  - windows-1258  - macintosh  - x-mac-greek  - x-mac-cyrillic  - x-mac-centraleurroman  - x-mac-turkish  - hp-roman8  - Adobe-Standard-Encoding  - cp1006  - cp1098  - cp1124  - cp1125  - ibm-1129  - cp1131  - ibm-1133  - ISO-2022-JP  - JIS_Encoding  - ISO-2022-JP-2  - ISO_2022,locale=ja,version=3  - ISO_2022,locale=ja,version=4  - ISO-2022-KR  - ISO_2022,locale=ko,version=1  - ISO-2022-CN  - ISO-2022-CN-EXT  - HZ-GB-2312  - windows-57002  - windows-57003  - windows-57011  - windows-57010  - windows-57007  - windows-57004  - windows-57005  - windows-57008  - windows-57009  - LMBCS-1  - LMBCS-2  - LMBCS-3  - LMBCS-4  - LMBCS-5  - LMBCS-6  - LMBCS-8  - LMBCS-11  - LMBCS-16  - LMBCS-17  - LMBCS-18  - LMBCS-19  - IBM037  - ebcdic-de  - ebcdic-dk  - IBM278  - IBM280  - IBM284  - IBM285  - IBM290  - IBM297  - IBM420  - IBM424  - IBM500  - ibm-803  - IBM-Thai  - IBM870  - IBM871  - cp875  - IBM918  - cp930  - cp933  - cp935  - cp937  - cp939  - cp1025  - IBM1026  - IBM1047  - cp1097  - cp1112  - cp1122  - cp1123  - ibm-1130  - ibm-1132  - ibm-1137  - IBM01140  - IBM01141  - IBM01142  - IBM01143  - IBM01144  - IBM01145  - IBM01146  - IBM01147  - IBM01148  - IBM01149  - ibm-1153  - ibm-1154  - ibm-1155  - ibm-1156  - ibm-1157  - ibm-1158  - ibm-1160  - ibm-1164  - ibm-1364  - ibm-1371  - ibm-1388  - ibm-1390  - ibm-1399  - ibm-5123  - ibm-8482  - ibm-16684  - ibm-4899  - ibm-4971  - ebcdic-he  - ebcdic-ar  - ibm-37_P100-1995,swaplfnl  - ibm-1047_P100-1995,swaplfnl  - ibm-1140_P100-1997,swaplfnl  - ibm-1142_P100-1997,swaplfnl  - ibm-1143_P100-1997,swaplfnl  - ibm-1144_P100-1997,swaplfnl  - ibm-1145_P100-1997,swaplfnl  - ibm-1146_P100-1997,swaplfnl  - ibm-1147_P100-1997,swaplfnl  - ibm-1148_P100-1997,swaplfnl  - ibm-1149_P100-1997,swaplfnl  - ibm-1153_P100-1999,swaplfnl  - ibm-12712_P100-1998,swaplfnl  - ibm-16804_X110-1999,swaplfnl  - ebcdic-xml-us  Значение по умолчанию: UTF8.',
                        "РазделительСтрок": 'Символ разделителя строк в записываемом файле. Значение по умолчанию: ПС.',
                        "Дописывать": 'Если параметр принимает значение Истина, то содержимое файла сохраняется, если файл уже существует. Если файла не существует, создается новый с именем, указанным в первом параметре конструктора. Значение по умолчанию: Ложь.',
                        "РазделительСтрокВФайле": 'Определяет разделение строк в файле для конвертации в стандартный перевод строк ПС. Значение по умолчанию: ВК + ПС.'
                    }
                },
                "Формирование неинициализированного объекта": {
                    description: 'Формирует неинициализированный объект ЗаписьТекста. Для инициализации объекта используется метод Открыть.',
                    signature: '()'
                },
            }
        },
        "ИндексКоллекции": {
            name: 'ИндексКоллекции',
            name_en: 'CollectionIndex',
            description: 'Индекс коллекции.',
        },
        "ИндексыКоллекции": {
            name: 'ИндексыКоллекции',
            name_en: 'CollectionIndexes',
            description: 'Список индексов коллекции.',
            methods: {
                "Добавить": {
                    name: 'Добавить',
                    name_en: 'Add',
                    description: 'Добавляет индекс в список индексов коллекции.',
                    returns: 'Тип: ИндексКоллекции. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Колонки: Строка): ИндексКоллекции',
                            Параметры: {
                                Колонки: 'Строковое описание колонок индекса в виде: "Колонка1, Колонка2...".'
                            }
                        }
                    }
                },
                "Количество": {
                    name: 'Количество',
                    name_en: 'Count',
                    description: 'Получает количество индексов в коллекции.',
                    returns: 'Тип: Число. '
                },
                "Очистить": {
                    name: 'Очистить',
                    name_en: 'Clear',
                    description: 'Удаляет все индексы коллекции.'
                },
                "Удалить": {
                    name: 'Удалить',
                    name_en: 'Delete',
                    description: 'Удаляет индекс из коллекции.',
                    signature: {
                        ПоОбъекту: {
                            СтрокаПараметров: '(Индекс: ИндексКоллекции)',
                            Параметры: {
                                Индекс: 'Удаляемый индекс (объект) коллекции.'
                            }
                        },
                        ПоИндексу: {
                            СтрокаПараметров: '(Индекс: Число)',
                            Параметры: {
                                Индекс: 'Порядковый индекс объекта в коллекции.'
                            }
                        }
                    }
                },
            },
        },
        "ИнтернетПрокси": {
            name: 'ИнтернетПрокси',
            name_en: 'InternetProxy',
            description: 'Описывает параметры прокси-серверов для различных протоколов. Допустимые протоколы для использования в объекте ИнтернетПрокси задаются строками http, https, ftp и ftps. Позволяет использовать аутентификацию по имени пользователя и паролю или NTLM (Integrated Security) аутентификацию (в версии 1С:Предприятия под Windows).  NTLM аутентификация используется по умолчанию для прокси-серверов, поддерживающих данный способ аутентификации, и не требует дополнительных настроек, т.е. NTLM аутентификация будет использоваться, если в конструкторе объекта HTTPСоединение прокси не задан или задан, но без указания имени пользователя и пароля. Задание в конструкторе объекта HTTPСоединение прокси с указанным именем пользователя и паролем отключает NTLM аутентификацию, для аутентификации в этом случае используется HTTP Basic аутентификация.',
            methods: {
                "ИспользоватьАутентификациюОС": {
                    name: 'ИспользоватьАутентификациюОС',
                    name_en: 'UseOSAuthentication',
                    description: 'Возвращает признак использования аутентификации средствами операционной системы прокси для указанного протокола.',
                    returns: 'Тип: Булево. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Протокол?: Строка): Булево',
                            Параметры: {
                                Протокол: 'Имя протокола, для которого запрашивается признак использования аутентификации средствами операционной системы прокси-сервера. Если в параметре указана пустая строка, возвращается порт сервера, установленного по умолчанию.'
                            }
                        }
                    }
                },
                "Пароль": {
                    name: 'Пароль',
                    name_en: 'Password',
                    description: 'Возвращает пароль, установленный для авторизации на прокси-сервере для данного протокола.',
                    returns: 'Тип: Строка. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Протокол: Строка): Строка',
                            Параметры: {
                                Протокол: 'Имя протокола, для которого запрашивается установленный пароль. При указании пустой строки возвращается пароль, установленный по умолчанию. Значение по умолчанию: Пустая строка.'
                            }
                        }
                    }
                },
                "Пользователь": {
                    name: 'Пользователь',
                    name_en: 'User',
                    description: 'Возвращает имя пользователя, установленное для авторизации на прокси-сервере для данного протокола.',
                    returns: 'Тип: Строка. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Протокол: Строка): Строка',
                            Параметры: {
                                Протокол: 'Имя протокола, для которого запрашивается установленное имя пользователя. При указании пустой строки возвращается имя пользователя, установленное по умолчанию. Значение по умолчанию: Пустая строка.'
                            }
                        }
                    }
                },
                "Порт": {
                    name: 'Порт',
                    name_en: 'Port',
                    description: 'Получает порт прокси-сервера по имени протокола.',
                    returns: 'Тип: Число. При указании пустой строки возвращается порт прокси-сервера, установленного по умолчанию.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Протокол?: Строка): Число',
                            Параметры: {
                                Протокол: 'Имя протокола, для которого запрашивается порт прокси-сервера. Значение по умолчанию: Пустая строка.'
                            }
                        }
                    }
                },
                "Сервер": {
                    name: 'Сервер',
                    name_en: 'Server',
                    description: 'Получает прокси-сервер по имени протокола.',
                    returns: 'Тип: Строка. При указании пустой строки возвращается прокси-сервер, установленный по умолчанию.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Протокол?: Строка): Строка',
                            Параметры: {
                                Протокол: 'Имя протокола, для которого запрашивается установленный прокси-сервер. Значение по умолчанию: Пустая строка.'
                            }
                        }
                    }
                },
                "Установить": {
                    name: 'Установить',
                    name_en: 'Set',
                    description: 'Устанавливает параметры прокси-серверов для различных протоколов.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Протокол: Строка, Сервер: Строка, Порт?: Число, Пользователь?: Строка, Пароль?: Строка, ИспользоватьАутентификациюОС?: Булево)',
                            Параметры: {
                                Протокол: 'Протокол, для которого устанавливаются параметры прокси-сервера.',
                                Сервер: 'Имя сервера.',
                                Порт: 'Порт прокси-сервера. Если в качестве протокола указано Неопределено, то все обращения к прокси-серверу для каждого протокола будут идти через порт по умолчанию для этого протокола. Значение по умолчанию: Порт по умолчанию для указанного протокола.',
                                Пользователь: 'Имя пользователя для авторизации на прокси-сервере.',
                                Пароль: 'Пароль для авторизации на прокси-сервере.',
                                ИспользоватьАутентификациюОС: 'Включает использование NTLM-аутентификации на прокси. Значение по умолчанию: Истина.'
                            }
                        }
                    }
                },
            },
            properties: {
                "НеИспользоватьПроксиДляАдресов": {
                    name: 'НеИспользоватьПроксиДляАдресов',
                    name_en: 'BypassProxyOnAddresses',
                    description: 'Список адресов, соединение с которыми осуществляется без использования прокси.'
                },
                "НеИспользоватьПроксиДляЛокальныхАдресов": {
                    name: 'НеИспользоватьПроксиДляЛокальныхАдресов',
                    name_en: 'BypassProxyOnLocal',
                    description: 'Если установлено в Истина, то при запросе ресурсов с локальных адресов прокси не используется.'
                },
                "Пароль": {
                    name: 'Пароль',
                    name_en: 'Password',
                    description: 'Пароль пользователя для авторизации на прокси-сервере. Внимание! Данное свойство признано устаревшим. Вместо него рекомендуется использовать метод Пароль.'
                },
                "Пользователь": {
                    name: 'Пользователь',
                    name_en: 'User',
                    description: 'Имя пользователя для авторизации на прокси-сервере. Внимание! Данное свойство признано устаревшим. Вместо него рекомендуется использовать метод Пользователь.'
                },
            },
            constructors: {
                "Формирование неинициализированного объекта": {
                    description: 'Создает объект ИнтернетПрокси. Его инициализация зависит от значения параметра ПроксиПоУмолчанию.',
                    signature: '(ПроксиПоУмолчанию?: Булево)',
                    params: {
                        "ПроксиПоУмолчанию": 'Определяет, будет ли объект инициализирован настройками прокси по умолчанию. Если значения параметра равно Истина, то производится попытка инициализировать объект значениями из файла inetcfg.xml. Если файл не существует, то значения берутся из системных настроек.  При работе в ОС Windows используются системные настройки, задаваемые через Internet Explorer. При работе в ОС Linux настройки берутся из следующих переменных среды:   - http_proxy  - https_proxy  - ftp_proxy  - ftps_proxy Если значения какой-либо из эти переменных не заданы, то производится попытка взять настройки прокси для соответствующего протокола из переменной среды all_proxy.  Если переменные среды содержат некорректные строки, то их значение игнорируется (исключения не происходит).  В режиме совместимости Версия8_3_5 и ниже значения переменных среды не используются. Значение по умолчанию: Истина.'
                    }
                },
            }
        },
        "ИнформацияОбОшибке": {
            name: 'ИнформацияОбОшибке',
            name_en: 'ErrorInfo',
            description: 'Предназначен для представления структурированной информации об ошибке (исключении).',
            properties: {
                "ИмяМодуля": {
                    name: 'ИмяМодуля',
                    name_en: 'ModuleName',
                    description: 'Имя модуля, в котором было вызвано исключение.'
                },
                "ИсходнаяСтрока": {
                    name: 'ИсходнаяСтрока',
                    name_en: 'SourceLine',
                    description: 'Текст строки исходного текста модуля, в которой произошло исключение.'
                },
                "НомерСтроки": {
                    name: 'НомерСтроки',
                    name_en: 'LineNumber',
                    description: 'Номер строки исходного текста модуля, в которой произошло исключение.'
                },
                "Описание": {
                    name: 'Описание',
                    name_en: 'Description',
                    description: 'Содержательное описание ошибки (исключения). Данное свойство может содержать:   - Краткое сообщение об ошибке,  - Код ошибки (если есть),  - Подробную техническую информацию об ошибке (если есть).'
                },
                "Причина": {
                    name: 'Причина',
                    name_en: 'Cause',
                    description: 'Содержит информацию о причине для данной ошибки. Если таковой не было, то Неопределено.'
                },
            },
        },
        "КлючИЗначение": {
            name: 'КлючИЗначение',
            name_en: 'KeyAndValue',
            description: 'Элемент коллекции Соответствие и Структура. Представляет собой пару из ключа и соответствующего ключу значения.',
            properties: {
                "Значение": {
                    name: 'Значение',
                    name_en: 'Value',
                    description: 'Содержит значение элемента соответствия.'
                },
                "Ключ": {
                    name: 'Ключ',
                    name_en: 'Key',
                    description: 'Содержит ключ элемента соответствия. Рекомендуется, чтобы в качестве ключа выступало значение примитивного типа или другого типа, значение которого может только присваиваться, но не может менять свое содержимое.'
                },
            },
        },
        "КоллекцияКолонокДереваЗначений": {
            name: 'КоллекцияКолонокДереваЗначений',
            name_en: 'ValueTreeColumnCollection',
            description: 'Представляет собой коллекцию колонок дерева значений.',
            methods: {
                "Вставить": {
                    name: 'Вставить',
                    name_en: 'Insert',
                    description: 'Вставляет колонку в заданную позицию коллекции колонок дерева значений.',
                    returns: 'Тип: КолонкаДереваЗначений. Вставленная колонка.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число, Имя?: Строка, Тип?: ОписаниеТипов, Заголовок?: Строка, Ширина?: Число): КолонкаДереваЗначений',
                            Параметры: {
                                Индекс: 'Индекс в коллекции колонок, с которым необходимо вставить колонку.',
                                Имя: 'Имя колонки. Значение по умолчанию: Пустая строка.',
                                Тип: 'Объект, описывающий допустимые типы значений для колонки. Если параметр не указан, в колонке можно будет хранить значение любого типа.',
                                Заголовок: 'Заголовок колонки. Используется при визуальном отображении дерева значений. Значение по умолчанию: Пустая строка.',
                                Ширина: 'Ширина колонки в символах. Используется при визуальном отображении дерева значений. Значение по умолчанию: 0.'
                            }
                        }
                    }
                },
                "Добавить": {
                    name: 'Добавить',
                    name_en: 'Add',
                    description: 'Добавляет колонку в конец коллекции колонок дерева значений.',
                    returns: 'Тип: КолонкаДереваЗначений. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Имя?: Строка, Тип?: ОписаниеТипов, Заголовок?: Строка, Ширина?: Число): КолонкаДереваЗначений',
                            Параметры: {
                                Имя: 'Имя колонки. Значение по умолчанию: Пустая строка.',
                                Тип: 'Объект, описывающий допустимые типы значений для колонки. Если параметр не указан, в колонке можно будет хранить значение любого типа.',
                                Заголовок: 'Заголовок колонки. Используется при визуальном отображении дерева значений. Значение по умолчанию: Пустая строка.',
                                Ширина: 'Ширина колонки в символах. Используется при визуальном отображении дерева значений. Значение по умолчанию: 0.'
                            }
                        }
                    }
                },
                "Индекс": {
                    name: 'Индекс',
                    name_en: 'IndexOf',
                    description: 'Получает индекс указанной колонки в коллекции колонок.',
                    returns: 'Тип: Число. Индекс указанной колонки в коллекции. Если не найдено, то возвращается -1.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Колонка: КолонкаДереваЗначений): Число',
                            Параметры: {
                                Колонка: 'Колонка, для которой необходимо получить индекс.'
                            }
                        }
                    }
                },
                "Количество": {
                    name: 'Количество',
                    name_en: 'Count',
                    description: 'Получает количество колонок дерева значений.',
                    returns: 'Тип: Число. '
                },
                "Найти": {
                    name: 'Найти',
                    name_en: 'Find',
                    description: 'Осуществляет поиск колонки дерева значений по имени.',
                    returns: 'Тип: КолонкаДереваЗначений, Неопределено. Если указанная колонка отсутствует, то возвращается значение Неопределено.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(НаименованиеКолонки: Строка): КолонкаДереваЗначений|Неопределено',
                            Параметры: {
                                НаименованиеКолонки: 'Наименование колонки дерева значений.'
                            }
                        }
                    }
                },
                "Очистить": {
                    name: 'Очистить',
                    name_en: 'Clear',
                    description: 'Удаляет все колонки дерева значений. При этом также удаляются все его строки.'
                },
                "Получить": {
                    name: 'Получить',
                    name_en: 'Get',
                    description: 'Получает значение по индексу. Работает аналогично оператору [].',
                    returns: 'Тип: КолонкаДереваЗначений. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число): КолонкаДереваЗначений',
                            Параметры: {
                                Индекс: 'Индекс колонки.'
                            }
                        }
                    }
                },
                "Сдвинуть": {
                    name: 'Сдвинуть',
                    name_en: 'Move',
                    description: 'Сдвигает колонку с заданным индексом на указанное смещение.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Колонка: Число, Смещение: Число)',
                            Параметры: {
                                Колонка: 'Индекс сдвигаемой колонки в коллекции или сама колонка.',
                                Смещение: 'Количество колонок, на которое необходимо сдвинуть колонку. Положительное смещение обозначает сдвиг в конец, отрицательное - в начало коллекции.'
                            }
                        }
                    }
                },
                "Удалить": {
                    name: 'Удалить',
                    name_en: 'Delete',
                    description: 'Удаляет колонку в заданной позиции коллекции колонок дерева значений.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число)',
                            Параметры: {
                                Индекс: 'Индекс удаляемой колонки в коллекции или колонка.'
                            }
                        }
                    }
                },
            },
        },
        "КоллекцияКолонокТаблицыЗначений": {
            name: 'КоллекцияКолонокТаблицыЗначений',
            name_en: 'ValueTableColumnCollection',
            description: 'Представляет собой коллекцию колонок таблицы значений. Доступ к объекту осуществляется через свойство Колонки таблицы значений.',
            methods: {
                "Вставить": {
                    name: 'Вставить',
                    name_en: 'Insert',
                    description: 'Вставляет колонку на указанную позицию в таблицу значений.',
                    returns: 'Тип: КолонкаТаблицыЗначений. Вставленная колонка.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число, Имя?: Строка, Тип?: ОписаниеТипов, Заголовок?: Строка, Ширина?: Число): КолонкаТаблицыЗначений',
                            Параметры: {
                                Индекс: 'Индекс вставляемой колонки.',
                                Имя: 'Имя колонки. Значение по умолчанию: Пустая строка.',
                                Тип: 'Объект, описывающий допустимые типы значений для колонки. Если параметр не указан, в колонке можно будет хранить значение любого типа.',
                                Заголовок: 'Заголовок колонки таблицы значений. Используется при визуальном отображении таблицы значений. Значение по умолчанию: Пустая строка.',
                                Ширина: 'Ширина колонки в символах. Используется при визуальном отображении таблицы значений. Значение по умолчанию: 0.'
                            }
                        }
                    }
                },
                "Добавить": {
                    name: 'Добавить',
                    name_en: 'Add',
                    description: 'Добавляет колонку в конец коллекции колонок таблицы.',
                    returns: 'Тип: КолонкаТаблицыЗначений. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Имя?: Строка, Тип?: ОписаниеТипов, Заголовок?: Строка, Ширина?: Число): КолонкаТаблицыЗначений',
                            Параметры: {
                                Имя: 'Имя колонки. Значение по умолчанию: Пустая строка.',
                                Тип: 'Объект, описывающий допустимые типы значений для колонки. Если параметр не указан, в колонке можно будет хранить значение любого типа.',
                                Заголовок: 'Заголовок колонки таблицы значений. Используется при визуальном отображении таблицы значений. Значение по умолчанию: Пустая строка.',
                                Ширина: 'Ширина колонки в символах. Используется при визуальном отображении таблицы значений. Значение по умолчанию: 0.'
                            }
                        }
                    }
                },
                "Индекс": {
                    name: 'Индекс',
                    name_en: 'IndexOf',
                    description: 'Получает индекс колонки в коллекции колонок таблицы значений.',
                    returns: 'Тип: Число. Индекс указанной колонки в коллекции. Если не найдено, то возвращается -1.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Колонка: КолонкаТаблицыЗначений): Число',
                            Параметры: {
                                Колонка: 'Колонка таблицы значений, для которой нужно определить индекс.'
                            }
                        }
                    }
                },
                "Количество": {
                    name: 'Количество',
                    name_en: 'Count',
                    description: 'Получает количество колонок таблицы значений.',
                    returns: 'Тип: Число. '
                },
                "Найти": {
                    name: 'Найти',
                    name_en: 'Find',
                    description: 'Осуществляет поиск колонки таблицы значений по имени.',
                    returns: 'Тип: КолонкаТаблицыЗначений, Неопределено. Если указанная колонка отсутствует, то возвращается значение Неопределено.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(НаименованиеКолонки: Строка): КолонкаТаблицыЗначений|Неопределено',
                            Параметры: {
                                НаименованиеКолонки: 'Наименование колонки таблицы значений.'
                            }
                        }
                    }
                },
                "Очистить": {
                    name: 'Очистить',
                    name_en: 'Clear',
                    description: 'Удаляет все колонки таблицы значений.'
                },
                "Получить": {
                    name: 'Получить',
                    name_en: 'Get',
                    description: 'Получает значение по индексу. Работает аналогично оператору [].',
                    returns: 'Тип: КолонкаТаблицыЗначений. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число): КолонкаТаблицыЗначений',
                            Параметры: {
                                Индекс: 'Индекс колонки.'
                            }
                        }
                    }
                },
                "Сдвинуть": {
                    name: 'Сдвинуть',
                    name_en: 'Move',
                    description: 'Сдвигает колонку на указанное количество позиций.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Колонка: Число, Смещение: Число)',
                            Параметры: {
                                Колонка: 'Индекс сдвигаемой колонки или сама колонка.',
                                Смещение: 'Количество колонок, на которое необходимо переместить колонку. Положительное значение означает, что колонка будет передвинута ближе к концу таблицы значений (вправо), отрицательное - ближе к началу (влево).'
                            }
                        }
                    }
                },
                "Удалить": {
                    name: 'Удалить',
                    name_en: 'Delete',
                    description: 'Удаляет заданную колонку из коллекции колонок таблицы значений.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число)',
                            Параметры: {
                                Индекс: 'Удаляемая колонка (индекс, колонка или имя колонки).'
                            }
                        }
                    }
                },
            },
        },
        "КоллекцияСтрокДереваЗначений": {
            name: 'КоллекцияСтрокДереваЗначений',
            name_en: 'ValueTreeRowCollection',
            description: 'Представляет собой коллекцию строк, подчиненных какой-либо строке дерева значений.',
            methods: {
                "Вставить": {
                    name: 'Вставить',
                    name_en: 'Insert',
                    description: 'Вставляет строку с указанным индексом в коллекцию строк данного уровня дерева значений.',
                    returns: 'Тип: СтрокаДереваЗначений. Вставленная строка.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число): СтрокаДереваЗначений',
                            Параметры: {
                                Индекс: 'Индекс позиции в коллекции строк данного уровня, в которую необходимо вставить строку.'
                            }
                        }
                    }
                },
                "ВыгрузитьКолонку": {
                    name: 'ВыгрузитьКолонку',
                    name_en: 'UnloadColumn',
                    description: 'Создает массив и копирует в него значения, содержащиеся в колонке коллекции строк дерева значений.',
                    returns: 'Тип: Массив. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Колонка: Число): Массив',
                            Параметры: {
                                Колонка: 'Колонка, из которой нужно выгрузить значения. В качестве значения параметра может быть передан индекс колонки, имя колонки, либо колонка дерева значений.'
                            }
                        }
                    }
                },
                "Добавить": {
                    name: 'Добавить',
                    name_en: 'Add',
                    description: 'Добавляет строку в конец коллекции строк данного уровня дерева значений.',
                    returns: 'Тип: СтрокаДереваЗначений. '
                },
                "ЗагрузитьКолонку": {
                    name: 'ЗагрузитьКолонку',
                    name_en: 'LoadColumn',
                    description: 'Загружает значения из массива в заданную колонку коллекции строк дерева значений.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Массив: Массив, Колонка: Число)',
                            Параметры: {
                                Массив: 'Массив значений для загрузки в колонку.',
                                Колонка: 'Колонка коллекции, в которую будут загружены значения из массива. В качестве значения параметра может быть передан индекс колонки, имя колонки, либо колонка дерева значений.'
                            }
                        }
                    }
                },
                "Индекс": {
                    name: 'Индекс',
                    name_en: 'IndexOf',
                    description: 'Получает индекс строки в коллекции строк дерева значений.',
                    returns: 'Тип: Число. Индекс указанной строки в коллекции. Если не найдено, то возвращается -1.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Строка: СтрокаДереваЗначений): Число',
                            Параметры: {
                                Строка: 'Строка, для которой необходимо получить индекс.'
                            }
                        }
                    }
                },
                "Итог": {
                    name: 'Итог',
                    name_en: 'Total',
                    description: 'Суммирует значения всех строк в указанной колонке. Если в колонке установлен тип и он единственный, то при суммировании будет предприниматься попытка преобразования значения к типу Число. Если колонке не присвоены типы, то в процессе суммирования будут принимать участие только значения, имеющие тип Число, значения других типов будут игнорироваться. Если в колонке несколько типов и среди них есть тип Число, то в процессе суммирования будут принимать участие только значения, имеющие тип Число, значения других типов будут игнорироваться. Если в колонке несколько типов и среди них нет типа Число, то результатом будет значение Неопределено.',
                    returns: 'Тип: Число, Неопределено. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Колонка: Число, ВключатьПодчиненные?: Булево): Число|Неопределено',
                            Параметры: {
                                Колонка: 'Колонка, по которой подсчитывается итог. В качестве значения параметра может быть передан индекс колонки, имя колонки, либо колонка дерева значений.',
                                ВключатьПодчиненные: 'Определяет, будут ли включены в сумму итоги по подчиненным строкам (если таковые имеются). Истина - итоги будут включены. Значение по умолчанию: Ложь.'
                            }
                        }
                    }
                },
                "Количество": {
                    name: 'Количество',
                    name_en: 'Count',
                    description: 'Получает количество строк данного уровня дерева значений.',
                    returns: 'Тип: Число. '
                },
                "Найти": {
                    name: 'Найти',
                    name_en: 'Find',
                    description: 'Осуществляет поиск значения в дереве в указанных колонках коллекции строк дерева значений.',
                    returns: 'Тип: СтрокаДереваЗначений, Неопределено. Строка, которая содержит искомое значение. Если значение не найдено, то возвращается значение Неопределено.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Значение: Произвольный, Колонки?: Строка, ВключатьПодчиненные?: Булево): СтрокаДереваЗначений|Неопределено',
                            Параметры: {
                                Значение: 'Искомое значение.',
                                Колонки: 'Список имен колонок, в которых будет осуществляться поиск, разделенных запятыми. Если параметр не указан, поиск осуществляется по всем колонкам дерева. Значение по умолчанию: Пустая строка.',
                                ВключатьПодчиненные: 'Определяет, будут ли участвовать в поиске строки подчиненных коллекций (если таковые имеются). Истина - строки подчиненных коллекций участвуют в поиске. Значение по умолчанию: Ложь.'
                            }
                        }
                    }
                },
                "НайтиСтроки": {
                    name: 'НайтиСтроки',
                    name_en: 'FindRows',
                    description: 'Осуществляет поиск строк из коллекции строк дерева значений, соответствующих заданному условию поиска.',
                    returns: 'Тип: Массив. Массив из строк дерева значений, соответствующих заданному условию поиска.Замечание! Массив хранит ссылки на строки дерева значений, то есть при изменении строки в дереве, значение в массиве тоже будет изменено.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ПараметрыОтбора: Структура, ВключатьПодчиненные?: Булево): Массив',
                            Параметры: {
                                ПараметрыОтбора: 'Задает условия поиска: ключ структуры определяет имя колонки, по которой будет осуществляться поиск, а значение структуры - искомое значение.',
                                ВключатьПодчиненные: 'Определяет, будут ли производиться поиск также в подчиненных коллекциях (если таковые имеются). Истина - поиск будет произведен. Значение по умолчанию: Ложь.'
                            }
                        }
                    }
                },
                "Очистить": {
                    name: 'Очистить',
                    name_en: 'Clear',
                    description: 'Удаляет все коллекции строки данного уровня дерева значений. Если у строк данного уровня были подчиненные строки, то они также будут удалены. Структура колонок остается неизменной.'
                },
                "Получить": {
                    name: 'Получить',
                    name_en: 'Get',
                    description: 'Получает значение по индексу. Работает аналогично оператору [].',
                    returns: 'Тип: СтрокаДереваЗначений. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число): СтрокаДереваЗначений',
                            Параметры: {
                                Индекс: 'Индекс строки.'
                            }
                        }
                    }
                },
                "Сдвинуть": {
                    name: 'Сдвинуть',
                    name_en: 'Move',
                    description: 'Сдвигает строку на указанное количество позиций в коллекции строк данного уровня дерева значений.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Строка: Число, Смещение: Число)',
                            Параметры: {
                                Строка: 'Индекс строки, которую надо сдвинуть, либо сама сдвигаемая строка.',
                                Смещение: 'Количество строк, на которые необходимо сдвинуть строку. Положительное смещение обозначает увеличение текущего индекса (сдвиг к концу коллекции), отрицательное - уменьшение текущего индекса (сдвиг к началу коллекции).'
                            }
                        }
                    }
                },
                "Сортировать": {
                    name: 'Сортировать',
                    name_en: 'Sort',
                    description: 'Сортирует строки коллекции в соответствии с указанными правилами сортировки.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(СтрокаСортировки: Строка, ВключатьПодчиненные?: Булево, ОбъектСравнения?: СравнениеЗначений)',
                            Параметры: {
                                СтрокаСортировки: 'Список имен колонок, разделенных запятыми, по которым производится сортировка таблицы. После каждого имени колонки через пробел может быть указано направление упорядочивания. Направление определяется: "Убыв" ("Desc") - упорядочивать по убыванию; "Возр" ("Asc") - упорядочивать по возрастанию. По умолчанию сортировка таблица производится по возрастанию. Порядок указания имен колонок таблицы определяет порядок сортировки. Это означает, что сначала таблица сортируется по колонке, указанной первой. Затем группы строк с одинаковым значением в этой колонке сортируются по колонке, которая указана второй, и так далее.',
                                ВключатьПодчиненные: 'Определяет, будут ли отсортированы коллекции подчиненных строк (если таковые имеются). Истина - коллекции будут отсортированы. Значение по умолчанию: Ложь.',
                                ОбъектСравнения: 'Объект для сравнения элементов. Если объект сравнения не задан, сравнение выполняется по следующим правилам:   - элементы, чьи типы не совпадают, сравниваются по коду типа;  - элементы простых типов сравниваются по значению;  - элементы остальных типов сравниваются по строковому представлению.'
                            }
                        }
                    }
                },
                "Удалить": {
                    name: 'Удалить',
                    name_en: 'Delete',
                    description: 'Удаляет строку из коллекции строк данного уровня дерева значений. Если у строки имеются подчиненные строки, они также будут удалены.',
                    signature: {
                        ПоОбъекту: {
                            СтрокаПараметров: '(Строка: СтрокаДереваЗначений)',
                            Параметры: {
                                Строка: 'Строка, которую необходимо удалить из данной коллекции строк ДеревоЗначений.'
                            }
                        },
                        ПоИндексу: {
                            СтрокаПараметров: '(Индекс: Число)',
                            Параметры: {
                                Индекс: 'Индекс удаляемой строки.'
                            }
                        }
                    }
                },
            },
            properties: {
                "Родитель": {
                    name: 'Родитель',
                    name_en: 'Parent',
                    description: 'Строка, которой принадлежит данная коллекция строк (родительская строка). Если данная коллекция строк является корневой коллекцией дерева, то имеет значение Неопределено.'
                },
            },
        },
        "КолонкаДереваЗначений": {
            name: 'КолонкаДереваЗначений',
            name_en: 'ValueTreeColumn',
            description: 'Описывает параметры колонки дерева значений.',
            properties: {
                "Заголовок": {
                    name: 'Заголовок',
                    name_en: 'Title',
                    description: 'Содержит текст заголовка колонки дерева значений. Может быть использован при визуальном представлении дерева.'
                },
                "Имя": {
                    name: 'Имя',
                    name_en: 'Name',
                    description: 'Содержит имя колонки.'
                },
                "ТипЗначения": {
                    name: 'ТипЗначения',
                    name_en: 'ValueType',
                    description: 'Содержит объект, описывающий допустимые типы значений для колонки дерева.'
                },
                "Ширина": {
                    name: 'Ширина',
                    name_en: 'Width',
                    description: 'Содержит ширину колонки дерева значений в символах. Может быть использован при визуальном представлении дерева.'
                },
            },
        },
        "КолонкаТаблицыЗначений": {
            name: 'КолонкаТаблицыЗначений',
            name_en: 'ValueTableColumn',
            description: 'Предоставляет собой отдельную колонку таблицы значений. Доступ к объекту осуществляется через свойства коллекции колонок таблицы значений.',
            properties: {
                "Заголовок": {
                    name: 'Заголовок',
                    name_en: 'Title',
                    description: 'Содержит заголовок колонки таблицы значений. Используется при визуальном отображении таблицы значений.'
                },
                "Имя": {
                    name: 'Имя',
                    name_en: 'Name',
                    description: 'Содержит строку с именем колонки.'
                },
                "ТипЗначения": {
                    name: 'ТипЗначения',
                    name_en: 'ValueType',
                    description: 'Содержит объект, описывающий допустимые типы значений для колонки.'
                },
                "Ширина": {
                    name: 'Ширина',
                    name_en: 'Width',
                    description: 'Содержит ширину колонки в символах. Используется при визуальном отображении таблицы значений.'
                },
            },
        },
        "Массив": {
            name: 'Массив',
            name_en: 'Array',
            description: 'Предназначен для доступа к элементам массива, его методам и конструктору.',
            methods: {
                "ВГраница": {
                    name: 'ВГраница',
                    name_en: 'UBound',
                    description: 'Получает наибольший индекс элемента массива.',
                    returns: 'Тип: Число. Наибольший индекс в массиве. Если количество элементов массива равно 0, возвращает -1.'
                },
                "Вставить": {
                    name: 'Вставить',
                    name_en: 'Insert',
                    description: 'Вставляет значение в массив по указанному индексу.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число, Значение?: Произвольный)',
                            Параметры: {
                                Индекс: 'Индекс вставляемого значения.',
                                Значение: 'Вставляемое значение. Если не указан, то будет добавлено значение типа Неопределено.'
                            }
                        }
                    }
                },
                "Добавить": {
                    name: 'Добавить',
                    name_en: 'Add',
                    description: 'Добавляет элемент в конец массива.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Значение?: Произвольный)',
                            Параметры: {
                                Значение: 'Добавляемое значение. Если не указан, то будет добавлено значение типа Неопределено.'
                            }
                        }
                    }
                },
                "Количество": {
                    name: 'Количество',
                    name_en: 'Count',
                    description: 'Получает количество элементов в массиве.',
                    returns: 'Тип: Число. '
                },
                "Найти": {
                    name: 'Найти',
                    name_en: 'Find',
                    description: 'Выполняет поиск элемента в массиве.',
                    returns: 'Тип: Число, Неопределено. Если элемент найден, возвращается его индекс. Если элемент не найден, возвращается Неопределено.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Значение: Произвольный): Число|Неопределено',
                            Параметры: {
                                Значение: 'Искомое значение.'
                            }
                        }
                    }
                },
                "Очистить": {
                    name: 'Очистить',
                    name_en: 'Clear',
                    description: 'Удаляет все значения из массива.'
                },
                "Получить": {
                    name: 'Получить',
                    name_en: 'Get',
                    description: 'Получает значение по индексу. Работает аналогично оператору [].',
                    returns: 'Тип: Произвольный. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число): Произвольный',
                            Параметры: {
                                Индекс: 'Индекс элемента.'
                            }
                        }
                    }
                },
                "Удалить": {
                    name: 'Удалить',
                    name_en: 'Delete',
                    description: 'Удаляет значение из массива по указанному индексу.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число)',
                            Параметры: {
                                Индекс: 'Индекс удаляемого элемента.'
                            }
                        }
                    }
                },
                "Установить": {
                    name: 'Установить',
                    name_en: 'Set',
                    description: 'Устанавливает значение по индексу. Работает аналогично оператору [].',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число, Значение: Произвольный)',
                            Параметры: {
                                Индекс: 'Индекс элемента.',
                                Значение: 'Устанавливаемое значение.'
                            }
                        }
                    }
                },
            },
            constructors: {
                "На основании фиксированного массива": {
                    description: 'Создаваемый массив заполняется значениями из исходного фиксированного массива. К элементам исходного массива применяется рекурсивное преобразование, т.е. элементы фиксированного массива, в свою очередь являющиеся фиксированными массивами, будут помещены в массив с преобразованием к типу Массив.',
                    signature: '(Массив?: ФиксированныйМассив)',
                    params: {
                        "Массив": 'Фиксированный массив.'
                    }
                },
                "По количеству элементов": {
                    description: 'Создает массив из указанного количества элементов. Если задано несколько параметров, то будет создан массив, элементами которого являются массивы (и т.д. в зависимости от количества параметров). Фактически конструктор позволяет создать массивы массивов, которые могут являться аналогом многомерного массива.',
                    signature: '(КоличествоЭлементов1?: Число)',
                    params: {
                        "КоличествоЭлементов1": 'Каждый параметр определяет количество элементов массива в соответствующем измерении. Может задаваться неограниченное количество параметров. Если ни один параметр не указан, то создается одномерный массив с нулевым количеством элементов.'
                    }
                },
            }
        },
        "СистемнаяИнформация": {
            name: 'СистемнаяИнформация',
            name_en: 'SystemInfo',
            description: 'Содержит описание технических характеристик компьютера.',
            properties: {
                "ВерсияОС": {
                    name: 'ВерсияОС',
                    name_en: 'OSVersion',
                    description: 'Версия операционной системы.'
                },
                "ВерсияПриложения": {
                    name: 'ВерсияПриложения',
                    name_en: 'AppVersion',
                    description: 'Содержит версию используемого 1С:Предприятия 8 в формате основная версия.младшая версия.релиз.дополнительный номер релиза. Например, 8.2.9.200.'
                },
                "ИдентификаторКлиента": {
                    name: 'ИдентификаторКлиента',
                    name_en: 'ClientID',
                    description: 'Содержит уникальный идентификатор клиента. Для данного компьютера и данного пользователя операционной системы идентификатор один, вне зависимости от информационной базы и пользователя информационной базы.'
                },
                "ИнформацияПрограммыПросмотра": {
                    name: 'ИнформацияПрограммыПросмотра',
                    name_en: 'UserAgentInformation',
                    description: 'Информация о веб-браузере (userAgent).'
                },
                "ОперативнаяПамять": {
                    name: 'ОперативнаяПамять',
                    name_en: 'RAM',
                    description: 'Размер оперативной памяти.'
                },
                "Процессор": {
                    name: 'Процессор',
                    name_en: 'Processor',
                    description: 'Идентификатор процессора.'
                },
                "ТипПлатформы": {
                    name: 'ТипПлатформы',
                    name_en: 'PlatformType',
                    description: 'Содержит тип платформы, в рамках которой осуществляется работа.'
                },
            },
            constructors: {
                "По умолчанию": {
                    signature: '()'
                },
            }
        },
        "Соответствие": {
            name: 'Соответствие',
            name_en: 'Map',
            description: 'Представляет доступ к соответствию. Не используется в данных формы.',
            methods: {
                "Вставить": {
                    name: 'Вставить',
                    name_en: 'Insert',
                    description: 'Устанавливает значение элемента соответствия по ключу. Если элемент с переданным значением ключа существует, то его значение заменяется, в противном случае добавляется новый элемент.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Ключ: Произвольный, Значение?: Произвольный)',
                            Параметры: {
                                Ключ: 'Ключ устанавливаемого элемента.',
                                Значение: 'Значение устанавливаемого элемента. Если не указан, будет установлено Неопределено.'
                            }
                        }
                    }
                },
                "Количество": {
                    name: 'Количество',
                    name_en: 'Count',
                    description: 'Получает количество элементов соответствия.',
                    returns: 'Тип: Число. '
                },
                "Очистить": {
                    name: 'Очистить',
                    name_en: 'Clear',
                    description: 'Удаляет все элементы соответствия.'
                },
                "Получить": {
                    name: 'Получить',
                    name_en: 'Get',
                    description: 'Получает значение по ключу. Работает аналогично оператору [].',
                    returns: 'Тип: Произвольный. Значение элемента соответствия.Неопределено - если указанный ключ отсутствует.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Ключ: Произвольный): Произвольный',
                            Параметры: {
                                Ключ: 'Ключ значения.'
                            }
                        }
                    }
                },
                "Удалить": {
                    name: 'Удалить',
                    name_en: 'Delete',
                    description: 'Удаляет элемент соответствия с заданным ключом.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Ключ: Произвольный)',
                            Параметры: {
                                Ключ: 'Ключ удаляемого элемента.'
                            }
                        }
                    }
                },
            },
            constructors: {
                "На основании фиксированного соответствия": {
                    description: 'Создаваемое соответствие заполняется элементами из исходного фиксированного соответствия.',
                    signature: '(ФиксированноеСоответствие?: ФиксированноеСоответствие)',
                    params: {
                        "ФиксированноеСоответствие": 'Фиксированное соответствие.'
                    }
                },
                "По умолчанию": {
                    description: 'Создает пустое соответствие (без элементов).',
                    signature: '()'
                },
            }
        },
        "СписокЗначений": {
            name: 'СписокЗначений',
            name_en: 'ValueList',
            description: 'Используется для доступа к методам списка значений в целом. Для режима запуска ОбычноеПриложение обмен с сервером невозможен!',
            methods: {
                "Вставить": {
                    name: 'Вставить',
                    name_en: 'Insert',
                    description: 'Вставляет новый элемент в список значений на позицию с указанным индексом.',
                    returns: 'Тип: ЭлементСпискаЗначений. Новый элемент списка значений.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число, Значение?: Произвольный, Представление?: Строка, Пометка?: Булево, Картинка?: Картинка): ЭлементСпискаЗначений',
                            Параметры: {
                                Индекс: 'Индекс позиции, на которую надо вставить элемент.',
                                Значение: 'Значение, которое необходимо вставить.',
                                Представление: 'Строковое выражение, содержащее представление добавляемого значения. Значение по умолчанию: Пустая строка.',
                                Пометка: 'Определяет, создавать новое значение с установленной пометкой или нет. Значение по умолчанию: Ложь.',
                                Картинка: 'Визуальное представление значения. Значение по умолчанию: Пустая картинка.'
                            }
                        }
                    }
                },
                "ВыбратьЭлемент": {
                    name: 'ВыбратьЭлемент',
                    name_en: 'ChooseItem',
                    description: 'Вызывает окно для интерактивного выбора одного из элементов, входящих в список значений.',
                    returns: 'Тип: ЭлементСпискаЗначений, Неопределено. Если пользователь отказался от выбора, возвращает Неопределено.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Заголовок?: Строка, Элемент?: ЭлементСпискаЗначений): ЭлементСпискаЗначений|Неопределено',
                            Параметры: {
                                Заголовок: 'Заголовок окна выбора. Если параметр не указан, то используется стандартный заголовок. Значение по умолчанию: Пустая строка.',
                                Элемент: 'Элемент, на который следует изначально спозиционировать список значений при интерактивном выборе. Если значением параметра не является элемент списка значений, входящий в данный список, позиционирования не произойдет.'
                            }
                        }
                    }
                },
                "ВыгрузитьЗначения": {
                    name: 'ВыгрузитьЗначения',
                    name_en: 'UnloadValues',
                    description: 'Создает массив и копирует в него значения элементов списка значений.',
                    returns: 'Тип: Массив. '
                },
                "Добавить": {
                    name: 'Добавить',
                    name_en: 'Add',
                    description: 'Добавляет новый элемент в конец списка значений.',
                    returns: 'Тип: ЭлементСпискаЗначений. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Значение?: Произвольный, Представление?: Строка, Пометка?: Булево, Картинка?: Картинка): ЭлементСпискаЗначений',
                            Параметры: {
                                Значение: 'Значение, которое необходимо добавить.',
                                Представление: 'Строковое выражение, содержащее представление добавляемого значения. Значение по умолчанию: Пустая строка.',
                                Пометка: 'Определяет, создавать новое значение с установленной пометкой или без пометки. Значение по умолчанию: Ложь.',
                                Картинка: 'Визуальное представление значения. Значение по умолчанию: Пустая картинка.'
                            }
                        }
                    }
                },
                "ЗагрузитьЗначения": {
                    name: 'ЗагрузитьЗначения',
                    name_en: 'LoadValues',
                    description: 'Загружает список значений значениями из переданного массива. При этом все прежние элементы списка удаляются.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(МассивЗначений: Массив)',
                            Параметры: {
                                МассивЗначений: 'Массив, содержащий значения для заполнения списка значений.'
                            }
                        }
                    }
                },
                "ЗаполнитьПометки": {
                    name: 'ЗаполнитьПометки',
                    name_en: 'FillChecks',
                    description: 'Устанавливает пометку у всех элементов списка значений.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ЗначениеПометки: Булево)',
                            Параметры: {
                                ЗначениеПометки: 'Значение пометки, устанавливаемой для всех элементов списка значений.'
                            }
                        }
                    }
                },
                "Индекс": {
                    name: 'Индекс',
                    name_en: 'IndexOf',
                    description: 'Получает индекс элемента в списке значений.',
                    returns: 'Тип: Число. Индекс указанного элемента в списке значений. Если не найдено, то возвращается -1.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Элемент: ЭлементСпискаЗначений): Число',
                            Параметры: {
                                Элемент: 'Элемент списка значений, для которого надо определить индекс.'
                            }
                        }
                    }
                },
                "Количество": {
                    name: 'Количество',
                    name_en: 'Count',
                    description: 'Получает количество элементов списка значений.',
                    returns: 'Тип: Число. '
                },
                "НайтиПоЗначению": {
                    name: 'НайтиПоЗначению',
                    name_en: 'FindByValue',
                    description: 'Осуществляет поиск значения элемента списка значений.',
                    returns: 'Тип: ЭлементСпискаЗначений, Неопределено. Если ни один элемент не хранит значения, равного искомому, то возвращается значение Неопределено.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ИскомоеЗначение: Произвольный): ЭлементСпискаЗначений|Неопределено',
                            Параметры: {
                                ИскомоеЗначение: 'Выражение со значением, которое требуется найти.'
                            }
                        }
                    }
                },
                "НайтиПоИдентификатору": {
                    name: 'НайтиПоИдентификатору',
                    name_en: 'FindByID',
                    description: 'Получает элемент списка значений по идентификатору.',
                    returns: 'Тип: ЭлементСпискаЗначений, Неопределено. Неопределено - элемент не найден.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Идентификатор: Число): ЭлементСпискаЗначений|Неопределено',
                            Параметры: {
                                Идентификатор: 'Идентификатор элемента списка значений.'
                            }
                        }
                    }
                },
                "ОтметитьЭлементы": {
                    name: 'ОтметитьЭлементы',
                    name_en: 'CheckItems',
                    description: 'Устанавливает или снимает (интерактивно) пометки у элементов списка значений.',
                    returns: 'Тип: Булево. Истина - в диалоге пометки нажата кнопка "ОК"; Ложь - в противном случае.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Заголовок?: Строка): Булево',
                            Параметры: {
                                Заголовок: 'Заголовок окна диалога. Если параметр не указан, то используется стандартный заголовок. Значение по умолчанию: Пустая строка.'
                            }
                        }
                    }
                },
                "Очистить": {
                    name: 'Очистить',
                    name_en: 'Clear',
                    description: 'Очищает список значений, удаляя из него все элементы.'
                },
                "ПоказатьВыборЭлемента": {
                    name: 'ПоказатьВыборЭлемента',
                    name_en: 'ShowChooseItem',
                    description: 'Вызывает окно для интерактивного выбора одного из элементов, входящих в список значений.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ОписаниеОповещенияОЗакрытии: ОписаниеОповещения, Заголовок?: Строка, Элемент?: ЭлементСпискаЗначений)',
                            Параметры: {
                                ОписаниеОповещенияОЗакрытии: 'Содержит описание процедуры, которая будет вызвана после закрытия диалога выбора элемента со следующими параметрами:   - <ВыбранныйЭлемент> - если пользователь отказался от выбора, то Неопределено,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                                Заголовок: 'Заголовок окна выбора. Если параметр не указан, то используется стандартный заголовок. Значение по умолчанию: Пустая строка.',
                                Элемент: 'Задает элемент, на который следует изначально спозиционироваться при интерактивном выборе. Если значением параметра не является элементом списка значений, входящим в данный список, позиционирования не произойдет.'
                            }
                        }
                    }
                },
                "ПоказатьОтметкуЭлементов": {
                    name: 'ПоказатьОтметкуЭлементов',
                    name_en: 'ShowCheckItems',
                    description: 'Предназначен для интерактивной установки состояний пометок у элементов списка значений.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ОписаниеОповещенияОЗакрытии: ОписаниеОповещения, Заголовок?: Строка)',
                            Параметры: {
                                ОписаниеОповещенияОЗакрытии: 'Содержит описание процедуры, которая будет вызвана после закрытия диалога выбора элементов со следующими параметрами:   - <Список> - если нажата кнопка "OK", то СписокЗначений, отметка элементов которого была завершена; Неопределено - если была нажата кнопка "Отмена";  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                                Заголовок: 'Заголовок окна диалога. Если параметр не указан, то используется стандартный заголовок. Значение по умолчанию: Пустая строка.'
                            }
                        }
                    }
                },
                "Получить": {
                    name: 'Получить',
                    name_en: 'Get',
                    description: 'Получает значение по индексу. Работает аналогично оператору [].',
                    returns: 'Тип: ЭлементСпискаЗначений. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число): ЭлементСпискаЗначений',
                            Параметры: {
                                Индекс: 'Индекс элемента.'
                            }
                        }
                    }
                },
                "Сдвинуть": {
                    name: 'Сдвинуть',
                    name_en: 'Move',
                    description: 'Сдвигает элемент списка значений на заданное количество позиций вперед или назад.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Элемент: Число, Смещение: Число)',
                            Параметры: {
                                Элемент: 'Индекс сдвигаемого элемента списка либо сам элемент.',
                                Смещение: 'Количество позиций, на которое следует сдвинуть элемент. Положительное значение соответствует смещению элемента в сторону конца списка (увеличение индекса), отрицательное - к началу.'
                            }
                        }
                    }
                },
                "Скопировать": {
                    name: 'Скопировать',
                    name_en: 'Copy',
                    description: 'Создает копию списка значений.',
                    returns: 'Тип: СписокЗначений. '
                },
                "СортироватьПоЗначению": {
                    name: 'СортироватьПоЗначению',
                    name_en: 'SortByValue',
                    description: 'Сортирует список значений в порядке возрастания или убывания хранимых элементами значений.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Направление?: НаправлениеСортировки)',
                            Параметры: {
                                Направление: 'Способ сортировки - по возрастанию или по убыванию. Значение по умолчанию: Возр.'
                            }
                        }
                    }
                },
                "СортироватьПоПредставлению": {
                    name: 'СортироватьПоПредставлению',
                    name_en: 'SortByPresentation',
                    description: 'Сортирует список значений по возрастанию или по убыванию в алфавитном порядке представлений входящих в состав списка значений элементов.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Направление?: НаправлениеСортировки)',
                            Параметры: {
                                Направление: 'Способ сортировки - по возрастанию или по убыванию. Значение по умолчанию: Возр.'
                            }
                        }
                    }
                },
                "Удалить": {
                    name: 'Удалить',
                    name_en: 'Delete',
                    description: 'Удаляет элемент из списка значений.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Элемент: Число)',
                            Параметры: {
                                Элемент: 'Индекс удаляемого элемента либо сам элемент.'
                            }
                        }
                    }
                },
            },
            properties: {
                "ДоступныеЗначения": {
                    name: 'ДоступныеЗначения',
                    name_en: 'AvailableValues',
                    description: 'Применяется в случаях, когда требуется ограничить возможность задания значений для элементов списка некоторым подмножеством значений допустимого типа (если для списка установлено описание типа).  Неопределено - ограничения отсутствуют.  Установка этого свойства влияет на работу диалога редактирования списка значений, элементов управления "Таблица" и "Поле ввода", связанных со списком значений, а также на программное добавление-вставку нового элемента списка значений и установку значений элементам списков.'
                },
                "ТипЗначения": {
                    name: 'ТипЗначения',
                    name_en: 'ValueType',
                    description: 'Определяет тип для значений, которые могут храниться в элементах данного списка значений.'
                },
            },
            constructors: {
                "По умолчанию": {
                    signature: '()'
                },
            }
        },
        "СтрокаДереваЗначений": {
            name: 'СтрокаДереваЗначений',
            name_en: 'ValueTreeRow',
            description: 'Используется для доступа к свойствам и методам строки дерева значений. Позволяет читать и записывать данные в конкретных колонках строки, также обладает коллекцией подчиненных строк (может быть пустой).',
            methods: {
                "Владелец": {
                    name: 'Владелец',
                    name_en: 'Owner',
                    description: 'Получает владельца данной строки.',
                    returns: 'Тип: ДеревоЗначений. '
                },
                "Получить": {
                    name: 'Получить',
                    name_en: 'Get',
                    description: 'Получает значение по индексу. Работает аналогично оператору [].',
                    returns: 'Тип: Произвольный. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число): Произвольный',
                            Параметры: {
                                Индекс: 'Индекс строки.'
                            }
                        }
                    }
                },
                "Уровень": {
                    name: 'Уровень',
                    name_en: 'Level',
                    description: 'Получает уровень строки дерева значений.',
                    returns: 'Тип: Число. Для строки, не имеющей родителя, уровень будет равен 0.'
                },
                "Установить": {
                    name: 'Установить',
                    name_en: 'Set',
                    description: 'Устанавливает значение по индексу. Работает аналогично оператору [].',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число, Значение: Произвольный)',
                            Параметры: {
                                Индекс: 'Индекс строки.',
                                Значение: 'Устанавливаемое значение.'
                            }
                        }
                    }
                },
            },
            properties: {
                "Родитель": {
                    name: 'Родитель',
                    name_en: 'Parent',
                    description: 'Содержит строку-родителя для данной строки дерева значений. Если строка находится в корне дерева (на верхнем уровне иерархии), то свойство имеет значение Неопределено.'
                },
                "Строки": {
                    name: 'Строки',
                    name_en: 'Rows',
                    description: 'Содержит коллекцию строк, подчиненных данной строке дерева значений.'
                },
            },
        },
        "СтрокаТаблицыЗначений": {
            name: 'СтрокаТаблицыЗначений',
            name_en: 'ValueTableRow',
            description: 'Предоставляет собой отдельную строку таблицы значений.',
            methods: {
                "Владелец": {
                    name: 'Владелец',
                    name_en: 'Owner',
                    description: 'Получает владельца данной строки.',
                    returns: 'Тип: ТаблицаЗначений. '
                },
                "Получить": {
                    name: 'Получить',
                    name_en: 'Get',
                    description: 'Получает значение по индексу. Работает аналогично оператору [].',
                    returns: 'Тип: Произвольный. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число): Произвольный',
                            Параметры: {
                                Индекс: 'Индекс колонки.'
                            }
                        }
                    }
                },
                "Установить": {
                    name: 'Установить',
                    name_en: 'Set',
                    description: 'Устанавливает значение по индексу. Работает аналогично оператору [].',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число, Значение: Произвольный)',
                            Параметры: {
                                Индекс: 'Индекс колонки, в которую будет установлено значение.',
                                Значение: 'Устанавливаемое значение.'
                            }
                        }
                    }
                },
            },
        },
        "Структура": {
            name: 'Структура',
            name_en: 'Structure',
            description: 'Представляет собой коллекцию пар КлючИЗначение. При этом ключ может быть только строковым и должен удовлетворять требованиям, предъявляемым к именованию переменных встроенного языка.  К значениям структуры можно обращаться как к свойствам объекта. При этом ключ используется как имя свойства. Структура используется обычно для хранения небольшого количества значений, каждое из которых имеет некоторое имя.',
            methods: {
                "Вставить": {
                    name: 'Вставить',
                    name_en: 'Insert',
                    description: 'Устанавливает значение элемента структуры по ключу. Если элемент с переданным значением ключа существует, то его значение заменяется, в противном случае добавляется новый элемент.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Ключ: Строка, Значение?: Произвольный)',
                            Параметры: {
                                Ключ: 'Ключ устанавливаемого элемента. Ключ должен соответствовать правилам, установленным для идентификаторов:    - Первым символом ключа должна быть буква или символ подчеркивания (_).  - Каждый из последующих символов может быть буквой, цифрой или символом подчеркивания (_).',
                                Значение: 'Значение устанавливаемого элемента.'
                            }
                        }
                    }
                },
                "Количество": {
                    name: 'Количество',
                    name_en: 'Count',
                    description: 'Получает количество элементов структуры.',
                    returns: 'Тип: Число. '
                },
                "Очистить": {
                    name: 'Очистить',
                    name_en: 'Clear',
                    description: 'Удаляет все элементы структуры.'
                },
                "Свойство": {
                    name: 'Свойство',
                    name_en: 'Property',
                    description: 'Получает значение элемента по указанному имени, а также проверяет, имеется ли указанное свойство.',
                    returns: 'Тип: Булево. Истина - ключ найден; Ложь в противном случае.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Ключ: Строка, НайденноеЗначение?: Произвольный): Булево',
                            Параметры: {
                                Ключ: 'Ключ для поиска свойства.',
                                НайденноеЗначение: 'В данный параметр возвращается найденное значение. Если ключа нет в структуре, то возвращается Неопределено.'
                            }
                        }
                    }
                },
                "Удалить": {
                    name: 'Удалить',
                    name_en: 'Delete',
                    description: 'Удаляет элемент структуры с заданным ключом.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Ключ: Строка)',
                            Параметры: {
                                Ключ: 'Ключ удаляемого элемента.'
                            }
                        }
                    }
                },
            },
            constructors: {
                "На основании фиксированной структуры": {
                    description: 'Создаваемая структура заполняется свойствами из исходной фиксированной структуры.',
                    signature: '(ФиксированнаяСтруктура?: ФиксированнаяСтруктура)',
                    params: {
                        "ФиксированнаяСтруктура": 'Фиксированная структура.'
                    }
                },
                "По ключам и значениям": {
                    description: 'Создает структуру с ключами, значения которых передаются в параметре конструктора. Если в первом параметре заданы ключи элементов структуры, то в следующих параметрах могут быть указаны значения этих элементов в том порядке, в котором они расположены в строке в первом параметре.',
                    signature: '(Ключи?: Произвольный, Значения?: Произвольный)',
                    params: {
                        "Ключи": 'Если тип параметра Строка, то содержит список имен свойств, указанных через запятую. В иных случаях значение параметра преобразуется к строке и используется как список имен создаваемых в структуре свойств, разделенных запятыми.  В случае, если для переданного типа параметра не предусмотрено получение строкового представления, будет вызвано исключение.',
                        "Значения": 'Значения элементов структуры.'
                    }
                },
            }
        },
        "ТаблицаЗначений": {
            name: 'ТаблицаЗначений',
            name_en: 'ValueTable',
            description: 'Таблица значений предназначена для хранения значений в табличном виде. Все основные операции с таблицей производятся именно через этот объект. Он позволяет манипулировать строками таблицы значений и предоставляет доступ к коллекции колонок. Колонки могут быть различных типов (в том числе множественных).',
            methods: {
                "Вставить": {
                    name: 'Вставить',
                    name_en: 'Insert',
                    description: 'Вставляет строку на позицию в таблице значений, соответствующую указанному индексу.',
                    returns: 'Тип: СтрокаТаблицыЗначений. Вставленная строка.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число): СтрокаТаблицыЗначений',
                            Параметры: {
                                Индекс: 'Индекс вставляемой строки.'
                            }
                        }
                    }
                },
                "ВыбратьСтроку": {
                    name: 'ВыбратьСтроку',
                    name_en: 'ChooseRow',
                    description: 'Вызывает модальное диалоговое окно для интерактивного выбора строки из таблицы значений.',
                    returns: 'Тип: СтрокаТаблицыЗначений, Неопределено. Если пользователь отказался от выбора, возвращает Неопределено.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Заголовок?: Строка, НачальнаяСтрока?: СтрокаТаблицыЗначений): СтрокаТаблицыЗначений|Неопределено',
                            Параметры: {
                                Заголовок: 'Заголовок диалогового окна выбора строки. Может использоваться для подсказки пользователю.',
                                НачальнаяСтрока: 'Указывает строку таблицы значений, на которой будет установлен курсор при открытии окна выбора.'
                            }
                        }
                    }
                },
                "ВыгрузитьКолонку": {
                    name: 'ВыгрузитьКолонку',
                    name_en: 'UnloadColumn',
                    description: 'Создает массив и копирует в него значения, содержащиеся в колонке таблицы значений.',
                    returns: 'Тип: Массив. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Колонка: Число): Массив',
                            Параметры: {
                                Колонка: 'Колонка, значения которой необходимо выгрузить. В качестве значения параметра может выступать индекс колонки, имя колонки, сама колонка.'
                            }
                        }
                    }
                },
                "Добавить": {
                    name: 'Добавить',
                    name_en: 'Add',
                    description: 'Добавляет строку в конец таблицы значений.',
                    returns: 'Тип: СтрокаТаблицыЗначений. '
                },
                "ЗагрузитьКолонку": {
                    name: 'ЗагрузитьКолонку',
                    name_en: 'LoadColumn',
                    description: 'Загружает колонку таблицы значений из массива значений.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Массив: Массив, Колонка: Число)',
                            Параметры: {
                                Массив: 'Массив значений, который выступает в качестве источника данных для колонки.',
                                Колонка: 'Колонка, в которую будут загружены значения из массива. В качестве значения параметра может выступать индекс колонки, имя колонки, сама колонка.'
                            }
                        }
                    }
                },
                "ЗаполнитьЗначения": {
                    name: 'ЗаполнитьЗначения',
                    name_en: 'FillValues',
                    description: 'Заполняет все строки таблицы значений указанным значением.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Значение: Произвольный, Колонки?: Строка)',
                            Параметры: {
                                Значение: 'Значение, которым необходимо заполнить строки таблицы.',
                                Колонки: 'Список имен колонок, разделенных запятыми, по которым производится заполнение строк таблицы значений. Если параметр не указан или передана пустая строка, будет заполнена вся таблица значений.'
                            }
                        }
                    }
                },
                "Индекс": {
                    name: 'Индекс',
                    name_en: 'IndexOf',
                    description: 'Получает индекс строки в коллекции строк таблицы значений.',
                    returns: 'Тип: Число. Индекс указанной строки в коллекции. Если не найдено, то возвращается -1.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Строка: СтрокаТаблицыЗначений): Число',
                            Параметры: {
                                Строка: 'Строка таблицы значений, для которой нужно определить индекс.'
                            }
                        }
                    }
                },
                "Итог": {
                    name: 'Итог',
                    name_en: 'Total',
                    description: 'Суммирует значения всех строк в указанной колонке. Если в колонке установлен тип и он единственный, то при суммировании будет предприниматься попытка преобразования значения к типу Число. Если колонке не присвоены типы, то в процессе суммирования будут принимать участие только значения, имеющие тип Число, значения других типов будут игнорироваться. Если в колонке несколько типов и среди них есть тип Число, то в процессе суммирования будут принимать участие только значения, имеющие тип Число, значения других типов будут игнорироваться. Если в колонке несколько типов и среди них нет типа Число, то результатом будет значение Неопределено.',
                    returns: 'Тип: Число, Неопределено. Сумма значений по всем строкам указанной колонки.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Колонка: Строка): Число|Неопределено',
                            Параметры: {
                                Колонка: 'Имя колонки, по которой необходимо посчитать итог.'
                            }
                        }
                    }
                },
                "Количество": {
                    name: 'Количество',
                    name_en: 'Count',
                    description: 'Получает количество строк таблицы значений.',
                    returns: 'Тип: Число. '
                },
                "Найти": {
                    name: 'Найти',
                    name_en: 'Find',
                    description: 'Осуществляет поиск значения в указанных колонках таблицы значений.',
                    returns: 'Тип: СтрокаТаблицыЗначений, Неопределено. Строка, в которой содержится искомое значение. Если значение не найдено, то возвращается значение Неопределено.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Значение: Произвольный, Колонки?: Строка): СтрокаТаблицыЗначений|Неопределено',
                            Параметры: {
                                Значение: 'Искомое значение.',
                                Колонки: 'Список имен колонок, разделенных запятыми, по которым производится поиск. Если параметр не указан, поиск осуществляется по всей таблице значений. Значение по умолчанию: Пустая строка.'
                            }
                        }
                    }
                },
                "НайтиСтроки": {
                    name: 'НайтиСтроки',
                    name_en: 'FindRows',
                    description: 'Осуществляет поиск строк таблицы значений, отвечающих заданным условиям поиска.',
                    returns: 'Тип: Массив. Массив строк таблицы значений, соответствующих условиям поиска.Замечание! Массив хранит ссылки на строки таблицы значений, то есть при изменении строки в таблице, значение в массиве тоже будет измененным.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ПараметрыОтбора: Структура): Массив',
                            Параметры: {
                                ПараметрыОтбора: 'Задает условия поиска: ключ структуры определяет имя колонки, по которой будет осуществляться поиск, а значение структуры - искомое значение.'
                            }
                        }
                    }
                },
                "Очистить": {
                    name: 'Очистить',
                    name_en: 'Clear',
                    description: 'Удаляет все строки таблицы значений. Структура колонок остается неизменной.'
                },
                "Получить": {
                    name: 'Получить',
                    name_en: 'Get',
                    description: 'Получает значение по индексу. Работает аналогично оператору [].',
                    returns: 'Тип: СтрокаТаблицыЗначений. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число): СтрокаТаблицыЗначений',
                            Параметры: {
                                Индекс: 'Индекс строки.'
                            }
                        }
                    }
                },
                "Свернуть": {
                    name: 'Свернуть',
                    name_en: 'GroupBy',
                    description: 'Осуществляет свертку таблицы значений по указанным колонкам группировки. Строки, у которых совпадают значения в колонках, указанных в первом параметре, сворачиваются в одну строку. Значения этих строк, хранящиеся в колонках, указанных во втором параметре, накапливаются. Важно! Списки колонок не должны пересекаться. Колонки, не вошедшие ни в один из списков колонок, после выполнения метода удаляются из таблицы значений.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(КолонкиГруппировок: Строка, КолонкиСуммирования?: Строка)',
                            Параметры: {
                                КолонкиГруппировок: 'Имена колонок, разделенные запятыми, по которым необходимо группировать строки таблицы значений.',
                                КолонкиСуммирования: 'Имена колонок, разделенные запятыми, по которым необходимо суммировать значения в строках таблицы значений.'
                            }
                        }
                    }
                },
                "Сдвинуть": {
                    name: 'Сдвинуть',
                    name_en: 'Move',
                    description: 'Сдвигает строку на указанное количество позиций.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Строка: Число, Смещение: Число)',
                            Параметры: {
                                Строка: 'Индекс строки, которую нужно переместить, или сама строка.',
                                Смещение: 'Количество строк, на которое необходимо переместить строку. Положительное значение означает, что строка будет передвинута ближе к концу таблицы значений (вниз), отрицательное - ближе к началу (вверх).'
                            }
                        }
                    }
                },
                "Скопировать": {
                    name: 'Скопировать',
                    name_en: 'Copy',
                    description: 'Создает копию исходной таблицы значений.',
                    returns: 'Тип: ТаблицаЗначений. ',
                    signature: {
                        СкопироватьСтроки: {
                            СтрокаПараметров: '(Строки?: Массив, Колонки?: Строка): ТаблицаЗначений',
                            Параметры: {
                                Строки: 'Массив строк для копирования. Если не указан, копируются все строки таблицы значений.',
                                Колонки: 'Список колонок для копирования в формате: "Колонка1, Колонка2...".'
                            }
                        },
                        СкопироватьПоОтбору: {
                            СтрокаПараметров: '(ПараметрыОтбора?: Структура, Колонки?: Строка): ТаблицаЗначений',
                            Параметры: {
                                ПараметрыОтбора: 'Ключ структуры - идентификатор колонки, а значение структуры - значение отбора.',
                                Колонки: 'Список колонок для копирования в формате: "Колонка1, Колонка2...".'
                            }
                        }
                    }
                },
                "СкопироватьКолонки": {
                    name: 'СкопироватьКолонки',
                    name_en: 'CopyColumns',
                    description: 'Создает таблицу значений с заданным списком колонок.',
                    returns: 'Тип: ТаблицаЗначений. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Колонки?: Строка): ТаблицаЗначений',
                            Параметры: {
                                Колонки: 'Список колонок для копирования в формате: "Колонка1, Колонка2...". Если список не задан, то будут скопированы все колонки.'
                            }
                        }
                    }
                },
                "Сортировать": {
                    name: 'Сортировать',
                    name_en: 'Sort',
                    description: 'Сортирует таблицу значений в соответствии с указанными правилами сортировки.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Колонки: Строка, ОбъектСравнения?: СравнениеЗначений)',
                            Параметры: {
                                Колонки: 'Список имен колонок, разделенных запятыми, по которым производится сортировка таблицы. После каждого имени колонки через пробел может быть указано направление сортировки. Направление определяется: "Убыв" ("Desc") - упорядочивать по убыванию; "Возр" ("Asc") - упорядочивать по возрастанию. По умолчанию сортировка производится по возрастанию. Порядок указания имен колонок таблицы определяет порядок сортировки. Это означает, что сначала таблица сортируется по колонке, указанной первой. Затем группы строк с одинаковым значением в этой колонке сортируются по колонке, которая указана второй, и так далее.',
                                ОбъектСравнения: 'Объект для сравнения значений. Независимо от того, задан объект сравнения или нет, элементы, чьи типы не совпадают, сравниваются по коду типа, а элементы простых типов сравниваются по значению. Дополнительно к этому:   - если объект сравнения не задан, то элементы остальных типов сравниваются по строковому представлению;  - если объект сравнения задан, то:   - объекты сравниваются по идентификатору;  - моменты времени сравниваются по дате и идентификатору объекта;  - элементы остальных типов сравниваются по строковому представлению.'
                            }
                        }
                    }
                },
                "Удалить": {
                    name: 'Удалить',
                    name_en: 'Delete',
                    description: 'Удаляет строку таблицы значений.',
                    signature: {
                        УдалениеПоОбъекту: {
                            СтрокаПараметров: '(Строка: СтрокаТаблицыЗначений)',
                            Параметры: {
                                Строка: 'Удаляемая строка таблицы значений.'
                            }
                        },
                        УдалениеПоИндексу: {
                            СтрокаПараметров: '(Индекс: Число)',
                            Параметры: {
                                Индекс: 'Индекс строки, которую необходимо удалить.'
                            }
                        }
                    }
                },
            },
            properties: {
                "Индексы": {
                    name: 'Индексы',
                    name_en: 'Indexes',
                    description: 'Содержит коллекцию индексов таблицы значений.'
                },
                "Колонки": {
                    name: 'Колонки',
                    name_en: 'Columns',
                    description: 'Содержит коллекцию колонок таблицы значений.'
                },
            },
            constructors: {
                "По умолчанию": {
                    signature: '()'
                },
            }
        },
        "ТекстовыйДокумент": {
            name: 'ТекстовыйДокумент',
            name_en: 'TextDocument',
            description: 'Текстовый документ предназначен для работы с текстами. Объект позволяет получать и сохранять текст в файле, работать со строками, открывать текст в текстовом редакторе 1С:Предприятия.',
            methods: {
                "ВставитьСтроку": {
                    name: 'ВставитьСтроку',
                    name_en: 'InsertLine',
                    description: 'Вставляет в текстовый документ строку с указанным номером.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(НомерСтроки: Число, Строка: Строка)',
                            Параметры: {
                                НомерСтроки: 'Номер вставляемой строки.',
                                Строка: 'Вставляемая строка.'
                            }
                        }
                    }
                },
                "Вывести": {
                    name: 'Вывести',
                    name_en: 'Put',
                    description: 'Добавляет текстовый документ в результирующий текстовый документ, добавляя его со следующей строки вслед за самой нижней выведенной строкой.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Текст: ТекстовыйДокумент)',
                            Параметры: {
                                Текст: 'Выводимый текстовый документ.'
                            }
                        }
                    }
                },
                "ДобавитьСтроку": {
                    name: 'ДобавитьСтроку',
                    name_en: 'AddLine',
                    description: 'Добавляет строку в конец текстового документа.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Строка: Строка)',
                            Параметры: {
                                Строка: 'Добавляемая строка.'
                            }
                        }
                    }
                },
                "ЗаменитьСтроку": {
                    name: 'ЗаменитьСтроку',
                    name_en: 'ReplaceLine',
                    description: 'Заменяет строку с указанным номером на переданную.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(НомерСтроки: Число, Строка: Строка)',
                            Параметры: {
                                НомерСтроки: 'Номер замещаемой строки.',
                                Строка: 'Замещающая строка.'
                            }
                        }
                    }
                },
                "Записать": {
                    name: 'Записать',
                    name_en: 'Write',
                    description: 'Записывает текстовый документ в файл с указанным именем.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ИмяФайла: Строка, ТипФайла?: КодировкаТекста, РазделительСтрок?: Строка)',
                            Параметры: {
                                ИмяФайла: 'Имя файла для сохранения текста.',
                                ТипФайла: 'Тип кодировки файла. Тип файла может быть задан как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки. Поддерживаемые названия кодировок:   - UTF-8  - UTF-16  - UTF-16BE  - UTF-16LE  - UTF-32  - UTF-32BE  - UTF-32LE  - UTF16_PlatformEndian  - UTF16_OppositeEndian  - UTF32_PlatformEndian  - UTF32_OppositeEndian  - UTF-7  - IMAP-mailbox-name  - SCSU  - BOCU-1  - CESU-8  - ISO-8859-1  - US-ASCII  - gb18030  - IBM367  - iso-8859-2  - iso-8859-3  - iso-8859-4  - iso-8859-5  - iso-8859-6  - iso-8859-7  - iso-8859-8  - iso-8859-9  - iso-8859-13  - iso-8859-15  - cp932  - Shift_JIS  - EUC-JP  - cp33722  - windows-950  - Big5  - cp950  - Big5-HKSCS  - cp1386  - GBK  - GB2312  - GB_2312-80  - cp964  - cp949  - cp949c  - EUC-KR  - ibm-971  - KSC_5601  - ibm-1363  - windows-949  - windows-874  - cp874  - ibm-1162  - cp437  - cp737  - cp775  - cp850  - cp851  - cp852  - cp855  - cp856  - cp857  - cp858  - cp860  - cp861  - cp862  - cp863  - cp864  - cp865  - cp866  - ibm-867  - CP868  - cp869  - KOI8-R  - ibm-901  - ibm-902  - cp922  - KOI8-U  - ibm-4909  - windows-1250  - windows-1251  - windows-1252  - windows-1253  - windows-1254  - windows-1255  - windows-1256  - windows-1257  - windows-1258  - macintosh  - x-mac-greek  - x-mac-cyrillic  - x-mac-centraleurroman  - x-mac-turkish  - hp-roman8  - Adobe-Standard-Encoding  - cp1006  - cp1098  - cp1124  - cp1125  - ibm-1129  - cp1131  - ibm-1133  - ISO-2022-JP  - JIS_Encoding  - ISO-2022-JP-2  - ISO_2022,locale=ja,version=3  - ISO_2022,locale=ja,version=4  - ISO-2022-KR  - ISO_2022,locale=ko,version=1  - ISO-2022-CN  - ISO-2022-CN-EXT  - HZ-GB-2312  - windows-57002  - windows-57003  - windows-57011  - windows-57010  - windows-57007  - windows-57004  - windows-57005  - windows-57008  - windows-57009  - LMBCS-1  - LMBCS-2  - LMBCS-3  - LMBCS-4  - LMBCS-5  - LMBCS-6  - LMBCS-8  - LMBCS-11  - LMBCS-16  - LMBCS-17  - LMBCS-18  - LMBCS-19  - IBM037  - ebcdic-de  - ebcdic-dk  - IBM278  - IBM280  - IBM284  - IBM285  - IBM290  - IBM297  - IBM420  - IBM424  - IBM500  - ibm-803  - IBM-Thai  - IBM870  - IBM871  - cp875  - IBM918  - cp930  - cp933  - cp935  - cp937  - cp939  - cp1025  - IBM1026  - IBM1047  - cp1097  - cp1112  - cp1122  - cp1123  - ibm-1130  - ibm-1132  - ibm-1137  - IBM01140  - IBM01141  - IBM01142  - IBM01143  - IBM01144  - IBM01145  - IBM01146  - IBM01147  - IBM01148  - IBM01149  - ibm-1153  - ibm-1154  - ibm-1155  - ibm-1156  - ibm-1157  - ibm-1158  - ibm-1160  - ibm-1164  - ibm-1364  - ibm-1371  - ibm-1388  - ibm-1390  - ibm-1399  - ibm-5123  - ibm-8482  - ibm-16684  - ibm-4899  - ibm-4971  - ebcdic-he  - ebcdic-ar  - ibm-37_P100-1995,swaplfnl  - ibm-1047_P100-1995,swaplfnl  - ibm-1140_P100-1997,swaplfnl  - ibm-1142_P100-1997,swaplfnl  - ibm-1143_P100-1997,swaplfnl  - ibm-1144_P100-1997,swaplfnl  - ibm-1145_P100-1997,swaplfnl  - ibm-1146_P100-1997,swaplfnl  - ibm-1147_P100-1997,swaplfnl  - ibm-1148_P100-1997,swaplfnl  - ibm-1149_P100-1997,swaplfnl  - ibm-1153_P100-1999,swaplfnl  - ibm-12712_P100-1998,swaplfnl  - ibm-16804_X110-1999,swaplfnl  - ebcdic-xml-us  Значение по умолчанию: UTF8.',
                                РазделительСтрок: 'Задается строка, являющаяся разделителем строк, к которой при записи файла будет преобразован символ ПС. Если строка пустая, то разделители строк при записи не конвертируются. Допустимые варианты разделителей строк:   - ВК;  - ПС;  - ВК + ПС (значение по умолчанию - может не указываться). При использовании других строк в качестве разделителей будет вызвано исключение. Значение по умолчанию: ВК + ПС.'
                            }
                        }
                    }
                },
                "КоличествоСтрок": {
                    name: 'КоличествоСтрок',
                    name_en: 'LineCount',
                    description: 'Получает количество строк в тексте.',
                    returns: 'Тип: Число. '
                },
                "НачатьЗапись": {
                    name: 'НачатьЗапись',
                    name_en: 'BeginWriting',
                    description: 'Вызывает начало записи текстового документа в файл с указанным именем.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ОписаниеОповещения?: ОписаниеОповещения, ИмяФайла: Строка, ТипФайла?: КодировкаТекста, РазделительСтрок?: Строка)',
                            Параметры: {
                                ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения записи файла со следующими параметрами:   - <Результат> - результат операции.   - Истина, если запись была инициирована с помощью расширений для браузера и пользователь согласился на его получение, то есть запись файла была завершена.  - Ложь, если запись была инициирована с помощью расширений для браузера, но пользователь не согласился на его получение, то есть запись файла не была завершена.  - Неопределено если запись была инициирована скачиванием файла средствами браузера и неизвестно - был ли файл записан или нет.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. Если параметр не указан или имеет тип Неопределено, то по завершении никакая процедура вызвана не будет.',
                                ИмяФайла: 'Имя файла для сохранения текста.',
                                ТипФайла: 'Тип кодировки файла. Тип файла может быть задан как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки. Поддерживаемые названия кодировок:   - UTF-8  - UTF-16  - UTF-16BE  - UTF-16LE  - UTF-32  - UTF-32BE  - UTF-32LE  - UTF16_PlatformEndian  - UTF16_OppositeEndian  - UTF32_PlatformEndian  - UTF32_OppositeEndian  - UTF-7  - IMAP-mailbox-name  - SCSU  - BOCU-1  - CESU-8  - ISO-8859-1  - US-ASCII  - gb18030  - IBM367  - iso-8859-2  - iso-8859-3  - iso-8859-4  - iso-8859-5  - iso-8859-6  - iso-8859-7  - iso-8859-8  - iso-8859-9  - iso-8859-13  - iso-8859-15  - cp932  - Shift_JIS  - EUC-JP  - cp33722  - windows-950  - Big5  - cp950  - Big5-HKSCS  - cp1386  - GBK  - GB2312  - GB_2312-80  - cp964  - cp949  - cp949c  - EUC-KR  - ibm-971  - KSC_5601  - ibm-1363  - windows-949  - windows-874  - cp874  - ibm-1162  - cp437  - cp737  - cp775  - cp850  - cp851  - cp852  - cp855  - cp856  - cp857  - cp858  - cp860  - cp861  - cp862  - cp863  - cp864  - cp865  - cp866  - ibm-867  - CP868  - cp869  - KOI8-R  - ibm-901  - ibm-902  - cp922  - KOI8-U  - ibm-4909  - windows-1250  - windows-1251  - windows-1252  - windows-1253  - windows-1254  - windows-1255  - windows-1256  - windows-1257  - windows-1258  - macintosh  - x-mac-greek  - x-mac-cyrillic  - x-mac-centraleurroman  - x-mac-turkish  - hp-roman8  - Adobe-Standard-Encoding  - cp1006  - cp1098  - cp1124  - cp1125  - ibm-1129  - cp1131  - ibm-1133  - ISO-2022-JP  - JIS_Encoding  - ISO-2022-JP-2  - ISO_2022,locale=ja,version=3  - ISO_2022,locale=ja,version=4  - ISO-2022-KR  - ISO_2022,locale=ko,version=1  - ISO-2022-CN  - ISO-2022-CN-EXT  - HZ-GB-2312  - windows-57002  - windows-57003  - windows-57011  - windows-57010  - windows-57007  - windows-57004  - windows-57005  - windows-57008  - windows-57009  - LMBCS-1  - LMBCS-2  - LMBCS-3  - LMBCS-4  - LMBCS-5  - LMBCS-6  - LMBCS-8  - LMBCS-11  - LMBCS-16  - LMBCS-17  - LMBCS-18  - LMBCS-19  - IBM037  - ebcdic-de  - ebcdic-dk  - IBM278  - IBM280  - IBM284  - IBM285  - IBM290  - IBM297  - IBM420  - IBM424  - IBM500  - ibm-803  - IBM-Thai  - IBM870  - IBM871  - cp875  - IBM918  - cp930  - cp933  - cp935  - cp937  - cp939  - cp1025  - IBM1026  - IBM1047  - cp1097  - cp1112  - cp1122  - cp1123  - ibm-1130  - ibm-1132  - ibm-1137  - IBM01140  - IBM01141  - IBM01142  - IBM01143  - IBM01144  - IBM01145  - IBM01146  - IBM01147  - IBM01148  - IBM01149  - ibm-1153  - ibm-1154  - ibm-1155  - ibm-1156  - ibm-1157  - ibm-1158  - ibm-1160  - ibm-1164  - ibm-1364  - ibm-1371  - ibm-1388  - ibm-1390  - ibm-1399  - ibm-5123  - ibm-8482  - ibm-16684  - ibm-4899  - ibm-4971  - ebcdic-he  - ebcdic-ar  - ibm-37_P100-1995,swaplfnl  - ibm-1047_P100-1995,swaplfnl  - ibm-1140_P100-1997,swaplfnl  - ibm-1142_P100-1997,swaplfnl  - ibm-1143_P100-1997,swaplfnl  - ibm-1144_P100-1997,swaplfnl  - ibm-1145_P100-1997,swaplfnl  - ibm-1146_P100-1997,swaplfnl  - ibm-1147_P100-1997,swaplfnl  - ibm-1148_P100-1997,swaplfnl  - ibm-1149_P100-1997,swaplfnl  - ibm-1153_P100-1999,swaplfnl  - ibm-12712_P100-1998,swaplfnl  - ibm-16804_X110-1999,swaplfnl  - ebcdic-xml-us  Значение по умолчанию: UTF8.',
                                РазделительСтрок: 'Задается строка, являющаяся разделителем строк, к которой при записи файла будет преобразован символ ПС. Если строка пустая, то разделители строк при записи не конвертируются. Допустимые варианты разделителей строк:   - ВК;  - ПС;  - ВК + ПС (значение по умолчанию - может не указываться). При использовании других строк в качестве разделителей будет вызвано исключение. Значение по умолчанию: ВК + ПС.'
                            }
                        }
                    }
                },
                "НачатьЧтение": {
                    name: 'НачатьЧтение',
                    name_en: 'BeginReading',
                    description: 'Вызывает начало чтения текстового документа из файла.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ОписаниеОповещения?: ОписаниеОповещения, ИмяФайла: Строка, ТипФайла?: КодировкаТекста, РазделительСтрок?: Строка)',
                            Параметры: {
                                ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения чтения файла со следующими параметрами:   - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. Если параметр не указан или имеет тип Неопределено, то по завершении никакая процедура вызвана не будет.',
                                ИмяФайла: 'Имя текстового файла.',
                                ТипФайла: 'Указывается кодировка текста в открываемом файле.  В случае, если параметр не задан, формат текста будет определен автоматически (если он хранится в файле с сигнатурой BOM в начале). Если автоматически определить формат файла не удается, файл будет открыт в кодировке UTF8.  Тип файла может быть задан как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки. Поддерживаемые названия кодировок:   - UTF-8  - UTF-16  - UTF-16BE  - UTF-16LE  - UTF-32  - UTF-32BE  - UTF-32LE  - UTF16_PlatformEndian  - UTF16_OppositeEndian  - UTF32_PlatformEndian  - UTF32_OppositeEndian  - UTF-7  - IMAP-mailbox-name  - SCSU  - BOCU-1  - CESU-8  - ISO-8859-1  - US-ASCII  - gb18030  - IBM367  - iso-8859-2  - iso-8859-3  - iso-8859-4  - iso-8859-5  - iso-8859-6  - iso-8859-7  - iso-8859-8  - iso-8859-9  - iso-8859-13  - iso-8859-15  - cp932  - Shift_JIS  - EUC-JP  - cp33722  - windows-950  - Big5  - cp950  - Big5-HKSCS  - cp1386  - GBK  - GB2312  - GB_2312-80  - cp964  - cp949  - cp949c  - EUC-KR  - ibm-971  - KSC_5601  - ibm-1363  - windows-949  - windows-874  - cp874  - ibm-1162  - cp437  - cp737  - cp775  - cp850  - cp851  - cp852  - cp855  - cp856  - cp857  - cp858  - cp860  - cp861  - cp862  - cp863  - cp864  - cp865  - cp866  - ibm-867  - CP868  - cp869  - KOI8-R  - ibm-901  - ibm-902  - cp922  - KOI8-U  - ibm-4909  - windows-1250  - windows-1251  - windows-1252  - windows-1253  - windows-1254  - windows-1255  - windows-1256  - windows-1257  - windows-1258  - macintosh  - x-mac-greek  - x-mac-cyrillic  - x-mac-centraleurroman  - x-mac-turkish  - hp-roman8  - Adobe-Standard-Encoding  - cp1006  - cp1098  - cp1124  - cp1125  - ibm-1129  - cp1131  - ibm-1133  - ISO-2022-JP  - JIS_Encoding  - ISO-2022-JP-2  - ISO_2022,locale=ja,version=3  - ISO_2022,locale=ja,version=4  - ISO-2022-KR  - ISO_2022,locale=ko,version=1  - ISO-2022-CN  - ISO-2022-CN-EXT  - HZ-GB-2312  - windows-57002  - windows-57003  - windows-57011  - windows-57010  - windows-57007  - windows-57004  - windows-57005  - windows-57008  - windows-57009  - LMBCS-1  - LMBCS-2  - LMBCS-3  - LMBCS-4  - LMBCS-5  - LMBCS-6  - LMBCS-8  - LMBCS-11  - LMBCS-16  - LMBCS-17  - LMBCS-18  - LMBCS-19  - IBM037  - ebcdic-de  - ebcdic-dk  - IBM278  - IBM280  - IBM284  - IBM285  - IBM290  - IBM297  - IBM420  - IBM424  - IBM500  - ibm-803  - IBM-Thai  - IBM870  - IBM871  - cp875  - IBM918  - cp930  - cp933  - cp935  - cp937  - cp939  - cp1025  - IBM1026  - IBM1047  - cp1097  - cp1112  - cp1122  - cp1123  - ibm-1130  - ibm-1132  - ibm-1137  - IBM01140  - IBM01141  - IBM01142  - IBM01143  - IBM01144  - IBM01145  - IBM01146  - IBM01147  - IBM01148  - IBM01149  - ibm-1153  - ibm-1154  - ibm-1155  - ibm-1156  - ibm-1157  - ibm-1158  - ibm-1160  - ibm-1164  - ibm-1364  - ibm-1371  - ibm-1388  - ibm-1390  - ibm-1399  - ibm-5123  - ibm-8482  - ibm-16684  - ibm-4899  - ibm-4971  - ebcdic-he  - ebcdic-ar  - ibm-37_P100-1995,swaplfnl  - ibm-1047_P100-1995,swaplfnl  - ibm-1140_P100-1997,swaplfnl  - ibm-1142_P100-1997,swaplfnl  - ibm-1143_P100-1997,swaplfnl  - ibm-1144_P100-1997,swaplfnl  - ibm-1145_P100-1997,swaplfnl  - ibm-1146_P100-1997,swaplfnl  - ibm-1147_P100-1997,swaplfnl  - ibm-1148_P100-1997,swaplfnl  - ibm-1149_P100-1997,swaplfnl  - ibm-1153_P100-1999,swaplfnl  - ibm-12712_P100-1998,swaplfnl  - ibm-16804_X110-1999,swaplfnl  - ebcdic-xml-us',
                                РазделительСтрок: 'Задается строка, являющаяся разделителем строк, из которой при чтении файла будет сформирован символ ПС.  Если строка пустая, то разделители строк при чтении не конвертируются. Допустимые варианты разделителей строк:   - ВК;  - ПС;  - ВК + ПС (значение по умолчанию - может не указываться). При использовании других строк в качестве разделителей будет вызвано исключение. Значение по умолчанию: ВК + ПС.'
                            }
                        }
                    }
                },
                "Очистить": {
                    name: 'Очистить',
                    name_en: 'Clear',
                    description: 'Очищает содержимое текстового документа.'
                },
                "Показать": {
                    name: 'Показать',
                    name_en: 'Show',
                    description: 'Открывает окно с текстом для просмотра и редактирования. Если текстовый документ является реквизитом управляемой формы, то вызов метода Показать приводит к возникновению исключения.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Заголовок?: Строка, ИмяФайла?: Строка)',
                            Параметры: {
                                Заголовок: 'Заголовок окна редактирования.',
                                ИмяФайла: 'Имя файла, в котором будет предлагаться сохранение текста при закрытии окна текстового редактора. Если файла с указанным именем не существует, то будет создан новый файл с таким именем для сохранения текста.  Если параметр не указан, то при закрытии окна, не будет предложено сохранить данные в файл. Если параметр не указан, но в окне редактирования после выполнения метода Показать были произведены изменения (интерактивно или средствами встроенного языка), то при его закрытии на экран выводится стандартный вопрос о сохранении документа.'
                            }
                        }
                    }
                },
                "ПолучитьОбласть": {
                    name: 'ПолучитьОбласть',
                    name_en: 'GetArea',
                    description: 'Получает область текстового документа в качестве нового текстового документа.',
                    returns: 'Тип: ТекстовыйДокумент. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ИмяОбласти: Строка): ТекстовыйДокумент',
                            Параметры: {
                                ИмяОбласти: 'Имя области текстового документа.'
                            }
                        }
                    }
                },
                "ПолучитьСтроку": {
                    name: 'ПолучитьСтроку',
                    name_en: 'GetLine',
                    description: 'Получает строку текстового документа по номеру.',
                    returns: 'Тип: Строка. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(НомерСтроки: Число): Строка',
                            Параметры: {
                                НомерСтроки: 'Номер строки текста.'
                            }
                        }
                    }
                },
                "ПолучитьТекст": {
                    name: 'ПолучитьТекст',
                    name_en: 'GetText',
                    description: 'Получает текст, находящийся в текстовом документе.',
                    returns: 'Тип: Строка. Строка, содержащая текст из текстового документа.'
                },
                "Прочитать": {
                    name: 'Прочитать',
                    name_en: 'Read',
                    description: 'Считывает текстовый документ из файла.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ИмяФайла: Строка, ТипФайла?: КодировкаТекста, РазделительСтрок?: Строка)',
                            Параметры: {
                                ИмяФайла: 'Имя текстового файла.',
                                ТипФайла: 'Указывается кодировка текста в открываемом файле.  В случае, если параметр не задан, формат текста будет определен автоматически (если он хранится в файле с сигнатурой BOM в начале). Если автоматически определить формат файла не удается, файл будет открыт в кодировке UTF8.  Тип файла может быть задан как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки. Поддерживаемые названия кодировок:   - UTF-8  - UTF-16  - UTF-16BE  - UTF-16LE  - UTF-32  - UTF-32BE  - UTF-32LE  - UTF16_PlatformEndian  - UTF16_OppositeEndian  - UTF32_PlatformEndian  - UTF32_OppositeEndian  - UTF-7  - IMAP-mailbox-name  - SCSU  - BOCU-1  - CESU-8  - ISO-8859-1  - US-ASCII  - gb18030  - IBM367  - iso-8859-2  - iso-8859-3  - iso-8859-4  - iso-8859-5  - iso-8859-6  - iso-8859-7  - iso-8859-8  - iso-8859-9  - iso-8859-13  - iso-8859-15  - cp932  - Shift_JIS  - EUC-JP  - cp33722  - windows-950  - Big5  - cp950  - Big5-HKSCS  - cp1386  - GBK  - GB2312  - GB_2312-80  - cp964  - cp949  - cp949c  - EUC-KR  - ibm-971  - KSC_5601  - ibm-1363  - windows-949  - windows-874  - cp874  - ibm-1162  - cp437  - cp737  - cp775  - cp850  - cp851  - cp852  - cp855  - cp856  - cp857  - cp858  - cp860  - cp861  - cp862  - cp863  - cp864  - cp865  - cp866  - ibm-867  - CP868  - cp869  - KOI8-R  - ibm-901  - ibm-902  - cp922  - KOI8-U  - ibm-4909  - windows-1250  - windows-1251  - windows-1252  - windows-1253  - windows-1254  - windows-1255  - windows-1256  - windows-1257  - windows-1258  - macintosh  - x-mac-greek  - x-mac-cyrillic  - x-mac-centraleurroman  - x-mac-turkish  - hp-roman8  - Adobe-Standard-Encoding  - cp1006  - cp1098  - cp1124  - cp1125  - ibm-1129  - cp1131  - ibm-1133  - ISO-2022-JP  - JIS_Encoding  - ISO-2022-JP-2  - ISO_2022,locale=ja,version=3  - ISO_2022,locale=ja,version=4  - ISO-2022-KR  - ISO_2022,locale=ko,version=1  - ISO-2022-CN  - ISO-2022-CN-EXT  - HZ-GB-2312  - windows-57002  - windows-57003  - windows-57011  - windows-57010  - windows-57007  - windows-57004  - windows-57005  - windows-57008  - windows-57009  - LMBCS-1  - LMBCS-2  - LMBCS-3  - LMBCS-4  - LMBCS-5  - LMBCS-6  - LMBCS-8  - LMBCS-11  - LMBCS-16  - LMBCS-17  - LMBCS-18  - LMBCS-19  - IBM037  - ebcdic-de  - ebcdic-dk  - IBM278  - IBM280  - IBM284  - IBM285  - IBM290  - IBM297  - IBM420  - IBM424  - IBM500  - ibm-803  - IBM-Thai  - IBM870  - IBM871  - cp875  - IBM918  - cp930  - cp933  - cp935  - cp937  - cp939  - cp1025  - IBM1026  - IBM1047  - cp1097  - cp1112  - cp1122  - cp1123  - ibm-1130  - ibm-1132  - ibm-1137  - IBM01140  - IBM01141  - IBM01142  - IBM01143  - IBM01144  - IBM01145  - IBM01146  - IBM01147  - IBM01148  - IBM01149  - ibm-1153  - ibm-1154  - ibm-1155  - ibm-1156  - ibm-1157  - ibm-1158  - ibm-1160  - ibm-1164  - ibm-1364  - ibm-1371  - ibm-1388  - ibm-1390  - ibm-1399  - ibm-5123  - ibm-8482  - ibm-16684  - ibm-4899  - ibm-4971  - ebcdic-he  - ebcdic-ar  - ibm-37_P100-1995,swaplfnl  - ibm-1047_P100-1995,swaplfnl  - ibm-1140_P100-1997,swaplfnl  - ibm-1142_P100-1997,swaplfnl  - ibm-1143_P100-1997,swaplfnl  - ibm-1144_P100-1997,swaplfnl  - ibm-1145_P100-1997,swaplfnl  - ibm-1146_P100-1997,swaplfnl  - ibm-1147_P100-1997,swaplfnl  - ibm-1148_P100-1997,swaplfnl  - ibm-1149_P100-1997,swaplfnl  - ibm-1153_P100-1999,swaplfnl  - ibm-12712_P100-1998,swaplfnl  - ibm-16804_X110-1999,swaplfnl  - ebcdic-xml-us',
                                РазделительСтрок: 'Задается строка, являющаяся разделителем строк, из которой при чтении файла будет сформирован символ ПС.  Если строка пустая, то разделители строк при чтении не конвертируются. Допустимые варианты разделителей строк:   - ВК;  - ПС;  - ВК + ПС (значение по умолчанию - может не указываться). При использовании других строк в качестве разделителей будет вызвано исключение. Значение по умолчанию: ВК + ПС.'
                            }
                        }
                    }
                },
                "УдалитьСтроку": {
                    name: 'УдалитьСтроку',
                    name_en: 'DeleteLine',
                    description: 'Удаляет из текстового документа строку с указанным номером.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(НомерСтроки: Число)',
                            Параметры: {
                                НомерСтроки: 'Номер удаляемой строки.'
                            }
                        }
                    }
                },
                "УстановитьТекст": {
                    name: 'УстановитьТекст',
                    name_en: 'SetText',
                    description: 'Устанавливает в текстовый документ текст из переданной строки. Текст, содержащийся в текстовом документе до исполнения метода, удаляется.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ТекстДляУстановки: Строка)',
                            Параметры: {
                                ТекстДляУстановки: 'Текст, помещаемый в текстовый документ.'
                            }
                        }
                    }
                },
                "УстановитьТипФайла": {
                    name: 'УстановитьТипФайла',
                    name_en: 'SetFileType',
                    description: 'Устанавливает кодировку файла, в которой будет сохранен текстовый документ при интерактивной записи (например, при выборе пункта "Файл - Печать").',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Тип?: КодировкаТекста)',
                            Параметры: {
                                Тип: 'Устанавливаемый тип файла.  Тип файла может быть задан как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки. Поддерживаемые названия кодировок:   - UTF-8  - UTF-16  - UTF-16BE  - UTF-16LE  - UTF-32  - UTF-32BE  - UTF-32LE  - UTF16_PlatformEndian  - UTF16_OppositeEndian  - UTF32_PlatformEndian  - UTF32_OppositeEndian  - UTF-7  - IMAP-mailbox-name  - SCSU  - BOCU-1  - CESU-8  - ISO-8859-1  - US-ASCII  - gb18030  - IBM367  - iso-8859-2  - iso-8859-3  - iso-8859-4  - iso-8859-5  - iso-8859-6  - iso-8859-7  - iso-8859-8  - iso-8859-9  - iso-8859-13  - iso-8859-15  - cp932  - Shift_JIS  - EUC-JP  - cp33722  - windows-950  - Big5  - cp950  - Big5-HKSCS  - cp1386  - GBK  - GB2312  - GB_2312-80  - cp964  - cp949  - cp949c  - EUC-KR  - ibm-971  - KSC_5601  - ibm-1363  - windows-949  - windows-874  - cp874  - ibm-1162  - cp437  - cp737  - cp775  - cp850  - cp851  - cp852  - cp855  - cp856  - cp857  - cp858  - cp860  - cp861  - cp862  - cp863  - cp864  - cp865  - cp866  - ibm-867  - CP868  - cp869  - KOI8-R  - ibm-901  - ibm-902  - cp922  - KOI8-U  - ibm-4909  - windows-1250  - windows-1251  - windows-1252  - windows-1253  - windows-1254  - windows-1255  - windows-1256  - windows-1257  - windows-1258  - macintosh  - x-mac-greek  - x-mac-cyrillic  - x-mac-centraleurroman  - x-mac-turkish  - hp-roman8  - Adobe-Standard-Encoding  - cp1006  - cp1098  - cp1124  - cp1125  - ibm-1129  - cp1131  - ibm-1133  - ISO-2022-JP  - JIS_Encoding  - ISO-2022-JP-2  - ISO_2022,locale=ja,version=3  - ISO_2022,locale=ja,version=4  - ISO-2022-KR  - ISO_2022,locale=ko,version=1  - ISO-2022-CN  - ISO-2022-CN-EXT  - HZ-GB-2312  - windows-57002  - windows-57003  - windows-57011  - windows-57010  - windows-57007  - windows-57004  - windows-57005  - windows-57008  - windows-57009  - LMBCS-1  - LMBCS-2  - LMBCS-3  - LMBCS-4  - LMBCS-5  - LMBCS-6  - LMBCS-8  - LMBCS-11  - LMBCS-16  - LMBCS-17  - LMBCS-18  - LMBCS-19  - IBM037  - ebcdic-de  - ebcdic-dk  - IBM278  - IBM280  - IBM284  - IBM285  - IBM290  - IBM297  - IBM420  - IBM424  - IBM500  - ibm-803  - IBM-Thai  - IBM870  - IBM871  - cp875  - IBM918  - cp930  - cp933  - cp935  - cp937  - cp939  - cp1025  - IBM1026  - IBM1047  - cp1097  - cp1112  - cp1122  - cp1123  - ibm-1130  - ibm-1132  - ibm-1137  - IBM01140  - IBM01141  - IBM01142  - IBM01143  - IBM01144  - IBM01145  - IBM01146  - IBM01147  - IBM01148  - IBM01149  - ibm-1153  - ibm-1154  - ibm-1155  - ibm-1156  - ibm-1157  - ibm-1158  - ibm-1160  - ibm-1164  - ibm-1364  - ibm-1371  - ibm-1388  - ibm-1390  - ibm-1399  - ibm-5123  - ibm-8482  - ibm-16684  - ibm-4899  - ibm-4971  - ebcdic-he  - ebcdic-ar  - ibm-37_P100-1995,swaplfnl  - ibm-1047_P100-1995,swaplfnl  - ibm-1140_P100-1997,swaplfnl  - ibm-1142_P100-1997,swaplfnl  - ibm-1143_P100-1997,swaplfnl  - ibm-1144_P100-1997,swaplfnl  - ibm-1145_P100-1997,swaplfnl  - ibm-1146_P100-1997,swaplfnl  - ibm-1147_P100-1997,swaplfnl  - ibm-1148_P100-1997,swaplfnl  - ibm-1149_P100-1997,swaplfnl  - ibm-1153_P100-1999,swaplfnl  - ibm-12712_P100-1998,swaplfnl  - ibm-16804_X110-1999,swaplfnl  - ebcdic-xml-us  Значение по умолчанию: UTF8.'
                            }
                        }
                    }
                },
            },
            properties: {
                "Вывод": {
                    name: 'Вывод',
                    name_en: 'Output',
                    description: 'Ограничение вывода на печать, сохранения, работы с буфером обмена.'
                },
                "ИспользуемоеИмяФайла": {
                    name: 'ИспользуемоеИмяФайла',
                    name_en: 'UsedFileName',
                    description: 'Содержит полное имя файла, которое будет использоваться при сохранении текстового документа пользователем.  Данное свойство будет заполняться: 1. при программной установке значения; 2. при интерактивном открытии документа из файла; 3. при вызове метода Показать, если в нем указано имя файла; 4. при вызове пользователем команды "Сохранить как…".'
                },
                "КодЯзыкаМакета": {
                    name: 'КодЯзыкаМакета',
                    name_en: 'TemplateLanguageCode',
                    description: 'Содержит код языка, который используется для получения областей методом ПолучитьОбласть в текстовом макете. В случае, когда свойство содержит значение Неопределено, код языка макета определяется из настроек текущего пользователя. Если для текущего пользователя не определен код языка, или пользователи не заданы, то код языка выбирается из свойства "Основной язык" конфигурации.'
                },
                "Параметры": {
                    name: 'Параметры',
                    name_en: 'Parameters',
                    description: 'Коллекция параметров для текстового макета.'
                },
                "РазделительСтрок": {
                    name: 'РазделительСтрок',
                    name_en: 'LineSeparator',
                    description: 'Определяет разделитель строк. Может принимать только следующие значения: ВК, ПС или ВК + ПС. При попытке установки других значений будет инициировано исключение.'
                },
                "ТолькоПросмотр": {
                    name: 'ТолькоПросмотр',
                    name_en: 'ReadOnly',
                    description: 'Содержит признак того, что текстовый документ открыт в режиме просмотра. В режиме просмотра содержимое текстового документа не доступно для редактирования. Истина - режим просмотра.'
                },
            },
            constructors: {
                "По умолчанию": {
                    signature: '()'
                },
            }
        },
        "УникальныйИдентификатор": {
            name: 'УникальныйИдентификатор',
            name_en: 'UUID',
            description: 'Предназначен для создания и хранения глобального уникального идентификатора GUID.',
            constructors: {
                "Из строки": {
                    description: 'Создает уникальный идентификатор из указанной строки GUID. Уникальность полученного таким образом идентификатора определяется уникальностью строки и поэтому не гарантирована.',
                    signature: '(Строка: Строка)',
                    params: {
                        "Строка": 'Строка GUID. Строка задается в виде "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX", где Х - символы обозначающие шестнадцатеричное число.'
                    }
                },
                "По умолчанию": {
                    description: 'Создает новый уникальный идентификатор.',
                    signature: '()'
                },
            }
        },
        "Файл": {
            name: 'Файл',
            name_en: 'File',
            description: 'Используется для доступа к параметрам файлов или каталогов. Необходимо отметить, что данный объект не предназначен для чтения и записи из файлов. Для работы на веб-клиенте, необходимо предварительно подключить расширение работы с файлами.',
            methods: {
                "НачатьПолучениеВремениИзменения": {
                    name: 'НачатьПолучениеВремениИзменения',
                    name_en: 'BeginGettingModificationTime',
                    description: 'Начинает получение времени последного изменения файла.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения)',
                            Параметры: {
                                ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <ВремяИзменения> - помещается время изменения файла, тип Дата.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.'
                            }
                        }
                    }
                },
                "НачатьПолучениеНевидимости": {
                    name: 'НачатьПолучениеНевидимости',
                    name_en: 'BeginGettingHidden',
                    description: 'Начинает получение атрибута файла "Скрытый" ("Hidden").',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ОписаниеОповещения?: Произвольный)',
                            Параметры: {
                                ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения получения атрибута "Скрытый" со следующими параметрами:    - <Невидимый> - помещается признак невидимости, тип Булево. Истина, если файл невидимый.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.'
                            }
                        }
                    }
                },
                "НачатьПолучениеРазмера": {
                    name: 'НачатьПолучениеРазмера',
                    name_en: 'BeginGettingSize',
                    description: 'Начинает получение размера файла.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения)',
                            Параметры: {
                                ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <Размер> - размер файла, тип Число.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.'
                            }
                        }
                    }
                },
                "НачатьПолучениеТолькоЧтения": {
                    name: 'НачатьПолучениеТолькоЧтения',
                    name_en: 'BeginGettingReadOnly',
                    description: 'Начинает получение значение атрибута файла "Только чтение" ("Read only").',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения)',
                            Параметры: {
                                ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:   - <ТолькоЧтение> - Тип: Булево. Истина - у файла установлен атрибут "Только чтение"; Ложь - в противном случае.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.'
                            }
                        }
                    }
                },
                "НачатьПолучениеУниверсальногоВремениИзменения": {
                    name: 'НачатьПолучениеУниверсальногоВремениИзменения',
                    name_en: 'BeginGettingModificationUniversalTime',
                    description: 'Начинает получение универсального времени последнего изменения файла.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения)',
                            Параметры: {
                                ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <ВремяИзменения> - универсальное время изменения файла, тип Дата.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.'
                            }
                        }
                    }
                },
                "НачатьПроверкуСуществования": {
                    name: 'НачатьПроверкуСуществования',
                    name_en: 'BeginCheckingExistence',
                    description: 'Начинает проверку существования файла.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения)',
                            Параметры: {
                                ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <Существует> - помещается признак существования, тип Булево. Истина, если файл существует.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.'
                            }
                        }
                    }
                },
                "НачатьПроверкуЭтоКаталог": {
                    name: 'НачатьПроверкуЭтоКаталог',
                    name_en: 'BeginCheckingIsDirectory',
                    description: 'Начинает определение, соответствует ли файловый объект каталогу или файлу.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения)',
                            Параметры: {
                                ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <ЭтоКаталог> - результат проверки.Тип: Булево. Истина - объект соответствует каталогу; Ложь - объект соответствует файлу.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.'
                            }
                        }
                    }
                },
                "НачатьПроверкуЭтоФайл": {
                    name: 'НачатьПроверкуЭтоФайл',
                    name_en: 'BeginCheckingIsFile',
                    description: 'Начинает определение, соответствует ли файловый объект файлу или каталогу.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения)',
                            Параметры: {
                                ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <ЭтоФайл> - время изменения файла, тип Булево. Истина - объект соответствует файлу; Ложь - объект соответствует каталогу.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.'
                            }
                        }
                    }
                },
                "НачатьУстановкуВремениИзменения": {
                    name: 'НачатьУстановкуВремениИзменения',
                    name_en: 'BeginSettingModificationTime',
                    description: 'Начинает установку времени изменения.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ОписаниеОповещения?: ОписаниеОповещения, ВремяИзменения: Дата)',
                            Параметры: {
                                ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                                ВремяИзменения: 'Устанавливаемое местное время изменения.'
                            }
                        }
                    }
                },
                "НачатьУстановкуНевидимости": {
                    name: 'НачатьУстановкуНевидимости',
                    name_en: 'BeginSettingHidden',
                    description: 'Начинает установку значения атрибута файла "Скрытый" ("Hidden").',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ОписаниеОповещения?: ОписаниеОповещения, Невидимость: Булево)',
                            Параметры: {
                                ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                                Невидимость: 'Истина - установить атрибут "Скрытый", Ложь - снять атрибут "Скрытый".'
                            }
                        }
                    }
                },
                "НачатьУстановкуТолькоЧтения": {
                    name: 'НачатьУстановкуТолькоЧтения',
                    name_en: 'BeginSettingReadOnly',
                    description: 'Начинает установку атрибута файла "Только чтение".',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ОписаниеОповещения?: ОписаниеОповещения, ТолькоЧтение: Булево)',
                            Параметры: {
                                ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                                ТолькоЧтение: 'Истина - установить атрибут "Только чтение", Ложь - снять атрибут "Только чтение".'
                            }
                        }
                    }
                },
                "НачатьУстановкуУниверсальногоВремениИзменения": {
                    name: 'НачатьУстановкуУниверсальногоВремениИзменения',
                    name_en: 'BeginSettingModificationUniversalTime',
                    description: 'Начинает установку времени последнего изменения файла.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ОписаниеОповещения?: ОписаниеОповещения, ВремяИзменения: Дата)',
                            Параметры: {
                                ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
                                ВремяИзменения: 'Универсальное время, которое будет установлено файлу как время последнего изменения.'
                            }
                        }
                    }
                },
                "ПолучитьВремяИзменения": {
                    name: 'ПолучитьВремяИзменения',
                    name_en: 'GetModificationTime',
                    description: 'Получает время последнего изменения файла.',
                    returns: 'Тип: Дата. Местное время последнего изменения файла.'
                },
                "ПолучитьНевидимость": {
                    name: 'ПолучитьНевидимость',
                    name_en: 'GetHidden',
                    description: 'Получает значение атрибута файла "Скрытый" ("Hidden").',
                    returns: 'Тип: Булево. Истина - у файла установлен атрибут "Скрытый"; Ложь - в противном случае.'
                },
                "ПолучитьПредставлениеФайлаБиблиотекиМобильногоУстройства": {
                    name: 'ПолучитьПредставлениеФайлаБиблиотекиМобильногоУстройства',
                    name_en: 'GetMobileDeviceLibraryFilePresentation',
                    description: 'Возвращает представление файла в библиотеке мультимедиа мобильного устройства.',
                    returns: 'Тип: Строка. '
                },
                "ПолучитьТолькоЧтение": {
                    name: 'ПолучитьТолькоЧтение',
                    name_en: 'GetReadOnly',
                    description: 'Получает значение атрибута файла "Только чтение" ("Read only").',
                    returns: 'Тип: Булево. Истина - у файла установлен атрибут "Только чтение"; Ложь - в противном случае.'
                },
                "ПолучитьУниверсальноеВремяИзменения": {
                    name: 'ПолучитьУниверсальноеВремяИзменения',
                    name_en: 'GetModificationUniversalTime',
                    description: 'Получает универсальное время последнего изменения файла.',
                    returns: 'Тип: Дата. Универсальное время последнего изменения файла.'
                },
                "Размер": {
                    name: 'Размер',
                    name_en: 'Size',
                    description: 'Определяет размер файла (в байтах).',
                    returns: 'Тип: Число. '
                },
                "Существует": {
                    name: 'Существует',
                    name_en: 'Exist',
                    description: 'Определяет, существует ли файл, соответствующий данному объекту.',
                    returns: 'Тип: Булево. Истина - файл существует; Ложь - в противном случае.'
                },
                "УстановитьВремяИзменения": {
                    name: 'УстановитьВремяИзменения',
                    name_en: 'SetModificationTime',
                    description: 'Устанавливает время последнего изменения файла.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ВремяИзменения: Дата)',
                            Параметры: {
                                ВремяИзменения: 'Устанавливаемое местное время изменения файла.'
                            }
                        }
                    }
                },
                "УстановитьНевидимость": {
                    name: 'УстановитьНевидимость',
                    name_en: 'SetHidden',
                    description: 'Устанавливает значение атрибута файла "Скрытый" ("Hidden").',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Невидимость: Булево)',
                            Параметры: {
                                Невидимость: 'Истина - установить атрибут "Скрытый", Ложь - снять атрибут "Скрытый".'
                            }
                        }
                    }
                },
                "УстановитьТолькоЧтение": {
                    name: 'УстановитьТолькоЧтение',
                    name_en: 'SetReadOnly',
                    description: 'Устанавливает значение атрибута файла "Только чтение" ("Read only").',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ТолькоЧтение: Булево)',
                            Параметры: {
                                ТолькоЧтение: 'Истина - установить атрибут "Только чтение", Ложь - снять атрибут "Только чтение".'
                            }
                        }
                    }
                },
                "УстановитьУниверсальноеВремяИзменения": {
                    name: 'УстановитьУниверсальноеВремяИзменения',
                    name_en: 'SetModificationUniversalTime',
                    description: 'Устанавливает время последнего изменения файла.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ВремяИзменения: Дата)',
                            Параметры: {
                                ВремяИзменения: 'Универсальное время, которое будет установлено файлу как время последнего изменения.'
                            }
                        }
                    }
                },
                "ЭтоКаталог": {
                    name: 'ЭтоКаталог',
                    name_en: 'IsDirectory',
                    description: 'Определяет, соответствует ли файловый объект каталогу или файлу.',
                    returns: 'Тип: Булево. Истина - объект соответствует каталогу; Ложь - объект соответствует файлу.'
                },
                "ЭтоФайл": {
                    name: 'ЭтоФайл',
                    name_en: 'IsFile',
                    description: 'Определяет, соответствует ли файловый объект файлу или каталогу.',
                    returns: 'Тип: Булево. Истина - объект соответствует файлу; Ложь - объект соответствует каталогу.'
                },
            },
            properties: {
                "Имя": {
                    name: 'Имя',
                    name_en: 'Name',
                    description: 'Содержит имя файла, с которым связан объект.'
                },
                "ИмяБезРасширения": {
                    name: 'ИмяБезРасширения',
                    name_en: 'BaseName',
                    description: 'Содержит имя файла (без расширения), с которым связан объект. Пример: если Файл.ПолноеИмя = "c:\\temp\\test.txt", то Файл.ИмяБезРасширения = "test".'
                },
                "ПолноеИмя": {
                    name: 'ПолноеИмя',
                    name_en: 'FullName',
                    description: 'Содержит полное имя файла (включающее путь к файлу), с которым связан объект.'
                },
                "Путь": {
                    name: 'Путь',
                    name_en: 'Path',
                    description: 'Содержит путь к файлу, с которым связан объект. Пример: если Файл.ПолноеИмя = "c:\\temp\\test.txt", то Файл.Путь = "c:\\temp\\".'
                },
                "Расширение": {
                    name: 'Расширение',
                    name_en: 'Extension',
                    description: 'Содержит расширение имени файла, с которым связан объект. Пример: если Файл.ПолноеИмя = "c:\\temp\\test.txt", то Файл.Расширение = ".txt".'
                },
            },
            constructors: {
                "По имени файла": {
                    description: 'Создает новый файловый объект, связанный с указанным файлом.',
                    signature: '(Имя: Строка)',
                    params: {
                        "Имя": 'Полное имя файла или каталога, с которым будет связан конструируемый объект.'
                    }
                },
                "По умолчанию": {
                    description: 'Создает объект Файл, который впоследствии должен быть инициализирован с помощью метода НачатьИнициализацию.',
                    signature: '()'
                },
            }
        },
        "ФиксированнаяСтруктура": {
            name: 'ФиксированнаяСтруктура',
            name_en: 'FixedStructure',
            description: 'Представляет собой фиксированную коллекцию пар КлючИЗначение. При этом ключ может быть только строковым и должен удовлетворять требованиям, предъявляемым к именованию переменных встроенного языка.  К значениям структуры можно обращаться как к свойствам объекта. При этом ключ используется как имя свойства. Предназначен для использования в качестве значений параметров сеанса.',
            methods: {
                "Количество": {
                    name: 'Количество',
                    name_en: 'Count',
                    description: 'Получает количество свойств объекта.',
                    returns: 'Тип: Число. '
                },
                "Свойство": {
                    name: 'Свойство',
                    name_en: 'Property',
                    description: 'Получает значение свойства структуры.',
                    returns: 'Тип: Булево. Истина - свойство найдено; Ложь в противном случае.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Ключ: Строка, НайденноеЗначение?: Произвольный): Булево',
                            Параметры: {
                                Ключ: 'Ключ для поиска свойства.',
                                НайденноеЗначение: 'В данный параметр возвращается найденное значение. Если ключа нет в структуре, то возвращается Неопределено.'
                            }
                        }
                    }
                },
            },
            constructors: {
                "Из структуры": {
                    description: 'Создает неизменяемую копию объекта типа Структура.',
                    signature: '(Структура: Структура)',
                    params: {
                        "Структура": 'Исходная структура. Все ее свойства и значения будут скопированы.'
                    }
                },
                "По ключам и значениям": {
                    description: 'Создает структуру с ключами, значения которых передаются в параметре конструктора. Если в первом параметре заданы ключи элементов структуры, то в следующих параметрах могут быть указаны значения этих элементов в том порядке, в котором они расположены в строке в параметре Ключ.',
                    signature: '(Ключ: Строка, Значения?: Произвольный)',
                    params: {
                        "Ключ": 'Список свойств структуры, указанных через запятую.',
                        "Значения": 'Значения элементов структуры.'
                    }
                },
                "По умолчанию": {
                    signature: '()'
                },
            }
        },
        "ФиксированноеСоответствие": {
            name: 'ФиксированноеСоответствие',
            name_en: 'FixedMap',
            description: 'Представляет собой неизменяемую коллекцию пар КлючИЗначение. В качестве ключа может выступать любое значение. Рекомендуется, чтобы в качестве ключа выступало значение примитивного типа или другого типа, значение которого может только присваиваться, но не может менять свое содержимое.',
            methods: {
                "Количество": {
                    name: 'Количество',
                    name_en: 'Count',
                    description: 'Получает количество пар КлючИЗначение, хранимых в объекте.',
                    returns: 'Тип: Число. '
                },
                "Получить": {
                    name: 'Получить',
                    name_en: 'Get',
                    description: 'Получает значение по ключу.',
                    returns: 'Тип: Произвольный. Неопределено - ключ не найден.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Ключ: Произвольный): Произвольный',
                            Параметры: {
                                Ключ: 'Ключ значения.'
                            }
                        }
                    }
                },
            },
            constructors: {
                "Из соответствия": {
                    description: 'Строит фиксированную копию объекта типа Соответствие.',
                    signature: '(Соответствие: Соответствие)',
                    params: {
                        "Соответствие": 'Исходный объект.'
                    }
                },
            }
        },
        "ФиксированныйМассив": {
            name: 'ФиксированныйМассив',
            name_en: 'FixedArray',
            description: 'Неизменяемый массив. Заполняется системой при инициализации объектов данного типа или с помощью конструктора.',
            methods: {
                "ВГраница": {
                    name: 'ВГраница',
                    name_en: 'UBound',
                    description: 'Возвращает наибольший индекс элемента массива. Соответствует Количество()-1.',
                    returns: 'Тип: Число. '
                },
                "Количество": {
                    name: 'Количество',
                    name_en: 'Count',
                    description: 'Получает количество элементов массива.',
                    returns: 'Тип: Число. '
                },
                "Найти": {
                    name: 'Найти',
                    name_en: 'Find',
                    description: 'Выполняет поиск элемента в массиве.',
                    returns: 'Тип: Число, Неопределено. Если элемент найден, возвращается его порядковый номер. Если элемент не найден, возвращается Неопределено.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Значение: Произвольный): Число|Неопределено',
                            Параметры: {
                                Значение: 'Искомое значение.'
                            }
                        }
                    }
                },
                "Получить": {
                    name: 'Получить',
                    name_en: 'Get',
                    description: 'Получает значение по индексу. Тип возвращаемого значения определяется типом хранящихся в коллекции значений.',
                    returns: 'Тип: Произвольный. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число): Произвольный',
                            Параметры: {
                                Индекс: 'Индекс элемента.'
                            }
                        }
                    }
                },
            },
            constructors: {
                "На основании обычного массива": {
                    description: 'Создает фиксированный массив из обычного массива.',
                    signature: '(Массив: Массив)',
                    params: {
                        "Массив": 'Исходный массив.'
                    }
                },
            }
        },
        "ХешированиеДанных": {
            name: 'ХешированиеДанных',
            name_en: 'DataHashing',
            description: 'Реализует инкрементальный расчет хеш-суммы по добавленным данным. Способ расчета и тип вычисляемого значения определяются типом хеш-функции.',
            methods: {
                "Добавить": {
                    name: 'Добавить',
                    name_en: 'Append',
                    signature: {
                        ДобавитьДвоичныеДанные: {
                            СтрокаПараметров: '(ДвоичныеДанные: ДвоичныеДанные)',
                            Параметры: {
                                ДвоичныеДанные: 'Добавляемые двоичные данные.'
                            }
                        },
                        ДобавитьТекстовыеДанные: {
                            СтрокаПараметров: '(Текст: Строка)',
                            Параметры: {
                                Текст: 'Добавляемые текстовые данные (в UTF8 кодировке).'
                            }
                        }
                    }
                },
                "ДобавитьФайл": {
                    name: 'ДобавитьФайл',
                    name_en: 'AppendFile',
                    description: 'Обновляет хеш-сумму, с учетом добавления двоичных данных из указанного файла.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ИмяФайла: Строка)',
                            Параметры: {
                                ИмяФайла: 'Имя файла с двоичными данными.'
                            }
                        }
                    }
                },
            },
            properties: {
                "ХешСумма": {
                    name: 'ХешСумма',
                    name_en: 'HashSum',
                    description: 'Содержит текущее значение хеш-суммы. Для функций MD5, SHA1 и SHA256 – значение типа ДвоичныеДанные, для функции CRC32 – Число.'
                },
                "ХешФункция": {
                    name: 'ХешФункция',
                    name_en: 'HashFunction',
                    description: 'Содержит тип хеш-функции. Определяет способ вычисления хеш-суммы и тип вычисляемого значения.'
                },
            },
            constructors: {
                "По указанной хеш-функции": {
                    description: 'Создает объект, реализующий инкрементальный расчет хеш-суммы по добавленным данным. Способ расчета и тип вычисляемого значения определяются указанным типом хеш-функции.',
                    signature: '(ХешФункция: ХешФункция)',
                    params: {
                        "ХешФункция": 'Тип хеш-функции.'
                    }
                },
            }
        },
        "ЧтениеXML": {
            name: 'ЧтениеXML',
            name_en: 'XMLReader',
            description: 'Предназначен для последовательного чтения XML-данных из файла или строки. Автоматически обрабатывает объявление XML-документа и распознает тип кодировки файла.',
            methods: {
                "URIПространстваИменАтрибута": {
                    name: 'URIПространстваИменАтрибута',
                    name_en: 'AttributeNamespaceURI',
                    description: 'Получает URI пространства имен атрибута по индексу. Так как атрибуты могут быть только у элемента XML, доступ к ним может осуществляться только при прочтении узла, имеющего тип НачалоЭлемента.',
                    returns: 'Тип: Строка. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число): Строка',
                            Параметры: {
                                Индекс: 'Индекс атрибута.'
                            }
                        }
                    }
                },
                "Закрыть": {
                    name: 'Закрыть',
                    name_en: 'Close',
                    description: 'Прекращает чтение XML из файла или строки. Если никакого чтения в момент вызова данного метода не выполнялось, то метод ничего не делает.'
                },
                "ЗначениеАтрибута": {
                    name: 'ЗначениеАтрибута',
                    name_en: 'AttributeValue',
                    description: 'Получает значение атрибута.',
                    returns: 'Тип: Строка, Неопределено. Если атрибут найден, то метод возвращает строку, представляющую значение атрибута. Если атрибут в соответствии с заданными параметрами не найден, то метод возвращает значение Неопределено.',
                    signature: {
                        ПоНомеру: {
                            СтрокаПараметров: '(НомерАтрибута: Число): Строка|Неопределено',
                            Параметры: {
                                НомерАтрибута: 'Порядковый номер атрибута, начиная с 0.'
                            }
                        },
                        ПоПолномуИмени: {
                            СтрокаПараметров: '(ПолноеИмяАтрибута: Строка): Строка|Неопределено',
                            Параметры: {
                                ПолноеИмяАтрибута: 'Полное имя атрибута, включающее префикс.'
                            }
                        },
                        ПоЛокальномуИмениИПространствуИмен: {
                            СтрокаПараметров: '(ЛокальноеИмяАтрибута: Строка, URIПространстваИмен: Строка): Строка|Неопределено',
                            Параметры: {
                                ЛокальноеИмяАтрибута: 'Локальное имя атрибута, не включая префикс.',
                                URIПространстваИмен: 'URI пространства имен для локального имени атрибута.'
                            }
                        }
                    }
                },
                "ИмяАтрибута": {
                    name: 'ИмяАтрибута',
                    name_en: 'AttributeName',
                    description: 'Получает имя атрибута по индексу. Так как атрибуты могут быть только у элемента XML, доступ к ним может осуществляться только при прочтении узла, имеющего тип НачалоЭлемента.',
                    returns: 'Тип: Строка. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число): Строка',
                            Параметры: {
                                Индекс: 'Индекс в списке атрибутов.'
                            }
                        }
                    }
                },
                "КоличествоАтрибутов": {
                    name: 'КоличествоАтрибутов',
                    name_en: 'AttributeCount',
                    description: 'Получает количество атрибутов у последнего прочитанного узла XML. Так как атрибуты могут быть только у элемента XML, доступ к ним может осуществляться только при прочтении узла, имеющего тип НачалоЭлемента.',
                    returns: 'Тип: Число. '
                },
                "ЛокальноеИмяАтрибута": {
                    name: 'ЛокальноеИмяАтрибута',
                    name_en: 'AttributeLocalName',
                    description: 'Получает локальное имя атрибута по индексу. Так как атрибуты могут быть только у элемента XML, доступ к ним может осуществляться только при прочтении узла, имеющего тип НачалоЭлемента.',
                    returns: 'Тип: Строка. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число): Строка',
                            Параметры: {
                                Индекс: 'Индекс атрибута.'
                            }
                        }
                    }
                },
                "ОткрытьФайл": {
                    name: 'ОткрытьФайл',
                    name_en: 'OpenFile',
                    description: 'Открывает XML-файл для чтения данным объектом. Если перед вызовом данного метода уже производилось чтение XML из другого файла или строки, то чтение прекращается и объект инициализируется для чтения из указанного файла.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ИмяФайлаXML: Строка, Параметры?: ПараметрыЧтенияXML, НаборСхемXML?: НаборСхемXML, Кодировка?: Строка)',
                            Параметры: {
                                ИмяФайлаXML: 'Имя файла, содержащего текст XML.',
                                Параметры: 'Параметры чтения, которые будут использоваться при чтении данных XML.',
                                НаборСхемXML: 'Набор схем XML, используемых при проверки читаемого документа XML. Если набор схем указан, но не проверен и включена проверка документа XML, то будет выполнена проверка набора схем.',
                                Кодировка: 'Позволяет задать кодировку входного файла. Следует указывать для файлов в кодировках:    - Big5 (Big5)  - UTF-32 (UTF-32)  - UTF-32BE (UTF-32BE)  - UTF-32LE (UTF-32LE)  - UTF32_PlatformEndian (UTF32_PlatformEndian)  - UTF32_OppositeEndian (UTF32_OppositeEndian)  - SCSU (SCSU)  - BOCU-1 (BOCU-1)  - US-ASCII (US-ASCII)  - ISO-8859-1 (ISO-8859-1)  - iso-8859-13 (iso-8859-13)  - iso-8859-15 (iso-8859-15)  - iso-8859-2 (iso-8859-2)  - iso-8859-3 (iso-8859-3)  - iso-8859-4 (iso-8859-4)  - iso-8859-6 (iso-8859-6)  - iso-8859-7 (iso-8859-7)  - iso-8859-8 (iso-8859-8)  - iso-8859-9 (iso-8859-9)  - GB_2312-80 (GB_2312-80)  - cp437 (cp437)  - cp737 (cp737)  - cp775 (cp775)  - cp850 (cp850)  - cp851 (cp851)  - cp852 (cp852)  - cp856 (cp856)  - cp857 (cp857)  - cp858 (cp858)  - cp860 (cp860)  - cp861 (cp861)  - cp862 (cp862)  - cp863 (cp863)  - cp864 (cp864)  - cp865 (cp865)  - CP868 (CP868)  - cp869 (cp869)  - cp874 (cp874)  - cp875 (cp875)  - cp922 (cp922)  - cp930 (cp930)  - cp933 (cp933)  - cp935 (cp935)  - cp937 (cp937)  - cp939 (cp939)  - cp1006 (cp1006)  - cp1025 (cp1025)  - cp1097 (cp1097)  - cp1098 (cp1098)  - cp1112 (cp1112)  - cp1122 (cp1122)  - cp1123 (cp1123)  - windows-874 (windows-874)  - windows-950 (windows-950)  - windows-1250 (windows-1250)  - windows-1252 (windows-1252)  - windows-1253 (windows-1253)  - windows-1254 (windows-1254)  - windows-1255 (windows-1255)  - windows-1256 (windows-1256)  - windows-1257 (windows-1257)  - windows-1258 (windows-1258)  - macintosh (macintosh)  - x-mac-greek (x-mac-greek)  - x-mac-centraleurroman (x-mac-centraleurroman)  - x-mac-turkish (x-mac-turkish)  - hp-roman8 (hp-roman8)  - Adobe-Standard-Encoding (Adobe-Standard-Encoding)  - ISO-2022-KR (ISO-2022-KR)  - ISO-2022-CN (ISO-2022-CN)  - ISO-2022-CN-EXT (ISO-2022-CN-EXT)  - HZ-GB-2312 (HZ-GB-2312)  - windows-57002 (windows-57002)  - windows-57003 (windows-57003)  - windows-57004 (windows-57004)  - windows-57005 (windows-57005)  - windows-57007 (windows-57007)  - windows-57008 (windows-57008)  - windows-57009 (windows-57009)  - windows-57010 (windows-57010)  - windows-57011 (windows-57011)  - ebcdic-ar (ebcdic-ar)  - ebcdic-de (ebcdic-de)  - ebcdic-dk (ebcdic-dk)  - ebcdic-he (ebcdic-he)  - ebcdic-xml-us (ebcdic-xml-us)  - IBM037 (IBM037)  - IBM278 (IBM278)  - IBM280 (IBM280)  - IBM284 (IBM284)  - IBM285 (IBM285)  - IBM290 (IBM290)  - IBM297 (IBM297)  - IBM367 (IBM367)  - IBM420 (IBM420)  - IBM424 (IBM424)  - IBM500 (IBM500)  - ibm-803 (ibm-803)  - IBM-Thai (IBM-Thai)  - ibm-867 (ibm-867)  - IBM870 (IBM870)  - IBM871 (IBM871)  - ibm-901 (ibm-901)  - ibm-902 (ibm-902)  - IBM918 (IBM918)  - ibm-971 (ibm-971)  - IBM1026 (IBM1026)  - ibm-1129 (ibm-1129)  - IBM1047 (IBM1047)  - ibm-1130 (ibm-1130)  - ibm-1132 (ibm-1132)  - ibm-1133 (ibm-1133)  - ibm-1137 (ibm-1137)  - IBM01140 (IBM01140)  - IBM01141 (IBM01141)  - IBM01142 (IBM01142)  - IBM01143 (IBM01143)  - IBM01144 (IBM01144)  - IBM01145 (IBM01145)  - IBM01146 (IBM01146)  - IBM01147 (IBM01147)  - IBM01148 (IBM01148)  - IBM01149 (IBM01149)  - ibm-1153 (ibm-1153)  - ibm-1154 (ibm-1154)  - ibm-1155 (ibm-1155)  - ibm-1156 (ibm-1156)  - ibm-1157 (ibm-1157)  - ibm-1158 (ibm-1158)  - ibm-1160 (ibm-1160)  - ibm-1162 (ibm-1162)  - ibm-1164 (ibm-1164)  - ibm-1364 (ibm-1364)  - ibm-1371 (ibm-1371)  - ibm-1388 (ibm-1388)  - ibm-1390 (ibm-1390)  - ibm-1399 (ibm-1399)  - ibm-4899 (ibm-4899)  - ibm-4971 (ibm-4971)  - ibm-4909 (ibm-4909)  - ibm-5123 (ibm-5123)  - ibm-8482 (ibm-8482)  - ibm-16684 (ibm-16684)'
                            }
                        }
                    }
                },
                "ПервоеОбъявление": {
                    name: 'ПервоеОбъявление',
                    name_en: 'FirstDeclaration',
                    description: 'Осуществляет переход к первому определению DTD. В случае, если текущий узел является ОпределениеТипаДокумента (DTD), текущий узел позиционируется на первое объявление DTD. Вызов метода ЧтениеXML.Прочитать прерывает процесс чтения DTD и позиционирует текущий узел на следующий после DTD.',
                    returns: 'Тип: Булево. Истина - позиционирование на объявление прошло удачно, Ложь - в противном случае.'
                },
                "ПервыйАтрибут": {
                    name: 'ПервыйАтрибут',
                    name_en: 'FirstAttribute',
                    description: 'Позиционирует текущее состояние объекта на первый атрибут текущего элемента.  При этом свойствам ЧтениеXML.ТипУзла, ЧтениеXML.Имя, ЧтениеXML.ЛокальноеИмя, ЧтениеXML.Префикс, ЧтениеXML.URIПространстваИмен, ЧтениеXML.Значение и т.д. присваиваются значения, соответствующие прочитанным данным атрибута.',
                    returns: 'Тип: Булево. Истина - атрибут прочитан, Ложь - в противном случае.'
                },
                "ПерейтиКСодержимому": {
                    name: 'ПерейтиКСодержимому',
                    name_en: 'MoveToContent',
                    description: 'Проверяет является ли текущий узел "содержимым" (Текст, НачалоЭлемента, КонецЭлемента, СсылкаНаСущность, КонецСущности или ПробельныеСимволы) в случае значения параметра равному Сохранять или если текущее значения свойства ПробельныеСимволы равно Сохранять). Если текущий узел не является "содержимым", то выполняется пропуск узлов до "содержимого" или же до конца источника данных XML.',
                    returns: 'Тип: ТипУзлаXML. Значение узла, в который был перемещен текущий узел; Ничего - в случае достижения конца источника данных XML.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ПробельныеСимволы?: ПробельныеСимволыXML): ТипУзлаXML',
                            Параметры: {
                                ПробельныеСимволы: 'Указывает способ проверки пробельных символов. Значение по умолчанию: ПоУмолчанию.'
                            }
                        }
                    }
                },
                "ПолучитьАтрибут": {
                    name: 'ПолучитьАтрибут',
                    name_en: 'GetAttribute',
                    description: 'Получает значение атрибута.',
                    returns: 'Тип: Строка, Неопределено. Если атрибут найден, то метод возвращает строку, представляющую значение атрибута. Если атрибут в соответствии с заданными параметрами не найден, то метод возвращает значение Неопределено.',
                    signature: {
                        ПоНомеру: {
                            СтрокаПараметров: '(НомерАтрибута: Число): Строка|Неопределено',
                            Параметры: {
                                НомерАтрибута: 'Порядковый номер атрибута, начиная с 0.'
                            }
                        },
                        ПоПолномуИмени: {
                            СтрокаПараметров: '(ПолноеИмяАтрибута: Строка): Строка|Неопределено',
                            Параметры: {
                                ПолноеИмяАтрибута: 'Полное имя атрибута, включающее префикс.'
                            }
                        },
                        ПоЛокальномуИмениИПространствуИмен: {
                            СтрокаПараметров: '(ЛокальноеИмяАтрибута: Строка, URIПространстваИмен: Строка): Строка|Неопределено',
                            Параметры: {
                                ЛокальноеИмяАтрибута: 'Локальное имя атрибута, не включая префикс.',
                                URIПространстваИмен: 'URI пространства имен для локального имени атрибута.'
                            }
                        }
                    }
                },
                "ПрефиксАтрибута": {
                    name: 'ПрефиксАтрибута',
                    name_en: 'AttributePrefix',
                    description: 'Получает префикс атрибута с указанным индексом. Так как атрибуты могут быть только у элемента XML, доступ к ним может осуществляться только при прочтении узла, имеющего тип НачалоЭлемента.',
                    returns: 'Тип: Строка. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Строка): Строка',
                            Параметры: {
                                Индекс: 'Индекс атрибута.'
                            }
                        }
                    }
                },
                "Пропустить": {
                    name: 'Пропустить',
                    name_en: 'Skip',
                    description: 'Пропускает дочерние узлы текущего узла и позиционируется на следующий узел. Если текущий узел не содержит подчиненных узлов, то вызов метода аналогичен ЧтениеXML.Прочитать, в противном случае осуществляется пропуск всех дочерних узлов и осуществляется позиционирование на следующем узле.'
                },
                "Прочитать": {
                    name: 'Прочитать',
                    name_en: 'Read',
                    description: 'Считывает очередной узел XML. При этом свойствам ЧтениеXML.ТипУзла, ЧтениеXML.Имя, ЧтениеXML.ЛокальноеИмя, ЧтениеXML.Префикс, ЧтениеXML.URIПространстваИмен и ЧтениеXML.Значение присваиваются значения, соответствующие прочитанным данным.',
                    returns: 'Тип: Булево. Истина - очередной узел прочитан; Ложь - текст XML завершился.'
                },
                "ПрочитатьАтрибут": {
                    name: 'ПрочитатьАтрибут',
                    name_en: 'ReadAttribute',
                    description: 'Считывает очередной атрибут элемента XML. После прочтения с помощью метода ЧтениеXML.Прочитать очередного узла, имеющего тип НачалоЭлемента, можно получить доступ к атрибутам данного элемента. Каждый вызов данного метода позволяет прочитать очередной атрибут. После прочтения очередного атрибута свойствам ЧтениеXML.ТипУзла, ЧтениеXML.Имя, ЧтениеXML.ЛокальноеИмя, ЧтениеXML.Префикс, ЧтениеXML.URIПространстваИмен и ЧтениеXML.Значение присваиваются значения в соответствии с прочитанным атрибутом.',
                    returns: 'Тип: Булево. Истина - очередной атрибут прочитан; Ложь - атрибутов больше нет.'
                },
                "СледующееОбъявление": {
                    name: 'СледующееОбъявление',
                    name_en: 'NextDeclaration',
                    description: 'Осуществляет переход к следующему определению DTD. В случае, если текущий узел является ОпределениеТипаДокумента (DTD), текущий узел позиционируется на следующее объявление DTD. Если позиционирование на первое объявление еще не выполнялось, то метод аналогичен ПерейтиКСодержимому. Вызов метода ЧтениеXML.Прочитать прерывает процесс чтения объявлений и позиционирует текущий узел на следующий после DTD.',
                    returns: 'Тип: Булево. Истина - позиционирование на объявление прошло удачно, Ложь - в противном случае.'
                },
                "СледующийАтрибут": {
                    name: 'СледующийАтрибут',
                    name_en: 'NextAttribute',
                    description: 'Позиционирует текущее состояние объекта на следующий атрибут текущего элемента. Если вызов осуществляется при текущем узле НачалоЭлемента, то вызов аналогичен методу ЧтениеXML.ПервыйАтрибут. При этом свойствам ЧтениеXML.ТипУзла, ЧтениеXML.Имя, ЧтениеXML.ЛокальноеИмя, ЧтениеXML.Префикс, ЧтениеXML.URIПространстваИмен, ЧтениеXML.Значение и т.д. присваиваются значения, соответствующие прочитанным данным атрибута. Вызов метода ЧтениеXML.Прочитать прерывает процесс чтения атрибутов элемента и позиционирует текущий узел на следующий атрибут после НачалоЭлемента.',
                    returns: 'Тип: Булево. Истина - атрибут прочитан, Ложь - атрибутов больше нет.'
                },
                "ТипАтрибута": {
                    name: 'ТипАтрибута',
                    name_en: 'AttributeType',
                    description: 'Получает тип атрибута с указанным индексом.',
                    returns: 'Тип: ТипАтрибутаXML. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число): ТипАтрибутаXML',
                            Параметры: {
                                Индекс: 'Индекс атрибута.'
                            }
                        }
                    }
                },
                "УстановитьСтроку": {
                    name: 'УстановитьСтроку',
                    name_en: 'SetString',
                    description: 'Устанавливает строку, содержащую текст XML для чтения данным объектом. Если перед вызовом данного метода уже производилось чтение XML из другого файла или строки, то чтение прекращается и объект инициализируется для чтения из указанной строки.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(СтрокаXML: Строка, Параметры?: ПараметрыЧтенияXML, НаборСхемXML?: НаборСхемXML)',
                            Параметры: {
                                СтрокаXML: 'Строка, содержащая текст XML.',
                                Параметры: 'Параметры чтения, которые будут использоваться при чтении данных XML.',
                                НаборСхемXML: 'Набор схем XML, используемых при проверки читаемого документа XML. Если набор схем указан, но не проверен и включена проверка документа XML, то будет выполнена проверка набора схем.'
                            }
                        }
                    }
                },
            },
            properties: {
                "URIПространстваИмен": {
                    name: 'URIПространстваИмен',
                    name_en: 'NamespaceURI',
                    description: 'URI пространства имен текущего узла.'
                },
                "Автономный": {
                    name: 'Автономный',
                    name_en: 'Standalone',
                    description: 'Содержит значение атрибута standalone элемента объявления XML.  Если атрибут не указан или объявление не прочитано (отсутствует), то содержит Ложь.'
                },
                "БазовыйURI": {
                    name: 'БазовыйURI',
                    name_en: 'BaseURI',
                    description: 'Содержит значение базового URI для текущего узла XML (см. http://www.w3.org/TR/xmlbase/).'
                },
                "ВерсияXML": {
                    name: 'ВерсияXML',
                    name_en: 'XMLVersion',
                    description: 'Версия спецификации XML, которой соответствует документ XML (получается из объявления XML).'
                },
                "Значение": {
                    name: 'Значение',
                    name_en: 'Value',
                    description: 'Текстовое значение текущего узла XML. Если для узла текстовое значение неопределено, то содержит пустую строку. Узлы, для которых определено текстовое значение:   - Атрибут - значение атрибута;  - СекцияCDATA - содержимое секции CDATA;  - Комментарий - содержимое комментария;  - ОпределениеТипаДокумента - внутреннее подмножество (internal subset);  - ИнструкцияОбработки - содержимое инструкции обработки, исключая адрес (target);  - Текст - содержимое текстового узла;  - ОбъявлениеXML - содержимое объявления.'
                },
                "ИгнорироватьПробелы": {
                    name: 'ИгнорироватьПробелы',
                    name_en: 'IgnoreWhitespace',
                    description: 'Содержит признак учета пробельных значений узлов (значение содержит только символы пробел, табуляция, перевод строки и т. п.).  Если значение свойства Истина, то узлы, содержащие пробельные значения, пропускаются при чтении. Если Ложь, то такие узлы не пропускаются.'
                },
                "ИмеетЗначение": {
                    name: 'ИмеетЗначение',
                    name_en: 'HasValue',
                    description: 'Истина - текущий узел содержит текстовое значения.'
                },
                "ИмеетИмя": {
                    name: 'ИмеетИмя',
                    name_en: 'HasName',
                    description: 'Признак наличия у текущего узла имени. Истина - для узла определено имя, Ложь - в противном случае.'
                },
                "Имя": {
                    name: 'Имя',
                    name_en: 'Name',
                    description: 'Имя текущего узла XML. Содержит квалифицированное имя для текущего узла. Имя зависит от типа текущего узла:    - Атрибут - имя атрибута;  - ОпределениеТипаДокумента - имя типа документа;  - НачалоЭлемента - имя элемента;  - КонецЭлемента - имя элемента;  - СсылкаНаСущность - имя ссылки на сущность;  - ИнструкцияОбработки - адрес инструкции обработки;  - ОбъявлениеXML - строка xml. Для узлов, для которых имя не определено, свойство содержит пустую строку.'
                },
                "ИмяНотации": {
                    name: 'ИмяНотации',
                    name_en: 'NotationName',
                    description: 'Содержит имя нотации для узлов типа Сущность и СсылкаНаСущность, определяющих внешнюю неразбираемую сущность (external unparsed entity). Для типов узлов, для которых идентификатор не определен, содержит пустую строку. Если имя нотации не пустая строка и текущий узел Сущность или СсылкаНаСущность, то это означает, что сущность (ссылка на сущность) неразбираемая (external unparsed entity) и также должны быть непустыми ЧтениеXML.ПубличныйИдентификатор или ЧтениеXML.СистемныйИдентификатор.'
                },
                "КодировкаXML": {
                    name: 'КодировкаXML',
                    name_en: 'XMLEncoding',
                    description: 'Кодировка исходного документа XML. Содержит значение атрибута encoding объявления XML.  Если атрибут не указан или объявление не прочитано (отсутствует), то будет возвращена кодировка UTF8.'
                },
                "КодировкаИсточника": {
                    name: 'КодировкаИсточника',
                    name_en: 'InputEncoding',
                    description: 'Кодировка документа XML, определенная в процессе чтения документа.'
                },
                "КонтекстПространствИмен": {
                    name: 'КонтекстПространствИмен',
                    name_en: 'NamespaceContext',
                    description: 'Содержит контекст пространств имен XML.'
                },
                "ЛокальноеИмя": {
                    name: 'ЛокальноеИмя',
                    name_en: 'LocalName',
                    description: 'Содержит локальное имя для текущего узла XML. Имя зависит от типа текущего узла:    - Атрибут - локальное имя атрибута;  - ОпределениеТипаДокумента - имя типа документа;  - НачалоЭлемента - локальное имя элемента;  - КонецЭлемента - локальное имя элемента;  - СсылкаНаСущность - имя ссылки на сущность;  - ИнструкцияОбработки - адрес инструкции обработки;  - ОбъявлениеXML - строка xml.'
                },
                "Параметры": {
                    name: 'Параметры',
                    name_en: 'Settings',
                    description: 'Текущие параметры чтения XML.'
                },
                "Префикс": {
                    name: 'Префикс',
                    name_en: 'Prefix',
                    description: 'Префикс пространства имен, ассоциированного с текущим узлом.'
                },
                "ПробельныеСимволы": {
                    name: 'ПробельныеСимволы',
                    name_en: 'Space',
                    description: 'Содержит значение атрибута xml:space для данного контекста чтения.'
                },
                "ПубличныйИдентификатор": {
                    name: 'ПубличныйИдентификатор',
                    name_en: 'PublicId',
                    description: 'Содержит публичный идентификатор PiblicId для типов узлов, у которых идентификатор имеет смысл: ОпределениеТипаДокумента, Сущность, Нотация. Для типов узлов, для которых идентификатор не определен, содержит пустую строку.'
                },
                "СистемныйИдентификатор": {
                    name: 'СистемныйИдентификатор',
                    name_en: 'SystemId',
                    description: 'Содержит системный идентификатор для типов узлов, у которых идентификатор имеет смысл: ОпределениеТипаДокумента, Сущность, Нотация. Для типов узлов, для которых идентификатор не определен, содержит пустую строку.'
                },
                "ТипУзла": {
                    name: 'ТипУзла',
                    name_en: 'NodeType',
                    description: 'Тип текущего узла XML.'
                },
                "ЭтоАтрибутПоУмолчанию": {
                    name: 'ЭтоАтрибутПоУмолчанию',
                    name_en: 'IsDefaultAttribute',
                    description: 'Содержит признак включения значения текущего узла как значения по умолчанию, полученного из DTD или XMLSchema. Имеет смысл только для узла Атрибут.'
                },
                "ЭтоПробельныеСимволы": {
                    name: 'ЭтоПробельныеСимволы',
                    name_en: 'IsWhitespace',
                    description: 'Показывает, состоит ли текстовое значение текущего узла только из пробельных символов. Применимо только для узлов, обладающих текстовым содержимым, для других узлов содержит Ложь. Истина - текст состоит только из пробельных символов.'
                },
                "ЭтоСимвольныеДанные": {
                    name: 'ЭтоСимвольныеДанные',
                    name_en: 'IsCharacters',
                    description: 'Показывает, имеет ли текущий узел текстовое значение. Текстовое значение имеется у узлов: Текст, СекцияCDATA, ПробельныеСимволы.'
                },
                "Язык": {
                    name: 'Язык',
                    name_en: 'Lang',
                    description: 'Содержит значение атрибута xml:lang для данного контекста чтения.'
                },
            },
            constructors: {
                "По умолчанию": {
                    signature: '()'
                },
            }
        },
        "ЧтениеZipФайла": {
            name: 'ЧтениеZipФайла',
            name_en: 'ZipFileReader',
            description: 'Предназначен для чтения ZIP файла.',
            methods: {
                "Закрыть": {
                    name: 'Закрыть',
                    name_en: 'Close',
                    description: 'Завершает работу с открытым ZIP файлом.'
                },
                "Извлечь": {
                    name: 'Извлечь',
                    name_en: 'Extract',
                    description: 'Распаковывает переданный элемент в указанную папку.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Элемент: ЭлементZipФайла, Путь: Строка, ВосстанавливатьКаталоги?: РежимВосстановленияПутейФайловZIP, Пароль?: Строка)',
                            Параметры: {
                                Элемент: 'Элемент, который требуется распаковать.',
                                Путь: 'Путь, по которому требуется распаковать элемент.',
                                ВосстанавливатьКаталоги: 'Указывает, требуется ли восстанавливать структуру папок. Значение по умолчанию: Восстанавливать.',
                                Пароль: 'Указывается пароль для расшифровки элемента архива, в случае, если он зашифрован с паролем, отличным от пароля общего для файла. Если пароль не указан, используется пароль, заданный в конструкторе или при вызове метода Открыть, если он был там указан.'
                            }
                        }
                    }
                },
                "ИзвлечьВсе": {
                    name: 'ИзвлечьВсе',
                    name_en: 'ExtractAll',
                    description: 'Распаковывает все элементы в ZIP файле по указанному пути.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Путь: Строка, ВосстанавливатьКаталоги?: РежимВосстановленияПутейФайловZIP)',
                            Параметры: {
                                Путь: 'Путь, по которому необходимо распаковать элемент ZIP файла.',
                                ВосстанавливатьКаталоги: 'Указывает, требуется ли восстанавливать структуру каталогов. Значение по умолчанию: Восстанавливать.'
                            }
                        }
                    }
                },
                "Открыть": {
                    name: 'Открыть',
                    name_en: 'Open',
                    description: 'Открывает ZIP файл для чтения.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ИмяФайла: Строка, Пароль?: Строка)',
                            Параметры: {
                                ИмяФайла: 'Имя ZIP файла, который требуется открыть для чтения.',
                                Пароль: 'Пароль для доступа к ZIP файлу, если файл зашифрован.'
                            }
                        }
                    }
                },
            },
            properties: {
                "Комментарий": {
                    name: 'Комментарий',
                    name_en: 'Comment',
                    description: 'Содержит комментарий к ZIP файлу.'
                },
                "Элементы": {
                    name: 'Элементы',
                    name_en: 'Items',
                    description: 'Содержит коллекцию элементов, находящихся в ZIP файле.'
                },
            },
            constructors: {
                "На основании имени файла": {
                    description: 'Открывает для чтения указанный ZIP файл. Аналогичен методу Открыть.',
                    signature: '(ИмяФайла: Строка, Пароль?: Строка)',
                    params: {
                        "ИмяФайла": 'Имя ZIP файла, который требуется открыть для чтения.',
                        "Пароль": 'Пароль для доступа к ZIP файлу, если файл зашифрован.'
                    }
                },
                "Формирование неинициализированного объекта": {
                    description: 'Формирует неинициализированный объект ЧтениеZipФайла.',
                    signature: '()'
                },
            }
        },
        "ЧтениеТекста": {
            name: 'ЧтениеТекста',
            name_en: 'TextReader',
            description: 'Предназначен для последовательного чтения текстовых файлов (большой длины).',
            methods: {
                "Закрыть": {
                    name: 'Закрыть',
                    name_en: 'Close',
                    description: 'Закрывает открытый текстовый файл. Закрытие файла выполняется автоматически при удалении объекта ЧтениеТекста.'
                },
                "Открыть": {
                    name: 'Открыть',
                    name_en: 'Open',
                    description: 'Открывает (монопольно) текстовый файл для чтения.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ИмяФайла: Строка, Кодировка?: КодировкаТекста, РазделительСтрок?: Строка, КонвертируемыйРазделительСтрок?: Строка, МонопольныйРежим?: Булево)',
                            Параметры: {
                                ИмяФайла: 'Имя читаемого файла.',
                                Кодировка: 'Определяет кодировку текста читаемого текстового файла (согласован с текстовым документом). Если параметр не задан, формат текста будет определен автоматически по сигнатуре BOM в начале файла; если сигнатура BOM в файле отсутствует, файл будет открыт в кодировке ANSI.  Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки. Поддерживаемые названия кодировок:   - UTF-8  - UTF-16  - UTF-16BE  - UTF-16LE  - UTF-32  - UTF-32BE  - UTF-32LE  - UTF16_PlatformEndian  - UTF16_OppositeEndian  - UTF32_PlatformEndian  - UTF32_OppositeEndian  - UTF-7  - IMAP-mailbox-name  - SCSU  - BOCU-1  - CESU-8  - ISO-8859-1  - US-ASCII  - gb18030  - IBM367  - iso-8859-2  - iso-8859-3  - iso-8859-4  - iso-8859-5  - iso-8859-6  - iso-8859-7  - iso-8859-8  - iso-8859-9  - iso-8859-13  - iso-8859-15  - cp932  - Shift_JIS  - EUC-JP  - cp33722  - windows-950  - Big5  - cp950  - Big5-HKSCS  - cp1386  - GBK  - GB2312  - GB_2312-80  - cp964  - cp949  - cp949c  - EUC-KR  - ibm-971  - KSC_5601  - ibm-1363  - windows-949  - windows-874  - cp874  - ibm-1162  - cp437  - cp737  - cp775  - cp850  - cp851  - cp852  - cp855  - cp856  - cp857  - cp858  - cp860  - cp861  - cp862  - cp863  - cp864  - cp865  - cp866  - ibm-867  - CP868  - cp869  - KOI8-R  - ibm-901  - ibm-902  - cp922  - KOI8-U  - ibm-4909  - windows-1250  - windows-1251  - windows-1252  - windows-1253  - windows-1254  - windows-1255  - windows-1256  - windows-1257  - windows-1258  - macintosh  - x-mac-greek  - x-mac-cyrillic  - x-mac-centraleurroman  - x-mac-turkish  - hp-roman8  - Adobe-Standard-Encoding  - cp1006  - cp1098  - cp1124  - cp1125  - ibm-1129  - cp1131  - ibm-1133  - ISO-2022-JP  - JIS_Encoding  - ISO-2022-JP-2  - ISO_2022,locale=ja,version=3  - ISO_2022,locale=ja,version=4  - ISO-2022-KR  - ISO_2022,locale=ko,version=1  - ISO-2022-CN  - ISO-2022-CN-EXT  - HZ-GB-2312  - windows-57002  - windows-57003  - windows-57011  - windows-57010  - windows-57007  - windows-57004  - windows-57005  - windows-57008  - windows-57009  - LMBCS-1  - LMBCS-2  - LMBCS-3  - LMBCS-4  - LMBCS-5  - LMBCS-6  - LMBCS-8  - LMBCS-11  - LMBCS-16  - LMBCS-17  - LMBCS-18  - LMBCS-19  - IBM037  - ebcdic-de  - ebcdic-dk  - IBM278  - IBM280  - IBM284  - IBM285  - IBM290  - IBM297  - IBM420  - IBM424  - IBM500  - ibm-803  - IBM-Thai  - IBM870  - IBM871  - cp875  - IBM918  - cp930  - cp933  - cp935  - cp937  - cp939  - cp1025  - IBM1026  - IBM1047  - cp1097  - cp1112  - cp1122  - cp1123  - ibm-1130  - ibm-1132  - ibm-1137  - IBM01140  - IBM01141  - IBM01142  - IBM01143  - IBM01144  - IBM01145  - IBM01146  - IBM01147  - IBM01148  - IBM01149  - ibm-1153  - ibm-1154  - ibm-1155  - ibm-1156  - ibm-1157  - ibm-1158  - ibm-1160  - ibm-1164  - ibm-1364  - ibm-1371  - ibm-1388  - ibm-1390  - ibm-1399  - ibm-5123  - ibm-8482  - ibm-16684  - ibm-4899  - ibm-4971  - ebcdic-he  - ebcdic-ar  - ibm-37_P100-1995,swaplfnl  - ibm-1047_P100-1995,swaplfnl  - ibm-1140_P100-1997,swaplfnl  - ibm-1142_P100-1997,swaplfnl  - ibm-1143_P100-1997,swaplfnl  - ibm-1144_P100-1997,swaplfnl  - ibm-1145_P100-1997,swaplfnl  - ibm-1146_P100-1997,swaplfnl  - ibm-1147_P100-1997,swaplfnl  - ibm-1148_P100-1997,swaplfnl  - ibm-1149_P100-1997,swaplfnl  - ibm-1153_P100-1999,swaplfnl  - ibm-12712_P100-1998,swaplfnl  - ibm-16804_X110-1999,swaplfnl  - ebcdic-xml-us',
                                РазделительСтрок: 'Указывает строку, являющуюся разделителем строк в читаемом файле. Значение по умолчанию: ПС.',
                                КонвертируемыйРазделительСтрок: 'Указывает разделитель строк в файле при конвертации в стандартный перевод строк ПС. Значение по умолчанию: ВК + ПС.',
                                МонопольныйРежим: 'Определяет режим открытия файла. Истина - монопольный, Ложь - разделяемый. Значение по умолчанию: Истина.'
                            }
                        }
                    }
                },
                "Прочитать": {
                    name: 'Прочитать',
                    name_en: 'Read',
                    description: 'Считывает строку произвольной длины.',
                    returns: 'Тип: Строка, Неопределено. В случае, если читаемый файл завершен, то возвращается Неопределено.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(РазмерСтроки?: Число): Строка|Неопределено',
                            Параметры: {
                                РазмерСтроки: 'Размер возвращаемой строки. Если параметр не указан, текстовый файл читается до конца.'
                            }
                        }
                    }
                },
                "ПрочитатьСтроку": {
                    name: 'ПрочитатьСтроку',
                    name_en: 'ReadLine',
                    description: 'Считывает строку текста, ограниченную разделителем.',
                    returns: 'Тип: Строка, Неопределено. В случае, если читаемый файл завершен, то возвращается Неопределено.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Разделитель?: Строка): Строка|Неопределено',
                            Параметры: {
                                Разделитель: 'Разделитель строк. Если не указан, то совпадает с указанным при открытии файла. Значение по умолчанию: ПС.'
                            }
                        }
                    }
                },
            },
            constructors: {
                "По имени файла": {
                    description: 'Открывает текстовый файл для чтения. Аналогичен методу Открыть.',
                    signature: '(ИмяФайла: Строка, Кодировка?: КодировкаТекста, РазделительСтрок?: Строка, КонвертируемыйРазделительСтрок?: Строка, МонопольныйРежим?: Булево)',
                    params: {
                        "ИмяФайла": 'Имя текстового файла для чтения.',
                        "Кодировка": 'Определяет кодировку текста читаемого текстового файла (согласован с текстовым документом). Если параметр не задан, формат текста будет определен автоматически по сигнатуре BOM в начале файла; если сигнатура BOM в файле отсутствует, файл будет открыт в кодировке ANSI.  Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки. Поддерживаемые названия кодировок:   - UTF-8  - UTF-16  - UTF-16BE  - UTF-16LE  - UTF-32  - UTF-32BE  - UTF-32LE  - UTF16_PlatformEndian  - UTF16_OppositeEndian  - UTF32_PlatformEndian  - UTF32_OppositeEndian  - UTF-7  - IMAP-mailbox-name  - SCSU  - BOCU-1  - CESU-8  - ISO-8859-1  - US-ASCII  - gb18030  - IBM367  - iso-8859-2  - iso-8859-3  - iso-8859-4  - iso-8859-5  - iso-8859-6  - iso-8859-7  - iso-8859-8  - iso-8859-9  - iso-8859-13  - iso-8859-15  - cp932  - Shift_JIS  - EUC-JP  - cp33722  - windows-950  - Big5  - cp950  - Big5-HKSCS  - cp1386  - GBK  - GB2312  - GB_2312-80  - cp964  - cp949  - cp949c  - EUC-KR  - ibm-971  - KSC_5601  - ibm-1363  - windows-949  - windows-874  - cp874  - ibm-1162  - cp437  - cp737  - cp775  - cp850  - cp851  - cp852  - cp855  - cp856  - cp857  - cp858  - cp860  - cp861  - cp862  - cp863  - cp864  - cp865  - cp866  - ibm-867  - CP868  - cp869  - KOI8-R  - ibm-901  - ibm-902  - cp922  - KOI8-U  - ibm-4909  - windows-1250  - windows-1251  - windows-1252  - windows-1253  - windows-1254  - windows-1255  - windows-1256  - windows-1257  - windows-1258  - macintosh  - x-mac-greek  - x-mac-cyrillic  - x-mac-centraleurroman  - x-mac-turkish  - hp-roman8  - Adobe-Standard-Encoding  - cp1006  - cp1098  - cp1124  - cp1125  - ibm-1129  - cp1131  - ibm-1133  - ISO-2022-JP  - JIS_Encoding  - ISO-2022-JP-2  - ISO_2022,locale=ja,version=3  - ISO_2022,locale=ja,version=4  - ISO-2022-KR  - ISO_2022,locale=ko,version=1  - ISO-2022-CN  - ISO-2022-CN-EXT  - HZ-GB-2312  - windows-57002  - windows-57003  - windows-57011  - windows-57010  - windows-57007  - windows-57004  - windows-57005  - windows-57008  - windows-57009  - LMBCS-1  - LMBCS-2  - LMBCS-3  - LMBCS-4  - LMBCS-5  - LMBCS-6  - LMBCS-8  - LMBCS-11  - LMBCS-16  - LMBCS-17  - LMBCS-18  - LMBCS-19  - IBM037  - ebcdic-de  - ebcdic-dk  - IBM278  - IBM280  - IBM284  - IBM285  - IBM290  - IBM297  - IBM420  - IBM424  - IBM500  - ibm-803  - IBM-Thai  - IBM870  - IBM871  - cp875  - IBM918  - cp930  - cp933  - cp935  - cp937  - cp939  - cp1025  - IBM1026  - IBM1047  - cp1097  - cp1112  - cp1122  - cp1123  - ibm-1130  - ibm-1132  - ibm-1137  - IBM01140  - IBM01141  - IBM01142  - IBM01143  - IBM01144  - IBM01145  - IBM01146  - IBM01147  - IBM01148  - IBM01149  - ibm-1153  - ibm-1154  - ibm-1155  - ibm-1156  - ibm-1157  - ibm-1158  - ibm-1160  - ibm-1164  - ibm-1364  - ibm-1371  - ibm-1388  - ibm-1390  - ibm-1399  - ibm-5123  - ibm-8482  - ibm-16684  - ibm-4899  - ibm-4971  - ebcdic-he  - ebcdic-ar  - ibm-37_P100-1995,swaplfnl  - ibm-1047_P100-1995,swaplfnl  - ibm-1140_P100-1997,swaplfnl  - ibm-1142_P100-1997,swaplfnl  - ibm-1143_P100-1997,swaplfnl  - ibm-1144_P100-1997,swaplfnl  - ibm-1145_P100-1997,swaplfnl  - ibm-1146_P100-1997,swaplfnl  - ibm-1147_P100-1997,swaplfnl  - ibm-1148_P100-1997,swaplfnl  - ibm-1149_P100-1997,swaplfnl  - ibm-1153_P100-1999,swaplfnl  - ibm-12712_P100-1998,swaplfnl  - ibm-16804_X110-1999,swaplfnl  - ebcdic-xml-us',
                        "РазделительСтрок": 'Определяет строку, разделяющую строки текстового файла. Значение по умолчанию: ПС.',
                        "КонвертируемыйРазделительСтрок": 'Определяет разделение строк в файле для конвертации в стандартный перевод строк ПС. Значение по умолчанию: ВК + ПС.',
                        "МонопольныйРежим": 'Определяет режим открытия файла. Истина - монопольный, Ложь - разделяемый. Значение по умолчанию: Истина.'
                    }
                },
                "Формирование неинициализированного объекта": {
                    description: 'Формирует неинициализированный объект ЧтениеТекста. Для инициализации объекта используется метод Открыть.',
                    signature: '()'
                },
            }
        },
        "ЭлементZipФайла": {
            name: 'ЭлементZipФайла',
            name_en: 'ZipFileEntry',
            description: 'Предназначен для описания элемента в ZIP файле. Недопустимо использование в именах файлов и папок букв национальных алфавитов, которые при преобразовании из символов UNICODE в узкие символы могут быть преобразованы с потерей информации. Рекомендуется использовать в именах файлов и папок символы латинского алфавита. Запрещены символы:   | ? * / \\ : ".',
            properties: {
                "ВремяИзменения": {
                    name: 'ВремяИзменения',
                    name_en: 'Modified',
                    description: 'Содержит время изменения файла.'
                },
                "Зашифрован": {
                    name: 'Зашифрован',
                    name_en: 'Encrypted',
                    description: 'Содержит признак зашифрованности файла. Истина - зашифрован.'
                },
                "Имя": {
                    name: 'Имя',
                    name_en: 'Name',
                    description: 'Содержит имя файла.'
                },
                "ИмяБезРасширения": {
                    name: 'ИмяБезРасширения',
                    name_en: 'BaseName',
                    description: 'Имя файла без расширения.'
                },
                "Невидимый": {
                    name: 'Невидимый',
                    name_en: 'Hidden',
                    description: 'Указывает, установлен ли у файла флаг "Невидимый". Истина - установлен.'
                },
                "ПолноеИмя": {
                    name: 'ПолноеИмя',
                    name_en: 'FullName',
                    description: 'Содержит полное имя файла, включая путь.'
                },
                "Путь": {
                    name: 'Путь',
                    name_en: 'Path',
                    description: 'Содержит путь файла.'
                },
                "РазмерНесжатого": {
                    name: 'РазмерНесжатого',
                    name_en: 'UncompressedSize',
                    description: 'Содержит размер исходного файла на диске.'
                },
                "РазмерСжатого": {
                    name: 'РазмерСжатого',
                    name_en: 'CompressedSize',
                    description: 'Содержит размер файла в архиве.'
                },
                "Расширение": {
                    name: 'Расширение',
                    name_en: 'Extension',
                    description: 'Содержит расширение файла.'
                },
                "ТолькоЧтение": {
                    name: 'ТолькоЧтение',
                    name_en: 'ReadOnly',
                    description: 'Содержит признак того, что у файла установлен признак "Только чтение". Истина - установлен признак "Только чтение".'
                },
            },
        },
        "ЭлементСпискаЗначений": {
            name: 'ЭлементСпискаЗначений',
            name_en: 'ValueListItem',
            description: 'Используется для доступа к свойствам и методам элемента списка значений.',
            methods: {
                "ПолучитьИдентификатор": {
                    name: 'ПолучитьИдентификатор',
                    name_en: 'GetID',
                    description: 'Получает идентификатор для элемента списка значений. Этот идентификатор не привязан к позиции элемента в списке.',
                    returns: 'Тип: Число. '
                },
            },
            properties: {
                "Значение": {
                    name: 'Значение',
                    name_en: 'Value',
                    description: 'Содержит хранимое элементом списка значение.'
                },
                "Картинка": {
                    name: 'Картинка',
                    name_en: 'Picture',
                    description: 'Содержит картинку, связанную с данным элементом списка значений.'
                },
                "Пометка": {
                    name: 'Пометка',
                    name_en: 'Check',
                    description: 'Содержит связанное с элементом списка значение пометки. Ложь - пометка не установлена, Истина - пометка установлена.'
                },
                "Представление": {
                    name: 'Представление',
                    name_en: 'Presentation',
                    description: 'Содержит внешнее представление элемента списка значений.'
                },
            },
        },
        "ЭлементыZipФайла": {
            name: 'ЭлементыZipФайла',
            name_en: 'ZipFileEntries',
            description: 'Содержит коллекцию элементов ZIP файла.',
            methods: {
                "Количество": {
                    name: 'Количество',
                    name_en: 'Count',
                    description: 'Получает количество элементов в коллекции.',
                    returns: 'Тип: Число. '
                },
                "Найти": {
                    name: 'Найти',
                    name_en: 'Find',
                    description: 'Осуществляет поиск элемента по его имени.',
                    returns: 'Тип: ЭлементZipФайла, Неопределено. Если не найдена, возвращается Неопределено.',
                    signature: {
                        default: {
                            СтрокаПараметров: '(ИмяЭлемента: Строка): ЭлементZipФайла|Неопределено',
                            Параметры: {
                                ИмяЭлемента: 'Имя элемента.'
                            }
                        }
                    }
                },
                "Получить": {
                    name: 'Получить',
                    name_en: 'Get',
                    description: 'Получает полосу по индексу. Работает аналогично оператору [].',
                    returns: 'Тип: ЭлементZipФайла. ',
                    signature: {
                        default: {
                            СтрокаПараметров: '(Индекс: Число): ЭлементZipФайла',
                            Параметры: {
                                Индекс: 'Индекс элемента в коллекции.'
                            }
                        }
                    }
                }
            }
        }
    };
}

export function structureGlobContext() {
    return {
        global: {
            "Свойства": {
                "WSСсылки": "",
                "БиблиотекаКартинок": "",
                "БиблиотекаМакетовОформленияКомпоновкиДанных": "",
                "БиблиотекаСтилей": "",
                "БизнесПроцессы": "",
                "ВнешниеИсточникиДанных": "",
                "ВнешниеОбработки": "",
                "ВнешниеОтчеты": "",
                "ВстроенныеПокупки": "",
                "ГлавныйИнтерфейс": "",
                "ГлавныйСтиль": "",
                "Документы": "",
                "ДоставляемыеУведомления": "",
                "ЖурналыДокументов": "",
                "Задачи": "",
                "ИнформацияОбИнтернетСоединении": "",
                "ИспользованиеРабочейДаты": "",
                "ИсторияРаботыПользователя": "",
                "Константы": "",
                "КритерииОтбора": "",
                "Метаданные": "",
                "Обработки": "",
                "ОтображениеРекламы": "",
                "ОтправкаДоставляемыхУведомлений": "",
                "Отчеты": "",
                "ПанельЗадачОС": "",
                "ПараметрЗапуска": "",
                "ПараметрыСеанса": "",
                "Перечисления": "",
                "ПланыВидовРасчета": "",
                "ПланыВидовХарактеристик": "",
                "ПланыОбмена": "",
                "ПланыСчетов": "",
                "ПолнотекстовыйПоиск": "",
                "ПользователиИнформационнойБазы": "",
                "Последовательности": "",
                "ПроверкаВстроенныхПокупок": "",
                "РабочаяДата": "",
                "РасширенияКонфигурации": "",
                "РегистрыБухгалтерии": "",
                "РегистрыНакопления": "",
                "РегистрыРасчета": "",
                "РегистрыСведений": "",
                "РегламентныеЗадания": "",
                "СериализаторXDTO": "",
                "Справочники": "",
                "СредстваГеопозиционирования": "",
                "СредстваКриптографии": "",
                "СредстваМультимедиа": "",
                "СредстваОтображенияРекламы": "",
                "СредстваПочты": "",
                "СредстваТелефонии": "",
                "ФабрикаXDTO": "",
                "ФайловыеПотоки": "",
                "ФоновыеЗадания": "",
                "ХранилищаНастроек": "",
                "ХранилищеВариантовОтчетов": "",
                "ХранилищеНастроекДанныхФорм": "",
                "ХранилищеОбщихНастроек": "",
                "ХранилищеПользовательскихНастроекДинамическихСписков": "",
                "ХранилищеПользовательскихНастроекОтчетов": "",
                "ХранилищеСистемныхНастроек": ""
            },
            "Функции работы со значениями типа Строка": {
                "СтрДлина": "",
                "СокрЛ": "",
                "СокрП": "",
                "СокрЛП": "",
                "Лев": "",
                "Прав": "",
                "Сред": "",
                "СтрНайти": "",
                "ВРег": "",
                "НРег": "",
                "ТРег": "",
                "Символ": "",
                "КодСимвола": "",
                "ПустаяСтрока": "",
                "СтрЗаменить": "",
                "СтрЧислоСтрок": "",
                "СтрПолучитьСтроку": "",
                "СтрЧислоВхождений": "",
                "СтрСравнить": "",
                "СтрНачинаетсяС": "",
                "СтрЗаканчиваетсяНа": "",
                "СтрРазделить": "",
                "СтрСоединить": ""
            },
            "Функции работы со значениями типа Число": {
                "Цел": "",
                "Окр": "",
                "Log": "",
                "Log10": "",
                "Sin": "",
                "Cos": "",
                "Tan": "",
                "ASin": "",
                "ACos": "",
                "ATan": "",
                "Exp": "",
                "Pow": "",
                "Sqrt": ""
            },
            "Функции работы со значениями типа Дата": {
                "Год": "",
                "Месяц": "",
                "День": "",
                "Час": "",
                "Минута": "",
                "Секунда": "",
                "НачалоГода": "",
                "НачалоКвартала": "",
                "НачалоМесяца": "",
                "НачалоНедели": "",
                "НачалоДня": "",
                "НачалоЧаса": "",
                "НачалоМинуты": "",
                "КонецГода": "",
                "КонецКвартала": "",
                "КонецМесяца": "",
                "КонецНедели": "",
                "КонецДня": "",
                "КонецЧаса": "",
                "КонецМинуты": "",
                "НеделяГода": "",
                "ДеньГода": "",
                "ДеньНедели": "",
                "ДобавитьМесяц": "",
                "ТекущаяДата": ""
            },
            "Функции работы со значениями типа Тип": {
                "Тип": "",
                "ТипЗнч": ""
            },
            "Функции преобразования значений": {
                "Булево": "",
                "Число": "",
                "Строка": "",
                "Дата": ""
            },
            "Процедуры и функции интерактивной работы": {
                "ПоказатьВопрос": "",
                "Вопрос": "",
                "ПоказатьПредупреждение": "",
                "Предупреждение": "",
                "Сообщить": "",
                "ОчиститьСообщения": "",
                "ОповеститьОбИзменении": "",
                "Состояние": "",
                "Сигнал": "",
                "ПоказатьЗначение": "",
                "ОткрытьЗначение": "",
                "Оповестить": "",
                "ОбработкаПрерыванияПользователя": "",
                "ОткрытьСодержаниеСправки": "",
                "ОткрытьИндексСправки": "",
                "ОткрытьСправку": "",
                "ПоказатьИнформациюОбОшибке": "",
                "КраткоеПредставлениеОшибки": "",
                "ПодробноеПредставлениеОшибки": "",
                "ПолучитьФорму": "",
                "ЗакрытьСправку": "",
                "ПоказатьОповещениеПользователя": "",
                "ОткрытьФорму": "",
                "ОткрытьФормуМодально": "",
                "АктивноеОкно": "",
                "ВыполнитьОбработкуОповещения": ""
            },
            "Функции для вызова диалога ввода данных": {
                "ПоказатьВводЗначения": "",
                "ВвестиЗначение": "",
                "ПоказатьВводЧисла": "",
                "ВвестиЧисло": "",
                "ПоказатьВводСтроки": "",
                "ВвестиСтроку": "",
                "ПоказатьВводДаты": "",
                "ВвестиДату": ""
            },
            "Функции форматирования": {
                "Формат": "",
                "ЧислоПрописью": "",
                "НСтр": "",
                "ПредставлениеПериода": "",
                "СтрШаблон": ""
            },
            "Функции обращения к конфигурации": {
                "ПолучитьОбщийМакет": "",
                "ПолучитьОбщуюФорму": "",
                "ПредопределенноеЗначение": "",
                "ПолучитьПолноеИмяПредопределенногоЗначения": ""
            },
            "Процедуры и функции сеанса работы": {
                "ПолучитьЗаголовокСистемы": "",
                "ПолучитьСкоростьКлиентскогоСоединения": "",
                "ПодключитьОбработчикОжидания": "",
                "УстановитьЗаголовокСистемы": "",
                "ОтключитьОбработчикОжидания": "",
                "ИмяКомпьютера": "",
                "ЗавершитьРаботуСистемы": "",
                "ИмяПользователя": "",
                "ПрекратитьРаботуСистемы": "",
                "ПолноеИмяПользователя": "",
                "ЗаблокироватьРаботуПользователя": "",
                "КаталогПрограммы": "",
                "КаталогВременныхФайлов": "",
                "ПравоДоступа": "",
                "РольДоступна": "",
                "ТекущийЯзык": "",
                "ТекущийКодЛокализации": "",
                "СтрокаСоединенияИнформационнойБазы": "",
                "ПодключитьОбработчикОповещения": "",
                "ОтключитьОбработчикОповещения": "",
                "ПолучитьСообщенияПользователю": "",
                "ПараметрыДоступа": "",
                "ПредставлениеПриложения": "",
                "ТекущийЯзыкСистемы": "",
                "ЗапуститьСистему": "",
                "ТекущийРежимЗапуска": "",
                "УстановитьЧасовойПоясСеанса": "",
                "ЧасовойПоясСеанса": "",
                "ТекущаяДатаСеанса": "",
                "УстановитьКраткийЗаголовокПриложения": "",
                "ПолучитьКраткийЗаголовокПриложения": "",
                "ПредставлениеПрава": "",
                "ВыполнитьПроверкуПравДоступа": "",
                "РабочийКаталогДанныхПользователя": "",
                "КаталогДокументов": "",
                "ПолучитьИнформациюЭкрановКлиента": "",
                "ТекущийВариантОсновногоШрифтаКлиентскогоПриложения": "",
                "ТекущийВариантИнтерфейсаКлиентскогоПриложения": "",
                "УстановитьЗаголовокКлиентскогоПриложения": "",
                "ПолучитьЗаголовокКлиентскогоПриложения": "",
                "НачатьПолучениеКаталогаВременныхФайлов": "",
                "НачатьПолучениеКаталогаДокументов": "",
                "НачатьПолучениеРабочегоКаталогаДанныхПользователя": "",
                "ПодключитьОбработчикЗапросаНастроекКлиентаЛицензирования": "",
                "ОтключитьОбработчикЗапросаНастроекКлиентаЛицензирования": ""
            },
            "Процедуры и функции сохранения значений": {
                "СохранитьЗначение": "",
                "ВосстановитьЗначение": "",
                "ЗначениеВСтрокуВнутр": "",
                "ЗначениеИзСтрокиВнутр": "",
                "ЗначениеВФайл": "",
                "ЗначениеИзФайла": "",
                "СохранитьНастройкиПользователя": "",
                "ОчиститьНастройкиПользователя": ""
            },
            "Процедуры и функции работы с операционной системой": {
                "КомандаСистемы": "",
                "ЗапуститьПриложение": "",
                "ПолучитьCOMОбъект": "",
                "ПользователиОС": "",
                "НачатьЗапускПриложения": ""
            },
            "Процедуры и функции работы с внешними компонентами": {
                "ЗагрузитьВнешнююКомпоненту": "",
                "ПодключитьВнешнююКомпоненту": "",
                "НачатьУстановкуВнешнейКомпоненты": "",
                "УстановитьВнешнююКомпоненту": "",
                "НачатьПодключениеВнешнейКомпоненты": ""
            },
            "Процедуры и функции работы с файлами": {
                "КопироватьФайл": "",
                "ПереместитьФайл": "",
                "УдалитьФайлы": "",
                "НайтиФайлы": "",
                "СоздатьКаталог": "",
                "ПолучитьИмяВременногоФайла": "",
                "РазделитьФайл": "",
                "ОбъединитьФайлы": "",
                "ПолучитьФайл": "",
                "НачатьПомещениеФайла": "",
                "ПоместитьФайл": "",
                "ЭтоАдресВременногоХранилища": "",
                "УдалитьИзВременногоХранилища": "",
                "ПолучитьИзВременногоХранилища": "",
                "ПоместитьВоВременноеХранилище": "",
                "ПодключитьРасширениеРаботыСФайлами": "",
                "НачатьУстановкуРасширенияРаботыСФайлами": "",
                "УстановитьРасширениеРаботыСФайлами": "",
                "ПолучитьФайлы": "",
                "ПоместитьФайлы": "",
                "ЗапроситьРазрешениеПользователя": "",
                "ПолучитьМаскуВсеФайлы": "",
                "ПолучитьМаскуВсеФайлыКлиента": "",
                "ПолучитьМаскуВсеФайлыСервера": "",
                "ПолучитьРазделительПути": "",
                "ПолучитьРазделительПутиКлиента": "",
                "ПолучитьРазделительПутиСервера": "",
                "НачатьПодключениеРасширенияРаботыСФайлами": "",
                "НачатьЗапросРазрешенияПользователя": "",
                "НачатьПоискФайлов": "",
                "НачатьСозданиеКаталога": "",
                "НачатьКопированиеФайла": "",
                "НачатьПеремещениеФайла": "",
                "НачатьУдалениеФайлов": "",
                "НачатьПолучениеФайлов": "",
                "НачатьПомещениеФайлов": "",
                "НачатьСозданиеДвоичныхДанныхИзФайла": ""
            },
            "Процедуры и функции работы с информационной базой": {
                "НачатьТранзакцию": "",
                "ЗафиксироватьТранзакцию": "",
                "ОтменитьТранзакцию": "",
                "УстановитьМонопольныйРежим": "",
                "МонопольныйРежим": "",
                "ПолучитьОперативнуюОтметкуВремени": "",
                "ПолучитьСоединенияИнформационнойБазы": "",
                "НомерСоединенияИнформационнойБазы": "",
                "КонфигурацияИзменена": "",
                "КонфигурацияБазыДанныхИзмененаДинамически": "",
                "УстановитьВремяОжиданияБлокировкиДанных": "",
                "ОбновитьНумерациюОбъектов": "",
                "ПолучитьВремяОжиданияБлокировкиДанных": "",
                "КодЛокализацииИнформационнойБазы": "",
                "УстановитьМинимальнуюДлинуПаролейПользователей": "",
                "ПолучитьМинимальнуюДлинуПаролейПользователей": "",
                "ИнициализироватьПредопределенныеДанные": "",
                "УдалитьДанныеИнформационнойБазы": "",
                "УстановитьПроверкуСложностиПаролейПользователей": "",
                "ПолучитьПроверкуСложностиПаролейПользователей": "",
                "ПолучитьСтруктуруХраненияБазыДанных": "",
                "УстановитьПривилегированныйРежим": "",
                "ПривилегированныйРежим": "",
                "ТранзакцияАктивна": "",
                "НеобходимостьЗавершенияСоединения": "",
                "НомерСеансаИнформационнойБазы": "",
                "ПолучитьСеансыИнформационнойБазы": "",
                "ЗаблокироватьДанныеДляРедактирования": "",
                "УстановитьСоединениеСВнешнимИсточникомДанных": "",
                "РазблокироватьДанныеДляРедактирования": "",
                "РазорватьСоединениеСВнешнимИсточникомДанных": "",
                "ПолучитьБлокировкуСеансов": "",
                "УстановитьБлокировкуСеансов": "",
                "ОбновитьПовторноИспользуемыеЗначения": "",
                "УстановитьБезопасныйРежим": "",
                "БезопасныйРежим": "",
                "ПолучитьДанныеВыбора": "",
                "УстановитьЧасовойПоясИнформационнойБазы": "",
                "ПолучитьЧасовойПоясИнформационнойБазы": "",
                "ПолучитьОбновлениеКонфигурацииБазыДанных": "",
                "УстановитьБезопасныйРежимРазделенияДанных": "",
                "БезопасныйРежимРазделенияДанных": "",
                "УстановитьВремяЗасыпанияПассивногоСеанса": "",
                "ПолучитьВремяЗасыпанияПассивногоСеанса": "",
                "УстановитьВремяЗавершенияСпящегоСеанса": "",
                "ПолучитьВремяЗавершенияСпящегоСеанса": "",
                "ПолучитьТекущийСеансИнформационнойБазы": "",
                "УстановитьОтключениеБезопасногоРежима": "",
                "ПолучитьИдентификаторКонфигурации": "",
                "УстановитьНастройкиКлиентаЛицензирования": "",
                "ПолучитьОтключениеБезопасногоРежима": "",
                "ПолучитьИмяКлиентаЛицензирования": "",
                "ПолучитьДополнительныйПараметрКлиентаЛицензирования": ""
            },
            "Процедуры и функции работы с данными информационной базы": {
                "НайтиПомеченныеНаУдаление": "",
                "НайтиПоСсылкам": "",
                "УдалитьОбъекты": "",
                "УстановитьОбновлениеПредопределенныхДанныхИнформационнойБазы": "",
                "ПолучитьОбновлениеПредопределенныхДанныхИнформационнойБазы": ""
            },
            "Процедуры и функции работы с XML": {
                "XMLСтрока": "",
                "XMLЗначение": "",
                "XMLТип": "",
                "XMLТипЗнч": "",
                "ИзXMLТипа": "",
                "ВозможностьЧтенияXML": "",
                "ПолучитьXMLТип": "",
                "ПрочитатьXML": "",
                "ЗаписатьXML": "",
                "НайтиНедопустимыеСимволыXML": "",
                "ИмпортМоделиXDTO": "",
                "СоздатьФабрикуXDTO": ""
            },
            "Процедуры и функции работы с JSON": {
                "ЗаписатьJSON": "",
                "ПрочитатьJSON": "",
                "ПрочитатьДатуJSON": "",
                "ЗаписатьДатуJSON": ""
            },
            "Процедуры и функции работы с журналом регистрации": {
                "ЗаписьЖурналаРегистрации": "",
                "ПолучитьИспользованиеЖурналаРегистрации": "",
                "УстановитьИспользованиеЖурналаРегистрации": "",
                "ПредставлениеСобытияЖурналаРегистрации": "",
                "ВыгрузитьЖурналРегистрации": "",
                "ПолучитьЗначенияОтбораЖурналаРегистрации": "",
                "УстановитьИспользованиеСобытияЖурналаРегистрации": "",
                "ПолучитьИспользованиеСобытияЖурналаРегистрации": "",
                "СкопироватьЖурналРегистрации": "",
                "ОчиститьЖурналРегистрации": ""
            },
            "Процедуры и функции работы с универсальными объектами": {
                "ЗначениеВДанныеФормы": "",
                "ДанныеФормыВЗначение": "",
                "КопироватьДанныеФормы": "",
                "УстановитьСоответствиеОбъектаИФормы": "",
                "ПолучитьСоответствиеОбъектаИФормы": ""
            },
            "Процедуры и функции работы с функциональными опциями": {
                "ПолучитьФункциональнуюОпцию": "",
                "ПолучитьФункциональнуюОпциюИнтерфейса": "",
                "УстановитьПараметрыФункциональныхОпцийИнтерфейса": "",
                "ПолучитьПараметрыФункциональныхОпцийИнтерфейса": "",
                "ОбновитьИнтерфейс": ""
            },
            "Процедуры и функции работы с криптографией": {
                "УстановитьРасширениеРаботыСКриптографией": "",
                "НачатьУстановкуРасширенияРаботыСКриптографией": "",
                "ПодключитьРасширениеРаботыСКриптографией": "",
                "НачатьПодключениеРасширенияРаботыСКриптографией": ""
            },
            "Процедуры и функции работы с геопозиционированием": {
                "ПолучитьАдресПоМестоположению": "",
                "ПолучитьМестоположениеПоАдресу": "",
                "ПоказатьНаКарте": ""
            },
            "Процедуры и функции работы со стандартным интерфейсом OData": {
                "УстановитьСоставСтандартногоИнтерфейсаOData": "",
                "ПолучитьСоставСтандартногоИнтерфейсаOData": "",
            },
            "Процедуры и функции работы с двоичными данными": {
                "СоединитьБуферыДвоичныхДанных ": ""
            },
            "Прочие процедуры и функции": {
                "Мин": "",
                "Макс": "",
                "ОписаниеОшибки": "",
                "Вычислить": "",
                "ИнформацияОбОшибке": "",
                "ПолучитьМакетОформления": "",
                "Base64Значение": "",
                "Base64Строка": "",
                "ЗаполнитьЗначенияСвойств": "",
                "ЗначениеЗаполнено": "",
                "ПолучитьПредставленияНавигационныхСсылок": "",
                "НайтиОкноПоНавигационнойСсылке": "",
                "ПолучитьОкна": "",
                "ПерейтиПоНавигационнойСсылке": "",
                "ПолучитьНавигационнуюСсылку": "",
                "ПолучитьДопустимыеКодыЛокализации": "",
                "ПолучитьНавигационнуюСсылкуИнформационнойБазы": "",
                "ПредставлениеКодаЛокализации": "",
                "ПолучитьДопустимыеЧасовыеПояса": "",
                "ПредставлениеЧасовогоПояса": "",
                "ТекущаяУниверсальнаяДата": "",
                "ТекущаяУниверсальнаяДатаВМиллисекундах": "",
                "МестноеВремя": "",
                "УниверсальноеВремя": "",
                "ЧасовойПояс": "",
                "СмещениеЛетнегоВремени": "",
                "СмещениеСтандартногоВремени": "",
                "КодироватьСтроку": "",
                "РаскодироватьСтроку": "",
                "Найти": "",
                "ПродолжитьВызов": ""
            }
        },
        classes: {
            "Универсальные коллекции": {
                "Массив": "",
                "Соответствие": "",
                "Структура": "",
                "СписокЗначений": {
                    "ЭлементСпискаЗначений": ""
                },
                "ТаблицаЗначений": {
                    "КолонкаТаблицыЗначений": "",
                    "КоллекцияКолонокТаблицыЗначений": "",
                    "СтрокаТаблицыЗначений": "",
                    "ИндексыКоллекции": "",
                    "ИндексКоллекции": ""
                },
                "ДеревоЗначений": {
                    "СтрокаДереваЗначений": "",
                    "КолонкаДереваЗначений": "",
                    "КоллекцияКолонокДереваЗначений": "",
                    "КоллекцияСтрокДереваЗначений": ""
                },
                "КлючИЗначение": "",
                "ФиксированныйМассив": "",
                "ФиксированноеСоответствие": "",
                "ФиксированнаяСтруктура": ""
            },
            "Работа с сетью": {
                "HTTPСоединение": "",
                "HTTPЗапрос": "",
                "HTTPОтвет": "",
                "ИнтернетПрокси": ""
            },
            "Работа с ZIP": {
                "ЗаписьZipФайла": "",
                "ЧтениеZipФайла": "",
                "ЭлементыZipФайла": "",
                "ЭлементZipФайла": ""
            },
            "Прочее": ""
        }
    };
}

export function systemEnum() {
    return {
        "КодировкаТекста": {
            name: 'КодировкаТекста',
            name_en: 'TextEncoding',
            description: 'Определяет набор допустимых кодировок текстовых файлов.',
            values: {
                "ANSI": {
                    name: 'ANSI',
                    name_en: 'ANSI',
                    description: 'Файл в формате ANSI.'
                },
                "OEM": {
                    name: 'OEM',
                    name_en: 'OEM',
                    description: 'Файл в формате DOS.'
                },
                "UTF16": {
                    name: 'UTF16',
                    name_en: 'UTF16',
                    description: 'Файл в формате UTF-16.'
                },
                "UTF8": {
                    name: 'UTF8',
                    name_en: 'UTF8',
                    description: 'Файл в формате UTF-8.'
                },
                "Системная": {
                    name: 'Системная',
                    name_en: 'System',
                    description: 'Кодировка текста, соответствующая системным установкам.'
                }
            }
        },
        "МетодШифрованияZIP": {
            name: 'МетодШифрованияZIP',
            name_en: 'ZIPEncryptionMethod',
            description: 'Содержит варианты методов шифрования ZIP файлов.',
            values: {
                "AES128": {
                    name: 'AES128',
                    name_en: 'AES128',
                    description: 'Шифрование методом AES 128-бит. Не совместимо со старыми версиями ZIP.'
                },
                "AES192": {
                    name: 'AES192',
                    name_en: 'AES192',
                    description: 'Шифрование методом AES 192-бит. Не совместимо со старыми версиями ZIP.'
                },
                "AES256": {
                    name: 'AES256',
                    name_en: 'AES256',
                    description: 'Шифрование методом AES 256-бит. Не совместимо со старыми версиями ZIP.'
                },
                "Zip20": {
                    name: 'Zip20',
                    name_en: 'Zip20',
                    description: 'Шифрование методом ZIP версии 2.0. Совместимо со всеми сторонними программами.'
                }
            }
        },
        "НаправлениеПоиска": {
            name: 'НаправлениеПоиска',
            name_en: 'SearchDirection',
            description: 'Определяет направление поиска подстроки в строке.',
            values: {
                "СКонца": {
                    name: 'СКонца',
                    name_en: 'FromEnd',
                    description: 'Задает направление поиска от конца строки к ее началу.'
                },
                "СНачала": {
                    name: 'СНачала',
                    name_en: 'FromBegin',
                    description: 'Задает направление поиска от начала строки в концу.'
                }
            }
        },
        "НаправлениеСортировки": {
            name: 'НаправлениеСортировки',
            name_en: 'SortDirection',
            description: 'Определяет возможные способы сортировки.',
            values: {
                "Возр": {
                    name: 'Возр',
                    name_en: 'Asc',
                    description: 'Сортировка по возрастанию.'
                },
                "Убыв": {
                    name: 'Убыв',
                    name_en: 'Desc',
                    description: 'Сортировка по убыванию.'
                }
            }
        },
        "РежимВосстановленияПутейФайловZIP": {
            name: 'РежимВосстановленияПутейФайловZIP',
            name_en: 'ZIPRestoreFilePathsMode',
            description: 'Содержит варианты восстановления путей файлов при извлечении из архива.',
            values: {
                "Восстанавливать": {
                    name: 'Восстанавливать',
                    name_en: 'Restore',
                    description: 'Требуется восстанавливать пути при извлечении элемента из архива.'
                },
                "НеВосстанавливать": {
                    name: 'НеВосстанавливать',
                    name_en: 'DontRestore',
                    description: 'При извлечении из архива пути файлов игнорируются.'
                }
            }
        },
        "РежимОбработкиПодкаталоговZIP": {
            name: 'РежимОбработкиПодкаталоговZIP',
            name_en: 'ZIPSubDirProcessingMode',
            description: 'Содержит варианты обработки масок файлов в именах для упаковки в ZIP архив.',
            values: {
                "НеОбрабатывать": {
                    name: 'НеОбрабатывать',
                    name_en: 'DontProcess',
                    description: 'При задании маски в качестве имени для архивации подкаталоги не будут обработаны.'
                },
                "ОбрабатыватьРекурсивно": {
                    name: 'ОбрабатыватьРекурсивно',
                    name_en: 'ProcessRecursively',
                    description: 'При задании маски в качестве пути для архивации подкаталоги также будут рекурсивно обработаны.'
                }
            }
        },
        "РежимСохраненияПутейZIP": {
            name: 'РежимСохраненияПутейZIP',
            name_en: 'ZIPStorePathMode',
            description: 'Содержит варианты методов сохранения путей файлов при помещении их в архив.',
            values: {
                "НеСохранятьПути": {
                    name: 'НеСохранятьПути',
                    name_en: 'DontStorePath',
                    description: 'Не сохранять пути.'
                },
                "СохранятьОтносительныеПути": {
                    name: 'СохранятьОтносительныеПути',
                    name_en: 'StoreRelativePath',
                    description: 'При помещении в архив сохраняются относительные пути от указанного каталога.'
                },
                "СохранятьПолныеПути": {
                    name: 'СохранятьПолныеПути',
                    name_en: 'StoreFullPath',
                    description: 'При помещении в архив сохраняются полные пути файлов.'
                }
            }
        },
        "Символы": {
            name: 'Символы',
            name_en: 'Chars',
            description: 'Определяет набор специальных символов. Значения этого набора имеют тип Строка.',
            values: {
                "ВК": {
                    name: 'ВК',
                    name_en: 'CR',
                    description: 'Возврат каретки.'
                },
                "ВТаб": {
                    name: 'ВТаб',
                    name_en: 'VTab',
                    description: 'Символ табуляции (вертикальной).'
                },
                "НПП": {
                    name: 'НПП',
                    name_en: 'NBSp',
                    description: 'Неразрывный пробел. Пробел, по которому не должен выполняться перенос на другую строку или другое разбиение текста при форматировании.'
                },
                "ПС": {
                    name: 'ПС',
                    name_en: 'LF',
                    description: 'Перевод строки.'
                },
                "ПФ": {
                    name: 'ПФ',
                    name_en: 'FF',
                    description: 'Перевод формы (страницы).'
                },
                "Таб": {
                    name: 'Таб',
                    name_en: 'Tab',
                    description: 'Символ табуляции (горизонтальной).'
                }
            }
        },
        "СпособКодированияСтроки": {
            name: 'СпособКодированияСтроки',
            name_en: 'StringEncodingMethod',
            description: 'Варианты кодирования строк.',
            values: {
                "URLВКодировкеURL": {
                    name: 'URLВКодировкеURL',
                    name_en: 'URLInURLEncoding',
                    description: 'Кодировать (раскодировать) строку URL в URL кодировке. Спецсимволы URL ( !#$%\'()*+,/:;=?@[] ) не кодируются.'
                },
                "КодировкаURL": {
                    name: 'КодировкаURL',
                    name_en: 'URLEncoding',
                    description: 'Кодировать (раскодировать) в URL кодировке.'
                }
            }
        },
        "СтатусСообщения": {
            name: 'СтатусСообщения',
            name_en: 'MessageStatus',
            description: 'Определяет набор статусов сообщений, обозначаемых пиктограммами при выводе сообщений в окно сообщений.',
            values: {
                "БезСтатуса": {
                    name: 'БезСтатуса',
                    name_en: 'WithoutStatus',
                    description: 'Без пиктограммы.'
                },
                "Важное": {
                    name: 'Важное',
                    name_en: 'Important',
                    description: 'Пиктограмма - два красных восклицательных знака.'
                },
                "Внимание": {
                    name: 'Внимание',
                    name_en: 'Attention',
                    description: 'Пиктограмма - красный восклицательный знак.'
                },
                "Информация": {
                    name: 'Информация',
                    name_en: 'Information',
                    description: 'Пиктограмма - символ "i".'
                },
                "Обычное": {
                    name: 'Обычное',
                    name_en: 'Ordinary',
                    description: 'Пиктограмма - синий треугольник.'
                },
                "ОченьВажное": {
                    name: 'ОченьВажное',
                    name_en: 'VeryImportant',
                    description: 'Пиктограмма - три красных восклицательных знака.'
                }
            }
        },
        "ТипУзлаXML": {
            name: 'ТипУзлаXML',
            name_en: 'XMLNodeType',
            description: 'Содержит варианты узлов XML, которые могут быть получены при чтении XML с помощью объекта ЧтениеXML.',
            values: {
                "Атрибут": {
                    name: 'Атрибут',
                    name_en: 'Attribute',
                    description: 'Соответствует атрибуту элемента XML.'
                },
                "ИнструкцияОбработки": {
                    name: 'ИнструкцияОбработки',
                    name_en: 'ProcessingInstruction',
                    description: 'Соответствует инструкции обработки XML.'
                },
                "Комментарий": {
                    name: 'Комментарий',
                    name_en: 'Comment',
                    description: 'Узел комментария.'
                },
                "КонецСущности": {
                    name: 'КонецСущности',
                    name_en: 'EndEntity',
                    description: 'Конец разбора разыменованной сущности XML.'
                },
                "КонецЭлемента": {
                    name: 'КонецЭлемента',
                    name_en: 'EndElement',
                    description: 'Соответствует концу элемента XML.'
                },
                "НачалоЭлемента": {
                    name: 'НачалоЭлемента',
                    name_en: 'StartElement',
                    description: 'Соответствует узлу XML.'
                },
                "Ничего": {
                    name: 'Ничего',
                    name_en: 'None',
                    description: 'Нет никакого узла. Чтение еще не начато, или уже все прочитано.'
                },
                "Нотация": {
                    name: 'Нотация',
                    name_en: 'Notation',
                    description: 'Нотация XML.'
                },
                "ОбъявлениеXML": {
                    name: 'ОбъявлениеXML',
                    name_en: 'XMLDeclaration',
                    description: 'Объявление документа XML.'
                },
                "ОпределениеТипаДокумента": {
                    name: 'ОпределениеТипаДокумента',
                    name_en: 'DocumentTypeDefinition',
                    description: 'Узел определения типа документа (DTD).'
                },
                "ПробельныеСимволы": {
                    name: 'ПробельныеСимволы',
                    name_en: 'Whitespace',
                    description: 'Пробельные символы.'
                },
                "СекцияCDATA": {
                    name: 'СекцияCDATA',
                    name_en: 'CDATASection',
                    description: 'Узел секции CDATA.'
                },
                "СсылкаНаСущность": {
                    name: 'СсылкаНаСущность',
                    name_en: 'EntityReference',
                    description: 'Узел ссылки на сущность XML.'
                },
                "Сущность": {
                    name: 'Сущность',
                    name_en: 'Entity',
                    description: 'Узел определения сущности XML.'
                },
                "Текст": {
                    name: 'Текст',
                    name_en: 'Text',
                    description: 'Соответствует тексту элемента XML.'
                }
            }
        },
        "УровеньСжатияZIP": {
            name: 'УровеньСжатияZIP',
            name_en: 'ZIPCompressionLevel',
            description: 'Содержит варианты степени сжатия ZIP файлов.',
            values: {
                "Максимальный": {
                    name: 'Максимальный',
                    name_en: 'Maximum',
                    description: 'Максимальное сжатие - меньший размер, большее время работы.'
                },
                "Минимальный": {
                    name: 'Минимальный',
                    name_en: 'Minimum',
                    description: 'Минимальный уровень сжатия и время работы.'
                },
                "Оптимальный": {
                    name: 'Оптимальный',
                    name_en: 'Optimal',
                    description: 'Оптимальное сжатие - оптимальный размер, оптимальное время работы.'
                }
            }
        },
        "ХешФункция": {
            name: 'ХешФункция',
            name_en: 'HashFunction',
            description: 'Варианты типов хеш-функции. Определяет способ вычисления хеш-суммы и тип вычисляемого значения.',
            values: {
                "CRC32": {
                    name: 'CRC32',
                    name_en: 'CRC32',
                    description: 'Вычислять значение CRC32.'
                },
                "MD5": {
                    name: 'MD5',
                    name_en: 'MD5',
                    description: 'Вычислять значение MD5.'
                },
                "SHA1": {
                    name: 'SHA1',
                    name_en: 'SHA1',
                    description: 'Вычислять значение SHA-1.'
                },
                "SHA256": {
                    name: 'SHA256',
                    name_en: 'SHA256',
                    description: 'Вычислять значение SHA-256.'
                }
            }
        }
    };
}
