/* tslint:disable:quotemark */
/* tslint:disable:object-literal-key-quotes */
/* tslint:disable:object-literal-sort-keys */
/* tslint:disable:max-line-length */

export function structureMenu(): any {
    return {
        "global" : {
            "Базовые методы встроенного языка" : "",
            "Файловые операции" : "",
            "Процедуры и функции взаимодействия с системой" : "",
            "Функции работы с XML" : "",
            "Работа с настройками системы" : "",
            "Операции со строками" : "",
            "Прочие функции" : ""
        },
        "classes" : {
            "Универсальные коллекции" : {
                "Массив" : "",
                "Соответствие" : "",
                "Структура" : "",
                "СписокЗначений" : {
                    "ЭлементСпискаЗначений" : ""
                },
                "ТаблицаЗначений" : {
                    "КолонкаТаблицыЗначений" : "",
                    "КоллекцияКолонокТаблицыЗначений" : "",
                    "СтрокаТаблицыЗначений" : "",
                    "ИндексыКоллекции" : "",
                    "ИндексКоллекции" : ""
                },
                "ДеревоЗначений" : {
                    "СтрокаДереваЗначений" : "",
                    "КолонкаДереваЗначений" : "",
                    "КоллекцияКолонокДереваЗначений" : "",
                    "КоллекцияСтрокДереваЗначений" : ""
                },
                "КлючИЗначение" : "",
                "ФиксированныйМассив" : "",
                "ФиксированноеСоответствие" : "",
                "ФиксированнаяСтруктура" : ""
            },
            "Работа с сетью" : {
                "HTTPСоединение" : "",
                "HTTPЗапрос" : "",
                "HTTPОтвет" : "",
                "ИнтернетПрокси" : "",
                "TCPСоединение" : "",
                "TCPСервер" : "",
                "ОписаниеФайлаPostЗапроса" : "",
                "ДанныеPOSTЗапроса" : ""
            },
            "Работа с двоичными данными": {
                "БуферДвоичныхДанных": "",
                "ФайловыйПоток": "",
                "ПотокВПамяти": "",
                "Поток": "",
                "МенеджерФайловыхПотоков": "",
            },
            "Работа с ZIP" : {
                "ЗаписьZipФайла" : "",
                "ЧтениеZipФайла" : "",
                "ЭлементыZipФайла" : "",
                "ЭлементZipФайла" : ""
            },
            "Регулярные выражения" : {
                "РегулярноеВыражение" : "",
                "ГруппаРегулярногоВыражения" : "",
                "КоллекцияГруппРегулярногоВыражения" : "",
                "КоллекцияСовпаденийРегулярногоВыражения" : "",
                "СовпадениеРегулярногоВыражения" : ""
            },
            "Прочее" : ""
        }
    };
}
export function globalContextOscript(): any {
    let data = {

        "Файловые операции" : {
            "methods" : {
                "КопироватьФайл" : {
                    "name" : "КопироватьФайл",
                    "name_en" : "CopyFile",
                    "signature" : "(source: Строка, destination: Строка)",
                    "description" : "Копирует файл из одного расположения в другое. Перезаписывает приемник, если он существует.",
                    "params" : {
                        "source" : "Имя файла-источника",
                        "destination" : "Имя файла приемника"
                    }
                },
                "ПереместитьФайл" : {
                    "name" : "ПереместитьФайл",
                    "name_en" : "MoveFile",
                    "signature" : "(source: Строка, destination: Строка)",
                    "description" : "Перемещает файл из одного расположения в другое.",
                    "params" : {
                        "source" : "Имя файла-источника",
                        "destination" : "Имя файла приемника"
                    }
                },
                "КаталогВременныхФайлов" : {
                    "name" : "КаталогВременныхФайлов",
                    "name_en" : "TempFilesDir",
                    "signature" : "(): Строка",
                    "description" : "Возвращает каталог временных файлов ОС",
                    "returns" : "Строка. Путь к каталогу временных файлов"
                },
                "ПолучитьИмяВременногоФайла" : {
                    "name" : "ПолучитьИмяВременногоФайла",
                    "name_en" : "GetTempFileName",
                    "signature" : "(ext?: Строка): Строка",
                    "description" : "Получает имя файла во временом каталоге.",
                    "returns" : "Строка. Полный путь ко временному файлу.",
                    "params" : {
                        "ext" : "Расширение будущего файла. Если не указано, то по умолчанию расширение равно \".tmp\""
                    }
                },
                "НайтиФайлы" : {
                    "name" : "НайтиФайлы",
                    "name_en" : "FindFiles",
                    "signature" : "(dir: Строка, mask?: Строка, recursive?: Булево): Массив",
                    "description" : "Выполняет поиск файлов по маске",
                    "returns" : "Массив объектов Файл, которые были найдены.",
                    "params" : {
                        "dir" : "Каталог, в котором выполняется поиск",
                        "mask" : "Маска имени файла (включая символы * и ?)",
                        "recursive" : "Флаг рекурсивного поиска в поддиректориях"
                    }
                },
                "УдалитьФайлы" : {
                    "name" : "УдалитьФайлы",
                    "name_en" : "DeleteFiles",
                    "signature" : "(path: Строка, mask?: Строка)",
                    "description" : "Удаление файлов",
                    "params" : {
                        "path" : "Каталог из которого удаляются файлы, или сам файл.",
                        "mask" : "Маска файлов. Необязательный параметр. Если указан, то первый параметр трактуется, как каталог."
                    }
                },
                "СоздатьКаталог" : {
                    "name" : "СоздатьКаталог",
                    "name_en" : "CreateDirectory",
                    "signature" : "(path: Строка)",
                    "description" : "Создать каталог",
                    "params" : {
                        "path" : "Имя нового каталога"
                    }
                },
                "ТекущийКаталог" : {
                    "name" : "ТекущийКаталог",
                    "name_en" : "CurrentDirectory",
                    "signature" : "(): Строка",
                    "description" : "Получить текущий каталог"
                },
                "УстановитьТекущийКаталог" : {
                    "name" : "УстановитьТекущийКаталог",
                    "name_en" : "SetCurrentDirectory",
                    "signature" : "(path: Строка)",
                    "description" : "Установить каталог текущим",
                    "params" : {
                        "path" : "Имя нового текущего каталога"
                    }
                },
                "ПолучитьРазделительПути" : {
                    "name" : "ПолучитьРазделительПути",
                    "name_en" : "GetPathSeparator",
                    "signature" : "(): Строка",
                    "description" : "Получает разделитель пути в соответствии с текущей операционной системой"
                },
                "ПолучитьМаскуВсеФайлы" : {
                    "name" : "ПолучитьМаскуВсеФайлы",
                    "name_en" : "GetAllFilesMask",
                    "signature" : "(): Строка",
                    "description" : "Получает маску \"все файлы\" для текущей операционной системы.В Windows маска принимает значение \"*.*\", в nix - \"*\"."
                },
                "ОбъединитьПути" : {
                    "name" : "ОбъединитьПути",
                    "name_en" : "CombinePath",
                    "signature" : "(path1: Строка, path2: Строка, path3?: Строка, path4?: Строка): Строка",
                    "description" : "Объединяет компоненты файлового пути, с учетом разделителей, принятых в данной ОС.При этом корректно, без дублирования, обрабатываются уже существующие разделители пути.",
                    "returns" : "Объединенный путь.",
                    "params" : {
                        "path1" : "Первая часть пути",
                        "path2" : "Вторая часть пути",
                        "path3" : "Третья часть пути (необязательно)",
                        "path4" : "Четвертая часть пути (необязательно)"
                    }
                }
            }
        },

        "Прочие функции" : {
            "methods" : {
                "Base64Строка" : {
                    "name" : "Base64Строка",
                    "name_en" : "Base64String",
                    "signature" : "(data: ДвоичныеДанные): Строка"
                },
                "Base64Значение" : {
                    "name" : "Base64Значение",
                    "name_en" : "Base64Value",
                    "signature" : "(data: Строка): ДвоичныеДанные"
                },
                "КодироватьСтроку" : {
                    "name" : "КодироватьСтроку",
                    "name_en" : "EncodeString",
                    "signature": "(sourceString: Строка, codeType: СпособКодированияСтроки, encoding?: КодировкаТекста|Строка): Строка",
                    "description" : "Кодирует строку для передачи в URL (urlencode)"
                },
                "РаскодироватьСтроку" : {
                    "name" : "РаскодироватьСтроку",
                    "name_en" : "DecodeString",
                    "signature": "(encodedString: Строка, codeType: СпособКодированияСтроки, encoding?: КодировкаТекста|Строка): Строка",
                    "description" : "Раскодирует строку из URL формата."
                }
            }
        },

        "Работа с настройками системы" : {
            "methods" : {
                "ОбновитьНастройкиСистемы" : {
                    "name" : "ОбновитьНастройкиСистемы",
                    "name_en" : "RefreshSystemConfig",
                    "signature" : "()",
                    "description" : "Метод обновляет текущие настройки значениями из файла oscript.cfg"
                },
                "ПолучитьЗначениеСистемнойНастройки" : {
                    "name" : "ПолучитьЗначениеСистемнойНастройки",
                    "name_en" : "GetSystemOptionValue",
                    "signature" : "(optionKey: Строка): Строка",
                    "description" : "Метод возвращает значение из файла oscript.cfg по имени настойки",
                    "returns" : "Строка. Значение системной настройки.",
                    "params" : {
                        "optionKey" : "Имя настройки из файла oscript.cfg"
                    }
                }
            }
        },

        "Процедуры и функции взаимодействия с системой" : {
            "description" : "Глобальный контекст. Представляет глобально доступные свойства и методы.",
            "properties": {
                "ФайловыеПотоки" : {
                    "name" : "ФайловыеПотоки",
                    "name_en" : "FileStreams",
                    "description" : "Менеджер файловых потоков.",
                    "access" : "Чтение"
                },
                "АргументыКоманднойСтроки": {
                    "name" : "АргументыКоманднойСтроки",
                    "name_en" : "CommandLineArguments",
                    "description" : "Доступ к аргументам командной строки.Объект АргументыКоманднойСтроки представляет собой массив в режиме \"только чтение\".",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "Сообщить" : {
                    "name" : "Сообщить",
                    "name_en" : "Message",
                    "signature" : "(message: Строка, status?: СтатусСообщения)",
                    "description" : "Выдает сообщение в консоль.",
                    "params" : {
                        "message" : "Выдаваемое сообщение.",
                        "status" : "Статус сообщения. Сообщения разных уровней выводятся в разных цветах."
                    }
                },
                "ПодключитьСценарий" : {
                    "name" : "ПодключитьСценарий",
                    "name_en" : "AttachScript",
                    "signature" : "(path: Строка, typeName: Строка)",
                    "description" : "Подключает сторонний файл сценария к текущей системе типов.Подключенный сценарий выступает, как самостоятельный класс, создаваемый оператором Новый",
                    "example" : "ПодключитьСценарий(\"C:\\file.os\", \"МойОбъект\");<br>А = Новый МойОбъект();",
                    "params" : {
                        "path" : "Путь к подключаемому сценарию",
                        "typeName" : "Имя типа, которое будет иметь новый класс. Экземпляры класса создаются оператором Новый."
                    }
                },
                "ЗагрузитьСценарий" : {
                    "name" : "ЗагрузитьСценарий",
                    "name_en" : "LoadScript",
                    "signature" : "(path: Строка, externalContext?: Структура)",
                    "description" : "Создает экземпляр объекта на основании стороннего файла сценария.Загруженный сценарий возвращается, как самостоятельный объект.Экспортные свойства и методы скрипта доступны для вызова.",
                    "example" : "Контекст = Новый Структура(\"ЧислоПи\", 3.1415); // 4 знака хватит<br>// В коде скрипта somescript.os будет доступна глобальная переменная \"ЧислоПи\"<br>Объект = ЗагрузитьСценарий(\"somescript.os\", Контекст);",
                    "params" : {
                        "path" : "Путь к подключаемому сценарию",
                        "externalContext" : "Структура. Глобальные свойства, которые будут инжектированы в область видимости загружаемого скрипта. (Необязательный)"
                    }
                },
                "ПодключитьВнешнююКомпоненту" : {
                    "name" : "ПодключитьВнешнююКомпоненту",
                    "name_en" : "AttachAddIn",
                    "signature" : "(dllPath: Строка)",
                    "description" : "Подключает внешнюю сборку среды .NET (*.dll) и регистрирует классы 1Script, объявленные в этой сборке.Публичные классы, отмеченные в dll атрибутом ContextClass, будут импортированы аналогично встроенным классам 1Script.Загружаемая сборка должна ссылаться на сборку ScriptEngine.dll",
                    "example" : "ПодключитьВнешнююКомпоненту(\"C:\\MyAssembly.dll\");<br>КлассИзКомпоненты = Новый КлассИзКомпоненты(); // тип объявлен внутри компоненты",
                    "params" : {
                        "dllPath" : "Путь к внешней компоненте"
                    }
                },
                "СтартовыйСценарий" : {
                    "name" : "СтартовыйСценарий",
                    "name_en" : "EntryScript",
                    "signature" : "(): ИнформацияОСценарии",
                    "description" : "Возвращает информацию о сценарии, который был точкой входа в программу.Можно выделить два вида сценариев: те, которые были подключены, как классы и те, которые запущены непосредственно. Метод СтартовыйСценарий возвращает информацию о сценарии, запущенном непосредственно.Для получения информации о текущем выполняемом сценарии см. метод ТекущийСценарий()",
                    "returns" : "Объект ИнформацияОСценарии"
                },
                "Приостановить" : {
                    "name" : "Приостановить",
                    "name_en" : "Sleep",
                    "signature" : "(delay: Число)",
                    "description" : "Приостанавливает выполнение скрипта.",
                    "params" : {
                        "delay" : "Время приостановки в миллисекундах"
                    }
                },
                "ЗавершитьРаботу" : {
                    "name" : "ЗавершитьРаботу",
                    "name_en" : "Exit",
                    "signature" : "(exitCode: Число)",
                    "description" : "Прерывает выполнение текущего скрипта.",
                    "params" : {
                        "exitCode" : "Код возврата (ошибки), возвращаемый операционной системе."
                    }
                },
                "ВвестиСтроку" : {
                    "name" : "ВвестиСтроку",
                    "name_en" : "InputString",
                    "signature" : "(result: Переменная, len?: Число): Булево",
                    "description" : "Ввод строки пользователем. Позволяет запросить у пользователя информацию.",
                    "returns" : "Булево. Истина, если пользователь ввел данные, Ложь, если отказался.",
                    "params" : {
                        "resut" : "Выходной параметр. Введенные данные в виде строки.",
                        "len" : "Максимальная длина вводимой строки.Возможно указание неограниченной длины (длина=ноль), но данное поведение может не поддерживаться хост-приложением."
                    }
                },
                "ОсвободитьОбъект" : {
                    "name" : "ОсвободитьОбъект",
                    "name_en" : "FreeObject",
                    "signature" : "(obj: Объект)",
                    "description" : "Явное освобождение ресурса через интерфейс IDisposable среды CLR.OneScript не выполняет подсчет ссылок на объекты, а полагается на сборщик мусора CLR.Это значит, что объекты автоматически не освобождаются при выходе из области видимости.Метод ОсвободитьОбъект можно использовать для детерминированного освобождения ресурсов. Если объект поддерживает интерфейс IDisposable, то данный метод вызовет Dispose у данного объекта.Как правило, интерфейс IDisposable реализуется различными ресурсами (файлами, соединениями с ИБ и т.п.)",
                    "params" : {
                        "obj" : "Объект, ресурсы которого требуется освободить."
                    }
                },
                "ВыполнитьСборкуМусора" : {
                    "name" : "ВыполнитьСборкуМусора",
                    "name_en" : "RunGarbageCollection",
                    "signature" : "()",
                    "description" : "OneScript не выполняет подсчет ссылок на объекты, а полагается на сборщик мусора CLR.Это значит, что объекты автоматически не освобождаются при выходе из области видимости.С помощью данного метода можно запустить принудительную сборку мусора среды CLR.Данные метод следует использовать обдуманно, поскольку вызов данного метода не гарантирует освобождение всех объектов.Локальные переменные, например, до завершения текущего метода очищены не будут,поскольку до завершения текущего метода CLR будет видеть, что они используются движком 1Script."
                },
                "ЗапуститьПриложение" : {
                    "name" : "ЗапуститьПриложение",
                    "name_en" : "RunApp",
                    "signature" : "(cmdLine: Строка, currentDir?: Строка, wait?: Булево, retCode?: Число)",
                    "description" : "Запуск приложения в операционной системе",
                    "params" : {
                        "cmdLine" : "Командная строка запуска",
                        "currentDir" : "Текущая директория запускаемого процесса (необязательно)",
                        "wait" : "Ожидать завершения (необязательно) по умолчанию Ложь",
                        "retCode" : "Выходной параметр. Код возврата процесса. Имеет смысл только если указан параметр wait=true"
                    }
                },
                "СоздатьПроцесс" : {
                    "name" : "СоздатьПроцесс",
                    "name_en" : "CreateProcess",
                    "signature" : "(cmdLine: Строка, currentDir?: Строка, redirectOutput: Булево, redirectInput?: Булево, encoding?: КодировкаТекста|Строка): Процесс",
                    "description" : "Создает процесс, которым можно манипулировать из скрипта",
                    "params" : {
                        "cmdLine" : "Командная строка запуска",
                        "currentDir" : "Текущая директория запускаемого процесса (необязательно)",
                        "redirectOutput" : "Перехватывать стандартные потоки stdout и stderr",
                        "redirectInput" : "Перехватывать стандартный поток stdin",
                        "encoding" : "Кодировка стандартных потоков вывода и ошибок"
                    }
                },
                "НайтиПроцессПоИдентификатору" : {
                    "name" : "НайтиПроцессПоИдентификатору",
                    "name_en" : "FindProcessById",
                    "signature" : "(PID: Число): Процесс",
                    "description" : "Выполняет поиск процесса по PID среди запущенных в операционной системе",
                    "returns" : "Процесс. Если не найден - Неопределено",
                    "params" : {
                        "PID" : "Идентификатор процесса"
                    }
                },
                "НайтиПроцессыПоИмени" : {
                    "name" : "НайтиПроцессыПоИмени",
                    "name_en" : "FindProcessesByName",
                    "signature" : "(name: Строка): Массив",
                    "description" : "Выполняет поиск процессов с определенным именем",
                    "returns" : "Массив объектов Процесс.",
                    "params" : {
                        "name" : "Имя процесса"
                    }
                },
                "КаталогПрограммы" : {
                    "name" : "КаталогПрограммы",
                    "name_en" : "ProgramDirectory",
                    "signature" : "(): Строка",
                    "description" : "Каталог исполняемых файлов OneScript"
                },
                "КраткоеПредставлениеОшибки" : {
                    "name" : "КраткоеПредставлениеОшибки",
                    "name_en" : "BriefErrorDescription",
                    "signature" : "(errInfo: ИнформацияОбОшибке): Строка"
                },
                "ПодробноеПредставлениеОшибки" : {
                    "name" : "ПодробноеПредставлениеОшибки",
                    "name_en" : "DetailErrorDescription",
                    "signature" : "(errInfo: ИнформацияОбОшибке): Строка"
                },
                "ТекущаяДата" : {
                    "name" : "ТекущаяДата",
                    "name_en" : "CurrentDate",
                    "signature" : "(): Дата",
                    "description" : "Текущая дата машины",
                    "returns" : "Дата"
                },
                 "ТекущаяУниверсальнаяДатаВМиллисекундах" : {
                    "name" : "ТекущаяУниверсальнаяДатаВМиллисекундах",
                    "name_en" : "CurrentUniversalDateInMilliseconds",
                    "signature" : "(): Число"
                },
                "ЗначениеЗаполнено" : {
                    "name" : "ЗначениеЗаполнено",
                    "name_en" : "IsValueFilled",
                    "signature" : "(value: Произвольный): Булево",
                    "description" : "Проверяет заполненность значения по принципу, заложенному в 1С:Предприятии"
                },
                "ЗаполнитьЗначенияСвойств" : {
                    "name" : "ЗаполнитьЗначенияСвойств",
                    "name_en" : "FillPropertyValues",
                    "signature" : "(acceptor: Произвольный, source: Произвольный, filledProperties?: Строка, ignoredProperties?: Строка)",
                    "description" : "Заполняет одноименные значения свойств одного объекта из другого",
                    "params" : {
                        "acceptor" : "Объект-приемник",
                        "source" : "Объект-источник",
                        "filledProperties" : "Заполняемые свойства (строка, через запятую)",
                        "ignoredProperties" : "Игнорируемые свойства (строка, через запятую)"
                    }
                }
            }
        },

        "Операции со строками" : {
            "methods" : {
                "НСтр" : {
                    "name" : "НСтр",
                    "name_en" : "NStr",
                    "signature" : "(src: Строка, lang?: Строка): Строка",
                    "description" : "Функция НСтр имеет ограниченную поддержку и может использоваться только для упрощения портирования кода из 1С. Возвращает только строку на первом языке из списка, если второй параметр не указан. (Игнорирует \"язык по-умолчанию\")",
                    "params" : {
                        "src" : "Строка на нескольких языках",
                        "lang" : "Код языка (если не указан, возвращается первый возможный вариант)"
                    }
                },
                "СтрНачинаетсяС" : {
                    "name" : "СтрНачинаетсяС",
                    "name_en" : "StrStartWith",
                    "signature" : "(inputString: Строка, searchString: Строка): Булево",
                    "description" : "Определяет, что строка начинается с указанной подстроки.",
                    "params" : {
                        "inputString" : "Строка, начало которой проверяется на совпадение с подстрокой поиска.",
                        "searchString" : "Строка, содержащая предполагаемое начало строки. В случае если переданное значение является пустой строкой генерируется исключительная ситуация."
                    }
                },
                "СтрЗаканчиваетсяНа" : {
                    "name" : "СтрЗаканчиваетсяНа",
                    "name_en" : "StrEndsWith",
                    "signature" : "(inputString: Строка, searchString: Строка): Булево",
                    "description" : "Определяет, заканчивается ли строка указанной подстрокой.",
                    "params" : {
                        "inputString" : "Строка, окончание которой проверяется на совпадение с подстрокой поиска.",
                        "searchString" : "Строка, содержащая предполагаемое окончание строки. В случае если переданное значение является пустой строкой генерируется исключительная ситуация."
                    }
                },
                "СтрРазделить" : {
                    "name" : "СтрРазделить",
                    "name_en" : "StrSplit",
                    "signature" : "(inputString: Строка, stringDelimiter: Строка, includeEmpty?: Булево): Массив",
                    "description" : "Разделяет строку на части по указанным символам-разделителям.",
                    "params" : {
                        "inputString" : "Разделяемая строка.",
                        "stringDelimiter" : "Строка символов, каждый из которых является индивидуальным разделителем.",
                        "includeEmpty" : "Указывает необходимость включать в результат пустые строки, которые могут образоваться в результате разделения исходной строки. Значение по умолчанию: Истина."
                    }
                },
                "СтрСоединить" : {
                    "name" : "СтрСоединить",
                    "name_en" : "StrConcat",
                    "signature" : "(input: Массив, delimiter?: Строка): Строка",
                    "description" : "Соединяет массив переданных строк в одну строку с указанным разделителем",
                    "params" : {
                        "input" : "Массив - соединяемые строки",
                        "delimiter" : "Разделитель. Если не указан, строки объединяются слитно"
                    }
                },
                "СтрСравнить" : {
                    "name" : "СтрСравнить",
                    "name_en" : "StrCompare",
                    "signature" : "(first: Строка, second: Строка): Число",
                    "description" : "Сравнивает строки без учета регистра.",
                    "returns" : "-1 первая строка больше, 1 - вторая строка больше. 0 - строки равны"
                },
                "СтрНайти" : {
                    "name" : "СтрНайти",
                    "name_en" : "StrFind",
                    "signature" : "(haystack: Строка, needle: Строка, direction?: НаправлениеПоиска, startPos?: Число, occurance?: Число): Число",
                    "description" : "Находит вхождение искомой строки как подстроки в исходной строке",
                    "returns" : "Позицию искомой строки в исходной строке. Возвращает 0, если подстрока не найдена.",
                    "params" : {
                        "haystack" : "Строка, в которой ищем",
                        "needle" : "Строка, которую надо найти",
                        "direction" : "значение перечисления НаправлениеПоиска (с конца/с начала)",
                        "startPos" : "Начальная позиция, с которой начинать поиск",
                        "occurance" : "Указывает номер вхождения искомой подстроки в исходной строке"
                    }
                }
            }
        },

        "Функции работы с XML" : {
            "methods" : {
                "XMLСтрока" : {
                    "name" : "XMLСтрока",
                    "name_en" : "XMLString",
                    "signature" : "(value: Произвольный): Строка"
                },
                "XMLЗначение" : {
                    "name" : "XMLЗначение",
                    "name_en" : "XMLValue",
                    "signature" : "(givenType: Тип, presentation: Строка): Произвольный"
                }
            }
        },

        "Базовые методы встроенного языка" : {
            "methods" : {
                "СтрДлина" : {
                    "name" : "СтрДлина",
                    "name_en" : "StrLen",
                    "signature" : "(Строка: Строка): Число"
                },
                "СокрЛ" : {
                    "name" : "СокрЛ",
                    "name_en" : "TrimL",
                    "signature" : "(Строка: Строка): Строка"
                },
                "СокрП" : {
                    "name" : "СокрП",
                    "name_en" : "TrimR",
                    "signature" : "(Строка: Строка): Строка"
                },
                "СокрЛП" : {
                    "name" : "СокрЛП",
                    "name_en" : "TrimAll",
                    "signature" : "(Строка: Строка): Строка"
                },
                "Лев" : {
                    "name" : "Лев",
                    "name_en" : "Left",
                    "signature" : "(Строка: Строка, ЧислоСимволов: Число): Строка"
                },
                "Прав" : {
                    "name" : "Прав",
                    "name_en" : "Right",
                    "signature" : "(Строка: Строка, ЧислоСимволов: Число): Строка"
                },
                "Сред" : {
                    "name" : "Сред",
                    "name_en" : "Mid",
                    "signature" : "(Строка: Строка, НачальныйНомер: Число, ЧислоСимволов?: Число): Строка"
                },
                "Найти" : {
                    "name" : "Найти",
                    "name_en" : "Find",
                    "signature" : "(Строка: Строка, ПодстрокаПоиска: Строка): Число"
                },
                "ВРег" : {
                    "name" : "ВРег",
                    "name_en" : "Upper",
                    "signature" : "(Строка: Строка): Строка"
                },
                "НРег" : {
                    "name" : "НРег",
                    "name_en" : "Lower",
                    "signature" : "(Строка: Строка): Строка"
                },
                "ТРег" : {
                    "name" : "ТРег",
                    "name_en" : "Title",
                    "signature" : "(Строка: Строка): Строка"
                },
                "Символ" : {
                    "name" : "Символ",
                    "name_en" : "Char",
                    "signature" : "(КодСимвола: Число): Строка"
                },
                "КодСимвола" : {
                    "name" : "КодСимвола",
                    "name_en" : "CharCode",
                    "signature" : "(Строка: Строка, НомерСимвола?: Число): Число"
                },
                "ПустаяСтрока" : {
                    "name" : "ПустаяСтрока",
                    "name_en" : "IsBlankString",
                    "signature" : "(Строка: Строка): Булево"
                },
                "СтрЗаменить" : {
                    "name" : "СтрЗаменить",
                    "name_en" : "StrReplace",
                    "signature" : "(Строка: Строка, ПодстрокаПоиска: Строка, ПодстрокаЗамены: Строка): Строка"
                },
                "СтрПолучитьСтроку" : {
                    "name" : "СтрПолучитьСтроку",
                    "name_en" : "StrGetLine",
                    "signature" : "(Строка: Строка, НомерСтроки: Число): Строка"
                },
                "СтрЧислоСтрок" : {
                    "name" : "СтрЧислоСтрок",
                    "name_en" : "StrLineCount",
                    "signature" : "(Строка: Строка): Число",
                },
                "СтрЧислоВхождений" : {
                    "name" : "СтрЧислоВхождений",
                    "name_en" : "StrOccurrenceCount",
                    "signature" : "(Строка: Строка, ПодстрокаПоиска: Строка): Число"
                },
                "Год" : {
                    "name" : "Год",
                    "name_en" : "Year",
                    "signature" : "(Дата: Дата): Число"
                },
                "Месяц" : {
                    "name" : "Месяц",
                    "name_en" : "Month",
                    "signature" : "(Дата: Дата): Число"
                },
                "День" : {
                    "name" : "День",
                    "name_en" : "Day",
                    "signature" : "(Дата: Дата): Число"
                },
                "Час" : {
                    "name" : "Час",
                    "name_en" : "Hour",
                    "signature" : "(Дата: Дата): Число"
                },
                "Минута" : {
                    "name" : "Минута",
                    "name_en" : "Minute",
                    "signature" : "(Дата: Дата): Число"
                },
                "Секунда" : {
                    "name" : "Секунда",
                    "name_en" : "Second",
                    "signature" : "(Дата: Дата): Число"
                },
                "НачалоГода" : {
                    "name" : "НачалоГода",
                    "name_en" : "BegOfYear",
                    "signature" : "(Дата: Дата): Дата"
                },
                "НачалоМесяца" : {
                    "name" : "НачалоМесяца",
                    "name_en" : "BegOfMonth",
                    "signature" : "(Дата: Дата): Дата"
                },
                "НачалоДня" : {
                    "name" : "НачалоДня",
                    "name_en" : "BegOfDay",
                    "signature" : "(Дата: Дата): Дата"
                },
                "НачалоЧаса" : {
                    "name" : "НачалоЧаса",
                    "name_en" : "BegOfHour",
                    "signature" : "(Дата: Дата): Дата"
                },
                "НачалоМинуты" : {
                    "name" : "НачалоМинуты",
                    "name_en" : "BegOfMinute",
                    "signature" : "(Дата: Дата): Дата"
                },
                "НачалоКвартала" : {
                    "name" : "НачалоКвартала",
                    "name_en" : "BegOfQuarter",
                    "signature" : "(Дата: Дата): Дата"
                },
                "КонецГода" : {
                    "name" : "КонецГода",
                    "name_en" : "EndOfYear",
                    "signature" : "(Дата: Дата): Дата"
                },
                "КонецМесяца" : {
                    "name" : "КонецМесяца",
                    "name_en" : "EndOfMonth",
                    "signature" : "(Дата: Дата): Дата"
                },
                "КонецДня" : {
                    "name" : "КонецДня",
                    "name_en" : "EndOfDay",
                    "signature" : "(Дата: Дата): Дата"
                },
                "КонецЧаса" : {
                    "name" : "КонецЧаса",
                    "name_en" : "EndOfHour",
                    "signature" : "(Дата: Дата): Дата"
                },
                "КонецМинуты" : {
                    "name" : "КонецМинуты",
                    "name_en" : "EndOfMinute",
                    "signature" : "(Дата: Дата): Дата"
                },
                "КонецКвартала" : {
                    "name" : "КонецКвартала",
                    "name_en" : "EndOfQuarter",
                    "signature" : "(Дата: Дата): Дата"
                },
                "НеделяГода" : {
                    "name" : "НеделяГода",
                    "name_en" : "WeekOfYear",
                    "signature" : "(Дата: Дата): Число"
                },
                "ДеньГода" : {
                    "name" : "ДеньГода",
                    "name_en" : "DayOfYear",
                    "signature" : "(Дата: Дата): Число"
                },
                "ДеньНедели" : {
                    "name" : "ДеньНедели",
                    "name_en" : "WeekDay",
                    "signature" : "(Дата: Дата): Число"
                },
                "ДобавитьМесяц" : {
                    "name" : "ДобавитьМесяц",
                    "name_en" : "AddMonth",
                    "signature" : "(Дата: Дата, ЧислоМесяцев: Число): Дата"
                },
                "ТекущаяДата" : {
                    "name" : "ТекущаяДата",
                    "name_en" : "CurrentDate",
                    "signature" : "(): Дата"
                },
                "Цел" : {
                    "name" : "Цел",
                    "name_en" : "Int",
                    "signature" : "(Число: Число): Число"
                },
                "Окр" : {
                    "name" : "Окр",
                    "name_en" : "Round",
                    "signature" : "(Число: Число, Разрядность?: Число, РежимОкругления?: РежимОкругления): Число"
                },
                "Log" : {
                    "name" : "Log",
                    "name_en" : "Log",
                    "signature" : "(Число: Число): Число"
                },
                "Log10" : {
                    "name" : "Log10",
                    "name_en" : "Log10",
                    "signature" : "(Число: Число): Число"
                },
                "Sin" : {
                    "name" : "Sin",
                    "name_en" : "Sin",
                    "signature" : "(Угол: Число): Число"
                },
                "Cos" : {
                    "name" : "Cos",
                    "name_en" : "Cos",
                    "signature" : "(Угол: Число): Число"
                },
                "Tan" : {
                    "name" : "Tan",
                    "name_en" : "Tan",
                    "signature" : "(Угол: Число): Число"
                },
                "ASin" : {
                    "name" : "ASin",
                    "name_en" : "ASin",
                    "signature" : "(Число: Число): Число"
                },
                "ACos" : {
                    "name" : "ACos",
                    "name_en" : "ACos",
                    "signature" : "(Число: Число): Число"
                },
                "ATan" : {
                    "name" : "ATan",
                    "name_en" : "ATan",
                    "signature" : "(Число: Число): Число"
                },
                "Exp" : {
                    "name" : "Exp",
                    "name_en" : "Exp",
                    "signature" : "(Число: Число): Число"
                },
                "Pow" : {
                    "name" : "Pow",
                    "name_en" : "Pow",
                    "signature" : "(Основание: Число, Показатель: Число): Число"
                },
                "Sqrt" : {
                    "name" : "Sqrt",
                    "name_en" : "Sqrt",
                    "signature" : "(Число: Число): Число"
                },
                "Мин" : {
                    "name" : "Мин",
                    "name_en" : "Min",
                    "signature" : "(Значение1: Число|Строка|Дата|Булево, ..., ЗначениеN: Число|Строка|Дата|Булево): Число|Строка|Дата|Булево"
                },
                "Макс" : {
                    "name" : "Макс",
                    "name_en" : "Max",
                    "signature" : "(Значение1: Число|Строка|Дата|Булево, ..., ЗначениеN: Число|Строка|Дата|Булево): Число|Строка|Дата|Булево"
                },
                "Формат" : {
                    "name" : "Формат",
                    "name_en" : "Format",
                    "signature" : "(Значение: Число|Дата|Булево, ФорматнаяСтрока: Строка): Строка"
                },
                "ИнформацияОбОшибке" : {
                    "name" : "ИнформацияОбОшибке",
                    "name_en" : "ErrorInfo",
                    "signature" : "(): ИнформацияОбОшибке"
                },
                "ОписаниеОшибки" : {
                    "name" : "ОписаниеОшибки",
                    "name_en" : "ErrorDescription",
                    "signature" : "(): Строка"
                },
                "ТекущийСценарий" : {
                    "name" : "ТекущийСценарий",
                    "name_en" : "CurrentScript",
                    "signature" : "(): Строка",
                    "description" : "Возвращает информацию о выполняемом сценарии.",
                    "returns" : "ИнформацияОСценарии"
                },
                "СтрШаблон" : {
                    "name" : "СтрШаблон",
                    "name_en" : "StrTemplate",
                    "signature" : "(Шаблон: Строка, Значение1_Значение10?: Произвольный) : Строка"
                },
                "Булево" : {
                    "name" : "Булево",
                    "name_en" : "Boolean",
                    "signature" : "(Значение: Произвольный) : Булево",
                    "returns" : "Булево"
                },
                "Число" : {
                    "name" : "Число",
                    "name_en" : "Number",
                    "signature" : "(Значение: Произвольный) : Число",
                    "returns" : "Число"
                },
                "Строка" : {
                    "name" : "Строка",
                    "name_en" : "String",
                    "signature" : "(Значение: Произвольный) : Строка",
                    "returns" : "Строка"
                },
                "Дата" : {
                    "name" : "Дата",
                    "name_en" : "Date",
                    "signature" : "(Значение: Произвольный) : Дата",
                    "returns" : "Дата"
                },
                "Тип" : {
                    "name" : "Тип",
                    "name_en" : "Type",
                    "signature" : "(Значение: Строка) : Тип",
                    "returns" : "Тип"
                },
                "ТипЗнч" : {
                    "name" : "ТипЗнч",
                    "name_en" : "Type",
                    "signature" : "(Значение: Произвольный) : Тип",
                    "returns" : "Тип"
                }
            }
        }

    };
    return data;
}

export function classesOscript(): any {
    let data = {
        "БуферДвоичныхДанных" : {
            "name" : "БуферДвоичныхДанных",
            "name_en" : "BinaryDataBuffer",
            "description" : "Коллекция байтов фиксированного размера с возможностью произвольного доступа и изменения по месту. Размер буфера формально не ограничен, но поскольку все данные буфера полностью находятся в оперативной памяти, при попытке создать буфер слишком большого размера доступной памяти может оказаться недостаточно, в результате чего будет вызвано исключение. Поэтому при работе с буферами двоичных данных необходимо соотносить их размер с доступным объемом оперативной памяти. При создании буфера можно указать порядок байтов, который будет использован для операций с целыми числами. При этом если буфер не создан явно, а получен с помощью вызова метода другого объекта, то порядок байтов в полученном буфере будет унаследован от порядка байтов, заданного для того объекта, метод которого вызывается. Например, если буфер получен с помощью вызова метода ПрочитатьВБуферДвоичныхДанных, то порядок байтов в полученном буфере будет равен значению свойства ПорядокБайтов. Возможен также более сложный случай наследования порядка байтов. Если буфер получен с помощью вызова метода ПолучитьБуферДвоичныхДанных, то порядок байтов у полученного буфера будет выбираться из объекта ЧтениеДанных, из которого был получен объект РезультатЧтенияДанных. Порядок байтов, заданный для объекта ЧтениеДанных, будет использован во всех объектах, полученных на его основании.",
            "properties" : {
                "ПорядокБайтов" : {
                    "name" : "ПорядокБайтов",
                    "name_en" : "ByteOrder",
                    "description" : "Текущий порядок байтов. Влияет на операции чтения и записи целых чисел в буфер.",
                    "value" : "ПорядокБайтов (ByteOrder)",
                    "access" : "Чтение/Запись"
                },
                "Размер" : {
                    "name" : "Размер",
                    "name_en" : "Size",
                    "description" : "Размер буфера в байтах.",
                    "value" : "Число (Number)",
                    "access" : "Чтение"
                },
                "ТолькоЧтение" : {
                    "name" : "ТолькоЧтение",
                    "name_en" : "ReadOnly",
                    "description" : "Значение Истина указывает, что данный буфер предназначен только для чтения.",
                    "value" : "Булево (Boolean)",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "Записать" : {
                    "name" : "Записать",
                    "name_en" : "Write",
                    "signature" : "(position: Число, bytes: БуферДвоичныхДанных, number?: Число)",
                    "description" : "Заменить значения, начиная с заданной позиции, значениями из заданного буфера.",
                    "params" : {
                        "position" : "Позиция, начиная с которой требуется записать содержимое буфера.",
                        "bytes" : "Байты, которыми нужно заполнить часть буфера.",
                        "number" : "Количество байт, которые требуется заменить."
                    }
                },
                "ЗаписатьЦелое16" : {
                    "name" : "ЗаписатьЦелое16",
                    "name_en" : "WriteInt16",
                    "signature" : "(position: Число, value: Число, byteOrder?: Произвольный)",
                    "description" : "Записать целое 16-битное положительное число в заданную позицию.",
                    "params" : {
                        "position" : "Позиция, на которой требуется записать число.",
                        "value" : "Число, которое требуется записать. Если значение не помещается в 16 бит, будет вызвано исключение.",
                        "byteOrder" : "Порядок байтов, который будет использован для кодировки числа при записи в буфер. Если не установлен, то будет использован порядок байтов, заданный для текущего экземпляра БуферДвоичныхДанных. Значение по умолчанию: Неопределено."
                    }
                },
                "ЗаписатьЦелое32" : {
                    "name" : "ЗаписатьЦелое32",
                    "name_en" : "WriteInt32",
                    "signature" : "(position: Число, value: Число, byteOrder?: Произвольный)",
                    "description" : "Записать целое 32-битное положительное число в заданную позицию.",
                    "params" : {
                        "position" : "Позиция, на которой требуется записать число.",
                        "value" : "Число, которое требуется записать. Если значение не помещается в 32 бита, будет вызван исключение.",
                        "byteOrder" : "Порядок байтов, который будет использован для кодировки числа при записи в буфер. Если не установлен, то будет использован порядок байтов, заданный для текущего экземпляра БуферДвоичныхДанных. Значение по умолчанию: Неопределено."
                    }
                },
                "ЗаписатьЦелое64" : {
                    "name" : "ЗаписатьЦелое64",
                    "name_en" : "WriteInt64",
                    "signature" : "(position: Число, value: Число, byteOrder?: Произвольный)",
                    "description" : "Записать целое 64-битное положительное число в заданную позицию.",
                    "params" : {
                        "position" : "Позиция, на которой требуется записать число.",
                        "value" : "Число, которое требуется записать. Если значение не помещается в 64 бита, будет вызвано исключение.",
                        "byteOrder" : "Порядок байтов, который будет использован для кодировки числа при записи в буфер. Если не установлен, то используется порядок байтов, заданный для текущего экземпляра БуферДвоичныхДанных. Значение по умолчанию: Неопределено."
                    }
                },
                "Перевернуть" : {
                    "name" : "Перевернуть",
                    "name_en" : "Reverse",
                    "signature" : "() : БуферДвоичныхДанных",
                    "description" : "Создает новый буфер, содержащий элементы текущего буфера в противоположном порядке."
                },
                "Получить" : {
                    "name" : "Получить",
                    "name_en" : "Get",
                    "signature" : "(position: Число) : Число",
                    "description" : "Получает значение элемента на указанной позиции.",
                    "returns" : "Любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.",
                    "params" : {
                        "position" : "Позиция элемента в буфере. Нумерация начинается с 0."
                    }
                },
                "ПолучитьСрез" : {
                    "name" : "ПолучитьСрез",
                    "name_en" : "GetSlice",
                    "signature" : "(position: Число, number?: Произвольный) : БуферДвоичныхДанных",
                    "description" : "Создает новый буфер, использующий заданное количество байтов из исходного буфера, начиная с заданной позиции (нумерация с 0). Если количество не задано, то новый буфер является представлением элементов текущего буфера, начиная с заданного индекса и до конца. НЕ РЕАЛИЗОВАН",
                    "params" : {
                        "position" : "Позиция, начиная с которой будет создан новый буфер.",
                        "number" : "Количество байтов, которые требуется отобразить в срезе. Если на задано, то отображаются все байты от начала среза до конца исходного буфера. Значение по умолчанию: Неопределено."
                    }
                },
                "Прочитать" : {
                    "name" : "Прочитать",
                    "name_en" : "Read",
                    "signature" : "(position: Число, number: Число) : БуферДвоичныхДанных",
                    "description" : "Выполняет чтение байтов из буфера и помещает их в новый буфер.",
                    "params" : {
                        "position" : "Позиция, начиная с которой требуется прочитать байты.",
                        "number" : "Количество байтов, которое требуется прочитать."
                    }
                },
                "ПрочитатьЦелое16" : {
                    "name" : "ПрочитатьЦелое16",
                    "name_en" : "ReadInt16",
                    "signature" : "(position: Число, byteOrder?: Произвольный) : Число",
                    "description" : "Выполняет чтение целого 16-битного положительного числа на заданной позиции.",
                    "params" : {
                        "position" : "Позиция, на которой требуется прочитать число.",
                        "byteOrder" : "Порядок байтов, используемый при чтении числа. Если не задан, используется порядок, определенный для текущего экземпляра ЧтениеДанных. Значение по умолчанию: Неопределено."
                    }
                },
                "ПрочитатьЦелое32" : {
                    "name" : "ПрочитатьЦелое32",
                    "name_en" : "ReadInt32",
                    "signature" : "(position: Число, byteOrder?: Произвольный) : Число",
                    "description" : "Прочитать целое 32-битное положительное число на заданной позиции.",
                    "returns" : "Любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.",
                    "params" : {
                        "position" : "Позиция, на которой требуется прочитать число.",
                        "byteOrder" : "Порядок байтов, используемый при чтении числа. Если не задан, используется порядок, определенный для текущего экземпляра ЧтениеДанных. Значение по умолчанию: Неопределено."
                    }
                },
                "ПрочитатьЦелое64" : {
                    "name" : "ПрочитатьЦелое64",
                    "name_en" : "ReadInt64",
                    "signature" : "(position: Число, byteOrder?: Произвольный) : Число",
                    "description" : "Выполняет чтение целого 64-битного положительного числа на заданной позиции.",
                    "returns" : "Любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.",
                    "params" : {
                        "position" : "Позиция, на которой требуется прочитать число.",
                        "byteOrder" : "Порядок байтов, используемый при чтении числа. Если не задан, используется порядок, определенный для текущего экземпляра ЧтениеДанных. Значение по умолчанию: Неопределено."
                    }
                },
                "Разделить" : {
                    "name" : "Разделить",
                    "name_en" : "Split",
                    "signature" : "(separator: Произвольный) : Произвольный",
                    "description" : "Разделить буфер на части по заданному разделителю. НЕ РЕАЛИЗОВАН По двоичному буферу",
                    "params" : {
                        "separator" : "Разделитель."
                    }
                },
                "Скопировать" : {
                    "name" : "Скопировать",
                    "name_en" : "Copy",
                    "signature" : "() : БуферДвоичныхДанных",
                    "description" : "Создает копию массива."
                },
                "Соединить" : {
                    "name" : "Соединить",
                    "name_en" : "Concat",
                    "signature" : "(buffer: БуферДвоичныхДанных) : БуферДвоичныхДанных",
                    "description" : "Создает новый буфер, содержащий элементы текущего буфера и, за ними, элементы заданного буфера.",
                    "params" : {
                        "buffer" : "Буфер, который будет соединен с исходным."
                    }
                },
                "Установить" : {
                    "name" : "Установить",
                    "name_en" : "Set",
                    "signature" : "(position: Число, value: Число)",
                    "description" : "Устанавливает значение элемента на заданной позиции (нумерация начинается с 0).",
                    "params" : {
                        "position" : "Позиция, на которую требуется поместить новое значение.",
                        "value" : "Значение, которое требуется установить в заданную позицию буфера. Если значение больше 255 или меньше 0, будет выдана ошибка о неверном значении параметра."
                    }
                },
                "УстановитьТолькоЧтение" : {
                    "name" : "УстановитьТолькоЧтение",
                    "name_en" : "SetReadOnly",
                    "signature" : "()",
                    "description" : "Переводит текущий буфер в режим \"только для чтения\". Попытка изменить состояние буфера приведет к вызову исключения."
                }
            },
            "constructors" : {
                "ПоУмолчанию" : {
                    "name": "По умолчанию",
                    "signature" : "(size: Произвольный, byteOrder?: Произвольный)",
                    "params" : {
                        "size" : "Размер буфера в байтах.",
                        "byteOrder" : "Порядок байтов.<br>Значение по умолчанию: LittleEndian."
                    }
                }
            }
        },
        "МенеджерФайловыхПотоков" : {
            "name" : "МенеджерФайловыхПотоков",
            "name_en" : "FileStreamsManager",
            "description" : "Предоставляет методы для использования в типовых сценариях работы с файлами.",
            "methods" : {
                "Открыть" : {
                    "name" : "Открыть",
                    "name_en" : "Open",
                    "signature" : "(fileName: Произвольный, openingMode: Произвольный, fileAccess?: Произвольный, bufferSize?: Произвольный) : ФайловыйПоток",
                    "description" : "Открывает файл в заданном режиме с возможностью чтения и записи. Файл открывается в режиме разделяемого чтения.",
                    "returns" : "Возвращает специализированную версию объекта Поток для работы данными, расположенными в файле на диске. Предоставляет возможность чтения из потока, записи в поток и изменения текущей позиции.<br>По умолчанию, все операции с файловым потоком являются буферизированными, размер буфера по умолчанию - 8 КБ.<br>Размер буфера можно изменить, в том числе - полностью отключить буферизацию при вызове конструктора.<br>Следует учитывать, что помимо буферизации существует кэширование чтения и записи файлов в операционной системе, на которое невозможно повлиять программно.",
                    "params" : {
                        "fileName" : "Имя открываемого файла.",
                        "openingMode" : "Режим открытия файла.",
                        "fileAccess" : "Режим доступа к файлу.",
                        "bufferSize" : "Размер буфера для операций с файлом."
                    }
                },
                "ОткрытьДляДописывания" : {
                    "name" : "ОткрытьДляДописывания",
                    "name_en" : "OpenForAppend",
                    "signature" : "(fileName: Строка) : Произвольный",
                    "description" : "Открыть существующий файл для записи в конец. Если файл не существует, то будет создан новый файл. Запись в существующий файл выполняется с конца файла. Файл открывается в режиме разделяемого чтения.",
                    "params" : {
                        "fileName" : "Имя открываемого файла."
                    }
                },
                "ОткрытьДляЗаписи" : {
                    "name" : "ОткрытьДляЗаписи",
                    "name_en" : "OpenForWrite",
                    "signature" : "(fileName: Строка) : Произвольный",
                    "description" : "Открывает существующий файл для записи. Файл открывается в режиме разделяемого чтения. Если файл не найден, будет создан новый файл. Запись в существующий файл производится с начала файла, замещая ранее сохраненные данные.",
                    "returns" : "Возвращает специализированную версию объекта Поток для работы данными, расположенными в файле на диске. Предоставляет возможность чтения из потока, записи в поток и изменения текущей позиции.<br>По умолчанию, все операции с файловым потоком являются буферизированными, размер буфера по умолчанию - 8 КБ.<br>Размер буфера можно изменить, в том числе - полностью отключить буферизацию при вызове конструктора.<br>Следует учитывать, что помимо буферизации существует кэширование чтения и записи файлов в операционной системе, на которое невозможно повлиять программно.",
                    "params" : {
                        "fileName" : "Имя открываемого файла."
                    }
                },
                "ОткрытьДляЧтения" : {
                    "name" : "ОткрытьДляЧтения",
                    "name_en" : "OpenForRead",
                    "signature" : "(fileName: Строка) : Произвольный",
                    "description" : "Открывает существующий файл для чтения с общим доступом на чтение.",
                    "params" : {
                        "fileName" : "Имя открываемого файла."
                    }
                },
                "Создать" : {
                    "name" : "Создать",
                    "name_en" : "Create",
                    "signature" : "(fileName: Строка, bufferSize?: Число) : Произвольный",
                    "description" : "Создает или перезаписывает файл и открывает поток с возможностью чтения и записи в файл. Файл открывается в режиме разделяемого чтения.",
                    "params" : {
                        "fileName" : "Имя создаваемого файла.",
                        "bufferSize" : "Размер буфера."
                    }
                },
                "СоздатьВременныйФайл" : {
                    "name" : "СоздатьВременныйФайл",
                    "name_en" : "CreateTempFile",
                    "signature" : "(memoryLimit?: Число, bufferSize?: Число) : Произвольный",
                    "description" : "НЕ РЕАЛИЗОВАН Создает временный файл и открывает его в монопольном режиме с возможностью чтения и записи. Дополнительно можно установить лимит в байтах, при превышении которого будет создан файл на диске. Пока размер файла не превышает данного лимита - вся работа ведётся в памяти.",
                    "params" : {
                        "memoryLimit" : "Максимальный объем памяти (в байтах), при превышении которого будет создан файл на диске. Значение по умолчанию: 65535.",
                        "bufferSize" : "Размер буфера для операций с файлом (в байтах). Значение по умолчанию: 8192."
                    }
                }
            }
        },
        "ПараметрыЗаписиJSON" : {
            "name" : "ПараметрыЗаписиJSON",
            "name_en" : "JSONWriterSettings",
            "description" : "Определяет набор параметров, используемых при записи JSON.",
            "properties" : {
                "ИспользоватьДвойныеКавычки" : {
                    "name" : "ИспользоватьДвойныеКавычки",
                    "name_en" : "UseDoubleQuotes",
                    "description" : "Определяет использование двойных кавычек при записи свойств и значений JSON. После создания объекта данное свойство имеет значение Истина.",
                    "value" : "Булево (Boolean)",
                    "access" : "Чтение"
                },
                "ПереносСтрок" : {
                    "name" : "ПереносСтрок",
                    "name_en" : "NewLines",
                    "description" : "Управляет размещением начала и конца объектов и массивов, ключей и значений на новой строке. Также установка данного свойства в значение, отличное от Нет, добавляет пробел между именем свойства, двоеточием и значением. После создания объекта данное свойство имеет значение Авто.",
                    "value" : "ПереносСтрокJSON (JSONLineBreak)",
                    "access" : "Чтение"
                },
                "СимволыОтступа" : {
                    "name" : "СимволыОтступа",
                    "name_en" : "PaddingSymbols",
                    "description" : "Определяет символы отступа, используемые при записи документа JSON. Свойство не используется, если свойство ПереносСтрокJSON установлено в значение Нет. После создания объекта данное свойство имеет значение - один пробельный символ.",
                    "value" : "Строка (String)",
                    "access" : "Чтение"
                },
                "ЭкранированиеСимволов" : {
                    "name" : "ЭкранированиеСимволов",
                    "name_en" : "EscapeCharacters",
                    "description" : "Определяет способ экранирования символов при записи документа JSON. После создания объекта данное свойство имеет значение СимволыВнеASCII.",
                    "value" : "ЭкранированиеСимволовJSON (JSONCharactersEscapeMode)",
                    "access" : "Чтение"
                },
                "ЭкранироватьАмперсанд" : {
                    "name" : "ЭкранироватьАмперсанд",
                    "name_en" : "EscapeAmpersand",
                    "description" : "Определяет, будет ли экранироваться знак амперсанда при записи документа JSON. После создания объекта данное свойство имеет значение Ложь.",
                    "value" : "Булево (Boolean)",
                    "access" : "Чтение"
                },
                "ЭкранироватьОдинарныеКавычки" : {
                    "name" : "ЭкранироватьОдинарныеКавычки",
                    "name_en" : "EscapeSingleQuotes",
                    "description" : "Определяет, будет ли экранирован знак одинарной кавычки при записи документа JSON. Имеет значение Истина, если ИспользоватьДвойныеКавычки установлен Ложь. После создания объекта данное свойство имеет значение Ложь",
                    "value" : "Булево (Boolean)",
                    "access" : "Чтение"
                },
                "ЭкранироватьРазделителиСтрок" : {
                    "name" : "ЭкранироватьРазделителиСтрок",
                    "name_en" : "EscapeLineTerminators",
                    "description" : "Определяет экранирование символов \"U+2028\" (разделитель строк) и \"U+2029\" (разделитель абзацев) для совместимости с JavaScript. После создания объекта данное свойство имеет значение Истина.",
                    "value" : "Булево (Boolean)",
                    "access" : "Чтение"
                },
                "ЭкранироватьСлеш" : {
                    "name" : "ЭкранироватьСлеш",
                    "name_en" : "EscapeSlash",
                    "description" : "Определяет, будет ли экранироваться слеш (косая черта) при записи значения. После создания объекта данное свойство имеет значение Ложь.",
                    "value" : "Булево (Boolean)",
                    "access" : "Чтение"
                },
                "ЭкранироватьУгловыеСкобки" : {
                    "name" : "ЭкранироватьУгловыеСкобки",
                    "name_en" : "EscapeAngleBrackets",
                    "description" : "Определяет, будут ли экранированы знаки угловых скобок при записи документа JSON. После создания объекта данное свойство имеет значение Ложь.",
                    "value" : "Булево (Boolean)",
                    "access" : "Чтение"
                }
            },
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "(newLines?: Произвольный, paddingSymbols?: Произвольный, useDoubleQuotes?: Произвольный, escapeCharacters?: Произвольный, escapeAngleBrackets?: Произвольный, escapeLineTerminators?: Произвольный, escapeAmpersand?: Произвольный, escapeSingleQuotes?: Произвольный, escapeSlash?: Произвольный)"
                }
            }
        },
        "Массив" : {
            "name" : "Массив",
            "name_en" : "Array",
            "methods" : {
                "Количество" : {
                    "name" : "Количество",
                    "name_en" : "Count",
                    "signature" : "(): Число"
                },
                "Очистить" : {
                    "name" : "Очистить",
                    "name_en" : "Clear",
                    "signature" : "()"
                },
                "Добавить" : {
                    "name" : "Добавить",
                    "name_en" : "Add",
                    "signature" : "(value: Произвольный)"
                },
                "Вставить" : {
                    "name" : "Вставить",
                    "name_en" : "Insert",
                    "signature" : "(index: Число, value: Произвольный)"
                },
                "Найти" : {
                    "name" : "Найти",
                    "name_en" : "Find",
                    "signature" : "(what: Произвольный): Число|Неопределено"
                },
                "Удалить" : {
                    "name" : "Удалить",
                    "name_en" : "Delete",
                    "signature" : "(index: Число)"
                },
                "ВГраница" : {
                    "name" : "ВГраница",
                    "name_en" : "UBound",
                    "signature" : "(): Число"
                },
                "Получить" : {
                    "name" : "Получить",
                    "name_en" : "Get",
                    "signature" : "(index: Число): Произвольный"
                },
                "Установить" : {
                    "name" : "Установить",
                    "name_en" : "Set",
                    "signature" : "(index: Число, value: Произвольный)"
                }
            },
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "()"
                },
                "По количеству элементов" : {
                    "name" : "По количеству элементов",
                    "signature" : "(dimensions: Число, dimensions1?: Число, ...)",
                    "description" : "Позволяет задать измерения массива при его создании",
                    "params" : {
                        "dimensions" : "Числовые размерности массива. Например, \"Массив(2,3)\", создает двумерный массив 2х3."
                    }
                }
            }
        },
        "КоллекцияАргументовКоманднойСтроки" : {
            "name" : "КоллекцияАргументовКоманднойСтроки",
            "name_en" : "CommandLineArgumentsCollection",
            "description" : "Коллекция позволяет получить аргументы, переданные сценарию в командной строке.Коллекция представляет собой массив в режиме \"ТолькоДляЧтения\". Обращение к аргументам осуществляется по порядковому индексу."
        },
        "Консоль" : {
            "name" : "Консоль",
            "name_en" : "Console",
            "description" : "Класс представляет собой инструмент доступа к системной консоли.Предназначен для низкоуровнего манипулирования выводом в консоль.",
            "properties" : {
                "НажатаКлавиша" : {
                    "name" : "НажатаКлавиша",
                    "name_en" : "KeyPressed",
                    "access" : "Чтение"
                },
                "КурсорЛево" : {
                    "name" : "КурсорЛево",
                    "name_en" : "CursorLeft",
                    "access" : "Чтение/Запись"
                },
                "КурсорВерх" : {
                    "name" : "КурсорВерх",
                    "name_en" : "CursorTop",
                    "access" : "Чтение/Запись"
                },
                "Ширина" : {
                    "name" : "Ширина",
                    "name_en" : "Width",
                    "access" : "Чтение"
                },
                "Высота" : {
                    "name" : "Высота",
                    "name_en" : "Height",
                    "access" : "Чтение"
                },
                "ЦветТекста" : {
                    "name" : "ЦветТекста",
                    "name_en" : "TextColor",
                    "access" : "Чтение/Запись"
                },
                "ЦветФона" : {
                    "name" : "ЦветФона",
                    "name_en" : "BackgroundColor",
                    "access" : "Чтение/Запись"
                },
                "КодировкаВходногоПотока" : {
                    "name" : "КодировкаВходногоПотока",
                    "name_en" : "InputEncoding",
                    "description" : "Возвращает или задает кодировку консоли, используемую при чтении входных данных.",
                    "returns" : "КодировкаТекста",
                    "access" : "Чтение/Запись"
                }
            },
            "methods" : {
                "ПрочитатьСтроку" : {
                    "name" : "ПрочитатьСтроку",
                    "name_en" : "ReadLine",
                    "signature" : "(): Строка"
                },
                "Прочитать" : {
                    "name" : "Прочитать",
                    "name_en" : "Read",
                    "signature" : "(): Число"
                },
                "Очистить" : {
                    "name" : "Очистить",
                    "name_en" : "Clear",
                    "signature" : "()"
                },
                "ВывестиСтроку" : {
                    "name" : "ВывестиСтроку",
                    "name_en" : "WriteLine",
                    "signature" : "(text: Строка)"
                },
                "Вывести" : {
                    "name" : "Вывести",
                    "name_en" : "Write",
                    "signature" : "(text: Строка)"
                },
                "ВидимостьКурсора" : {
                    "name" : "ВидимостьКурсора",
                    "name_en" : "CursorVisible",
                    "signature" : "(visible: Булево): Булево"
                }
            },
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "()"
                }
            }
        },
        "Файл" : {
            "name" : "Файл",
            "name_en" : "File",
            "properties" : {
                "Имя" : {
                    "name" : "Имя",
                    "name_en" : "Name",
                    "access" : "Чтение"
                },
                "ИмяБезРасширения" : {
                    "name" : "ИмяБезРасширения",
                    "name_en" : "BaseName",
                    "access" : "Чтение"
                },
                "ПолноеИмя" : {
                    "name" : "ПолноеИмя",
                    "name_en" : "FullName",
                    "access" : "Чтение"
                },
                "Путь" : {
                    "name" : "Путь",
                    "name_en" : "Path",
                    "access" : "Чтение"
                },
                "Расширение" : {
                    "name" : "Расширение",
                    "name_en" : "Extension",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "Существует" : {
                    "name" : "Существует",
                    "name_en" : "Exist",
                    "signature" : "(): Булево"
                },
                "Размер" : {
                    "name" : "Размер",
                    "name_en" : "Size",
                    "signature" : "(): Число"
                },
                "ПолучитьНевидимость" : {
                    "name" : "ПолучитьНевидимость",
                    "name_en" : "GetHidden",
                    "signature" : "(): Булево"
                },
                "ПолучитьТолькоЧтение" : {
                    "name" : "ПолучитьТолькоЧтение",
                    "name_en" : "GetReadOnly",
                    "signature" : "(): Булево"
                },
                "ПолучитьВремяИзменения" : {
                    "name" : "ПолучитьВремяИзменения",
                    "name_en" : "GetModificationTime",
                    "signature" : "(): Дата"
                },
                "УстановитьНевидимость" : {
                    "name" : "УстановитьНевидимость",
                    "name_en" : "SetHidden",
                    "signature" : "(value: Булево)"
                },
                "УстановитьТолькоЧтение" : {
                    "name" : "УстановитьТолькоЧтение",
                    "name_en" : "SetReadOnly",
                    "signature" : "(value: Булево)"
                },
                "УстановитьВремяИзменения" : {
                    "name" : "УстановитьВремяИзменения",
                    "name_en" : "SetModificationTime",
                    "signature" : "(dateTime: Дата)"
                },
                "ЭтоКаталог" : {
                    "name" : "ЭтоКаталог",
                    "name_en" : "IsDirectory",
                    "signature" : "(): Булево"
                },
                "ЭтоФайл" : {
                    "name" : "ЭтоФайл",
                    "name_en" : "IsFile",
                    "signature" : "(): Булево"
                }
            },
            "constructors" : {
                "По имени файла" : {
                    "name" : "По имени файла",
                    "signature" : "(name: Строка)"
                }
            }
        },
        "ФиксированныйМассив" : {
            "name" : "ФиксированныйМассив",
            "name_en" : "FixedArray",
            "methods" : {
                "Количество" : {
                    "name" : "Количество",
                    "name_en" : "Count",
                    "signature" : "(): Число"
                },
                "Найти" : {
                    "name" : "Найти",
                    "name_en" : "Find",
                    "signature" : "(what: Произвольный): Число|Неопределено"
                },
                "ВГраница" : {
                    "name" : "ВГраница",
                    "name_en" : "UBound",
                    "signature" : "(): Число"
                },
                "Получить" : {
                    "name" : "Получить",
                    "name_en" : "Get",
                    "signature" : "(index: Число): Произвольный"
                }
            },
            "constructors" : {
                "На основании обычного массива" : {
                    "name" : "На основании обычного массива",
                    "signature" : "(source: Массив)"
                }
            }
        },
        "ФиксированноеСоответствие" : {
            "name" : "ФиксированноеСоответствие",
            "name_en" : "FixedMap",
            "methods" : {
                "Получить" : {
                    "name" : "Получить",
                    "name_en" : "Get",
                    "signature" : "(key: Произвольный): Произвольный|Неопределено"
                },
                "Количество" : {
                    "name" : "Количество",
                    "name_en" : "Count",
                    "signature" : "(): Число"
                }
            },
            "constructors" : {
                "Из соответствия" : {
                    "name" : "Из соответствия",
                    "signature" : "(source: Соответствие)"
                }
            }
        },
        "ФиксированнаяСтруктура" : {
            "name" : "ФиксированнаяСтруктура",
            "name_en" : "FixedStructure",
            "methods" : {
                "Свойство" : {
                    "name" : "Свойство",
                    "name_en" : "Property",
                    "signature" : "(name: Строка, value?: Произвольный): Булево"
                },
                "Количество" : {
                    "name" : "Количество",
                    "name_en" : "Count",
                    "signature" : "(): Число"
                }
            },
            "constructors" : {
                "Из структуры" : {
                    "name" : "Из структуры",
                    "signature" : "(structure: Структура)",
                    "description" : "Создает фиксированную структуру по исходной структуре",
                    "params" : {
                        "structure" : "Исходная структура"
                    }
                },
                "По ключам и значениям" : {
                    "name" : "По ключам и значениям",
                    "signature" : "(strProperties: Строка, args: Произвольный, args1?: Произвольный, ...)",
                    "description" : "Создает фиксированную структуру по заданному перечню свойств и значений",
                    "params" : {
                        "strProperties" : "Строка с именами свойств, указанными через запятую.",
                        "args" : "Значения свойств. Каждое значение передается, как отдельный параметр."
                    }
                }
            }
        },
        "Процесс" : {
            "name" : "Процесс",
            "name_en" : "Process",
            "description" : "Позволяет управлять процессом операционной системы. Получать текст из стандартных потоков,проверять активность, pid, завершать процесс и т.п.",
            "properties" : {
                "КодировкаВывода" : {
                    "name" : "КодировкаВывода",
                    "name_en" : "OutputEncoding",
                    "description" : "Устанавливает кодировку в которой будут считываться стандартные потоки вывода и ошибок.",
                    "access" : "Чтение"
                },
                "ПотокВывода" : {
                    "name" : "ПотокВывода",
                    "name_en" : "StdOut",
                    "description" : "ПотокВыводаТекста. Стандартный поток вывода (stdout)",
                    "access" : "Чтение"
                },
                "ПотокОшибок" : {
                    "name" : "ПотокОшибок",
                    "name_en" : "StdErr",
                    "description" : "ПотокВыводаТекста. Стандартный поток вывода ошибок (stderr)",
                    "access" : "Чтение"
                },
                "ПотокВвода" : {
                    "name" : "ПотокВвода",
                    "name_en" : "StdIn",
                    "description" : "ПотокВводаТекста. Стандартный поток ввода (stdin)",
                    "access" : "Чтение"
                },
                "Завершен" : {
                    "name" : "Завершен",
                    "name_en" : "HasExited",
                    "description" : "Флаг указывает, что процесс завершен (или нет)",
                    "access" : "Чтение"
                },
                "КодВозврата" : {
                    "name" : "КодВозврата",
                    "name_en" : "ExitCode",
                    "description" : "Код возврата завершенного процесса.",
                    "access" : "Чтение"
                },
                "Идентификатор" : {
                    "name" : "Идентификатор",
                    "name_en" : "ProcessId",
                    "description" : "PID процесса",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "Запустить" : {
                    "name" : "Запустить",
                    "name_en" : "Start",
                    "signature" : "()",
                    "description" : "Запустить процесс на выполнение."
                },
                "ОжидатьЗавершения" : {
                    "name" : "ОжидатьЗавершения",
                    "name_en" : "WaitForExit",
                    "signature" : "()",
                    "description" : "Приостановить выполнение скрипта и ожидать завершения процесса."
                },
                "Завершить" : {
                    "name" : "Завершить",
                    "name_en" : "Stop",
                    "signature" : "()"
                }
            }
        },
        "ПотокВыводаТекста" : {
            "name" : "ПотокВыводаТекста",
            "name_en" : "TextOutputStream",
            "description" : "Стандартный поток вывода текста.",
            "properties" : {
                "ЕстьДанные" : {
                    "name" : "ЕстьДанные",
                    "name_en" : "HasData",
                    "description" : "Признак показывает, что в потоке есть данные.",
                    "example" : "Пока Поток.ЕстьДанные Цикл<br>    Сообщить(Поток.ПрочитатьСтроку());<br>КонецЦикла;",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "Прочитать" : {
                    "name" : "Прочитать",
                    "name_en" : "Read",
                    "signature" : "(): Строка",
                    "description" : "Прочитать все данные из потока.",
                    "returns" : "Строка"
                },
                "ПрочитатьСтроку" : {
                    "name" : "ПрочитатьСтроку",
                    "name_en" : "ReadLine",
                    "signature" : "(): Строка",
                    "description" : "Прочитать одну строку из потока.",
                    "returns" : "Строка"
                },
                "Закрыть" : {
                    "name" : "Закрыть",
                    "name_en" : "Close",
                    "signature" : "()",
                    "description" : "Закрыть поток."
                }
            }
        },
        "ПотокВводаТекста" : {
            "name" : "ПотокВводаТекста",
            "name_en" : "TextInputStream",
            "description" : "Стандартный поток ввода текста. Используется для взаимодействия с работающими процессами.Методы работают подобно одноименным методам объекта ЗаписьТекста.",
            "methods" : {
                "Записать" : {
                    "name" : "Записать",
                    "name_en" : "Write",
                    "signature" : "(data: Строка)"
                },
                "ЗаписатьСтроку" : {
                    "name" : "ЗаписатьСтроку",
                    "name_en" : "WriteLine",
                    "signature" : "(data: Строка)"
                },
                "Закрыть" : {
                    "name" : "Закрыть",
                    "name_en" : "Close",
                    "signature" : "()"
                }
            }
        },
        "УникальныйИдентификатор" : {
            "name" : "УникальныйИдентификатор",
            "name_en" : "UUID",
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "()"
                },
                "Из строки" : {
                    "name" : "Из строки",
                    "signature" : "(uuidString: Строка)"
                }
            }
        },
        "КлючИЗначение" : {
            "name" : "КлючИЗначение",
            "name_en" : "KeyAndValue",
            "properties" : {
                "Ключ" : {
                    "name" : "Ключ",
                    "name_en" : "Key",
                    "access" : "Чтение"
                },
                "Значение" : {
                    "name" : "Значение",
                    "name_en" : "Value",
                    "access" : "Чтение"
                }
            }
        },
        "Соответствие" : {
            "name" : "Соответствие",
            "name_en" : "Map",
            "methods" : {
                "Вставить" : {
                    "name" : "Вставить",
                    "name_en" : "Insert",
                    "signature" : "(key: Произвольный, val: Произвольный)"
                },
                "Получить" : {
                    "name" : "Получить",
                    "name_en" : "Get",
                    "signature" : "(key: Произвольный): Произвольный|Неопределено"
                },
                "Количество" : {
                    "name" : "Количество",
                    "name_en" : "Count",
                    "signature" : "(): Число"
                },
                "Очистить" : {
                    "name" : "Очистить",
                    "name_en" : "Clear",
                    "signature" : "()"
                },
                "Удалить" : {
                    "name" : "Удалить",
                    "name_en" : "Delete",
                    "signature" : "(key: Произвольный)"
                }
            },
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "()"
                }
            }
        },
        "ГенераторСлучайныхЧисел" : {
            "name" : "ГенераторСлучайныхЧисел",
            "name_en" : "RandomNumberGenerator",
            "methods" : {
                "СлучайноеЧисло" : {
                    "name" : "СлучайноеЧисло",
                    "name_en" : "RandomNumber",
                    "signature" : "(low?: Число, high?: Число): Число"
                }
            },
            "constructors" : {
                "Конструктор по умолчанию" : {
                    "name" : "Конструктор по умолчанию",
                    "signature" : "(seed: Число)",
                    "description" : "Формирует ГСЧ с возможностью указания начального числа.",
                    "returns" : "",
                    "params" : {
                        "seed" : "Начальное число. Последовательность случайных чисел для одного и того же начального числа будет одинакова"
                    }
                },
                "Формирование неинициализированного объекта" : {
                    "name" : "Формирование неинициализированного объекта",
                    "signature" : "()"
                }
            }
        },
        "Рефлектор" : {
            "name" : "Рефлектор",
            "name_en" : "Reflector",
            "description" : "Рефлектор предназначен для получения метаданных объектов во время выполнения.Как правило, рефлексия используется для проверки наличия у объекта определенных свойств/методов.В OneScript рефлексию можно применять для вызова методов объектов по именам методов.",
            "methods" : {
                "ВызватьМетод" : {
                    "name" : "ВызватьМетод",
                    "name_en" : "CallMethod",
                    "signature" : "(target: Произвольный, methodName: Строка, arguments?: Массив): Произвольный|Неопределено",
                    "description" : "Вызывает метод по его имени.",
                    "returns" : "Если вызывается функция, то возвращается ее результат. В противном случае возвращается Неопределено.",
                    "params" : {
                        "target" : "Объект, метод которого нужно вызвать.",
                        "methodName" : "Имя метода для вызова",
                        "arguments" : "Массив аргументов, передаваемых методу. Следует учесть, что все параметры нужно передавать явно, в том числе необязательные."
                    }
                },
                "МетодСуществует" : {
                    "name" : "МетодСуществует",
                    "name_en" : "MethodExists",
                    "signature" : "(target: Произвольный, methodName: Строка): Булево",
                    "description" : "Проверяет существование указанного метода у переданного объекта..",
                    "returns" : "Истину, если метод существует, и Ложь в обратном случае.",
                    "params" : {
                        "target" : "Объект, из которого получаем таблицу методов.",
                        "methodName" : "Имя метода для вызова"
                    }
                },
                "ПолучитьТаблицуМетодов" : {
                    "name" : "ПолучитьТаблицуМетодов",
                    "name_en" : "GetMethodsTable",
                    "signature" : "(target: Произвольный): ТаблицаЗначений",
                    "description" : "Получает таблицу методов для переданного объекта..",
                    "returns" : "Таблица значений с 3 колонками - Имя, КоличествоПараметров, ЭтоФункция.",
                    "params" : {
                        "target" : "Объект, из которого получаем таблицу методов."
                    }
                }
            },
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "()"
                }
            }
        },
        "СистемнаяИнформация" : {
            "name" : "СистемнаяИнформация",
            "name_en" : "SystemInfo",
            "description" : "Класс предоставляет информацию о системе",
            "properties" : {
                "ИмяКомпьютера" : {
                    "name" : "ИмяКомпьютера",
                    "name_en" : "MachineName",
                    "description" : "Имя машины, на которой выполняется сценарий",
                    "access" : "Чтение"
                },
                "ВерсияОС" : {
                    "name" : "ВерсияОС",
                    "name_en" : "OSVersion",
                    "description" : "Версия операционной системы, на которой выполняется сценарий",
                    "access" : "Чтение"
                },
                "Версия" : {
                    "name" : "Версия",
                    "name_en" : "Version",
                    "description" : "Версия OneScript, выполняющая данный сценарий",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "ПеременныеСреды" : {
                    "name" : "ПеременныеСреды",
                    "name_en" : "EnvironmentVariables",
                    "signature" : "(): Соответствие",
                    "description" : "Возвращает соответствие переменных среды. Ключом является имя переменной, а значением - значение переменной",
                    "returns" : "Соответствие",
                    "example" : "СИ = Новый СистемнаяИнформация();<br>Для Каждого Переменная Из СИ.ПеременныеСреды() Цикл<br>    Сообщить(Переменная.Ключ + \" = \" + Переменная.Значение);<br>КонецЦикла;"
                },
                "УстановитьПеременнуюСреды" : {
                    "name" : "УстановитьПеременнуюСреды",
                    "name_en" : "SetEnvironmentVariable",
                    "signature" : "(varName: Строка, value: Строка)",
                    "description" : "Позволяет установить переменную среды.Переменная устанавливается в области видимости процесса и очищается после его завершения.",
                    "params" : {
                        "varName" : "Имя переменной",
                        "value" : "Значение переменной"
                    }
                },
                "ПолучитьПеременнуюСреды" : {
                    "name" : "ПолучитьПеременнуюСреды",
                    "name_en" : "GetEnvironmentVariable",
                    "signature" : "(varName: Строка): Строка",
                    "description" : "Получить значение переменной среды.",
                    "returns" : "Строка. Значение переменной",
                    "params" : {
                        "varName" : "Имя переменной"
                    }
                }
            },
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "()"
                }
            }
        },
        "ТекстовыйДокумент" : {
            "name" : "ТекстовыйДокумент",
            "name_en" : "TextDocument",
            "properties" : {
                "Вывод" : {
                    "name" : "Вывод",
                    "name_en" : "Output",
                    "description" : "В 1С:Предприятие определяет возможность печати документа.В 1Script свойство не используется и его значение игнорируется",
                    "access" : "Чтение/Запись"
                },
                "ИспользуемоеИмяФайла" : {
                    "name" : "ИспользуемоеИмяФайла",
                    "name_en" : "UsedFileName",
                    "description" : "Содержит полное имя файла с которым соединен ТекстовыйДокумент",
                    "returns" : "Строка",
                    "access" : "Чтение/Запись"
                },
                "КодЯзыкаМакета" : {
                    "name" : "КодЯзыкаМакета",
                    "name_en" : "TemplateLanguageCode",
                    "description" : "Не используется. Реализован для совместимости API с 1С:Предприятие",
                    "returns" : "Строка",
                    "access" : "Чтение/Запись"
                },
                "Параметры" : {
                    "name" : "Параметры",
                    "name_en" : "Parameters",
                    "description" : "Не используется. Реализован для совместимости API с 1С:Предприятие",
                    "returns" : "Неопределено",
                    "access" : "Чтение/Запись"
                },
                "РазделительСтрок" : {
                    "name" : "РазделительСтрок",
                    "name_en" : "LineSeparator",
                    "access" : "Чтение/Запись"
                },
                "ТолькоПросмотр" : {
                    "name" : "ТолькоПросмотр",
                    "name_en" : "ReadOnly",
                    "description" : "Не используется. Реализован для совместимости API с 1С:Предприятие",
                    "access" : "Чтение/Запись"
                }
            },
            "methods" : {
                "ВставитьСтроку" : {
                    "name" : "ВставитьСтроку",
                    "name_en" : "InsertLine",
                    "signature" : "(position: Число, line: Строка)",
                    "description" : "Вставляет строку в документ",
                    "params" : {
                        "position" : "Позиция вставки",
                        "line" : "Вставляемая строка"
                    }
                },
                "ДобавитьСтроку" : {
                    "name" : "ДобавитьСтроку",
                    "name_en" : "AddLine",
                    "signature" : "(line: Строка)",
                    "description" : "Добавляет строку в конец текстового документа",
                    "params" : {
                        "line" : "Добавляемая строка"
                    }
                },
                "КоличествоСтрок" : {
                    "name" : "КоличествоСтрок",
                    "name_en" : "LineCount",
                    "signature" : "(): Число"
                },
                "ПолучитьТекст" : {
                    "name" : "ПолучитьТекст",
                    "name_en" : "GetText",
                    "signature" : "(): Строка",
                    "description" : "Получает текст, находящийся в текстовом документе"
                },
                "ПолучитьСтроку" : {
                    "name" : "ПолучитьСтроку",
                    "name_en" : "GetLine",
                    "signature" : "(lineNumber: Число): Строка",
                    "description" : "Получает строку по номеру",
                    "returns" : "Строка",
                    "params" : {
                        "lineNumber" : "Номер строки в тексте"
                    }
                },
                "ЗаменитьСтроку" : {
                    "name" : "ЗаменитьСтроку",
                    "name_en" : "ReplaceLine",
                    "signature" : "(number: Число, newLine: Строка)",
                    "description" : "Заменяет содержимое строки по номеру",
                    "params" : {
                        "number" : "Номер заменяемой строки",
                        "newLine" : "Новое значение строки"
                    }
                },
                "Очистить" : {
                    "name" : "Очистить",
                    "name_en" : "Clear",
                    "signature" : "()",
                    "description" : "Очищает содержимое документа"
                },
                "УстановитьТекст" : {
                    "name" : "УстановитьТекст",
                    "name_en" : "SetText",
                    "signature" : "(newText: Строка)",
                    "description" : "Устанавливает содержимое текстового документа",
                    "params" : {
                        "newText" : "Новый текст документа"
                    }
                },
                "УдалитьСтроку" : {
                    "name" : "УдалитьСтроку",
                    "name_en" : "DeleteLine",
                    "signature" : "(lineNumber: Число)",
                    "description" : "Удаляет строку по номеру",
                    "params" : {
                        "lineNumber" : "Номер удаляемой строки"
                    }
                },
                "Прочитать" : {
                    "name" : "Прочитать",
                    "name_en" : "Read",
                    "signature" : "(path: Строка, encoding?: КодировкаТекста|Строка, lineSeparator?: Строка)",
                    "description" : "Читает содержимое из файла",
                    "params" : {
                        "path" : "Имя файла",
                        "encoding" : "Кодировка",
                        "lineSeparator" : "Разделитель строк в файле. FIXME: На данный момент параметр игнорируется, при чтении применяется разделитель для текущей ОС."
                    }
                },
                "Записать" : {
                    "name" : "Записать",
                    "name_en" : "Write",
                    "signature" : "(path: Строка, encoding?: КодировкаТекста|Строка, lineSeparator?: Строка)",
                    "description" : "Записывает содержимое документа в файл",
                    "params" : {
                        "path" : "Путь файла",
                        "encoding" : "Кодировка файла",
                        "lineSeparator" : "Разделитель строк. По умолчанию - ВК+ПС"
                    }
                }
            },
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "()"
                }
            }
        },
        "ЧтениеТекста" : {
            "name" : "ЧтениеТекста",
            "name_en" : "TextReader",
            "methods" : {
                "Открыть" : {
                    "name" : "Открыть",
                    "name_en" : "Open",
                    "signature" : "(path: Строка, encoding?: КодировкаТекста|Строка)"
                },
                "Прочитать" : {
                    "name" : "Прочитать",
                    "name_en" : "Read",
                    "signature" : "(size?: Число): Строка|Неопределено"
                },
                "ПрочитатьСтроку" : {
                    "name" : "ПрочитатьСтроку",
                    "name_en" : "ReadLine",
                    "signature" : "(overridenLineDelimiter?: Строка): Строка|Неопределено"
                },
                "Закрыть" : {
                    "name" : "Закрыть",
                    "name_en" : "Close",
                    "signature" : "()"
                }
            },
            "constructors" : {
                "По имени файла" : {
                    "name" : "По имени файла",
                    "signature" : "(path: Строка, encoding?: КодировкаТекста|Строка)"
                },
                "Формирование неинициализированного объекта" : {
                    "name" : "Формирование неинициализированного объекта",
                    "signature" : "()"
                }
            }
        },
        "ЗаписьТекста" : {
            "name" : "ЗаписьТекста",
            "name_en" : "TextWriter",
            "methods" : {
                "Открыть" : {
                    "name" : "Открыть",
                    "name_en" : "Open",
                    "signature" : "(path: Строка, encoding?: КодировкаТекста|Строка, lineDelimiter?: Строка, append?: Булево, eolReplacement?: Строка)",
                    "description" : "Открывает файл для записи.",
                    "params" : {
                        "path" : "Путь к файлу",
                        "encoding" : "Кодировка (необязательный). По умолчанию используется utf-8",
                        "lineDelimiter" : "Разделитель строк (необязательный). В текущей релизации параметр игнорируется",
                        "append" : "Признак добавления в конец файла (необязательный)",
                        "eolReplacement" : "Разделитель строк в файле (необязательный)."
                    }
                },
                "Закрыть" : {
                    "name" : "Закрыть",
                    "name_en" : "Close",
                    "signature" : "()"
                },
                "Записать" : {
                    "name" : "Записать",
                    "name_en" : "Write",
                    "signature" : "(what: Строка)",
                    "description" : "Записывает текст \"как есть\"",
                    "params" : {
                        "what" : "Текст для записи"
                    }
                },
                "ЗаписатьСтроку" : {
                    "name" : "ЗаписатьСтроку",
                    "name_en" : "WriteLine",
                    "signature" : "(what: Строка, delimiter?: Произвольный)",
                    "description" : "Записывает текст и добавляет перевод строки",
                    "params" : {
                        "what": "Текст для записи",
                        "delimiter" : "Разделитель строк"
                    }
                }
            },
            "constructors" : {
                "По имени файла" : {
                    "name" : "По имени файла",
                    "signature" : "(path: Строка, encoding?: КодировкаТекста|Строка, lineDelimiter?: Строка, append?: Булево, eolReplacement?: Произвольный)",
                    "description" : "Создает объект с начальными значениями имени файла и кодировки.",
                    "params" : {
                        "path" : "Имя файла",
                        "encoding" : "Кодировка в виде строки",
                        "lineDelimiter" : "Символ - разделитель строк (необязательный). В текущей релизации параметр игнорируется",
                        "append" : "Признак добавления в конец файла (необязательный)",
                        "eolReplacement" : "Разделитель строк в файле (необязательный)."
                    }
                },
                "Формирование неинициализированного объекта" : {
                    "name" : "Формирование неинициализированного объекта",
                    "signature" : "()"
                }
            }
        },
        "Структура" : {
            "name" : "Структура",
            "name_en" : "Structure",
            "methods" : {
                "Вставить" : {
                    "name" : "Вставить",
                    "name_en" : "Insert",
                    "signature" : "(name: Строка, val?: Произвольный)"
                },
                "Удалить" : {
                    "name" : "Удалить",
                    "name_en" : "Delete",
                    "signature" : "(name: Строка)"
                },
                "Свойство" : {
                    "name" : "Свойство",
                    "name_en" : "Property",
                    "signature" : "(name: Строка, value?: Произвольный): Булево"
                },
                "Количество" : {
                    "name" : "Количество",
                    "name_en" : "Count",
                    "signature" : "(): Число"
                },
                "Очистить" : {
                    "name" : "Очистить",
                    "name_en" : "Clear",
                    "signature" : "()"
                }
            },
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "()"
                },
                "По ключам и значениям" : {
                    "name" : "По ключам и значениям",
                    "signature" : "(strProperties: Строка, args: Произвольный, args1?: Произвольный,...)",
                    "description" : "Создает структуру по заданному перечню свойств и значений",
                    "params" : {
                        "strProperties" : "Строка с именами свойств, указанными через запятую.",
                        "args" : "Значения свойств. Каждое значение передается, как отдельный параметр."
                    }
                }
            }
        },
        "ЭлементыZipФайла" : {
            "name" : "ЭлементыZipФайла",
            "name_en" : "ZipFileEntries",
            "methods" : {
                "Количество" : {
                    "name" : "Количество",
                    "name_en" : "Count",
                    "signature" : "(): Число"
                },
                "Получить" : {
                    "name" : "Получить",
                    "name_en" : "Get",
                    "signature" : "(index: Число): ЭлементZipФайла"
                },
                "Найти" : {
                    "name" : "Найти",
                    "name_en" : "Find",
                    "signature" : "(name: Строка): ЭлементZipФайла|Неопределено"
                }
            }
        },
        "ЭлементZipФайла" : {
            "name" : "ЭлементZipФайла",
            "name_en" : "ZipFileEntry",
            "description" : "Описание элемента, находящегося в Zip архиве.",
            "properties" : {
                "ВремяИзменения" : {
                    "name" : "ВремяИзменения",
                    "name_en" : "Modified",
                    "access" : "Чтение"
                },
                "Зашифрован" : {
                    "name" : "Зашифрован",
                    "name_en" : "Encrypted",
                    "access" : "Чтение"
                },
                "Имя" : {
                    "name" : "Имя",
                    "name_en" : "Name",
                    "access" : "Чтение"
                },
                "ИмяБезРасширения" : {
                    "name" : "ИмяБезРасширения",
                    "name_en" : "NameWithoutExtension",
                    "access" : "Чтение"
                },
                "Невидимый" : {
                    "name" : "Невидимый",
                    "name_en" : "Hidden",
                    "access" : "Чтение"
                },
                "ПолноеИмя" : {
                    "name" : "ПолноеИмя",
                    "name_en" : "FullName",
                    "access" : "Чтение"
                },
                "Путь" : {
                    "name" : "Путь",
                    "name_en" : "Path",
                    "access" : "Чтение"
                },
                "РазмерНесжатого" : {
                    "name" : "РазмерНесжатого",
                    "name_en" : "UncompressedSize",
                    "access" : "Чтение"
                },
                "РазмерСжатого" : {
                    "name" : "РазмерСжатого",
                    "name_en" : "CompressedSize",
                    "access" : "Чтение"
                },
                "Расширение" : {
                    "name" : "Расширение",
                    "name_en" : "Extension",
                    "access" : "Чтение"
                },
                "ТолькоЧтение" : {
                    "name" : "ТолькоЧтение",
                    "name_en" : "ReadOnly",
                    "access" : "Чтение"
                }
            }
        },
        "ЧтениеZipФайла" : {
            "name" : "ЧтениеZipФайла",
            "name_en" : "ZipFileReader",
            "description" : "Объект чтения ZIP файлов.",
            "properties" : {
                "Элементы" : {
                    "name" : "Элементы",
                    "name_en" : "Elements",
                    "description" : "Коллекция элементов архива.",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "Открыть" : {
                    "name" : "Открыть",
                    "name_en" : "Open",
                    "signature" : "(filename: Строка, password?: Строка)",
                    "description" : "Открывает архив для чтения.",
                    "params" : {
                        "filename" : "Имя ZIP файла, который требуется открыть для чтения.",
                        "password" : "Пароль к файлу, если он зашифрован."
                    }
                },
                "ИзвлечьВсе" : {
                    "name" : "ИзвлечьВсе",
                    "name_en" : "ExtractAll",
                    "signature" : "(where: Строка, restorePaths?: РежимВосстановленияПутейФайловZIP)",
                     "description" : "Извлечение всех файлов из архива",
                    "params" : {
                        "where" : "Строка. Каталог в который извлекаются файлы",
                        "restorePaths" : "РежимВосстановленияПутейФайловZIP"
                    }
                },
                "Извлечь" : {
                    "name" : "Извлечь",
                    "name_en" : "Extract",
                    "signature" : "(entry: ЭлементZipФайла, destination: Строка, restorePaths?: РежимВосстановленияПутейФайловZIP, password?: Строка)",
                    "description" : "Извлечение элемента из архива",
                    "params" : {
                        "entry" : "ЭлементZipФайла. Извлекаемый элемент.",
                        "destination" : "Каталог, в который извлекается элемент.",
                        "restorePaths" : "РежимВосстановленияПутейФайлов",
                        "password" : "Пароль элемента (если отличается от пароля к архиву)"
                    }
                },
                "Закрыть" : {
                    "name" : "Закрыть",
                    "name_en" : "Close",
                    "signature" : "()",
                    "description" : "Закрыть архив и освободить объект."
                }
            },
            "constructors" : {
                "Формирование неинициализированного объекта" : {
                    "name" : "Формирование неинициализированного объекта",
                    "signature" : "()",
                },
                "На основании имени файла" : {
                    "name" : "На основании имени файла",
                    "signature" : "(filename: Строка, password?: Строка)"
                }
            }
        },
        "ЗаписьZipФайла" : {
            "name" : "ЗаписьZipФайла",
            "name_en" : "ZipFileWriter",
            "description" : "Объект записи ZIP-архивов.",
            "methods" : {
                "Открыть" : {
                    "name" : "Открыть",
                    "name_en" : "Open",
                    "signature" : "(filename: Строка, password?: Строка, comment?: Строка, compressionMethod?: МетодСжатияZIP, compressionLevel?: УровеньСжатияZIP, encryptionMethod?: МетодШифрованияZIP)",
                    "description" : "Открыть архив для записи.",
                    "params" : {
                        "filename" : "Имя файла будущего архива",
                        "password" : "Пароль на архив",
                        "comment" : "Комментарий к архиву",
                        "compressionMethod" : "МетодСжатияZIP (Сжатие/Копирование)",
                        "compressionLevel" : "УровеньСжатияZIP (Минимальный/Оптимальный/Максимальный)",
                        "encryptionMethod" : "МетодШифрованияZIP (в текущей реализации не поддерживается)"
                    }
                },
                "Записать" : {
                    "name" : "Записать",
                    "name_en" : "Write",
                    "signature" : "()",
                    "description" : "Записывает и закрывает файл архива."
                },
                "Добавить" : {
                    "name" : "Добавить",
                    "name_en" : "Add",
                    "signature" : "(file: Строка, storePathMode?: РежимСохраненияПутейZIP, recurseSubdirectories?: РежимОбработкиПодкаталоговZIP)",
                    "description" : "Добавление файла к архиву.",
                    "params" : {
                        "file" : "Имя файла, помещаемого в архив, или маска.",
                        "storePathMode" : "РежимСохраненияПутейZIP (НеСохранятьПути/СохранятьОтносительныеПути/СохранятьПолныеПути)",
                        "recurseSubdirectories" : "РежимОбработкиПодкаталоговZIP (НеОбрабатывать/ОбрабатыватьРекурсивно)"
                    }
                }
            },
            "constructors" : {
                "Формирование неинициализированного объекта" : {
                    "name" : "Формирование неинициализированного объекта",
                    "signature" : "()",                },
                "На основании имени файла" : {
                    "name" : "На основании имени файла",
                    "signature" : "(filename: Строка, password?: Строка, comment?: Строка, compressionMethod?: МетодСжатияZIP, compressionLevel?: УровеньСжатияZIP, encryptionMethod?: МетодШифрованияZIP)"
                }
            }
        },
        "ИндексыКоллекции" : {
            "name" : "ИндексыКоллекции",
            "name_en" : "CollectionIndexes",
            "methods" : {
                "Добавить" : {
                    "name" : "Добавить",
                    "name_en" : "Add",
                    "signature" : "(columns: Строка): ИндексКоллекции"
                },
                "Количество" : {
                    "name" : "Количество",
                    "name_en" : "Count",
                    "signature" : "(): Число"
                },
                "Удалить" : {
                    "name" : "Удалить",
                    "name_en" : "Delete",
                    "signature" : "(index: ИндексКоллекции)"
                },
                "Очистить" : {
                    "name" : "Очистить",
                    "name_en" : "Clear",
                    "signature" : "()"
                }
            },
        },
        "ИндексКоллекции" : {
            "name" : "ИндексКоллекции",
            "name_en" : "CollectionIndex",
            "description" : "Индекс коллекции"
        },
        "ТаблицаЗначений" : {
            "name" : "ТаблицаЗначений",
            "name_en" : "ValueTable",
            "properties" : {
                "Колонки" : {
                    "name" : "Колонки",
                    "name_en" : "Columns",
                    "access" : "Чтение"
                },
                "Индексы" : {
                    "name" : "Индексы",
                    "name_en" : "Indexes",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "Количество" : {
                    "name" : "Количество",
                    "name_en" : "Count",
                    "signature" : "(): Число"
                },
                "Добавить" : {
                    "name" : "Добавить",
                    "name_en" : "Add",
                    "signature" : "(): СтрокаТаблицыЗначений"
                },
                "Вставить" : {
                    "name" : "Вставить",
                    "name_en" : "Insert",
                    "signature" : "(index: Число): СтрокаТаблицыЗначений"
                },
                "Удалить" : {
                    "name" : "Удалить",
                    "name_en" : "Delete",
                    "signature" : "(row: Число|СтрокаТаблицыЗначений)"
                },
                "ЗагрузитьКолонку" : {
                    "name" : "ЗагрузитьКолонку",
                    "name_en" : "LoadColumn",
                    "signature" : "(values: Массив, columnIndex: Число|Строка|КолонкаТаблицыЗначений)"
                },
                "ВыгрузитьКолонку" : {
                    "name" : "ВыгрузитьКолонку",
                    "name_en" : "UnloadColumn",
                    "signature" : "(column: Число|Строка|КолонкаТаблицыЗначений)"
                },
                "ЗаполнитьЗначения" : {
                    "name" : "ЗаполнитьЗначения",
                    "name_en" : "FillValues",
                    "signature" : "(value: Произвольный, columnNames?: Строка)"
                },
                "Индекс" : {
                    "name" : "Индекс",
                    "name_en" : "IndexOf",
                    "signature" : "(row: СтрокаТаблицыЗначений): Число"
                },
                "Итог" : {
                    "name" : "Итог",
                    "name_en" : "Total",
                    "signature" : "(columnIndex: Строка): Число|Неопределено"
                },
                "Найти" : {
                    "name" : "Найти",
                    "name_en" : "Find",
                    "signature" : "(value: Произвольный, columnNames?: Строка): СтрокаТаблицыЗначений|Неопределено"
                },
                "НайтиСтроки" : {
                    "name" : "НайтиСтроки",
                    "name_en" : "FindRows",
                    "signature" : "(filter: Структура): Массив"
                },
                "Очистить" : {
                    "name" : "Очистить",
                    "name_en" : "Clear",
                    "signature" : "()"
                },
                "Получить" : {
                    "name" : "Получить",
                    "name_en" : "Get",
                    "signature" : "(index: Число): СтрокаТаблицыЗначений"
                },
                "Свернуть" : {
                    "name" : "Свернуть",
                    "name_en" : "GroupBy",
                    "signature" : "(groupColumnNames: Строка, aggregateColumnNames?: Строка)"
                },
                "Сдвинуть" : {
                    "name" : "Сдвинуть",
                    "name_en" : "Move",
                    "signature" : "(row: Число|СтрокаТаблицыЗначений, offset: Число)"
                },
                "СкопироватьКолонки" : {
                    "name" : "СкопироватьКолонки",
                    "name_en" : "CopyColumns",
                    "signature" : "(columnNames?: Строка): ТаблицаЗначений"
                },
                "Скопировать" : {
                    "name" : "Скопировать",
                    "name_en" : "Copy",
                    "signature" : "(rows?: Массив, columnNames?: Строка): ТаблицаЗначений"
                },
                "Сортировать" : {
                    "name" : "Сортировать",
                    "name_en" : "Sort",
                    "signature" : "(columns: Строка, comparator?: СравнениеЗначений)"
                },
                "ВыбратьСтроку" : {
                    "name" : "ВыбратьСтроку",
                    "name_en" : "ChooseRow",
                    "signature" : "(title?: Строка, startRow?: СтрокаТаблицыЗначений): СтрокаТаблицыЗначений|Неопределено"
                }
            },
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "()"
                }
            }
        },
        "КолонкаТаблицыЗначений" : {
            "name" : "КолонкаТаблицыЗначений",
            "name_en" : "ValueTableColumn",
            "properties" : {
                "Заголовок" : {
                    "name" : "Заголовок",
                    "name_en" : "Title",
                    "access" : "Чтение/Запись"
                },
                "Имя" : {
                    "name" : "Имя",
                    "name_en" : "Name",
                    "access" : "Чтение/Запись"
                },
                "ТипЗначения" : {
                    "name" : "ТипЗначения",
                    "name_en" : "ValueType",
                    "access" : "Чтение/Запись"
                },
                "Ширина" : {
                    "name" : "Ширина",
                    "name_en" : "Width",
                    "access" : "Чтение/Запись"
                },
            },
        },
        "КоллекцияКолонокТаблицыЗначений" : {
            "name" : "КоллекцияКолонокТаблицыЗначений",
            "name_en" : "ValueTableColumnCollection",
            "methods" : {
                "Добавить" : {
                    "name" : "Добавить",
                    "name_en" : "Add",
                    "signature" : "(name: Строка, type?: Тип, title?: Строка): КолонкаТаблицыЗначений"
                },
                "Вставить" : {
                    "name" : "Вставить",
                    "name_en" : "Insert",
                    "signature" : "(index: Число, name: Строка, type?: Тип, title?: Строка): КолонкаТаблицыЗначений"
                },
                "Индекс" : {
                    "name" : "Индекс",
                    "name_en" : "IndexOf",
                    "signature" : "(column: КолонкаТаблицыЗначений): Число"
                },
                "Количество" : {
                    "name" : "Количество",
                    "name_en" : "Count",
                    "signature" : "(): Число"
                },
                "Найти" : {
                    "name" : "Найти",
                    "name_en" : "Find",
                    "signature" : "(name: Строка): КолонкаТаблицыЗначений|Неопределено"
                },
                "Удалить" : {
                    "name" : "Удалить",
                    "name_en" : "Delete",
                    "signature" : "(column: Число|КолонкаТаблицыЗначений|Строка)"
                }
            }
        },
        "СтрокаТаблицыЗначений" : {
            "name" : "СтрокаТаблицыЗначений",
            "name_en" : "ValueTableRow",
            "methods" : {
                "Владелец" : {
                    "name" : "Владелец",
                    "name_en" : "Owner",
                    "signature" : "(): ТаблицаЗначений"
                },
                "Получить" : {
                    "name" : "Получить",
                    "name_en" : "Get",
                    "signature" : "(index: Число): Произвольный"
                },
                "Установить" : {
                    "name" : "Установить",
                    "name_en" : "Set",
                    "signature" : "(index: Число, value: Произвольный)"
                }
            }
        },
        "ЧтениеXML" : {
            "name" : "ЧтениеXML",
            "name_en" : "XMLReader",
            "properties" : {
                "URIПространстваИмен" : {
                    "name" : "URIПространстваИмен",
                    "name_en" : "NamespaceURI",
                    "access" : "Чтение"
                },
                "Автономный" : {
                    "name" : "Автономный",
                    "name_en" : "Standalone",
                    "access" : "Чтение"
                },
                "БазовыйURI" : {
                    "name" : "БазовыйURI",
                    "name_en" : "BaseURI",
                    "access" : "Чтение"
                },
                "ВерсияXML" : {
                    "name" : "ВерсияXML",
                    "name_en" : "XMLVersion",
                    "access" : "Чтение"
                },
                "Значение" : {
                    "name" : "Значение",
                    "name_en" : "Value",
                    "access" : "Чтение"
                },
                "ИмеетЗначение" : {
                    "name" : "ИмеетЗначение",
                    "name_en" : "HasValue",
                    "access" : "Чтение"
                },
                "ИмеетИмя" : {
                    "name" : "ИмеетИмя",
                    "name_en" : "HasName",
                    "access" : "Чтение"
                },
                "Имя" : {
                    "name" : "Имя",
                    "name_en" : "Name",
                    "access" : "Чтение"
                },
                "ИмяНотации" : {
                    "name" : "ИмяНотации",
                    "name_en" : "NotationName",
                    "access" : "Чтение"
                },
                "КодировкаXML" : {
                    "name" : "КодировкаXML",
                    "name_en" : "XMLEncoding",
                    "access" : "Чтение"
                },
                "КодировкаИсточника" : {
                    "name" : "КодировкаИсточника",
                    "name_en" : "InputEncoding",
                    "access" : "Чтение"
                },
                "КонтекстПространствИмен" : {
                    "name" : "КонтекстПространствИмен",
                    "name_en" : "NamespaceContext",
                    "access" : "Чтение"
                },
                "ЛокальноеИмя" : {
                    "name" : "ЛокальноеИмя",
                    "name_en" : "LocalName",
                    "access" : "Чтение"
                },
                "Префикс" : {
                    "name" : "Префикс",
                    "name_en" : "Prefix",
                    "access" : "Чтение"
                },
                "ПубличныйИдентификатор" : {
                    "name" : "ПубличныйИдентификатор",
                    "name_en" : "PublicId",
                    "access" : "Чтение"
                },
                "СистемныйИдентификатор" : {
                    "name" : "СистемныйИдентификатор",
                    "name_en" : "SystemId",
                    "access" : "Чтение"
                },
                "ТипУзла" : {
                    "name" : "ТипУзла",
                    "name_en" : "NodeType",
                    "access" : "Чтение"
                },
                "ЭтоАтрибутПоУмолчанию" : {
                    "name" : "ЭтоАтрибутПоУмолчанию",
                    "name_en" : "IsDefaultAttribute",
                    "access" : "Чтение"
                },
                "ЭтоПробельныеСимволы" : {
                    "name" : "ЭтоПробельныеСимволы",
                    "name_en" : "IsWhitespace",
                    "access" : "Чтение"
                },
                "Язык" : {
                    "name" : "Язык",
                    "name_en" : "Lang",
                    "access" : "Чтение"
                },
                "ИгнорироватьПробелы" : {
                    "name" : "ИгнорироватьПробелы",
                    "name_en" : "IgnoreWhitespace",
                    "access" : "Чтение/Запись"
                },
                "Параметры" : {
                    "name" : "Параметры",
                    "name_en" : "Settings",
                    "access" : "Чтение"
                },
                "ПробельныеСимволы" : {
                    "name" : "ПробельныеСимволы",
                    "name_en" : "Space",
                    "access" : "Чтение"
                },
                "ЭтоСимвольныеДанные" : {
                    "name" : "ЭтоСимвольныеДанные",
                    "name_en" : "IsCharacters",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "ОткрытьФайл" : {
                    "name" : "ОткрытьФайл",
                    "name_en" : "OpenFile",
                    "signature" : "(path: Строка)"
                },
                "УстановитьСтроку" : {
                    "name" : "УстановитьСтроку",
                    "name_en" : "SetString",
                    "signature" : "(content: Строка)"
                },
                "URIПространстваИменАтрибута" : {
                    "name" : "URIПространстваИменАтрибута",
                    "name_en" : "AttributeNamespaceURI",
                    "signature" : "(index: Число): Строка"
                },
                "ЗначениеАтрибута" : {
                    "name" : "ЗначениеАтрибута",
                    "name_en" : "AttributeValue",
                    "signature" : "(indexOrName: Строка|Число, URIIfGiven?: Строка): Строка|Неопределено"
                },
                "ИмяАтрибута" : {
                    "name" : "ИмяАтрибута",
                    "name_en" : "AttributeName",
                    "signature" : "(index: Число): Строка"
                },
                "КоличествоАтрибутов" : {
                    "name" : "КоличествоАтрибутов",
                    "name_en" : "AttributeCount",
                    "signature" : "(): Число"
                },
                "ЛокальноеИмяАтрибута" : {
                    "name" : "ЛокальноеИмяАтрибута",
                    "name_en" : "AttributeLocalName",
                    "signature" : "(index: Число): Строка"
                },
                "ПервоеОбъявление" : {
                    "name" : "ПервоеОбъявление",
                    "name_en" : "FirstDeclaration",
                    "signature" : "(): Булево"
                },
                "ПервыйАтрибут" : {
                    "name" : "ПервыйАтрибут",
                    "name_en" : "FirstAttribute",
                    "signature" : "(): Булево"
                },
                "ПолучитьАтрибут" : {
                    "name" : "ПолучитьАтрибут",
                    "name_en" : "GetAttribute",
                    "signature" : "(indexOrName: Строка|Число, URIIfGiven?: Строка): Строка|Неопределено"
                },
                "ПрефиксАтрибута" : {
                    "name" : "ПрефиксАтрибута",
                    "name_en" : "AttributePrefix",
                    "signature" : "(index: Число): Строка"
                },
                "Пропустить" : {
                    "name" : "Пропустить",
                    "name_en" : "Skip",
                    "signature" : "()"
                },
                "Прочитать" : {
                    "name" : "Прочитать",
                    "name_en" : "Read",
                    "signature" : "(): Булево"
                },
                "ПрочитатьАтрибут" : {
                    "name" : "ПрочитатьАтрибут",
                    "name_en" : "ReadAttribute",
                    "signature" : "(): Булево"
                },
                "СледующееОбъявление" : {
                    "name" : "СледующееОбъявление",
                    "name_en" : "NextDeclaration",
                    "signature" : "(): Булево"
                },
                "СледующийАтрибут" : {
                    "name" : "СледующийАтрибут",
                    "name_en" : "NextAttribute",
                    "signature" : "(): Булево"
                },
                "ТипАтрибута" : {
                    "name" : "ТипАтрибута",
                    "name_en" : "AttributeType",
                    "signature" : "(): ТипАтрибутаXML"
                },
                "Закрыть" : {
                    "name" : "Закрыть",
                    "name_en" : "Close",
                    "signature" : "()"
                },
                "ПерейтиКСодержимому" : {
                    "name" : "ПерейтиКСодержимому",
                    "name_en" : "MoveToContent",
                    "signature" : "(): ТипУзлаXML"
                }
            },
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "()"
                }
            }
        },
        "ЗаписьXML" : {
            "name" : "ЗаписьXML",
            "name_en" : "XMLWriter",
            "properties" : {
                "Отступ" : {
                    "name" : "Отступ",
                    "name_en" : "Indent",
                    "access" : "Чтение/Запись"
                },
                "КонтекстПространствИмен" : {
                    "name" : "КонтекстПространствИмен",
                    "name_en" : "NamespaceContext",
                    "access" : "Чтение"
                },
                "Параметры" : {
                    "name" : "Параметры",
                    "name_en" : "Settings",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "ЗаписатьАтрибут" : {
                    "name" : "ЗаписатьАтрибут",
                    "name_en" : "WriteAttribute",
                    "signature" : "(localName: Строка, valueOrNamespace: Строка, value?: Строка)"
                },
                "ЗаписатьБезОбработки" : {
                    "name" : "ЗаписатьБезОбработки",
                    "name_en" : "WriteRaw",
                    "signature" : "(data: Строка)"
                },
                "ЗаписатьИнструкциюОбработки" : {
                    "name" : "ЗаписатьИнструкциюОбработки",
                    "name_en" : "WriteProcessingInstruction",
                    "signature" : "(name: Строка, text: Строка)"
                },
                "ЗаписатьКомментарий" : {
                    "name" : "ЗаписатьКомментарий",
                    "name_en" : "WriteComment",
                    "signature" : "(text: Строка)"
                },
                "ЗаписатьКонецАтрибута" : {
                    "name" : "ЗаписатьКонецАтрибута",
                    "name_en" : "WriteEndAttribute",
                    "signature" : "()"
                },
                "ЗаписатьКонецЭлемента" : {
                    "name" : "ЗаписатьКонецЭлемента",
                    "name_en" : "WriteEndElement",
                    "signature" : "()"
                },
                "ЗаписатьНачалоАтрибута" : {
                    "name" : "ЗаписатьНачалоАтрибута",
                    "name_en" : "WriteStartAttribute",
                    "signature" : "(name: Строка, ns?: Строка)"
                },
                "ЗаписатьНачалоЭлемента" : {
                    "name" : "ЗаписатьНачалоЭлемента",
                    "name_en" : "WriteStartElement",
                    "signature" : "(name: Строка, ns?: Строка)"
                },
                "ЗаписатьОбъявлениеXML" : {
                    "name" : "ЗаписатьОбъявлениеXML",
                    "name_en" : "WriteXMLDeclaration",
                    "signature" : "()"
                },
                "ЗаписатьСекциюCDATA" : {
                    "name" : "ЗаписатьСекциюCDATA",
                    "name_en" : "WriteCDATASection",
                    "signature" : "(data: Строка)"
                },
                "ЗаписатьСоответствиеПространстваИмен" : {
                    "name" : "ЗаписатьСоответствиеПространстваИмен",
                    "name_en" : "WriteNamespaceMapping",
                    "signature" : "(prefix: Строка, uri: Строка)"
                },
                "ЗаписатьСсылкуНаСущность" : {
                    "name" : "ЗаписатьСсылкуНаСущность",
                    "name_en" : "WriteEntityReference",
                    "signature" : "(name: Строка)"
                },
                "ЗаписатьТекст" : {
                    "name" : "ЗаписатьТекст",
                    "name_en" : "WriteText",
                    "signature" : "(text: Строка)"
                },
                "ЗаписатьТекущий" : {
                    "name" : "ЗаписатьТекущий",
                    "name_en" : "WriteCurrent",
                    "signature" : "(reader: ЧтениеXML)"
                },
                "ЗаписатьТипДокумента" : {
                    "name" : "ЗаписатьТипДокумента",
                    "name_en" : "WriteDocumentType",
                    "signature" : "(name: Строка, varArg2: Строка, varArg3?:Строка, varArg4?: Строка)"
                },
                "НайтиПрефикс" : {
                    "name" : "НайтиПрефикс",
                    "name_en" : "LookupPrefix",
                    "signature" : "(uri:Строка): Строка|Неопределено"
                },
                "Закрыть" : {
                    "name" : "Закрыть",
                    "name_en" : "Close",
                    "signature" : "()"
                },
                "ОткрытьФайл" : {
                    "name" : "ОткрытьФайл",
                    "name_en" : "OpenFile",
                    "signature" : "(path: Строка, encoding?: КодировкаТекста|Строка, addBOM?: Произвольный)"
                },
                "УстановитьСтроку" : {
                    "name" : "УстановитьСтроку",
                    "name_en" : "SetString",
                    "signature" : "(encoding?: КодировкаТекста|Строка)"
                }
            },
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "()"
                }
            }
        },
        "СтрокаДереваЗначений" : {
            "name" : "СтрокаДереваЗначений",
            "name_en" : "ValueTreeRow",
            "description" : "Строка дерева значений.",
            "properties" : {
                "Родитель" : {
                    "name" : "Родитель",
                    "name_en" : "Parent",
                    "access" : "Чтение"
                },
                "Строки" : {
                    "name" : "Строки",
                    "name_en" : "Rows",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "Владелец" : {
                    "name" : "Владелец",
                    "name_en" : "Owner",
                    "signature" : "(): ДеревоЗначений",
                    "description" : "Возвращает дерево значений, в которе входит строка.",
                    "returns" : "ДеревоЗначений. Владелец строки."
                },
                "Получить" : {
                    "name" : "Получить",
                    "name_en" : "Get",
                    "signature" : "(index: Число): Произвольный",
                    "description" : "Получает значение по индексу.",
                    "returns" : "Произвольный. Получаемое значение.",
                    "params" : {
                        "index" : "Число. Индекс получаемого параметра."
                    }
                },
                "Установить" : {
                    "name" : "Установить",
                    "name_en" : "Set",
                    "signature" : "(index: Число, value: Произвольный)",
                    "description" : "Устанавливает значение по индексу.",
                    "params" : {
                        "index" : "Число. Индекс параметра, которому задаётся значение.",
                        "value" : "Произвольный. Новое значение."
                    }
                },
                "Уровень" : {
                    "name" : "Уровень",
                    "name_en" : "Level",
                    "signature" : "(): Число",
                    "description" : "Возвращает уровень вложенности строки в дереве.Строки верхнего уровня имеют значение 0.",
                    "returns" : "Число. Уровень вложенности строки."
                }
            }
        },
        "ДеревоЗначений" : {
            "name" : "ДеревоЗначений",
            "name_en" : "ValueTree",
            "description" : "Дерево значений.Древовидная структура с фунциональностью подобно таблице значений.",
            "properties" : {
                "Колонки" : {
                    "name" : "Колонки",
                    "name_en" : "Columns",
                    "access" : "Чтение"
                },
                "Строки" : {
                    "name" : "Строки",
                    "name_en" : "Rows",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "Скопировать" : {
                    "name" : "Скопировать",
                    "name_en" : "Copy",
                    "signature" : "(rows?: Массив, columnNames?: Строка): ДеревоЗначений",
                    "description" : "Создаёт копию дерева значений.",
                    "returns" : "ДеревоЗначений. Копия исходного дерева значений.",
                    "params" : {
                        "rows" : "Массив. Строки для копирования. Если не указан, копируются все строки. Необязательный параметр.",
                        "columnNames" : "Строка. Список колонок через запятую, которые должны быть скопированы. Необязательный параметр.",
                    },
                },
            },
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "()"
                }
            }
        },
        "КолонкаДереваЗначений" : {
            "name" : "КолонкаДереваЗначений",
            "name_en" : "ValueTreeColumn",
            "description" : "Колонка дерева значений.",
            "properties" : {
                "Заголовок" : {
                    "name" : "Заголовок",
                    "name_en" : "Title",
                    "access" : "Чтение/Запись"
                },
                "Имя" : {
                    "name" : "Имя",
                    "name_en" : "Name",
                    "access" : "Чтение/Запись"
                },
                "ТипЗначения" : {
                    "name" : "ТипЗначения",
                    "name_en" : "ValueType",
                    "access" : "Чтение/Запись"
                },
                "Ширина" : {
                    "name" : "Ширина",
                    "name_en" : "Width",
                    "access" : "Чтение/Запись"
                }
            }
        },
        "КоллекцияКолонокДереваЗначений" : {
            "name" : "КоллекцияКолонокДереваЗначений",
            "name_en" : "ValueTreeColumnCollection",
            "description" : "Коллекция колонок дерева значений.",
            "methods" : {
                "Добавить" : {
                    "name" : "Добавить",
                    "name_en" : "Add",
                    "signature" : "(name: Строка, type?: ОписаниеТипов, title?: Строка, width?: Число): КолонкаДереваЗначений",
                    "description" : "Добавляет новую колонку.",
                    "returns" : "КолонкаДереваЗначений. Добавленная колонка.",
                    "params" : {
                        "name" : "Строка. Имя колонки.",
                        "type" : "ОписаниеТипов. Доступные типы значений для колонки. Необязательный параметр.",
                        "title" : "Строка. Заголовок колонки. Необязательный параметр.",
                        "width" : "Число. Ширина колонки. Необязательный параметр."
                    }
                },
                "Вставить" : {
                    "name" : "Вставить",
                    "name_en" : "Insert",
                    "signature" : "(index: Число, name: Строка, type?: ОписаниеТипов, title?: Строка, width?: Число): КолонкаДереваЗначений",
                    "description" : "Вставляет новую колонку по указанному индексу.",
                    "returns" : "КолонкаДереваЗначений. Добавленная колонка.",
                    "params" : {
                        "index" : "Число. Индекс новой колонки.",
                        "name" : "Строка. Имя колонки.",
                        "type" : "ОписаниеТипов. Доступные типы значений для колонки. Необязательный параметр.",
                        "title" : "Строка. Заголовок колонки. Необязательный параметр.",
                        "width" : "Число. Ширина колонки. Необязательный параметр."
                    }
                },
                "Индекс" : {
                    "name" : "Индекс",
                    "name_en" : "IndexOf",
                    "signature" : "(column: КолонкаДереваЗначений): Число",
                    "description" : "Определяет индекс колонки.",
                    "returns" : "Число. Индекс колонки в коллекции. Если колонка не найдена, возвращается -1.",
                    "params" : {
                        "column" : "КолонкаДереваЗначений. Колонка."
                    }
                },
                "Количество" : {
                    "name" : "Количество",
                    "name_en" : "Count",
                    "signature" : "(): Число",
                    "description" : "Возвращает количество колонок.",
                    "returns" : "Число. Количество колонокs."
                },
                "Найти" : {
                    "name" : "Найти",
                    "name_en" : "Find",
                    "signature" : "(name: Строка): КолонкаДереваЗначений|Неопределено",
                    "description" : "Ищет колонку по имени.",
                    "returns" : "КолонкаДереваЗначений, Неопределено. Найденная колонка или Неопределено, если колонка не найдена.",
                    "params" : {
                        "name" : "Строка. Имя искомой колонки."
                    }
                },
                "Удалить" : {
                    "name" : "Удалить",
                    "name_en" : "Delete",
                    "signature" : "(column: КолонкаДереваЗначений)",
                    "description" : "Удаляет колонку.",
                    "params" : {
                        "column" : "КолонкаДереваЗначений. Колонка."
                    }
                },
                "Получить" : {
                    "name" : "Получить",
                    "name_en" : "Get",
                    "signature" : "(index: Число): КолонкаДереваЗначений",
                    "description" : "Получает колонку по индексу.",
                    "returns" : "КолонкаДереваЗначений. Колонка.",
                    "params" : {
                        "index" : "Число. Индекс колонки."
                    }
                },
                "Очистить" : {
                    "name" : "Очистить",
                    "name_en" : "Clear",
                    "signature" : "()",
                    "description" : "Удаляет все колонки."
                },
                "Сдвинуть" : {
                    "name" : "Сдвинуть",
                    "name_en" : "Move",
                    "signature" : "(column: КолонкаДереваЗначений|Число, offset: Число)",
                    "description" : "Сдвигает колонку на указанное смещение.",
                    "params" : {
                        "column" : "КолонкаДереваЗначений. Колонка.",
                        "offset" : "Число. Смещение."
                    }
                }
            }
        },
        "КоллекцияСтрокДереваЗначений" : {
            "name" : "КоллекцияСтрокДереваЗначений",
            "name_en" : "ValueTreeRowCollection",
            "description" : "Коллекция строк дерева значений.",
            "properties" : {
                "Родитель" : {
                    "name" : "Родитель",
                    "name_en" : "Parent",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "Владелец" : {
                    "name" : "Владелец",
                    "name_en" : "Owner",
                    "signature" : "(): ДеревоЗначений",
                    "description" : "Возвращает дерево значений, в которе входит строка.",
                    "returns" : "ДеревоЗначений. Владелец строки."
                },
                "Количество" : {
                    "name" : "Количество",
                    "name_en" : "Count",
                    "signature" : "(): Число",
                    "description" : "Возвращает количество строк.",
                    "returns" : "Число. Количество строк."
                },
                "Добавить" : {
                    "name" : "Добавить",
                    "name_en" : "Add",
                    "signature" : "(): СтрокаДереваЗначений",
                    "description" : "Добавляет строку в коллекцию.",
                    "returns" : "СтрокаДереваЗначений. Добавленная строка."
                },
                "Вставить" : {
                    "name" : "Вставить",
                    "name_en" : "Insert",
                    "signature" : "(index: Число): СтрокаДереваЗначений",
                    "description" : "Добавляет строку в коллекцию.",
                    "returns" : "СтрокаДереваЗначений. Добавленная строка.",
                    "params" : {
                        "index" : "Число. Индекс новой строки."
                    }
                },
                "Удалить" : {
                    "name" : "Удалить",
                    "name_en" : "Delete",
                    "signature" : "(row: СтрокаДереваЗначений|Число)",
                    "description" : "Удаляет строку из коллекции.",
                    "params" : {
                        "row" : "СтрокаДереваЗначений, Число. Удаляемая строка или её индекс."
                    }
                },
                "ЗагрузитьКолонку" : {
                    "name" : "ЗагрузитьКолонку",
                    "name_en" : "LoadColumn",
                    "signature" : "(values: Массив, columnIndex: КолонкаДереваЗначений|Число|Строка)",
                    "description" : "Загружает значения из массива в колонку.",
                    "params" : {
                        "values" : "Массив. Значения.",
                        "columnIndex" : "КолонкаДереваЗначений, Число, Строка. Колонка, в которую будут загружены значения, её имя или индекс."
                    }
                },
                "ВыгрузитьКолонку" : {
                    "name" : "ВыгрузитьКолонку",
                    "name_en" : "UnloadColumn",
                    "signature" : "(column: КолонкаДереваЗначений|Число|Строка): Массив",
                    "description" : "Загружает значения из массива в колонку.",
                    "returns" : "Массив. Массив значений.",
                    "params" : {
                        "column" : "КолонкаДереваЗначений, Число, Строка. Колонка, из которой будут выгружены значения, её имя или индекс."
                    }
                },
                "Индекс" : {
                    "name" : "Индекс",
                    "name_en" : "IndexOf",
                    "signature" : "(row: СтрокаДереваЗначений): Число",
                    "description" : "Определяет индекс строки.",
                    "returns" : "Число. Индекс строки в коллекции. Если строка не найдена, возвращается -1.",
                    "params" : {
                        "row" : "СтрокаДереваЗначений. Строка."
                    }
                },
                "Итог" : {
                    "name" : "Итог",
                    "name_en" : "Total",
                    "signature" : "(columnIndex: КолонкаДереваЗначений|Строка|Число, includeChildren?: Булево): Число|Неопределено",
                    "description" : "Суммирует значения в строках.",
                    "returns" : "Число. Вычисленная сумма.",
                    "params" : {
                        "columnIndex" : "КолонкаДереваЗначений, Строка, Число. Колонка, значения которой будут суммироваться.",
                        "includeChildren" : "Булево. Если Истина, в расчёт будут включены все вложенные строки."
                    }
                },
                "Найти" : {
                    "name" : "Найти",
                    "name_en" : "Find",
                    "signature" : "(value: Произвольный, columnNames?: Строка, includeChildren?: Булево): СтрокаДереваЗначений|Неопределено",
                    "description" : "Ищет значение в строках дерева значений.",
                    "returns" : "СтрокаДереваЗначений, Неопределено. Найденная строка или Неопределено, если строка не найдена.",
                    "params" : {
                        "value" : "Произвольный. Искомое значение.",
                        "columnNames" : "Строка. Список колонок через запятую, в которых будет производиться поиск. Необязательный параметр.",
                        "includeChildren" : "Булево. Если Истина, в поиск будут включены все вложенные строки. Необязательный параметр."
                    }
                },
                "НайтиСтроки" : {
                    "name" : "НайтиСтроки",
                    "name_en" : "FindRows",
                    "signature" : "(filter: Структура, includeChildren?: Булево): Массив",
                    "description" : "Ищет строки, отвечающие критериям отбора.",
                    "returns" : "Массив. Найденные строки.",
                    "params" : {
                        "filter" : "Структура. Структура, в которой Ключ - это имя колонки, а Значение - искомое значение.",
                        "includeChildren" : "Булево. Если Истина, в поиск будут включены все вложенные строки. Необязательный параметр."
                    }
                },
                "Очистить" : {
                    "name" : "Очистить",
                    "name_en" : "Clear",
                    "signature" : "()",
                    "description" : "Удаляет все строки."
                },
                "Получить" : {
                    "name" : "Получить",
                    "name_en" : "Get",
                    "signature" : "(index: Число): СтрокаДереваЗначений",
                    "description" : "Получает строку по индексу.",
                    "returns" : "СтрокаДереваЗначений. Строка.",
                    "params" : {
                        "index" : "Число. Индекс строки."
                    }
                },
                "Сдвинуть" : {
                    "name" : "Сдвинуть",
                    "name_en" : "Move",
                    "signature" : "(row: СтрокаДереваЗначений, offset: Число)",
                    "description" : "Сдвигает строку на указанное смещение.",
                    "params" : {
                        "row" : "СтрокаДереваЗначений. Строка.",
                        "offset" : "Число. Смещение."
                    }
                },
                "Сортировать" : {
                    "name" : "Сортировать",
                    "name_en" : "Sort",
                    "signature" : "(columns: Строка, sortChildren?: Булево, comparator?: Произвольный)",
                    "description" : "Сортирует строки по указанному правилу.",
                    "params" : {
                        "columns" : "Строка. Правило сортировки: список имён колонок, разделённых запятой. После имени черезпробел может указываться направление сортировки: Возр(Asc) - по возрастанию, Убыв(Desc) - по убыванию.",
                        "sortChildren" : "Булево. Если Истина, сортировка будет применена также к вложенным строкам.",
                        "comparator" : "СравнениеЗначений. Не используется."
                    }
                },
                "ВыбратьСтроку" : {
                    "name" : "ВыбратьСтроку",
                    "name_en" : "ChooseRow",
                    "signature" : "(title?: Строка, startRow?: СтрокаДереваЗначений)",
                    "description" : "Не поддерживается."
                }
            }
        },
        "СписокЗначений" : {
            "name" : "СписокЗначений",
            "name_en" : "ValueList",
            "description" : "Стандартная универсальная коллекция системы 1С:Предприятие 8",
            "methods" : {
                "Получить" : {
                    "name" : "Получить",
                    "name_en" : "Get",
                    "signature" : "(index: Число): ЭлементСпискаЗначений|Неопределено"
                },
                "Добавить" : {
                    "name" : "Добавить",
                    "name_en" : "Add",
                    "signature" : "(value: Произвольный, presentation?: Строка, check?: Булево, picture?: Произвольный)"
                },
                "Вставить" : {
                    "name" : "Вставить",
                    "name_en" : "Insert",
                    "signature" : "(index: Число, value: Произвольный, presentation?: Строка, check?: Булево, picture?: Произвольный)"
                },
                "ВыгрузитьЗначения" : {
                    "name" : "ВыгрузитьЗначения",
                    "name_en" : "UnloadValues",
                    "signature" : "(): Массив"
                },
                "ЗагрузитьЗначения" : {
                    "name" : "ЗагрузитьЗначения",
                    "name_en" : "LoadValues",
                    "signature" : "(source: Массив)"
                },
                "Очистить" : {
                    "name" : "Очистить",
                    "name_en" : "Clear",
                    "signature" : "()"
                },
                "ЗаполнитьПометки" : {
                    "name" : "ЗаполнитьПометки",
                    "name_en" : "FillChecks",
                    "signature" : "(check: Булево)"
                },
                "Индекс" : {
                    "name" : "Индекс",
                    "name_en" : "IndexOf",
                    "signature" : "(item: ЭлементСпискаЗначений): Число"
                },
                "НайтиПоЗначению" : {
                    "name" : "НайтиПоЗначению",
                    "name_en" : "FindByValue",
                    "signature" : "(val: Произвольный): ЭлементСпискаЗначений|Неопределено"
                },
                "Сдвинуть" : {
                    "name" : "Сдвинуть",
                    "name_en" : "Move",
                    "signature" : "(item: Число|ЭлементСпискаЗначений, direction: Число)"
                },
                "Скопировать" : {
                    "name" : "Скопировать",
                    "name_en" : "Copy",
                    "signature" : "(): СписокЗначений"
                },
                "СортироватьПоЗначению" : {
                    "name" : "СортироватьПоЗначению",
                    "name_en" : "SortByValue",
                    "signature" : "(direction?: НаправлениеСортировки)"
                },
                "СортироватьПоПредставлению" : {
                    "name" : "СортироватьПоПредставлению",
                    "name_en" : "SortByPresentation",
                    "signature" : "(direction: НаправлениеСортировки)"
                },
                "Удалить" : {
                    "name" : "Удалить",
                    "name_en" : "Delete",
                    "signature" : "(item: Число|ЭлементСпискаЗначений)"
                },
                "Количество" : {
                    "name" : "Количество",
                    "name_en" : "Count",
                    "signature" : "(): Число"
                }
            },
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "()"
                }
            }
        },
        "ЭлементСпискаЗначений" : {
            "name" : "ЭлементСпискаЗначений",
            "name_en" : "ValueListItem",
            "description" : "Используется для доступа к свойствам и методам элемента списка значений",
            "properties" : {
                "Значение" : {
                    "name" : "Значение",
                    "name_en" : "Value",
                    "access" : "Чтение/Запись"
                },
                "Представление" : {
                    "name" : "Представление",
                    "name_en" : "Presentation",
                    "access" : "Чтение/Запись"
                },
                "Пометка" : {
                    "name" : "Пометка",
                    "name_en" : "Check",
                    "access" : "Чтение/Запись"
                },
                "Картинка" : {
                    "name" : "Картинка",
                    "name_en" : "Picture",
                    "access" : "Чтение/Запись"
                }
            }
        },
        "КоллекцияСовпаденийРегулярногоВыражения" : {
            "name" : "КоллекцияСовпаденийРегулярногоВыражения",
            "name_en" : "RegExMatchCollection",
            "methods" : {
                "Количество" : {
                    "name" : "Количество",
                    "name_en" : "Count",
                    "signature" : "(): Число",
                    "description" : "Получает количество полученных совпадений.",
                    "returns" : "Количество полученных совпадений."
                }
            }
        },
        "КоллекцияГруппРегулярногоВыражения" : {
            "name" : "КоллекцияГруппРегулярногоВыражения",
            "name_en" : "RegExGroupCollection",
            "methods" : {
                "Количество" : {
                    "name" : "Количество",
                    "name_en" : "Count",
                    "signature" : "(): Число",
                    "description" : "Получает количество полученных групп.",
                    "returns" : "Количество полученных групп."
                }
            }
        },
        "СовпадениеРегулярногоВыражения" : {
            "name" : "СовпадениеРегулярногоВыражения",
            "name_en" : "RegExMatch",
            "properties" : {
                "Значение" : {
                    "name" : "Значение",
                    "name_en" : "Value",
                    "description" : "Найденная строка.",
                    "access" : "Чтение"
                },
                "Индекс" : {
                    "name" : "Индекс",
                    "name_en" : "Index",
                    "description" : "Индекс найденной строки. Нумерация начинается с 0",
                    "access" : "Чтение"
                },
                "Длина" : {
                    "name" : "Длина",
                    "name_en" : "Length",
                    "description" : "Длина найденной строки.",
                    "access" : "Чтение"
                },
                "Группы" : {
                    "name" : "Группы",
                    "name_en" : "Groups",
                    "description" : "Коллекция найденных групп (тип КоллекцияГруппРегулярногоВыражения).",
                    "access" : "Чтение"
                }
            }
        },
        "ГруппаРегулярногоВыражения" : {
            "name" : "ГруппаРегулярногоВыражения",
            "name_en" : "RegExGroup",
            "properties" : {
                "Значение" : {
                    "name" : "Значение",
                    "name_en" : "Value",
                    "description" : "Найденная строка.",
                    "access" : "Чтение"
                },
                "Индекс" : {
                    "name" : "Индекс",
                    "name_en" : "Index",
                    "description" : "Индекс найденной строки. Нумерация начинается с 0",
                    "access" : "Чтение"
                },
                "Длина" : {
                    "name" : "Длина",
                    "name_en" : "Length",
                    "description" : "Длина найденной строки.",
                    "access" : "Чтение"
                }
            }
        },
        "РегулярноеВыражение" : {
            "name" : "РегулярноеВыражение",
            "name_en" : "Regex",
            "properties" : {
                "ИгнорироватьРегистр" : {
                    "name" : "ИгнорироватьРегистр",
                    "name_en" : "IgnoreCase",
                    "description" : "Признак Не учитывать регистр символов. Булево",
                    "access" : "Чтение/Запись"
                },
                "Многострочный" : {
                    "name" : "Многострочный",
                    "name_en" : "Multiline",
                    "description" : "Признак выполнения многострочного поиска. Булево",
                    "access" : "Чтение/Запись"
                }
            },
            "methods" : {
                "Совпадает" : {
                    "name" : "Совпадает",
                    "name_en" : "IsMatch",
                    "signature" : "(inputString: Строка, startAt?: Число): Булево",
                    "description" : "Проверяет, что строка совпадает с шаблоном регулярного выражения.",
                    "returns" : "Признак совпадения. Булево.",
                    "params" : {
                        "inputString" : "Строка, которая проверяется.",
                        "startAt" : "Число. Необязательный параметр. По-умолчанию 0. Содержит стартовую позицию, начиная с которой надо анализировать текст. Нумерация позиций в отличии от 1С начинается с 0"
                    }
                },
                "НайтиСовпадения" : {
                    "name" : "НайтиСовпадения",
                    "name_en" : "Matches",
                    "signature" : "(inputString: Строка, startAt?: Число): КоллекцияСовпаденийРегулярногоВыражения",
                    "description" : "Находит все совпадения в строке по шаблону регулярного выражения.",
                    "returns" : "Коллекция совпадения (тип КоллекцияСовпаденийРегулярногоВыражения).",
                    "params" : {
                        "inputString" : "Строка, которая проверяется.",
                        "startAt" : "Число. Необязательный параметр. По-умолчанию 0. Содержит стартовую позицию, начиная с которой надо анализировать текст. Нумерация позиций в отличии от 1С начинается с 0"
                    }
                },
                "Разделить" : {
                    "name" : "Разделить",
                    "name_en" : "Split",
                    "signature" : "(inputString: Строка, count?: Число, startAt?: Число): Массив",
                    "description" : "Разделяет исходную строку на части, используя как разделитель заданное регулярное выражение.",
                    "returns" : "Массив полученных строк.",
                    "params" : {
                        "inputString" : "Строка, которая проверяется.",
                        "count" : "Число. Необязательный параметр. По-умолчанию 0 (искать все). Содержит количество искомых элементов.",
                        "startAt" : "Число. Необязательный параметр. По-умолчанию 0. Содержит стартовую позицию, начиная с которой надо анализировать текст. Нумерация позиций в отличии от 1С начинается с 0"
                    }
                },
                "Заменить" : {
                    "name" : "Заменить",
                    "name_en" : "Replace",
                    "signature" : "(inputString: Строка, replacement: Строка): Строка",
                    "description" : "Заменяет в исходной строке все вхождения регулярного выражения на СтрокаЗамены.В строке замены можно использовать ссылки на захваченные группы, как $n, где n - номер захваченной группы ($0 - все захваченное выражение).",
                    "returns" : "Строку-результат замены.",
                    "params" : {
                        "inputString" : "Строка. Текст, в котором необходимо выполнить замены.",
                        "replacement" : "Строка. Текст, который будет вставляться в места замены."
                    }
                }
            },
            "constructors" : {
                "По регулярному выражению" : {
                    "name" : "По регулярному выражению",
                    "signature" : "(pattern: Строка)",
                    "description" : "Конструктор создания регулярного выражения по заданному шаблону.",
                    "params" : {
                        "pattern" : "Строка-шаблон регулярного выражения."
                    }
                }
            }
        },
        "TCPСоединение" : {
            "name" : "TCPСоединение",
            "name_en" : "TCPConnection",
            "description" : "Соединение по протоколу TCP. Позволяет отправлять и принимать данные с использованием TCP сокета.",
            "properties" : {
                "Активно" : {
                    "name" : "Активно",
                    "name_en" : "IsActive",
                    "description" : "Признак активности соединения.Данный признак не является надежным признаком существования соединения.Он говорит лишь о том, что на момент получения значения данного свойства соединение было активно.",
                    "access" : "Чтение"
                },
                "ТаймаутОтправки" : {
                    "name" : "ТаймаутОтправки",
                    "name_en" : "WriteTimeout",
                    "description" : "Таймаут, в течение которого система ожидает отправки данных. Если таймаут не установлен, то скрипт будет ждать начала отправки бесконечно.",
                    "access" : "Чтение/Запись"
                },
                "ТаймаутЧтения" : {
                    "name" : "ТаймаутЧтения",
                    "name_en" : "ReadTimeout",
                    "description" : "Таймаут чтения данных. Если таймаут не установлен, то скрипт будет ждать начала приема данных бесконечно.",
                    "access" : "Чтение/Запись"
                }
            },
            "methods" : {
                "ПрочитатьСтроку" : {
                    "name" : "ПрочитатьСтроку",
                    "name_en" : "ReadString",
                    "signature" : "(encoding?: КодировкаТекста|Строка): Строка",
                    "description" : "Прочитать данные из сокета в виде строки.",
                    "returns" : "Строка. Данные прочитанные из сокета",
                    "params" : {
                        "encoding" : "КодировкаТекста или Строка. Указывает в какой кодировке интерпретировать входящий поток байт.Значение по умолчанию: utf-8"
                    }
                },
                "ПрочитатьДвоичныеДанные" : {
                    "name" : "ПрочитатьДвоичныеДанные",
                    "name_en" : "ReadBinaryData",
                    "signature" : "(len?: Число): ДвоичныеДанные",
                    "description" : "Читает сырые байты из сокета.",
                    "returns" : "ДвоичныеДанные",
                    "params" : {
                        "len" : "Количество байт, которые требуется прочитать. 0 - читать до конца потока.Значение по умолчанию: 0"
                    }
                },
                "ОтправитьСтроку" : {
                    "name" : "ОтправитьСтроку",
                    "name_en" : "SendString",
                    "signature" : "(data: Строка, encoding?: КодировкаТекста|Строка)",
                    "description" : "Отправка строки на удаленный хост",
                    "params" : {
                        "data" : "Строка. Данные для отправки",
                        "encoding" : "КодировкаТекста или Строка. Кодировка в которой нужно записать данные в поток. По умолчанию utf-8"
                    }
                },
                "ОтправитьДвоичныеДанные" : {
                    "name" : "ОтправитьДвоичныеДанные",
                    "name_en" : "SendBinaryData",
                    "signature" : "(data: ДвоичныеДанные)",
                    "description" : "Отправка сырых двоичных данных на удаленный хост.",
                    "params" : {
                        "data" : "ДвоичныеДанные которые нужно отправить."
                    },
                },
                "Закрыть" : {
                    "name" : "Закрыть",
                    "name_en" : "Close",
                    "signature" : "()",
                    "description" : "Закрывает соединение с удаленным хостом."
                }
            },
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "(host: Строка, port: Число)",
                    "description" : "Подключение к удаленному TCP-сокету",
                    "params" : {
                        "host" : "адрес машины",
                        "port" : "порт сокета"
                    }
                }
            }
        },
        "TCPСервер" : {
            "name" : "TCPСервер",
            "name_en" : "TCPServer",
            "description" : "Простой однопоточный tcp-сокет. Слушает входящие соединения на определенном порту",
            "methods" : {
                "Запустить" : {
                    "name" : "Запустить",
                    "name_en" : "Start",
                    "signature" : "()",
                    "description" : "Метод инициализирует TCP-сервер и подготавливает к приему входящих соединений"
                },
                "Остановить" : {
                    "name" : "Остановить",
                    "name_en" : "Stop",
                    "signature" : "()",
                    "description" : "Останавливает прослушивание порта."
                },
                "ОжидатьСоединения" : {
                    "name" : "ОжидатьСоединения",
                    "name_en" : "WaitForConnection",
                    "signature" : "(timeout?: Число): TCPСоединение",
                    "description" : "Приостановить выполнение скрипта и ожидать соединений по сети.После получения соединения выполнение продолжается",
                    "returns" : "TCPСоединение. Объект, позволяющий обмениваться данными с удаленным хостом.",
                    "params" : {
                        "timeout" : "Значение таймаута в миллисекундах."
                    }
                }
            },
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "(port: Число)",
                    "description" : "Создает новый сокет с привязкой к порту.",
                    "params" : {
                        "port" : "Порт, который требуется слушать."
                    }
                }
            }
        },
        "ЧтениеJSON" : {
            "name" : "ЧтениеJSON",
            "name_en" : "JSONReader",
            "description" : "Предназначен для последовательного чтения JSON-данных из файла или строки.",
            "properties" : {
                "ТекущаяПозиция" : {
                    "name" : "ТекущаяПозиция",
                    "name_en" : "CurrentPosition",
                    "description" : "Указывает на позицию, находящуюся сразу после прочитанного значения. При ошибке чтение остается на позиции последнего успешно считанного символа.",
                    "value" : "Число (Number), Неопределено (Undefined)",
                    "access" : "Чтение"
                },
                "ТекущаяСтрока" : {
                    "name" : "ТекущаяСтрока",
                    "name_en" : "CurrentLine",
                    "description" : "Указывает на позицию сразу после прочитанного значения. Например, перед чтением первого элемента - 0, после чтения первого элемента -1 .",
                    "value" : "Число (Number), Неопределено (Undefined)",
                    "access" : "Чтение"
                },
                "ТекущееЗначение" : {
                    "name" : "ТекущееЗначение",
                    "name_en" : "CurrentValue",
                    "description" : "Содержит текущее значение: - Число - если ТипТекущегоЗначения имеет значение Число; - Строка - если ТипТекущегоЗначения имеет значение: - Комментарий, - ИмяСвойства, - Строка; - Булево - если ТипТекущегоЗначения имеет значение Булево, - Неопределено - если ТипТекущегоЗначения имеет значение Null. Исключение генерируется в случае, если ТипТекущегоЗначения имеет одно из следующих значений: - НачалоМассива, - КонецМассива, - НачалоОбъекта, - КонецОбъекта, - Ничего.",
                    "value" : "Число (Number), Строка (String), Булево (Boolean), Неопределено (Undefined)",
                    "access" : "Чтение"
                },
                "ТипТекущегоЗначения" : {
                    "name" : "ТипТекущегоЗначения",
                    "name_en" : "CurrentValueType",
                    "description" : "Тип текущего значения в документе JSON. Неопределено - если чтение еще не началось или достигнут конец файла.",
                    "value" : "ТипЗначенияJSON (JSONValueType)",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "Закрыть" : {
                    "name" : "Закрыть",
                    "name_en" : "Close",
                    "signature" : "()",
                    "description" : "Завершает чтение текста JSON из файла или строки."
                },
                "ОткрытьФайл" : {
                    "name" : "ОткрытьФайл",
                    "name_en" : "OpenFile",
                    "signature" : "(JSONFileName: Строка, encoding?: КодировкаТекста|Строка)"
                },
                "Пропустить" : {
                    "name" : "Пропустить",
                    "name_en" : "Skip",
                    "signature" : "() : Булево",
                    "description" : "Если текущее значение – начало массива или объекта, то пропускает его содержимое и конец. Для остальных типов значений работает аналогично методу Прочитать()."
                },
                "Прочитать" : {
                    "name" : "Прочитать",
                    "name_en" : "Read",
                    "signature" : "() : Булево",
                    "description" : "Выполняет чтение значения JSON."
                },
                "УстановитьСтроку" : {
                    "name" : "УстановитьСтроку",
                    "name_en" : "SetString",
                    "signature" : "(JSONString: Строка)",
                    "description" : "Устанавливает строку, содержащую текст JSON для чтения данным объектом. Если перед вызовом данного метода уже производилось чтение JSON из другого файла или строки, то чтение прекращается и объект инициализируется для чтения из указанной строки.",
                    "params" : {
                        "JSONString" : "Строка, содержащая текст в формате JSON."
                    }
                }
            },
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "()"
                }
            }
        },
        "ЗаписьJSON" : {
            "name" : "ЗаписьJSON",
            "name_en" : "JSONWriter",
            "description" : "Предназначен для организации последовательной записи объектов и текстов JSON.",
            "properties" : {
                "Параметры" : {
                    "name" : "Параметры",
                    "name_en" : "Settings",
                    "description" : "Определяет текущие параметры записи JSON.",
                    "value" : "ПараметрыЗаписиJSON (JSONWriterSettings)",
                    "access" : "Чтение"
                },
                "ПроверятьСтруктуру" : {
                    "name" : "ПроверятьСтруктуру",
                    "name_en" : "ValidateStructure",
                    "description" : "Показывает, будет ли проводиться проверка правильности структуры записываемого JSON объекта. В случае обнаружение ошибки, будет сгенерировано исключение. Например: при попытке записать значение без имени вне массива или записать окончание объекта без начала. Установка данного свойства не имеет немедленного эффекта. Установленное значение свойства будет использовано только после открытия файла или установки строки. После создания объекта данное свойство имеет значение Истина.",
                    "value" : "Булево (Boolean)",
                    "access" : "Чтение/Запись"
                }
            },
            "methods" : {
                "Закрыть" : {
                    "name" : "Закрыть",
                    "name_en" : "Close",
                    "signature" : "() : Строка",
                    "description" : "Завершает запись текста JSON. Если производилась запись в файл, то файл закрывается. Если производилась запись в строку, то результирующая строка будет получена в качестве возвращаемого значения метода. Если производилась запись в файл, то метод вернет пустую строку.",
                    "returns" : "Значения данного типа содержат строку в формате Unicode произвольной длины."
                },
                "ЗаписатьБезОбработки" : {
                    "name" : "ЗаписатьБезОбработки",
                    "name_en" : "WriteRaw",
                    "signature" : "(string: Строка)",
                    "description" : "Выполняет запись произвольной строки в документ, при этом проверка структуры документа не выполняется. Если при использовании метода свойство ПроверятьСтруктуру установлено в значение Истина, то проверка структуры продолжается на следующем элементе.",
                    "params" : {
                        "string" : "Строка, записываемая в документ JSON."
                    }
                },
                "ЗаписатьЗначение" : {
                    "name" : "ЗаписатьЗначение",
                    "name_en" : "WriteValue",
                    "signature" : "(value: Произвольный, useFormatWithExponent?: Булево)",
                    "description" : "Записывает значение свойства JSON.",
                    "params" : {
                        "value" : "Записываемое значение. Типы: Строка (String), Число (Number), Булево (Boolean), Неопределено (Undefined)",
                        "useFormatWithExponent" : "Использование экспоненциальной формы записи для числовых значений. Параметр имеет смысл только если записывается значение числового типа. Значение по умолчанию: Ложь."
                    }
                },
                "ЗаписатьИмяСвойства" : {
                    "name" : "ЗаписатьИмяСвойства",
                    "name_en" : "WritePropertyName",
                    "signature" : "(propertyName: Строка)",
                    "description" : "Записывает имя свойства JSON.",
                    "params" : {
                        "propertyName" : "Имя свойства."
                    }
                },
                "ЗаписатьКонецМассива" : {
                    "name" : "ЗаписатьКонецМассива",
                    "name_en" : "WriteEndArray",
                    "signature" : "()",
                    "description" : "Записывает конец массива JSON."
                },
                "ЗаписатьКонецОбъекта" : {
                    "name" : "ЗаписатьКонецОбъекта",
                    "name_en" : "WriteEndObject",
                    "signature" : "()",
                    "description" : "Записывает конец объекта JSON."
                },
                "ЗаписатьНачалоМассива" : {
                    "name" : "ЗаписатьНачалоМассива",
                    "name_en" : "WriteStartArray",
                    "signature" : "()",
                    "description" : "Записывает начало массива JSON."
                },
                "ЗаписатьНачалоОбъекта" : {
                    "name" : "ЗаписатьНачалоОбъекта",
                    "name_en" : "WriteStartObject",
                    "signature" : "()",
                    "description" : "Записывает начало объекта JSON."
                },
                "ОткрытьФайл" : {
                    "name" : "ОткрытьФайл",
                    "name_en" : "OpenFile",
                    "signature" : "(fileName: Строка, encoding?: КодировкаТекста|Строка, addBOM?: Произвольный, settings?: Произвольный)",
                    "description" : "Открывает файл для записи JSON. Позволяет указать тип кодировки, который будет использован для записи файла JSON, а также использование BOM.",
                    "params" : {
                        "fileName" : "Имя файла, в который будет записываться текст JSON.",
                        "encoding" : "В качестве типа кодировки может быть указана одна из возможных кодировок текста. В этом случае файл будет записан в соответствующей кодировке. Если же в качестве параметра указана пустая строка или ничего не указано, то для записи файла будет использована кодировка UTF8. Поддерживаемые коды кодировок: Значение по умолчанию: UTF-8.",
                        "addBOM" : "Определяет, будет ли добавлен маркер порядка байт (BOM) к результирующему файлу JSON. Внимание. Стандарт RFC7159 настоятельно рекомендует не добавлять маркер порядка байт (BOM) к документу JSON . Значение по умолчанию: Ложь.",
                        "settings" : "Параметры, используемые при открытии файла для настройки записи в формате JSON."
                    }
                },
                "УстановитьСтроку" : {
                    "name" : "УстановитьСтроку",
                    "name_en" : "SetString",
                    "signature" : "(settings?: Произвольный)",
                    "description" : "Инициализирует объект для вывода результирующего JSON текста в строку.",
                    "params" : {
                        "settings" : "Параметры, используемые при записи объекта JSON. По умолчанию, содержит ПараметрыЗаписиJSON, сгенерированные автоматически."
                    }
                }
            },
            "constructors" : {
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "()"
                }
            }
        },
        "HTTPСоединение" : {
            "name" : "HTTPСоединение",
            "name_en" : "HTTPConnection",
            "description" : "Объект доступа к протоколу HTTP/HTTPS.Использует семантику методов, реализованных в платформе 1С:Предприятие 8.2.18 и старше.Синтаксис методов, применявшийся в более младших версиях не поддерживается.Средства работы с HTTP находятся в статусе experimental.",
            "properties" : {
                "ИспользоватьАутентификациюОС" : {
                    "name" : "ИспользоватьАутентификациюОС",
                    "name_en" : "UseOSAuthentication",
                    "access" : "Чтение"
                },
                "Пользователь" : {
                    "name" : "Пользователь",
                    "name_en" : "User",
                    "access" : "Чтение/Запись"
                },
                "Пароль" : {
                    "name" : "Пароль",
                    "name_en" : "Password",
                    "access" : "Чтение/Запись"
                },
                "Сервер" : {
                    "name" : "Сервер",
                    "name_en" : "Host",
                    "access" : "Чтение/Запись"
                },
                "Порт" : {
                    "name" : "Порт",
                    "name_en" : "Port",
                    "access" : "Чтение/Запись"
                },
                "Прокси" : {
                    "name" : "Прокси",
                    "name_en" : "Proxy",
                    "access" : "Чтение"
                },
                "Таймаут" : {
                    "name" : "Таймаут",
                    "name_en" : "Timeout",
                    "access" : "Чтение/Запись"
                },
            },
            "methods" : {
                "Получить" : {
                    "name" : "Получить",
                    "name_en" : "Get",
                    "signature" : "(request: HTTPЗапрос, output?: Строка): HTTPОтвет",
                    "description" : "Получить данные методом GET",
                    "returns" : "HTTPОтвет. Ответ сервера.",
                    "params" : {
                        "request" : "HTTPЗапрос. Данные и заголовки запроса http",
                        "output" : "Строка. Имя файла, в который нужно записать ответ. Необязательный параметр."
                    }
                },
                "Записать" : {
                    "name" : "Записать",
                    "name_en" : "Put",
                    "signature" : "(request: HTTPЗапрос): HTTPОтвет",
                    "description" : "Передача данных методом PUT",
                    "returns" : "HTTPОтвет. Ответ сервера.",
                    "params" : {
                        "request" : "HTTPЗапрос. Данные и заголовки запроса http"
                    }
                },
                "ОтправитьДляОбработки" : {
                    "name" : "ОтправитьДляОбработки",
                    "name_en" : "Post",
                    "signature" : "(request: HTTPЗапрос, output?: Строка): HTTPОтвет",
                    "description" : "Передача данных методом POST",
                    "returns" : "HTTPОтвет. Ответ сервера.",
                    "params" : {
                        "request" : "HTTPЗапрос. Данные и заголовки запроса http",
                        "output" : "Строка. Имя файла, в который нужно записать ответ. Необязательный параметр."
                    }
                },
                "Удалить" : {
                    "name" : "Удалить",
                    "name_en" : "Delete",
                    "signature" : "(request: HTTPЗапрос): HTTPОтвет",
                    "description" : "Удалить данные методом DELETE",
                    "returns" : "HTTPОтвет. Ответ сервера.",
                    "params" : {
                        "request" : "HTTPЗапрос. Данные и заголовки запроса http"
                    }
                },
                "Изменить" : {
                    "name" : "Изменить",
                    "name_en" : "Patch",
                    "signature" : "(request: HTTPЗапрос): HTTPОтвет",
                    "description" : "Изменяет данные на сервере при помощи PATCH-запроса",
                    "returns" : "HTTPОтвет. Ответ сервера.",
                    "params" : {
                        "request" : "HTTPЗапрос. Данные и заголовки запроса http"
                    }
                },
                "ПолучитьЗаголовки" : {
                    "name" : "ПолучитьЗаголовки",
                    "name_en" : "Head",
                    "signature" : "(request: HTTPЗапрос): HTTPОтвет",
                    "description" : "Получает при помощи HEAD-запроса информацию о запрошиваемых данных, содержащуюся в заголовках, не получая сами данные.",
                    "returns" : "HTTPОтвет. Ответ сервера.",
                    "params" : {
                        "request" : "HTTPЗапрос. Данные и заголовки запроса http"
                    }
                },
                "ВызватьHTTPМетод" : {
                    "name" : "ВызватьHTTPМетод",
                    "name_en" : "CallHTTPMethod",
                    "signature" : "(method: Строка, request: HTTPЗапрос, output?: Строка): HTTPОтвет",
                    "description" : "Вызвать произвольный HTTP-метод",
                    "returns" : "HTTPОтвет. Ответ сервера.",
                    "params" : {
                        "method" : "Строка. Имя метода HTTP",
                        "request" : "HTTPЗапрос. Данные и заголовки запроса http",
                        "output" : "Строка. Имя выходного файла"
                    }
                }
            },
            "constructors" : {
                "По указанному серверу" : {
                    "name" : "По указанному серверу",
                    "signature" : "(host: Строка, port?: Число, user?: Строка, password?: Строка, proxy?: Значение, timeout?: Число, ssl?: ЗащищенноеСоединение, UseOSAuthentication?: Булево)",
                    "description" : "Стандартный конструктор. Поддержка клиентских сертификатов HTTPS в текущей версии не реализована.Для доступа к серверу по протоколу HTTPS указывайте схему https:// в URL.",
                    "returns" : "",
                    "params" : {
                        "host" : "Адрес сервера (можно указать URL-схему http или https)",
                        "port" : "Порт сервера",
                        "user" : "Пользователь",
                        "password" : "Пароль",
                        "proxy" : "ИнтернетПрокси. Настройки прокси-сервера",
                        "timeout" : "Таймаут ожидания.",
                        "ssl" : "Объект ЗащищенноеСоединение. На данный момент данная механика работы с SSL не поддерживается.Обращение к https возможно, если в адресе хоста указать протокол https. В этом случае будут использованы сертификаты из хранилища ОС.Указание произвольных клиентских и серверных сертификатов в текущей версии не поддерживается.",
                        "useOSAuthentication" : "Включает использование авторизации NTLM или Negotiate на сервере."
                    }
                }
            }
        },
        "HTTPЗапрос" : {
            "name" : "HTTPЗапрос",
            "name_en" : "HTTPRequest",
            "description" : "Данные и заголоки HTTP запроса.",
            "properties" : {
                "АдресРесурса" : {
                    "name" : "АдресРесурса",
                    "name_en" : "ResourceAddress",
                    "description" : "Относительный путь к ресурсу на сервере (не включает имя сервера)",
                    "access" : "Чтение/Запись"
                },
                "Заголовки" : {
                    "name" : "Заголовки",
                    "name_en" : "Headers",
                    "description" : "Соответствие. Заголовки запроса к http-серверу",
                    "access" : "Чтение/Запись"
                }
            },
            "methods" : {
                "УстановитьИмяФайлаТела" : {
                    "name" : "УстановитьИмяФайлаТела",
                    "name_en" : "SetBodyFileName",
                    "signature" : "(filename: Строка)",
                    "description" : "Установить файл на диске в качестве тела запроса. Файл открывается на чтение и остается открытым до завершения запроса."
                },
                "ПолучитьИмяФайлаТела" : {
                    "name" : "ПолучитьИмяФайлаТела",
                    "name_en" : "GetBodyFileName",
                    "signature" : "(): Строка|Неопределено"
                },
                "УстановитьТелоИзДвоичныхДанных" : {
                    "name" : "УстановитьТелоИзДвоичныхДанных",
                    "name_en" : "SetBodyFromBinary",
                    "signature" : "(data: ДвоичныеДанные)",
                    "description" : "Установить тело запроса из объекта ДвоичныеДанные"
                },
                "ПолучитьТелоКакДвоичныеДанные" : {
                    "name" : "ПолучитьТелоКакДвоичныеДанные",
                    "name_en" : "GetBodyAsBinary",
                    "signature" : "(): ДвоичныеДанные|Неопределено"
                },
                "УстановитьТелоИзСтроки" : {
                    "name" : "УстановитьТелоИзСтроки",
                    "name_en" : "SetBodyFromString",
                    "signature" : "(data: Строка, encoding?: КодировкаТекста|Строка)",
                    "description" : "Установить строку в качестве содержимого запроса",
                    "params" : {
                        "data" : "Строка с данными",
                        "encoding" : "КодировкаТекста или Строка. Кодировка в которой отправляются данные."
                    }
                },
                "ПолучитьТелоКакСтроку" : {
                    "name" : "ПолучитьТелоКакСтроку",
                    "name_en" : "GetBodyAsString",
                    "signature" : "(): Строка|Неопределено"
                }
            },
            "constructors" : {
                "Формирование неинициализированного объекта" : {
                    "name" : "Формирование неинициализированного объекта",
                    "signature" : "()"
                },
                "По адресу ресурса и заголовкам" : {
                    "name" : "По адресу ресурса и заголовкам",
                    "signature" : "(resource: Строка, headers?: Соответствие)"
                }
            }
        },
        "HTTPОтвет" : {
            "name" : "HTTPОтвет",
            "name_en" : "HTTPResponse",
            "description" : "Ответ от HTTP-сервера",
            "properties" : {
                "Заголовки" : {
                    "name" : "Заголовки",
                    "name_en" : "Headers",
                    "description" : "Соответствие. Заголовки ответа сервера.",
                    "access" : "Чтение"
                },
                "КодСостояния" : {
                    "name" : "КодСостояния",
                    "name_en" : "StatusCode",
                    "description" : "Код состояния HTTP ответа. Число.",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "ПолучитьТелоКакСтроку" : {
                    "name" : "ПолучитьТелоКакСтроку",
                    "name_en" : "GetBodyAsString",
                    "signature" : "(encoding?: КодировкаТекста|Строка): Строка",
                    "description" : "Получает ответ сервера в виде строки",
                    "params" : {
                        "encoding" : "КодировкаТекста или Строка. Кодировка полученного текста. По умолчанию принимается кодировка из заголовка Content-Type"
                    }
                },
                "ПолучитьТелоКакДвоичныеДанные" : {
                    "name" : "ПолучитьТелоКакДвоичныеДанные",
                    "name_en" : "GetBodyAsBinaryData",
                    "signature" : "(): ДвоичныеДанные",
                    "description" : "Интерпретировать ответ, как ДвоичныеДанные",
                    "returns" : "ДвоичныеДанные"
                },
                "ПолучитьИмяФайлаТела" : {
                    "name" : "ПолучитьИмяФайлаТела",
                    "name_en" : "GetBodyFileName",
                    "signature" : "(): Строка",
                    "description" : "Получить файл, в который записан ответ сервера.",
                    "returns" : "Строка. Имя файла с ответом. Если ответ не записывался в файл - возвращает Неопределено."
                },
                "Закрыть" : {
                    "name" : "Закрыть",
                    "name_en" : "Close",
                    "signature" : "()",
                    "description" : "Закрыть HTTP ответ и освободить ресурсы"
                }
            },
        },
        "ИнтернетПрокси" : {
            "name" : "ИнтернетПрокси",
            "name_en" : "InternetProxy",
            "description" : "Параметры прокси-сервера для доступа в Интернет.В текущей реализации поддерживается только HTTP прокси. Стандартные методы объекта ИнтернетПрокси из 1С:Предприятие для FTP и SOCKS не реализованы.",
            "properties" : {
                "НеИспользоватьПроксиДляАдресов" : {
                    "name" : "НеИспользоватьПроксиДляАдресов",
                    "name_en" : "BypassProxyOnAddresses",
                    "access" : "Чтение/Запись"
                },
                "НеИспользоватьПроксиДляЛокальныхАдресов" : {
                    "name" : "НеИспользоватьПроксиДляЛокальныхАдресов",
                    "name_en" : "BypassProxyOnLocal",
                    "access" : "Чтение/Запись"
                }
            },
            "methods" : {
                "Пользователь" : {
                    "name" : "Пользователь",
                    "name_en" : "User",
                    "signature" : "(protocol: Строка) : Строка"
                },
                "Пароль" : {
                    "name" : "Пароль",
                    "name_en" : "Password",
                    "signature" : "(protocol: Строка) : Строка"
                },
                "Сервер" : {
                    "name" : "Сервер",
                    "name_en" : "Server",
                    "signature" : "(protocol: Строка) : Строка"
                },
                "Порт" : {
                    "name" : "Порт",
                    "name_en" : "Password",
                    "signature" : "(protocol: Строка) : Число"
                },
                "Установить" : {
                    "name" : "Установить",
                    "name_en" : "Set",
                    "signature" : "(protocol: Строка, server: Строка, port?: Число, username?: Строка, password?: Строка, useOSAuthentication?: Булево)"
                }
            },
            "constructors" : {
                "Формирование неинициализированного объекта" : {
                    "name" : "Формирование неинициализированного объекта",
                    "signature" : "()"
                },
                "Конструктор для системных настроек прокси" : {
                    "name" : "Конструктор для системных настроек прокси",
                    "signature" : "(useDefault: Значение)"
                }
            },
        },
        "ОписаниеФайлаPostЗапроса" : {
            "name" : "ОписаниеФайлаPostЗапроса",
            "name_en" : "PostFileDecription",
            "properties" : {
                "Имя" : {
                    "name" : "Имя",
                    "name_en" : "Name",
                    "access" : "Чтение"
                },
                "ИмяФайла" : {
                    "name" : "ИмяФайла",
                    "name_en" : "FileName",
                    "access" : "Чтение"
                },
                "РасположениеСодержимого" : {
                    "name" : "РасположениеСодержимого",
                    "name_en" : "ContentDisposition",
                    "access" : "Чтение"
                },
                "ТипСодержимого" : {
                    "name" : "ТипСодержимого",
                    "name_en" : "ContentType",
                    "access" : "Чтение"
                },
                "Размер" : {
                    "name" : "Размер",
                    "name_en" : "Size",
                    "access" : "Чтение"
                },
                "Данные" : {
                    "name" : "Данные",
                    "name_en" : "Data",
                    "access" : "Чтение"
                }
            },
        },
        "ДанныеPOSTЗапроса" : {
            "name" : "ДанныеPOSTЗапроса",
            "name_en" : "PostRequestData",
            "properties" : {
                "Параметры" : {
                    "name" : "Параметры",
                    "name_en" : "Params",
                    "description" : "Параметры запроса",
                    "access" : "Чтение"
                },
                "Файлы" : {
                    "name" : "Файлы",
                    "name_en" : "Files",
                    "description" : "Загруженные файлы",
                    "access" : "Чтение"
                }
            },
            "constructors" : {
                "Из двоичных данных" : {
                    "name" : "Из двоичных данных",
                    "signature" : "(stream: ДвоичныеДанные, boundary: Произвольный)"
                },
                "Из строки запроса" : {
                    "name" : "Из строки запроса",
                    "signature" : "(СтрокаЗапроса: Строка)"
                }
            }
        },
        "ХешированиеДанных" : {
            "name" : "ХешированиеДанных",
            "name_en" : "DataHashing",
            "properties" : {
                "ХешФункция" : {
                    "name" : "ХешФункция",
                    "name_en" : "HashFunction",
                    "access" : "Чтение"
                },
                "ХешСумма" : {
                    "name" : "ХешСумма",
                    "name_en" : "HashSum",
                    "access" : "Чтение"
                },
                "ХешСуммаСтрокой" : {
                    "name" : "ХешСуммаСтрокой",
                    "name_en" : "HashSumOfString",
                    "access" : "Чтение"
                },
            },
            "methods" : {
                "Добавить" : {
                    "name" : "Добавить",
                    "name_en" : "Append",
                    "signature" : "(toAdd: ДвоичныеДанные)"
                },
                "ДобавитьФайл" : {
                    "name" : "ДобавитьФайл",
                    "name_en" : "AppendFile",
                    "signature" : "(path: Строка)"
                },
                "Очистить" : {
                    "name" : "Очистить",
                    "name_en" : "Clear",
                    "signature" : "()"
                }
            },
            "constructors" : {
                "По указанной хеш-функции" : {
                    "name" : "По указанной хеш-функции",
                    "signature" : "(providerEnum: Произвольный)"
                }
            }
        },
        "ДвоичныеДанные" : {
            "name" : "ДвоичныеДанные",
            "name_en" : "BinaryData",
            "methods" : {
                "Размер" : {
                    "name" : "Размер",
                    "name_en" : "Size",
                    "signature" : "(): Число"
                },
                "Записать" : {
                    "name" : "Записать",
                    "name_en" : "Write",
                    "signature" : "(filename: Строка)"
                },
                "ОткрытьПотокДляЧтения" : {
                    "name" : "ОткрытьПотокДляЧтения",
                    "name_en" : "OpenStreamForRead",
                    "signature" : "() : Поток",
                    "description" : "Возвращает поток данных, который можно последовательно читать и/или в который можно последовательно писать. Экземпляры объектов данного типа можно получить с помощью различных методов других объектов.",
                    "returns" : "Поток"
                }
            },
            "constructors" : {
                "На основании файла" : {
                    "name" : "На основании файла",
                    "signature" : "(filename: Строка)"
                }
            }
        },
                "ФайловыйПоток" : {
            "name" : "ФайловыйПоток",
            "name_en" : "FileStream",
            "description" : "Специализированная версия объекта Поток для работы данными, расположенными в файле на диске. Предоставляет возможность чтения из потока, записи в поток и изменения текущей позиции. По умолчанию, все операции с файловым потоком являются буферизированными, размер буфера по умолчанию - 8 КБ. Размер буфера можно изменить, в том числе - полностью отключить буферизацию при вызове конструктора. Следует учитывать, что помимо буферизации существует кэширование чтения и записи файлов в операционной системе, на которое невозможно повлиять программно.",
            "properties" : {
                "ДоступнаЗапись" : {
                    "name" : "ДоступнаЗапись",
                    "name_en" : "CanWrite",
                    "description" : "Признак доступности записи в поток.",
                    "value" : "Булево (Boolean)",
                    "access" : "Чтение"
                },
                "ДоступноИзменениеПозиции" : {
                    "name" : "ДоступноИзменениеПозиции",
                    "name_en" : "CanSeek",
                    "description" : "Признак доступности произвольного изменения позиции чтения/записи в потоке.",
                    "value" : "Булево (Boolean)",
                    "access" : "Чтение"
                },
                "ДоступноЧтение" : {
                    "name" : "ДоступноЧтение",
                    "name_en" : "CanRead",
                    "description" : "Признак доступности чтения из потока.",
                    "value" : "Булево (Boolean)",
                    "access" : "Чтение"
                },
                "ИмяФайла" : {
                    "name" : "ИмяФайла",
                    "name_en" : "FileName",
                    "description" : "Содержит полное имя файла, включая путь",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "Закрыть" : {
                    "name" : "Закрыть",
                    "name_en" : "Close",
                    "signature" : "()",
                    "description" : "Вызов данного метода завершает работу с потоком. При попытке вызвать любой метод объекта, кроме метода Закрыть, будет вызвано исключение. При повторном вызове данного метода никаких действий выполняться не будет. Выполняемое действие зависит от используемого типа потока."
                },
                "Записать" : {
                    "name" : "Записать",
                    "name_en" : "Write",
                    "signature" : "(buffer: БуферДвоичныхДанных, positionInBuffer: Число, number: Число)",
                    "description" : "Записывает в поток заданное количество байтов из буфера по заданному смещению. Если в буфере меньше данных, чем требуется записать, вызывается исключение о недостаточном количестве данных в буфере. Запись в поток возможна только, если поток поддерживает запись. В противном случае при вызове метода будет вызвано исключение.",
                    "params" : {
                        "buffer" : "Буфер, из которого выбираются данные для записи.",
                        "positionInBuffer" : "Позиция в буфере, начиная с которой данные будут получены для записи в поток.",
                        "number" : "Количество байт, которые требуется записать."
                    }
                },
                "КопироватьВ" : {
                    "name" : "КопироватьВ",
                    "name_en" : "CopyTo",
                    "signature" : "(targetStream: Произвольный, bufferSize?: Число)",
                    "description" : "Копирует данные из текущего потока в другой поток.",
                    "params" : {
                        "targetStream" : "Поток, в который будет выполняться копирование.",
                        "bufferSize" : "Размер буфера, используемого при копировании. Если параметр не задан, то система подбирает размер буфера автоматически."
                    }
                },
                "Перейти" : {
                    "name" : "Перейти",
                    "name_en" : "Seek",
                    "signature" : "(offset: Число, initialPosition?: ПозицияВПотоке) : Число"
                },
                "ПолучитьПотокТолькоДляЧтения" : {
                    "name" : "ПолучитьПотокТолькоДляЧтения",
                    "name_en" : "GetReadonlyStream",
                    "signature" : "() : Поток",
                    "description" : "Возвращает поток, который разделяет данные и текущую позицию с данным потоком, но не разрешает запись."
                },
                "Прочитать" : {
                    "name" : "Прочитать",
                    "name_en" : "Read",
                    "signature" : "(buffer: БуферДвоичныхДанных, positionInBuffer: Число, number: Число) : Число",
                    "description" : "Выполняет чтение заданного количества байтов в указанный буфер по указанному смещению. Текущая позиция смещается вперед на фактическое количество прочитанных байтов. Чтение из потока возможно только, если поток поддерживает чтение. В противном случае, будет вызвано исключение. При чтении размер целевого буфера не меняется, а его содержимое перезаписывается фактически прочитанными данными. Если в буфере недостаточно места для записи прочитанных данных, происходит ошибка переполнения.",
                    "returns" : "Возвращает число прочитанных байт",
                    "params" : {
                        "buffer" : "Буфер, в который выполняется чтение.",
                        "positionInBuffer" : "Позиция в целевом буфере, начиная с которой требуется записывать данные из потока.",
                        "number" : "Количество байт, которые требуется записать в целевой буфер."
                    }
                },
                "Размер" : {
                    "name" : "Размер",
                    "name_en" : "Size",
                    "signature" : "() : Число",
                    "description" : "Получает размер данных в байтах."
                },
                "СброситьБуферы" : {
                    "name" : "СброситьБуферы",
                    "name_en" : "Flush",
                    "signature" : "()",
                    "description" : "Сбрасывает все промежуточные буферы и производит запись всех незаписанных данных в целевое устройство."
                },
                "ТекущаяПозиция" : {
                    "name" : "ТекущаяПозиция",
                    "name_en" : "CurrentPosition",
                    "signature" : "() : Число",
                    "description" : "Возвращает текущую позицию в потоке.",
                    "returns" : "Любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков."
                },
                "УстановитьРазмер" : {
                    "name" : "УстановитьРазмер",
                    "name_en" : "SetSize",
                    "signature" : "(size: Число)",
                    "description" : "Устанавливает размер потока. Если текущий размер превышает заданный, поток будет сокращен до заданного размера, а информация, превышающая заданный размер, будет потеряна. Если текущий размер потока меньше заданного, то содержимое потока между старым и новым размером не определено.",
                    "params" : {
                        "size" : "Устанавливаемый размер потока."
                    }
                }
            },
            "constructors" : {
                "С указанием режима открытия" : {
                    "name" : "С указанием режима открытия",
                    "signature" : "(filename: Произвольный, openMode: Произвольный, bufferSize?: Произвольный)"
                },
                "С указанием режима открытия и уровня доступа" : {
                    "name" : "С указанием режима открытия и уровня доступа",
                    "signature" : "(filename: Произвольный, openMode: Произвольный, access: Произвольный, bufferSize?: Произвольный)"
                }
            }
        },
        "ПотокВПамяти" : {
            "name" : "ПотокВПамяти",
            "name_en" : "MemoryStream",
            "description" : "Представляет собой поток данных, который можно последовательно читать и/или в который можно последовательно писать. Экземпляры объектов данного типа можно получить с помощью различных методов других объектов.",
            "properties" : {
                "ДоступнаЗапись" : {
                    "name" : "ДоступнаЗапись",
                    "name_en" : "CanWrite",
                    "description" : "Признак доступности записи в поток.",
                    "value" : "Булево (Boolean)",
                    "access" : "Чтение"
                },
                "ДоступноИзменениеПозиции" : {
                    "name" : "ДоступноИзменениеПозиции",
                    "name_en" : "CanSeek",
                    "description" : "Признак доступности произвольного изменения позиции чтения/записи в потоке.",
                    "value" : "Булево (Boolean)",
                    "access" : "Чтение"
                },
                "ДоступноЧтение" : {
                    "name" : "ДоступноЧтение",
                    "name_en" : "CanRead",
                    "description" : "Признак доступности чтения из потока.",
                    "value" : "Булево (Boolean)",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "Закрыть" : {
                    "name" : "Закрыть",
                    "name_en" : "Close",
                    "signature" : "()",
                    "description" : "Вызов данного метода завершает работу с потоком. При попытке вызвать любой метод объекта, кроме метода Закрыть, будет вызвано исключение. При повторном вызове данного метода никаких действий выполняться не будет. Выполняемое действие зависит от используемого типа потока."
                },
                "Записать" : {
                    "name" : "Записать",
                    "name_en" : "Write",
                    "signature" : "(buffer: БуферДвоичныхДанных, positionInBuffer: Число, number: Число)",
                    "description" : "Записывает в поток заданное количество байтов из буфера по заданному смещению. Если в буфере меньше данных, чем требуется записать, вызывается исключение о недостаточном количестве данных в буфере. Запись в поток возможна только, если поток поддерживает запись. В противном случае при вызове метода будет вызвано исключение.",
                    "params" : {
                        "buffer" : "Буфер, из которого выбираются данные для записи.",
                        "positionInBuffer" : "Позиция в буфере, начиная с которой данные будут получены для записи в поток.",
                        "number" : "Количество байт, которые требуется записать."
                    }
                },
                "КопироватьВ" : {
                    "name" : "КопироватьВ",
                    "name_en" : "CopyTo",
                    "signature" : "(targetStream: Произвольный, bufferSize?: Число)",
                    "description" : "Копирует данные из текущего потока в другой поток.",
                    "params" : {
                        "targetStream" : "Поток, в который будет выполняться копирование.",
                        "bufferSize" : "Размер буфера, используемого при копировании. Если параметр не задан, то система подбирает размер буфера автоматически."
                    }
                },
                "Перейти" : {
                    "name" : "Перейти",
                    "name_en" : "Seek",
                    "signature" : "(offset: Число, initialPosition?: ПозицияВПотоке) : Число"
                },
                "ПолучитьПотокТолькоДляЧтения" : {
                    "name" : "ПолучитьПотокТолькоДляЧтения",
                    "name_en" : "GetReadonlyStream",
                    "signature" : "() : Поток",
                    "description" : "Возвращает поток, который разделяет данные и текущую позицию с данным потоком, но не разрешает запись."
                },
                "Прочитать" : {
                    "name" : "Прочитать",
                    "name_en" : "Read",
                    "signature" : "(buffer: БуферДвоичныхДанных, positionInBuffer: Число, number: Число) : Число",
                    "description" : "Выполняет чтение заданного количества байтов в указанный буфер по указанному смещению. Текущая позиция смещается вперед на фактическое количество прочитанных байтов. Чтение из потока возможно только, если поток поддерживает чтение. В противном случае, будет вызвано исключение. При чтении размер целевого буфера не меняется, а его содержимое перезаписывается фактически прочитанными данными. Если в буфере недостаточно места для записи прочитанных данных, происходит ошибка переполнения.",
                    "returns" : "Возвращает число прочитанных байт",
                    "params" : {
                        "buffer" : "Буфер, в который выполняется чтение.",
                        "positionInBuffer" : "Позиция в целевом буфере, начиная с которой требуется записывать данные из потока.",
                        "number" : "Количество байт, которые требуется записать в целевой буфер."
                    }
                },
                "Размер" : {
                    "name" : "Размер",
                    "name_en" : "Size",
                    "signature" : "() : Число",
                    "description" : "Получает размер данных в байтах."
                },
                "СброситьБуферы" : {
                    "name" : "СброситьБуферы",
                    "name_en" : "Flush",
                    "signature" : "()",
                    "description" : "Сбрасывает все промежуточные буферы и производит запись всех незаписанных данных в целевое устройство."
                },
                "ТекущаяПозиция" : {
                    "name" : "ТекущаяПозиция",
                    "name_en" : "CurrentPosition",
                    "signature" : "() : Число",
                    "description" : "Возвращает текущую позицию в потоке.",
                    "returns" : "Любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков."
                },
                "УстановитьРазмер" : {
                    "name" : "УстановитьРазмер",
                    "name_en" : "SetSize",
                    "signature" : "(size: Число)",
                    "description" : "Устанавливает размер потока. Если текущий размер превышает заданный, поток будет сокращен до заданного размера, а информация, превышающая заданный размер, будет потеряна. Если текущий размер потока меньше заданного, то содержимое потока между старым и новым размером не определено.",
                    "params" : {
                        "size" : "Устанавливаемый размер потока."
                    }
                }
            },
            "constructors" : {
                "По буферу или начальной емкости" : {
                    "name" : "По буферу или начальной емкости",
                    "signature" : "(bufferOrCapacity: Произвольный)",
                    "description" : "Создает поток, в качестве нижележащего хранилища для которого используется заданный байтовый буфер. Ёмкость потока ограничена размером буфера. При выходе за границы буфера будет сгенерировано исключение. Возможность записи в поток зависит от возможности изменения передаваемого буфера.",
                    "params" : {
                        "bufferOrCapacity" : "Буфер, на основании которого будет создан поток или начальная емкость будущего потока."
                    }
                },
                "По умолчанию" : {
                    "name" : "По умолчанию",
                    "signature" : "()",
                    "description" : "Создает поток в памяти с расширяемой емкостью. Данный вариант можно использовать для работы с достаточно большими объемами данных, т.к. данные хранятся постранично, а не в виде одного последовательного блока."
                }
            }
        },
        "Поток" : {
            "name": "Поток",
            "name_en": "Stream",
            "description": "Представляет собой поток данных, который можно последовательно читать и/или в который можно последовательно писать. Экземпляры объектов данного типа можно получить с помощью различных методов других объектов.",
            "properties": {
                "ДоступнаЗапись": {
                    "name": "ДоступнаЗапись",
                    "name_en": "CanWrite",
                    "description": "Признак доступности записи в поток.",
                    "value": "Булево (Boolean)",
                    "access": "Чтение"
                },
                "ДоступноИзменениеПозиции": {
                    "name": "ДоступноИзменениеПозиции",
                    "name_en": "CanSeek",
                    "description": "Признак доступности произвольного изменения позиции чтения/записи в потоке.",
                    "value": "Булево (Boolean)",
                    "access": "Чтение"
                },
                "ДоступноЧтение": {
                    "name": "ДоступноЧтение",
                    "name_en": "CanRead",
                    "description": "Признак доступности чтения из потока.",
                    "value": "Булево (Boolean)",
                    "access": "Чтение"
                }
            },
            "methods": {
                "Закрыть": {
                    "name": "Закрыть",
                    "name_en": "Close",
                    "signature": "()",
                    "description": "Вызов данного метода завершает работу с потоком. При попытке вызвать любой метод объекта, кроме метода Закрыть, будет вызвано исключение. При повторном вызове данного метода никаких действий выполняться не будет. Выполняемое действие зависит от используемого типа потока."
                },
                "Записать": {
                    "name": "Записать",
                    "name_en": "Write",
                    "signature": "(buffer: БуферДвоичныхДанных, positionInBuffer: Число, number: Число)",
                    "description": "Записывает в поток заданное количество байтов из буфера по заданному смещению. Если в буфере меньше данных, чем требуется записать, вызывается исключение о недостаточном количестве данных в буфере. Запись в поток возможна только, если поток поддерживает запись. В противном случае при вызове метода будет вызвано исключение.",
                    "params": {
                        "buffer": "Буфер, из которого выбираются данные для записи.",
                        "positionInBuffer": "Позиция в буфере, начиная с которой данные будут получены для записи в поток.",
                        "number": "Количество байт, которые требуется записать."
                    }
                },
                "КопироватьВ": {
                    "name": "КопироватьВ",
                    "name_en": "CopyTo",
                    "signature": "(targetStream: Произвольный, bufferSize?: Число)",
                    "description": "Копирует данные из текущего потока в другой поток.",
                    "params": {
                        "targetStream": "Поток, в который будет выполняться копирование.",
                        "bufferSize": "Размер буфера, используемого при копировании. Если параметр не задан, то система подбирает размер буфера автоматически."
                    }
                },
                "Перейти": {
                    "name": "Перейти",
                    "name_en": "Seek",
                    "signature": "(offset: Число, initialPosition?: ПозицияВПотоке) : Число"
                },
                "ПолучитьПотокТолькоДляЧтения": {
                    "name": "ПолучитьПотокТолькоДляЧтения",
                    "name_en": "GetReadonlyStream",
                    "signature": "() : Поток",
                    "description": "Возвращает поток, который разделяет данные и текущую позицию с данным потоком, но не разрешает запись.",
                    "returns": {
                        "name": "Stream",
                        "value": "Представляет собой поток данных, который можно последовательно читать и/или в который можно последовательно писать.Экземпляры объектов данного типа можно получить с помощью различных методов других объектов."
                    }
                },
                "Прочитать": {
                    "name": "Прочитать",
                    "name_en": "Read",
                    "signature": "(buffer: БуферДвоичныхДанных, positionInBuffer: Число, number: Число) : Число",
                    "description": "Выполняет чтение заданного количества байтов в указанный буфер по указанному смещению. Текущая позиция смещается вперед на фактическое количество прочитанных байтов. Чтение из потока возможно только, если поток поддерживает чтение. В противном случае, будет вызвано исключение. При чтении размер целевого буфера не меняется, а его содержимое перезаписывается фактически прочитанными данными. Если в буфере недостаточно места для записи прочитанных данных, происходит ошибка переполнения.",
                    "returns": {
                        "name": "number",
                        "value": "Возвращает число прочитанных байт"
                    },
                    "params": {
                        "buffer": "Буфер, в который выполняется чтение.",
                        "positionInBuffer": "Позиция в целевом буфере, начиная с которой требуется записывать данные из потока.",
                        "number": "Количество байт, которые требуется записать в целевой буфер."
                    }
                },
                "Размер": {
                    "name": "Размер",
                    "name_en": "Size",
                    "signature": "() : Число",
                    "description": "Получает размер данных в байтах."
                },
                "СброситьБуферы": {
                    "name": "СброситьБуферы",
                    "name_en": "Flush",
                    "signature": "()",
                    "description": "Сбрасывает все промежуточные буферы и производит запись всех незаписанных данных в целевое устройство."
                },
                "ТекущаяПозиция": {
                    "name": "ТекущаяПозиция",
                    "name_en": "CurrentPosition",
                    "signature": "() : Число",
                    "description": "Возвращает текущую позицию в потоке."
                },
                "УстановитьРазмер": {
                    "name": "УстановитьРазмер",
                    "name_en": "SetSize",
                    "signature": "(size: Число)",
                    "description": "Устанавливает размер потока. Если текущий размер превышает заданный, поток будет сокращен до заданного размера, а информация, превышающая заданный размер, будет потеряна. Если текущий размер потока меньше заданного, то содержимое потока между старым и новым размером не определено.",
                    "params": {
                        "size": "Устанавливаемый размер потока."
                    }
                }
            }
        },
        "ИнформацияОСценарии" : {
            "name" : "ИнформацияОСценарии",
            "name_en" : "ScriptInformation",
            "description" : "Информация о выполняемом сценарии.",
            "properties" : {
                "Источник" : {
                    "name" : "Источник",
                    "name_en" : "Source",
                    "description" : "Путь к файлу сценария, если выполняется сценарий из файла. Для всех прочих сценариев возвращаемое значение определяется хост-приложением.",
                    "access" : "Чтение"
                },
                "Каталог" : {
                    "name" : "Каталог",
                    "name_en" : "Path",
                    "access" : "Чтение"
                }
            }
        },
        "SafeArrayWrapper" : {
            "name" : "SafeArrayWrapper",
            "name_en" : "",
            "description" : "Вспомогательный класс для работы с объектами COMSafeArray, получаемыми из COM-объектов.На данный момент класс не является полноценной заменой для COMSafeArray и его нельзя создать вручную.",
            "methods" : {
                "Количество" : {
                    "name" : "Количество",
                    "name_en" : "Count",
                    "signature" : "(): Число"
                },
                "GetValue" : {
                    "name" : "GetValue",
                    "name_en" : "",
                    "signature" : "(Индекс: Число): Произвольный"
                },
                "SetValue" : {
                    "name" : "SetValue",
                    "name_en" : "",
                    "signature" : "(Индекс: Число, ЗначениеЭлемента: Произвольный)"
                },
            },
        },
        "ИнформацияОбОшибке" : {
            "name" : "ИнформацияОбОшибке",
            "name_en" : "ErrorInfo",
            "description" : "Класс позволяет узнать информацию о произошедшем исключении.",
            "properties" : {
                "Параметры" : {
                    "name" : "Параметры",
                    "name_en" : "Parameters",
                    "description" : "Значение, переданное при создании исключения в конструкторе объекта ИнформацияОбОшибке.",
                    "access" : "Чтение"
                },
                "Описание" : {
                    "name" : "Описание",
                    "name_en" : "Description",
                    "description" : "Содержит краткое описание ошибки. Эквивалент Exception.Message в C#",
                    "access" : "Чтение"
                },
                "ИмяМодуля" : {
                    "name" : "ИмяМодуля",
                    "name_en" : "ModuleName",
                    "description" : "Имя модуля, вызвавшего исключение.",
                    "access" : "Чтение"
                },
                "НомерСтроки" : {
                    "name" : "НомерСтроки",
                    "name_en" : "LineNumber",
                    "description" : "Номер строки, вызвавшей исключение.",
                    "access" : "Чтение"
                },
                "ИсходнаяСтрока" : {
                    "name" : "ИсходнаяСтрока",
                    "name_en" : "SourceLine",
                    "description" : "Строка исходного кода, вызвавшего исключение.",
                    "access" : "Чтение"
                },
                "Причина" : {
                    "name" : "Причина",
                    "name_en" : "Cause",
                    "description" : "Содержит вложенное исключение, если таковое было. Эквивалент Exception.InnerException в C#",
                    "access" : "Чтение"
                }
            },
            "methods" : {
                "ПодробноеОписаниеОшибки" : {
                    "name" : "ПодробноеОписаниеОшибки",
                    "name_en" : "DetailedDescription",
                    "signature" : "(): Строка",
                    "description" : "Содержит подробное описание исключения, включая стек вызовов среды исполнения CLR.т.е. не стек вызовов скрипта, а стек вызовов скриптового движка.Эквивалентно функции Exception.ToString() в C#.",
                    "returns" : "Строка."
                }
            },
            "constructors" : {
                "С возможностью передачи параметров" : {
                    "name" : "С возможностью передачи параметров",
                    "signature" : "(ТекстОшибки: Строка, ДополнительныеДанные?: Произвольный)",
                    "description" : "Предназначен для создания параметризованных исключений. При генерации исключения можно передавать данные произвольного типа.",
                    "example" : "ВызватьИсключение Новый ИнформацияОбОшибке(\"Текст ошибки\", ДополнительныеДанные);"
                }
            }
        },
        "COMОбъект" : {
            "name" : "COMОбъект",
            "name_en" : "COMObject",
            "constructors" : {
                "По имени приложения" : {
                    "name" : "По имени приложения",
                    "signature" : "(ИдентификаторCOMОбъекта: Строка)"
                }
            }
        }
    };
    return data;
}

export function systemEnum(): any {
    return {
        "КодировкаТекста" : {
            name : 'КодировкаТекста',
            name_en : 'TextEncoding',
            description : 'Определяет набор допустимых кодировок текстовых файлов.',
            values : {
                "ANSI" : {
                    name : 'ANSI',
                    name_en : 'ANSI',
                    description : 'Файл в формате ANSI.'
                },
                "OEM" : {
                    name : 'OEM',
                    name_en : 'OEM',
                    description : 'Файл в формате DOS.'
                },
                "UTF16" : {
                    name : 'UTF16',
                    name_en : 'UTF16',
                    description : 'Файл в формате UTF-16.'
                },
                "UTF8" : {
                    name : 'UTF8',
                    name_en : 'UTF8',
                    description : 'Файл в формате UTF-8.'
                },
                "Системная" : {
                    name : 'Системная',
                    name_en : 'System',
                    description : 'Кодировка текста, соответствующая системным установкам.'
                }
            }
        },
        "МетодШифрованияZIP" : {
            name : 'МетодШифрованияZIP',
            name_en : 'ZIPEncryptionMethod',
            description : 'Содержит варианты методов шифрования ZIP файлов.',
            values : {
                "AES128" : {
                    name : 'AES128',
                    name_en : 'AES128',
                    description : 'Шифрование методом AES 128-бит. Не совместимо со старыми версиями ZIP.'
                },
                "AES192" : {
                    name : 'AES192',
                    name_en : 'AES192',
                    description : 'Шифрование методом AES 192-бит. Не совместимо со старыми версиями ZIP.'
                },
                "AES256" : {
                    name : 'AES256',
                    name_en : 'AES256',
                    description : 'Шифрование методом AES 256-бит. Не совместимо со старыми версиями ZIP.'
                },
                "Zip20" : {
                    name : 'Zip20',
                    name_en : 'Zip20',
                    description : 'Шифрование методом ZIP версии 2.0. Совместимо со всеми сторонними программами.'
                }
            }
        },
        "НаправлениеПоиска" : {
            name : 'НаправлениеПоиска',
            name_en : 'SearchDirection',
            description : 'Определяет направление поиска подстроки в строке.',
            values : {
                "СКонца" : {
                    name : 'СКонца',
                    name_en : 'FromEnd',
                    description : 'Задает направление поиска от конца строки к ее началу.'
                },
                "СНачала" : {
                    name : 'СНачала',
                    name_en : 'FromBegin',
                    description : 'Задает направление поиска от начала строки в концу.'
                }
            }
        },
        "НаправлениеСортировки" : {
            name : 'НаправлениеСортировки',
            name_en : 'SortDirection',
            description : 'Определяет возможные способы сортировки.',
            values : {
                "Возр" : {
                    name : 'Возр',
                    name_en : 'Asc',
                    description : 'Сортировка по возрастанию.'
                },
                "Убыв" : {
                    name : 'Убыв',
                    name_en : 'Desc',
                    description : 'Сортировка по убыванию.'
                }
            }
        },
        "РежимВосстановленияПутейФайловZIP" : {
            name : 'РежимВосстановленияПутейФайловZIP',
            name_en : 'ZIPRestoreFilePathsMode',
            description : 'Содержит варианты восстановления путей файлов при извлечении из архива.',
            values : {
                "Восстанавливать" : {
                    name : 'Восстанавливать',
                    name_en : 'Restore',
                    description : 'Требуется восстанавливать пути при извлечении элемента из архива.'
                },
                "НеВосстанавливать" : {
                    name : 'НеВосстанавливать',
                    name_en : 'DontRestore',
                    description : 'При извлечении из архива пути файлов игнорируются.'
                }
            }
        },
        "РежимОбработкиПодкаталоговZIP" : {
            name : 'РежимОбработкиПодкаталоговZIP',
            name_en : 'ZIPSubDirProcessingMode',
            description : 'Содержит варианты обработки масок файлов в именах для упаковки в ZIP архив.',
            values : {
                "НеОбрабатывать" : {
                    name : 'НеОбрабатывать',
                    name_en : 'DontProcess',
                    description : 'При задании маски в качестве имени для архивации подкаталоги не будут обработаны.',
                },
                "ОбрабатыватьРекурсивно" : {
                    name : 'ОбрабатыватьРекурсивно',
                    name_en : 'ProcessRecursively',
                    description : 'При задании маски в качестве пути для архивации подкаталоги также будут рекурсивно обработаны.'
                }
            }
        },
        "РежимСохраненияПутейZIP" : {
            name : 'РежимСохраненияПутейZIP',
            name_en : 'ZIPStorePathMode',
            description : 'Содержит варианты методов сохранения путей файлов при помещении их в архив.',
            values : {
                "НеСохранятьПути" : {
                    name : 'НеСохранятьПути',
                    name_en : 'DontStorePath',
                    description : 'Не сохранять пути.'
                },
                "СохранятьОтносительныеПути" : {
                    name : 'СохранятьОтносительныеПути',
                    name_en : 'StoreRelativePath',
                    description : 'При помещении в архив сохраняются относительные пути от указанного каталога.'
                },
                "СохранятьПолныеПути" : {
                    name : 'СохранятьПолныеПути',
                    name_en : 'StoreFullPath',
                    description : 'При помещении в архив сохраняются полные пути файлов.'
                },
            },
        },
        "Символы" : {
            name : 'Символы',
            name_en : 'Chars',
            description : 'Определяет набор специальных символов. Значения этого набора имеют тип Строка.',
            values : {
                "ВК" : {
                    name : 'ВК',
                    name_en : 'CR',
                    description : 'Возврат каретки.'
                },
                "ВТаб" : {
                    name : 'ВТаб',
                    name_en : 'VTab',
                    description : 'Символ табуляции (вертикальной).'
                },
                "НПП" : {
                    name : 'НПП',
                    name_en : 'NBSp',
                    description : 'Неразрывный пробел. Пробел, по которому не должен выполняться перенос на другую строку или другое разбиение текста при форматировании.'
                },
                "ПС" : {
                    name : 'ПС',
                    name_en : 'LF',
                    description : 'Перевод строки.'
                },
                "ПФ" : {
                    name : 'ПФ',
                    name_en : 'FF',
                    description : 'Перевод формы (страницы).'
                },
                "Таб" : {
                    name : 'Таб',
                    name_en : 'Tab',
                    description : 'Символ табуляции (горизонтальной).',
                },
            },
        },
        "СпособКодированияСтроки" : {
            name : 'СпособКодированияСтроки',
            name_en : 'StringEncodingMethod',
            description : 'Варианты кодирования строк.',
            values : {
                "URLВКодировкеURL" : {
                    name : 'URLВКодировкеURL',
                    name_en : 'URLInURLEncoding',
                    description : 'Кодировать (раскодировать) строку URL в URL кодировке. Спецсимволы URL ( !#$%\'()*+,/:;=?@[] ) не кодируются.'
                },
                "КодировкаURL" : {
                    name : 'КодировкаURL',
                    name_en : 'URLEncoding',
                    description : 'Кодировать (раскодировать) в URL кодировке.'
                }
            }
        },
        "СтатусСообщения" : {
            name : 'СтатусСообщения',
            name_en : 'MessageStatus',
            description : 'Определяет набор статусов сообщений, обозначаемых пиктограммами при выводе сообщений в окно сообщений.',
            values : {
                "БезСтатуса" : {
                    name : 'БезСтатуса',
                    name_en : 'WithoutStatus',
                    description : 'Без пиктограммы.'
                },
                "Важное" : {
                    name : 'Важное',
                    name_en : 'Important',
                    description : 'Пиктограмма - два красных восклицательных знака.'
                },
                "Внимание" : {
                    name : 'Внимание',
                    name_en : 'Attention',
                    description : 'Пиктограмма - красный восклицательный знак.'
                },
                "Информация" : {
                    name : 'Информация',
                    name_en : 'Information',
                    description : 'Пиктограмма - символ "i".'
                },
                "Обычное" : {
                    name : 'Обычное',
                    name_en : 'Ordinary',
                    description : 'Пиктограмма - синий треугольник.'
                },
                "ОченьВажное" : {
                    name : 'ОченьВажное',
                    name_en : 'VeryImportant',
                    description : 'Пиктограмма - три красных восклицательных знака.'
                }
            }
        },
        "ТипУзлаXML" : {
            name : 'ТипУзлаXML',
            name_en : 'XMLNodeType',
            description : 'Содержит варианты узлов XML, которые могут быть получены при чтении XML с помощью объекта ЧтениеXML.',
            values : {
                "Атрибут" : {
                    name : 'Атрибут',
                    name_en : 'Attribute',
                    description : 'Соответствует атрибуту элемента XML.',
                },
                "ИнструкцияОбработки" : {
                    name : 'ИнструкцияОбработки',
                    name_en : 'ProcessingInstruction',
                    description : 'Соответствует инструкции обработки XML.'
                },
                "Комментарий" : {
                    name : 'Комментарий',
                    name_en : 'Comment',
                    description : 'Узел комментария.'
                },
                "КонецСущности" : {
                    name : 'КонецСущности',
                    name_en : 'EndEntity',
                    description : 'Конец разбора разыменованной сущности XML.'
                },
                "КонецЭлемента" : {
                    name : 'КонецЭлемента',
                    name_en : 'EndElement',
                    description : 'Соответствует концу элемента XML.'
                },
                "НачалоЭлемента" : {
                    name : 'НачалоЭлемента',
                    name_en : 'StartElement',
                    description : 'Соответствует узлу XML.'
                },
                "Ничего" : {
                    name : 'Ничего',
                    name_en : 'None',
                    description : 'Нет никакого узла. Чтение еще не начато, или уже все прочитано.'
                },
                "Нотация" : {
                    name : 'Нотация',
                    name_en : 'Notation',
                    description : 'Нотация XML.'
                },
                "ОбъявлениеXML" : {
                    name : 'ОбъявлениеXML',
                    name_en : 'XMLDeclaration',
                    description : 'Объявление документа XML.'
                },
                "ОпределениеТипаДокумента" : {
                    name : 'ОпределениеТипаДокумента',
                    name_en : 'DocumentTypeDefinition',
                    description : 'Узел определения типа документа (DTD).'
                },
                "ПробельныеСимволы" : {
                    name : 'ПробельныеСимволы',
                    name_en : 'Whitespace',
                    description : 'Пробельные символы.'
                },
                "СекцияCDATA" : {
                    name : 'СекцияCDATA',
                    name_en : 'CDATASection',
                    description : 'Узел секции CDATA.'
                },
                "СсылкаНаСущность" : {
                    name : 'СсылкаНаСущность',
                    name_en : 'EntityReference',
                    description : 'Узел ссылки на сущность XML.'
                },
                "Сущность" : {
                    name : 'Сущность',
                    name_en : 'Entity',
                    description : 'Узел определения сущности XML.'
                },
                "Текст" : {
                    name : 'Текст',
                    name_en : 'Text',
                    description : 'Соответствует тексту элемента XML.'
                }
            }
        },
        "УровеньСжатияZIP" : {
            name : 'УровеньСжатияZIP',
            name_en : 'ZIPCompressionLevel',
            description : 'Содержит варианты степени сжатия ZIP файлов.',
            values : {
                "Максимальный" : {
                    name : 'Максимальный',
                    name_en : 'Maximum',
                    description : 'Максимальное сжатие - меньший размер, большее время работы.'
                },
                "Минимальный" : {
                    name : 'Минимальный',
                    name_en : 'Minimum',
                    description : 'Минимальный уровень сжатия и время работы.'
                },
                "Оптимальный" : {
                    name : 'Оптимальный',
                    name_en : 'Optimal',
                    description : 'Оптимальное сжатие - оптимальный размер, оптимальное время работы.'
                }
            }
        },
        "ХешФункция" : {
            name : 'ХешФункция',
            name_en : 'HashFunction',
            description : 'Варианты типов хеш-функции. Определяет способ вычисления хеш-суммы и тип вычисляемого значения.',
            values : {
                "CRC32" : {
                    name : 'CRC32',
                    name_en : 'CRC32',
                    description : 'Вычислять значение CRC32.'
                },
                "MD5" : {
                    name : 'MD5',
                    name_en : 'MD5',
                    description : 'Вычислять значение MD5.'
                },
                "SHA1" : {
                    name : 'SHA1',
                    name_en : 'SHA1',
                    description : 'Вычислять значение SHA-1.'
                },
                "SHA256" : {
                    name : 'SHA256',
                    name_en : 'SHA256',
                    description : 'Вычислять значение SHA-256.'
                }
            }
        },
        "ЦветКонсоли" : {
            name : 'ЦветКонсоли',
            name_en : 'ConsoleColor',
            description : 'Цвет шрифта текста, выводимого в консоли.',
            values : {
                "Белый" : {
                    name : 'Белый',
                    name_en : 'White',
                    description : 'Белый'
                },
                "Черный" : {
                    name : 'Черный',
                    name_en : 'Black',
                    description : 'Черный'
                },
                "Синий" : {
                    name : 'Синий',
                    name_en : 'Blue',
                    description : 'Синий'
                },
                "Желтый" : {
                    name : 'Желтый',
                    name_en : 'Yellow',
                    description : 'Желтый'
                },
                "Красный" : {
                    name : 'Красный',
                    name_en : 'Red',
                    description : 'Красный'
                },
                "Зеленый" : {
                    name : 'Зеленый',
                    name_en : 'Green',
                    description : 'Зеленый'
                },
                "Бирюза" : {
                    name : 'Бирюза',
                    name_en : 'Cyan',
                    description : 'Бирюза'
                },
                "Малиновый" : {
                    name : 'Малиновый',
                    name_en : 'Magenta',
                    description : 'Малиновый'
                },
                "Серый" : {
                    name : 'Серый',
                    name_en : 'Gray',
                    description : 'Серый'
                }
            }
        },
        "РежимОткрытияФайла": {
            name: 'РежимОткрытияФайла',
            name_en: 'FileOpenMode',
            description: 'Режим открытия файла в потоке',
            values: {
                "Дописать": {
                    name: 'Дописать',
                    name_en: 'Append',
                    description: 'Дописать'
                },
                "Обрезать": {
                    name: 'Обрезать',
                    name_en: 'Truncate',
                    description: 'Обрезать'
                },
                "Открыть": {
                    name: 'Открыть',
                    name_en: 'Open',
                    description: 'Открыть'
                },
                "ОткрытьИлиСоздать": {
                    name: 'ОткрытьИлиСоздать',
                    name_en: 'OpenOrCreate',
                    description: 'Открыть или создать'
                },
                "Создать": {
                    name: 'Создать',
                    name_en: 'Create',
                    description: 'Создать'
                },
                "СоздатьНовый": {
                    name: 'СоздатьНовый',
                    name_en: 'CreateNew',
                    description: 'Создать новый'
                }
            }
        },
        "ДоступКФайлу": {
            name: 'ДоступКФайлу',
            name_en: 'FileAccess',
            description: 'Доступ к файлу в потоке',
            values: {
                "Запись": {
                    name: 'Запись',
                    name_en: 'Write',
                    description: 'Запись'
                },
                "Чтение": {
                    name: 'Чтение',
                    name_en: 'Read',
                    description: 'Чтение'
                },
                "ЧтениеИЗапись": {
                    name: 'ЧтениеИЗапись',
                    name_en: 'ReadAndWrite',
                    description: 'Чтение и запись'
                }
            }
        },
        "ПозицияВПотоке": {
            name: 'ПозицияВПотоке',
            name_en: 'FileAccess',
            description: 'Позиция в потоке',
            values: {
                "Начало": {
                    name: 'Начало',
                    name_en: 'Begin',
                    description: 'Начало'
                },
                "Конец": {
                    name: 'Конец',
                    name_en: 'End',
                    description: 'Конец'
                },
                "Текущая": {
                    name: 'Текущая',
                    name_en: 'Current',
                    description: 'Текущая'
                }
            }
        },
        "ПорядокБайтов": {
            name: 'ПорядокБайтов',
            name_en: 'ByteOrder',
            description: 'Порядок байтов в потоке',
            values: {
                "BigEndian": {
                    name: 'BigEndian',
                    name_en: 'BigEndian',
                    description: 'BigEndian'
                },
                "LittleEndian": {
                    name: 'LittleEndian',
                    name_en: 'LittleEndian',
                    description: 'LittleEndian'
                }
            }
        },
        "ТипЗначенияJSON": {
            name: 'ТипЗначенияJSON',
            name_en: 'JSONValueType',
            description: 'Тип значения JSON',
            values: {
                "Null": {
                    name: 'Null',
                    name_en: 'Null',
                    description: 'Null'
                },
                "Булево": {
                    name: 'Булево',
                    name_en: 'Boolean',
                    description: 'Булево'
                },
                "ИмяСвойства": {
                    name: 'ИмяСвойства',
                    name_en: 'PropertyName',
                    description: 'ИмяСвойства'
                },
                "Комментарий": {
                    name: 'Комментарий',
                    name_en: 'Comment',
                    description: 'Комментарий'
                },
                "КонецМассива": {
                    name: 'КонецМассива',
                    name_en: 'ArrayEnd',
                    description: 'КонецМассива'
                },
                "КонецОбъекта": {
                    name: 'КонецОбъекта',
                    name_en: 'ObjectEnd',
                    description: 'КонецОбъекта'
                },
                "НачалоМассива": {
                    name: 'НачалоМассива',
                    name_en: 'ArrayStart',
                    description: 'НачалоМассива'
                },
                "НачалоОбъекта": {
                    name: 'НачалоОбъекта',
                    name_en: 'ObjectStart',
                    description: 'НачалоОбъекта'
                },
                "Ничего": {
                    name: 'Ничего',
                    name_en: 'None',
                    description: 'Ничего'
                },
                "Строка": {
                    name: 'Строка',
                    name_en: 'String',
                    description: 'Строка'
                },
                "Число": {
                    name: 'Число',
                    name_en: 'Number',
                    description: 'Число'
                }
            }
        },
        "МетодСжатияZIP": {
            name: 'МетодСжатияZIP',
            name_en: 'ZIPCompressionMethod',
            description: 'Метод сжатия ZIP',
            values: {
                "Копирование": {
                    name: 'Копирование',
                    name_en: 'Copy',
                    description: 'Копирование'
                },
                "Сжатие": {
                    name: 'Сжатие',
                    name_en: 'Deflate',
                    description: 'Сжатие'
                }
            }
        },
        "ПереносСтрокJSON": {
            name: 'ПереносСтрокJSON',
            name_en: 'JSONLineBreak',
            description: 'Перенос строк JSON',
            values: {
                "Unix": {
                    name: 'Unix',
                    name_en: 'Unix',
                    description: 'Unix'
                },
                "Windows": {
                    name: 'Windows',
                    name_en: 'Windows',
                    description: 'Windows'
                },
                "Авто": {
                    name: 'Авто',
                    name_en: 'Auto',
                    description: 'Авто'
                },
                "Нет": {
                    name: 'Нет',
                    name_en: 'None',
                    description: 'Нет'
                }
            }
        },
        "ЭкранированиеСимволовJSON": {
            name: 'ЭкранированиеСимволовJSON',
            name_en: 'JSONCharactersEscapeMode',
            description: 'Экранирование символов JSON',
            values: {
                "Нет": {
                    name: 'Нет',
                    name_en: 'None',
                    description: 'Нет'
                },
                "СимволыВнеASCII": {
                    name: 'СимволыВнеASCII',
                    name_en: 'NotASCIISymbols',
                    description: 'СимволыВнеASCII'
                },
                "СимволыВнеBMP": {
                    name: 'СимволыВнеBMP',
                    name_en: 'SymbolsNotInBMP',
                    description: 'СимволыВнеBMP'
                }
            }
        },
    };
}
